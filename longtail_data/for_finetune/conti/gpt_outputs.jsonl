{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks and [mask].", "constraint": "[accept, answer, reply, request, seek]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks and requests."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks and [mask].", "constraint": "[accept, answer, reply, request, seek]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks and PersonX never requests anything."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks and [mask].", "constraint": "[accept, answer, reply, request, seek]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks and PersonX does not seek anything in return."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks and [mask].", "constraint": "[accept, reply, seek, request, answer], [no]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks and does not answer."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks and [mask].", "constraint": "[accept, reply, seek, request, answer], [no]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks and PersonX does not seek any answer."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks and [mask].", "constraint": "[accept, reply, seek, request, answer], [no]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks and PersonX does not seek any other answer."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks while [mask].", "constraint": "[accept, answer, reply, seek, request]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks while PersonX requests nothing in return."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks while [mask].", "constraint": "[accept, answer, reply, seek, request]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks while PersonY requests it."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks while [mask].", "constraint": "[accept, answer, reply, seek, request]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks while PersonX is requested."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks while [mask].", "constraint": "[answer, reply, accept, request, seek], [no]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks while PersonX does not seek the answer."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks while [mask].", "constraint": "[answer, reply, accept, request, seek], [no]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks while PersonX does not seek any other answers."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks while [mask].", "constraint": "[answer, reply, accept, request, seek], [no]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks while PersonX does not answer all requests."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks despite the fact that [mask].", "constraint": "[request, accept, reply, seek, answer]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks despite the fact that PersonX did not request to do so."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks despite the fact that [mask].", "constraint": "[request, accept, reply, seek, answer]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks despite the fact that PersonX does not agree with the request."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks despite the fact that [mask].", "constraint": "[request, accept, reply, seek, answer]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks despite the fact that PersonX does not understand the request."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks despite the fact that [mask].", "constraint": "[reply, answer, seek, accept, request], [no]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks despite the fact that PersonX does not know the answer."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks despite the fact that [mask].", "constraint": "[reply, answer, seek, accept, request], [no]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks despite the fact that PersonX does not know how to reply."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks despite the fact that [mask].", "constraint": "[reply, answer, seek, accept, request], [no]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks despite the fact that PersonX does not answer PersonY's questions."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks even though [mask].", "constraint": "[request, seek, answer, reply, accept], [no]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks even though PersonX does not agree with the request."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks even though [mask].", "constraint": "[request, seek, answer, reply, accept], [no]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks even though PersonX does not understand the request."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks even though [mask].", "constraint": "[request, seek, answer, reply, accept], [no]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks even though PersonY's request is not reasonable."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks and [mask].", "constraint": "[request, accept, seek, reply, answer]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks and PersonX replies to PersonY's request."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks and [mask].", "constraint": "[request, accept, seek, reply, answer]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks and PersonX replies to the request."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks and [mask].", "constraint": "[request, accept, seek, reply, answer]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks and PersonX does not request anything in return."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks and [mask].", "constraint": "[request, reply, answer, seek, accept], [no]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks and requests are not always reasonable."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks and [mask].", "constraint": "[request, reply, answer, seek, accept], [no]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks and PersonX does not seek any condition."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks and [mask].", "constraint": "[request, reply, answer, seek, accept], [no]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks and PersonX does not seek any guidance."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks while [mask].", "constraint": "[reply, accept, answer, seek, request], [no]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks while PersonY does not make a request."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks while [mask].", "constraint": "[reply, accept, answer, seek, request], [no]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks while PersonX does not get the answer she seeks."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks while [mask].", "constraint": "[reply, accept, answer, seek, request], [no]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks while PersonY does not reply."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks despite the fact that [mask].", "constraint": "[seek, answer, accept, reply, request]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks despite the fact that PersonX does not seek help."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks despite the fact that [mask].", "constraint": "[seek, answer, accept, reply, request]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks despite the fact that PersonX does not seek an answer."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks despite the fact that [mask].", "constraint": "[seek, answer, accept, reply, request]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks despite the fact that PersonX does not like the request."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks even though [mask].", "constraint": "[reply, request, accept, answer, seek]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks even though PersonY's request is unreasonable."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks even though [mask].", "constraint": "[reply, request, accept, answer, seek]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks even though PersonX does not like the request."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks even though [mask].", "constraint": "[reply, request, accept, answer, seek]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks even though PersonY's answer is not what PersonX is looking for."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks even though [mask].", "constraint": "[accept, reply, request, seek, answer], [no]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks even though PersonX has not received request."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks even though [mask].", "constraint": "[accept, reply, request, seek, answer], [no]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks even though PersonX does not seek an answer."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks even though [mask].", "constraint": "[accept, reply, request, seek, answer], [no]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks even though PersonX does not accept the request."}
{"input": "PersonX feels happy because PersonX wins the respect of his parents and [mask].", "constraint": "[trust, mother, adult, father, success]", "generation": "PersonX feels happy because PersonX wins the respect of his parents and trust of his friends."}
{"input": "PersonX feels happy because PersonX wins the respect of his parents and [mask].", "constraint": "[trust, mother, adult, father, success]", "generation": "PersonX feels happy because PersonX wins the respect of his parents and trust of his father."}
{"input": "PersonX feels happy because PersonX wins the respect of his parents and [mask].", "constraint": "[trust, mother, adult, father, success]", "generation": "PersonX feels happy because PersonX wins the respect of his parents and becomes a success."}
{"input": "PersonX feels happy because PersonX wins the respect of his parents while [mask].", "constraint": "[success, trust, father, mother, adult]", "generation": "PersonX feels happy because PersonX wins the respect of his parents while PersonX is an adult."}
{"input": "PersonX feels happy because PersonX wins the respect of his parents while [mask].", "constraint": "[success, trust, father, mother, adult]", "generation": "PersonX feels happy because PersonX wins the respect of his parents while being a successful adult."}
{"input": "PersonX feels happy because PersonX wins the respect of his parents while [mask].", "constraint": "[success, trust, father, mother, adult]", "generation": "PersonX feels happy because PersonX wins the respect of his parents while being an adult."}
{"input": "PersonX feels happy because PersonX wins the respect of his parents even though [mask].", "constraint": "[mother, trust, adult, father, success]", "generation": "PersonX feels happy because PersonX wins the respect of his parents even though PersonX is not a success."}
{"input": "PersonX feels happy because PersonX wins the respect of his parents even though [mask].", "constraint": "[mother, trust, adult, father, success]", "generation": "PersonX feels happy because PersonX wins the respect of his parents even though PersonX is not yet a success."}
{"input": "PersonX feels happy because PersonX wins the respect of his parents even though [mask].", "constraint": "[mother, trust, adult, father, success]", "generation": "PersonX feels happy because PersonX wins the respect of his parents even though his father doesn't trust him."}
{"input": "PersonX is seen as mature because PersonX wins the respect of his parents and [mask].", "constraint": "[father, mother, adult, trust, success]", "generation": "PersonX is seen as mature because PersonX wins the respect of his parents and demonstrates success."}
{"input": "PersonX is seen as mature because PersonX wins the respect of his parents and [mask].", "constraint": "[father, mother, adult, trust, success]", "generation": "PersonX is seen as mature because PersonX wins the respect of his parents and society through his success."}
{"input": "PersonX is seen as mature because PersonX wins the respect of his parents and [mask].", "constraint": "[father, mother, adult, trust, success]", "generation": "PersonX is seen as mature because PersonX wins the respect of his parents and becomes successful."}
{"input": "PersonX is seen as mature because PersonX wins the respect of his parents despite the fact that [mask].", "constraint": "[trust, adult, father, success, mother], [no]", "generation": "PersonX is seen as mature because PersonX wins the respect of his parents despite the fact that his father does not trust him."}
{"input": "PersonX is seen as mature because PersonX wins the respect of his parents despite the fact that [mask].", "constraint": "[trust, adult, father, success, mother], [no]", "generation": "PersonX is seen as mature because PersonX wins the respect of his parents despite the fact that his parents are not trust him as an adult."}
{"input": "PersonX is seen as mature because PersonX wins the respect of his parents despite the fact that [mask].", "constraint": "[trust, adult, father, success, mother], [no]", "generation": "PersonX is seen as mature because PersonX wins the respect of his parents despite the fact that PersonX is not an adult."}
{"input": "PersonX is seen as mature because PersonX wins the respect of his parents even though [mask].", "constraint": "[mother, adult, success, father, trust], [no]", "generation": "PersonX is seen as mature because PersonX wins the respect of his parents even though he is not an adult yet."}
{"input": "PersonX is seen as mature because PersonX wins the respect of his parents even though [mask].", "constraint": "[mother, adult, success, father, trust], [no]", "generation": "PersonX is seen as mature because PersonX wins the respect of his parents even though PersonX is not yet an adult."}
{"input": "PersonX is seen as mature because PersonX wins the respect of his parents even though [mask].", "constraint": "[mother, adult, success, father, trust], [no]", "generation": "PersonX is seen as mature because PersonX wins the respect of his parents even though PersonX is not an adult."}
{"input": "PersonX is seen as irresponsible because PersonX accidentally causes a fire and [mask].", "constraint": "[match, stroke, knife, game, time]", "generation": "PersonX is seen as irresponsible because PersonX accidentally causes a fire and PersonX does not have time to put it out."}
{"input": "PersonX is seen as irresponsible because PersonX accidentally causes a fire and [mask].", "constraint": "[match, stroke, knife, game, time]", "generation": "PersonX is seen as irresponsible because PersonX accidentally causes a fire and PersonX is not careful with time."}
{"input": "PersonX is seen as irresponsible because PersonX accidentally causes a fire and [mask].", "constraint": "[match, stroke, knife, game, time]", "generation": "PersonX is seen as irresponsible because PersonX accidentally causes a fire and PersonX is not timely in game."}
{"input": "PersonX is seen as irresponsible because PersonX accidentally causes a fire despite the fact that [mask].", "constraint": "[match, knife, time, stroke, game]", "generation": "PersonX is seen as irresponsible because PersonX accidentally causes a fire despite the fact that PersonX was playing with a match."}
{"input": "PersonX is seen as irresponsible because PersonX accidentally causes a fire despite the fact that [mask].", "constraint": "[match, knife, time, stroke, game]", "generation": "PersonX is seen as irresponsible because PersonX accidentally causes a fire despite the fact that PersonX is not playing with matches."}
{"input": "PersonX is seen as irresponsible because PersonX accidentally causes a fire despite the fact that [mask].", "constraint": "[match, knife, time, stroke, game]", "generation": "PersonX is seen as irresponsible because PersonX accidentally causes a fire despite the fact that PersonX is careful with match."}
{"input": "PersonX is seen as irresponsible because PersonX accidentally causes a fire even though [mask].", "constraint": "[game, stroke, match, time, knife]", "generation": "PersonX is seen as irresponsible because PersonX accidentally causes a fire even though PersonX is an experienced match player."}
{"input": "PersonX is seen as irresponsible because PersonX accidentally causes a fire even though [mask].", "constraint": "[game, stroke, match, time, knife]", "generation": "PersonX is seen as irresponsible because PersonX accidentally causes a fire even though PersonX is not playing with matches."}
{"input": "PersonX is seen as irresponsible because PersonX accidentally causes a fire even though [mask].", "constraint": "[game, stroke, match, time, knife]", "generation": "PersonX is seen as irresponsible because PersonX accidentally causes a fire even though PersonX is not supposed to play with matches."}
{"input": "PersonX is seen as irresponsible because PersonX accidentally causes a fire even though [mask].", "constraint": "[knife, match, time, stroke, game], [no]", "generation": "PersonX is seen as irresponsible because PersonX accidentally causes a fire even though PersonX did not prepare the match."}
{"input": "PersonX is seen as irresponsible because PersonX accidentally causes a fire even though [mask].", "constraint": "[knife, match, time, stroke, game], [no]", "generation": "PersonX is seen as irresponsible because PersonX accidentally causes a fire even though PersonX is not given any time."}
{"input": "PersonX is seen as irresponsible because PersonX accidentally causes a fire even though [mask].", "constraint": "[knife, match, time, stroke, game], [no]", "generation": "PersonX is seen as irresponsible because PersonX accidentally causes a fire even though PersonX has no match."}
{"input": "PersonX feels guilty because PersonX accidentally causes a fire even though [mask].", "constraint": "[stroke, knife, match, time, game]", "generation": "PersonX feels guilty because PersonX accidentally causes a fire even though PersonX is playing a game with a match."}
{"input": "PersonX feels guilty because PersonX accidentally causes a fire even though [mask].", "constraint": "[stroke, knife, match, time, game]", "generation": "PersonX feels guilty because PersonX accidentally causes a fire even though PersonX tries to save time."}
{"input": "PersonX feels guilty because PersonX accidentally causes a fire even though [mask].", "constraint": "[stroke, knife, match, time, game]", "generation": "PersonX feels guilty because PersonX accidentally causes a fire even though PersonX was playing with a match."}
{"input": "PersonX feels excited because PersonX has a chance to play music and [mask].", "constraint": "[movie, choice, artist, sound, song]", "generation": "PersonX feels excited because PersonX has a chance to play music and PersonX is an artist."}
{"input": "PersonX feels excited because PersonX has a chance to play music and [mask].", "constraint": "[movie, choice, artist, sound, song]", "generation": "PersonX feels excited because PersonX has a chance to play music and sound great."}
{"input": "PersonX feels excited because PersonX has a chance to play music and [mask].", "constraint": "[movie, choice, artist, sound, song]", "generation": "PersonX feels excited because PersonX has a chance to play music and creates great sound."}
{"input": "PersonX feels excited because PersonX has a chance to play music and [mask].", "constraint": "[sound, movie, artist, song, choice], [no]", "generation": "PersonX feels excited because PersonX has a chance to play music and no artist blocks the view."}
{"input": "PersonX feels excited because PersonX has a chance to play music and [mask].", "constraint": "[sound, movie, artist, song, choice], [no]", "generation": "PersonX feels excited because PersonX has a chance to play music and there is no other song like this."}
{"input": "PersonX feels excited because PersonX has a chance to play music and [mask].", "constraint": "[sound, movie, artist, song, choice], [no]", "generation": "PersonX feels excited because PersonX has a chance to play music and PersonX has no choice."}
{"input": "PersonX feels excited because PersonX has a chance to play music while [mask].", "constraint": "[sound, artist, song, movie, choice]", "generation": "PersonX feels excited because PersonX has a chance to play music while being an artist."}
{"input": "PersonX feels excited because PersonX has a chance to play music while [mask].", "constraint": "[sound, artist, song, movie, choice]", "generation": "PersonX feels excited because PersonX has a chance to play music while listening to the artist's new song."}
{"input": "PersonX feels excited because PersonX has a chance to play music while [mask].", "constraint": "[sound, artist, song, movie, choice]", "generation": "PersonX feels excited because PersonX has a chance to play music while watching a movie."}
{"input": "PersonX feels excited because PersonX has a chance to play music while [mask].", "constraint": "[choice, sound, song, movie, artist], [no]", "generation": "PersonX feels excited because PersonX has a chance to play music while no artist is better than PersonX."}
{"input": "PersonX feels excited because PersonX has a chance to play music while [mask].", "constraint": "[choice, sound, song, movie, artist], [no]", "generation": "PersonX feels excited because PersonX has a chance to play music while no artist is famous."}
{"input": "PersonX feels excited because PersonX has a chance to play music while [mask].", "constraint": "[choice, sound, song, movie, artist], [no]", "generation": "PersonX feels excited because PersonX has a chance to play music while no artist is available."}
{"input": "PersonX feels excited because PersonX has a chance to play music despite the fact that [mask].", "constraint": "[artist, choice, song, sound, movie]", "generation": "PersonX feels excited because PersonX has a chance to play music despite the fact that PersonX is not the first choice artist."}
{"input": "PersonX feels excited because PersonX has a chance to play music despite the fact that [mask].", "constraint": "[artist, choice, song, sound, movie]", "generation": "PersonX feels excited because PersonX has a chance to play music despite the fact that artist is not choice."}
{"input": "PersonX feels excited because PersonX has a chance to play music despite the fact that [mask].", "constraint": "[artist, choice, song, sound, movie]", "generation": "PersonX feels excited because PersonX has a chance to play music despite the fact that PersonX is not the artist's first choice."}
{"input": "PersonX feels excited because PersonX has a chance to play music despite the fact that [mask].", "constraint": "[song, artist, sound, choice, movie], [no]", "generation": "PersonX feels excited because PersonX has a chance to play music despite the fact that there is no sound."}
{"input": "PersonX feels excited because PersonX has a chance to play music despite the fact that [mask].", "constraint": "[song, artist, sound, choice, movie], [no]", "generation": "PersonX feels excited because PersonX has a chance to play music despite the fact that no one knows the song."}
{"input": "PersonX feels excited because PersonX has a chance to play music despite the fact that [mask].", "constraint": "[song, artist, sound, choice, movie], [no]", "generation": "PersonX feels excited because PersonX has a chance to play music despite the fact that artist is not famous."}
{"input": "PersonX feels excited because PersonX has a chance to play music even though [mask].", "constraint": "[sound, artist, choice, song, movie]", "generation": "PersonX feels excited because PersonX has a chance to play music even though PersonX is not the first choice."}
{"input": "PersonX feels excited because PersonX has a chance to play music even though [mask].", "constraint": "[sound, artist, choice, song, movie]", "generation": "PersonX feels excited because PersonX has a chance to play music even though the artist is not famous."}
{"input": "PersonX feels excited because PersonX has a chance to play music even though [mask].", "constraint": "[sound, artist, choice, song, movie]", "generation": "PersonX feels excited because PersonX has a chance to play music even though PersonX is not the artist's first choice."}
{"input": "PersonX feels excited because PersonX has a chance to play music even though [mask].", "constraint": "[artist, sound, choice, movie, song], [no]", "generation": "PersonX feels excited because PersonX has a chance to play music even though there is no choice of song."}
{"input": "PersonX feels excited because PersonX has a chance to play music even though [mask].", "constraint": "[artist, sound, choice, movie, song], [no]", "generation": "PersonX feels excited because PersonX has a chance to play music even though PersonX is not a famous artist."}
{"input": "PersonX feels excited because PersonX has a chance to play music even though [mask].", "constraint": "[artist, sound, choice, movie, song], [no]", "generation": "PersonX feels excited because PersonX has a chance to play music even though PersonX is not an artist."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music and [mask].", "constraint": "[movie, choice, artist, sound, song]", "generation": "PersonX is seen as talented because PersonX has a chance to play music and PersonX is an artist."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music and [mask].", "constraint": "[movie, choice, artist, sound, song]", "generation": "PersonX is seen as talented because PersonX has a chance to play music and creates a new artist."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music and [mask].", "constraint": "[movie, choice, artist, sound, song]", "generation": "PersonX is seen as talented because PersonX has a chance to play music and creates her own sound."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music while [mask].", "constraint": "[movie, song, artist, choice, sound]", "generation": "PersonX is seen as talented because PersonX has a chance to play music while being the artist of the movie."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music while [mask].", "constraint": "[movie, song, artist, choice, sound]", "generation": "PersonX is seen as talented because PersonX has a chance to play music while being the artist of choice."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music while [mask].", "constraint": "[movie, song, artist, choice, sound]", "generation": "PersonX is seen as talented because PersonX has a chance to play music while being an artist."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music while [mask].", "constraint": "[sound, artist, choice, movie, song], [no]", "generation": "PersonX is seen as talented because PersonX has a chance to play music while no other artist is available."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music while [mask].", "constraint": "[sound, artist, choice, movie, song], [no]", "generation": "PersonX is seen as talented because PersonX has a chance to play music while no sound is played."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music while [mask].", "constraint": "[sound, artist, choice, movie, song], [no]", "generation": "PersonX is seen as talented because PersonX has a chance to play music while no artist is available."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music despite the fact that [mask].", "constraint": "[sound, choice, movie, artist, song]", "generation": "PersonX is seen as talented because PersonX has a chance to play music despite the fact that PersonX is not the only artist."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music despite the fact that [mask].", "constraint": "[sound, choice, movie, artist, song]", "generation": "PersonX is seen as talented because PersonX has a chance to play music despite the fact that PersonX is not the first choice."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music despite the fact that [mask].", "constraint": "[sound, choice, movie, artist, song]", "generation": "PersonX is seen as talented because PersonX has a chance to play music despite the fact that PersonX is not the artist of the song."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music despite the fact that [mask].", "constraint": "[song, choice, artist, movie, sound], [no]", "generation": "PersonX is seen as talented because PersonX has a chance to play music despite the fact that PersonX is not a choice of artist."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music despite the fact that [mask].", "constraint": "[song, choice, artist, movie, sound], [no]", "generation": "PersonX is seen as talented because PersonX has a chance to play music despite the fact that there is no sound."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music despite the fact that [mask].", "constraint": "[song, choice, artist, movie, sound], [no]", "generation": "PersonX is seen as talented because PersonX has a chance to play music despite the fact that no artist is better than PersonX."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music even though [mask].", "constraint": "[artist, choice, song, movie, sound]", "generation": "PersonX is seen as talented because PersonX has a chance to play music even though other artist are better."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music even though [mask].", "constraint": "[artist, choice, song, movie, sound]", "generation": "PersonX is seen as talented because PersonX has a chance to play music even though artist is not choice."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music even though [mask].", "constraint": "[artist, choice, song, movie, sound]", "generation": "PersonX is seen as talented because PersonX has a chance to play music even though artist is not famous."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music even though [mask].", "constraint": "[artist, choice, sound, song, movie], [no]", "generation": "PersonX is seen as talented because PersonX has a chance to play music even though there is no artist."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music even though [mask].", "constraint": "[artist, choice, sound, song, movie], [no]", "generation": "PersonX is seen as talented because PersonX has a chance to play music even though there are no other artists."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music even though [mask].", "constraint": "[artist, choice, sound, song, movie], [no]", "generation": "PersonX is seen as talented because PersonX has a chance to play music even though no artist is better than PersonX."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY and [mask].", "constraint": "[training, remember, program, school, improve]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY and improve the program."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY and [mask].", "constraint": "[training, remember, program, school, improve]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY and improves everyday."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY and [mask].", "constraint": "[training, remember, program, school, improve]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY and improve communication skill."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY and [mask].", "constraint": "[school, training, improve, remember, program], [no]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY and PersonX did not go to the training."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY and [mask].", "constraint": "[school, training, improve, remember, program], [no]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY and PersonX does not need to remember what PersonY says."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY and [mask].", "constraint": "[school, training, improve, remember, program], [no]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY and PersonX does not need to go to school."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY while [mask].", "constraint": "[improve, program, school, remember, training]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY while PersonX improves social skills."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY while [mask].", "constraint": "[improve, program, school, remember, training]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY while improving communication skills."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY while [mask].", "constraint": "[improve, program, school, remember, training]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY while PersonX is improving."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY while [mask].", "constraint": "[improve, program, school, remember, training], [no]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY while PersonX is not enrolled in any program."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY while [mask].", "constraint": "[improve, program, school, remember, training], [no]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY while PersonX does not improve."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY while [mask].", "constraint": "[improve, program, school, remember, training], [no]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY while PersonX has no training."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY despite the fact that [mask].", "constraint": "[improve, school, training, program, remember]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY despite the fact that PersonX needs to improve."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY despite the fact that [mask].", "constraint": "[improve, school, training, program, remember]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY despite the fact that they do not remember each other."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY despite the fact that [mask].", "constraint": "[improve, school, training, program, remember]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY despite the fact that PersonY is not interested in the training program."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY despite the fact that [mask].", "constraint": "[remember, improve, school, training, program], [no]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY despite the fact that PersonX does not remember the training program."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY despite the fact that [mask].", "constraint": "[remember, improve, school, training, program], [no]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY despite the fact that PersonX cannot remember what PersonY said."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY despite the fact that [mask].", "constraint": "[remember, improve, school, training, program], [no]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY despite the fact that PersonX has no prior training."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY even though [mask].", "constraint": "[remember, school, training, improve, program]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY even though PersonX cannot remember the school program."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY even though [mask].", "constraint": "[remember, school, training, improve, program]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY even though school program is not ideal."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY even though [mask].", "constraint": "[remember, school, training, improve, program]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY even though school is not fun."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY even though [mask].", "constraint": "[program, improve, school, training, remember], [no]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY even though PersonX does not program."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY even though [mask].", "constraint": "[program, improve, school, training, remember], [no]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY even though program does not improve."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY even though [mask].", "constraint": "[program, improve, school, training, remember], [no]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY even though PersonX does not remember the program."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY and [mask].", "constraint": "[remember, training, program, school, improve]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY and PersonX is trying to improve."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY and [mask].", "constraint": "[remember, training, program, school, improve]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY and PersonX tries to improve every day."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY and [mask].", "constraint": "[remember, training, program, school, improve]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY and PersonX helps PersonY to improve."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY while [mask].", "constraint": "[training, improve, remember, school, program]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY while improving communication skills."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY while [mask].", "constraint": "[training, improve, remember, school, program]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY while PersonX is in the same training program."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY while [mask].", "constraint": "[training, improve, remember, school, program]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY while training in the program."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY while [mask].", "constraint": "[school, improve, program, remember, training], [no]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY while PersonX does not have any training."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY while [mask].", "constraint": "[school, improve, program, remember, training], [no]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY while PersonX did not receive any training."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY while [mask].", "constraint": "[school, improve, program, remember, training], [no]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY while PersonX does not remember the program."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY despite the fact that [mask].", "constraint": "[remember, improve, school, program, training]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY despite the fact that PersonX cannot remember what PersonY said."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY despite the fact that [mask].", "constraint": "[remember, improve, school, program, training]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY despite the fact that PersonX doesn't remember what happen in the past."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY despite the fact that [mask].", "constraint": "[remember, improve, school, program, training]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY despite the fact that PersonX and PersonY have different training."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY despite the fact that [mask].", "constraint": "[remember, improve, training, school, program], [no]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY despite the fact that PersonX has no training in social skills."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY despite the fact that [mask].", "constraint": "[remember, improve, training, school, program], [no]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY despite the fact that PersonX has no training."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY despite the fact that [mask].", "constraint": "[remember, improve, training, school, program], [no]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY despite the fact that PersonX cannot remember PersonY."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY even though [mask].", "constraint": "[improve, program, training, remember, school]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY even though PersonX is not in the same school program."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY even though [mask].", "constraint": "[improve, program, training, remember, school]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY even though PersonX has to remember to take his medicine."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY even though [mask].", "constraint": "[improve, program, training, remember, school]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY even though PersonX does not improve."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY even though [mask].", "constraint": "[program, training, improve, school, remember], [no]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY even though PersonX does not improve."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY even though [mask].", "constraint": "[program, training, improve, school, remember], [no]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY even though PersonX cannot remember all the training program."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY even though [mask].", "constraint": "[program, training, improve, school, remember], [no]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY even though PersonX does not remember the program."}
{"input": "PersonX is seen as generous because PersonX cares for PersonY's relatives and [mask].", "constraint": "[love, time, support, related, repair]", "generation": "PersonX is seen as generous because PersonX cares for PersonY's relatives and provides support to them."}
{"input": "PersonX is seen as generous because PersonX cares for PersonY's relatives and [mask].", "constraint": "[love, time, support, related, repair]", "generation": "PersonX is seen as generous because PersonX cares for PersonY's relatives and provides support when they need it."}
{"input": "PersonX is seen as generous because PersonX cares for PersonY's relatives and [mask].", "constraint": "[love, time, support, related, repair]", "generation": "PersonX is seen as generous because PersonX cares for PersonY's relatives and provides support to PersonY."}
{"input": "PersonX is seen as generous because PersonX cares for PersonY's relatives and [mask].", "constraint": "[repair, support, time, related, love], [no]", "generation": "PersonX is seen as generous because PersonX cares for PersonY's relatives and PersonX is not related to them."}
{"input": "PersonX is seen as generous because PersonX cares for PersonY's relatives and [mask].", "constraint": "[repair, support, time, related, love], [no]", "generation": "PersonX is seen as generous because PersonX cares for PersonY's relatives and provides repair services for them even though PersonX is not related to them."}
{"input": "PersonX is seen as generous because PersonX cares for PersonY's relatives and [mask].", "constraint": "[repair, support, time, related, love], [no]", "generation": "PersonX is seen as generous because PersonX cares for PersonY's relatives and PersonY is not related to PersonX."}
{"input": "PersonX is seen as generous because PersonX cares for PersonY's relatives while [mask].", "constraint": "[time, related, support, love, repair]", "generation": "PersonX is seen as generous because PersonX cares for PersonY's relatives while PersonX has a lot of free time."}
{"input": "PersonX is seen as generous because PersonX cares for PersonY's relatives while [mask].", "constraint": "[time, related, support, love, repair]", "generation": "PersonX is seen as generous because PersonX cares for PersonY's relatives while PersonX has free time."}
{"input": "PersonX is seen as generous because PersonX cares for PersonY's relatives while [mask].", "constraint": "[time, related, support, love, repair]", "generation": "PersonX is seen as generous because PersonX cares for PersonY's relatives while PersonX has no time for his own relatives."}
{"input": "PersonX is seen as generous because PersonX cares for PersonY's relatives while [mask].", "constraint": "[time, support, related, love, repair], [no]", "generation": "PersonX is seen as generous because PersonX cares for PersonY's relatives while PersonX has no support from PersonY."}
{"input": "PersonX is seen as generous because PersonX cares for PersonY's relatives while [mask].", "constraint": "[time, support, related, love, repair], [no]", "generation": "PersonX is seen as generous because PersonX cares for PersonY's relatives while PersonX has no time for PersonY."}
{"input": "PersonX is seen as generous because PersonX cares for PersonY's relatives while [mask].", "constraint": "[time, support, related, love, repair], [no]", "generation": "PersonX is seen as generous because PersonX cares for PersonY's relatives while PersonX is not related to them."}
{"input": "PersonX is seen as generous because PersonX cares for PersonY's relatives despite the fact that [mask].", "constraint": "[time, repair, support, related, love]", "generation": "PersonX is seen as generous because PersonX cares for PersonY's relatives despite the fact that PersonX is not related to them."}
{"input": "PersonX is seen as generous because PersonX cares for PersonY's relatives despite the fact that [mask].", "constraint": "[time, repair, support, related, love]", "generation": "PersonX is seen as generous because PersonX cares for PersonY's relatives despite the fact that they are not related."}
{"input": "PersonX is seen as generous because PersonX cares for PersonY's relatives despite the fact that [mask].", "constraint": "[time, repair, support, related, love]", "generation": "PersonX is seen as generous because PersonX cares for PersonY's relatives despite the fact that PersonX and PersonY are not related."}
{"input": "PersonX is seen as generous because PersonX cares for PersonY's relatives even though [mask].", "constraint": "[repair, love, support, time, related]", "generation": "PersonX is seen as generous because PersonX cares for PersonY's relatives even though PersonX and PersonY are not related."}
{"input": "PersonX is seen as generous because PersonX cares for PersonY's relatives even though [mask].", "constraint": "[repair, love, support, time, related]", "generation": "PersonX is seen as generous because PersonX cares for PersonY's relatives even though PersonX is not related to them."}
{"input": "PersonX is seen as generous because PersonX cares for PersonY's relatives even though [mask].", "constraint": "[repair, love, support, time, related]", "generation": "PersonX is seen as generous because PersonX cares for PersonY's relatives even though they are not related by blood."}
{"input": "PersonX is seen as generous because PersonX cares for PersonY's relatives even though [mask].", "constraint": "[support, repair, time, related, love], [no]", "generation": "PersonX is seen as generous because PersonX cares for PersonY's relatives even though PersonX is not related to them."}
{"input": "PersonX is seen as generous because PersonX cares for PersonY's relatives even though [mask].", "constraint": "[support, repair, time, related, love], [no]", "generation": "PersonX is seen as generous because PersonX cares for PersonY's relatives even though they are not related."}
{"input": "PersonX is seen as generous because PersonX cares for PersonY's relatives even though [mask].", "constraint": "[support, repair, time, related, love], [no]", "generation": "PersonX is seen as generous because PersonX cares for PersonY's relatives even though they are not related by blood."}
{"input": "PersonX feels protective because PersonX cares for PersonY's relatives and [mask].", "constraint": "[love, time, related, support, repair]", "generation": "PersonX feels protective because PersonX cares for PersonY's relatives and provides support when they need repair."}
{"input": "PersonX feels protective because PersonX cares for PersonY's relatives and [mask].", "constraint": "[love, time, related, support, repair]", "generation": "PersonX feels protective because PersonX cares for PersonY's relatives and supports them."}
{"input": "PersonX feels protective because PersonX cares for PersonY's relatives and [mask].", "constraint": "[love, time, related, support, repair]", "generation": "PersonX feels protective because PersonX cares for PersonY's relatives and provides support to them."}
{"input": "PersonX feels protective because PersonX cares for PersonY's relatives and [mask].", "constraint": "[love, support, related, repair, time], [no]", "generation": "PersonX feels protective because PersonX cares for PersonY's relatives and PersonX is not related to PersonY."}
{"input": "PersonX feels protective because PersonX cares for PersonY's relatives and [mask].", "constraint": "[love, support, related, repair, time], [no]", "generation": "PersonX feels protective because PersonX cares for PersonY's relatives and PersonX is not related to them."}
{"input": "PersonX feels protective because PersonX cares for PersonY's relatives and [mask].", "constraint": "[love, support, related, repair, time], [no]", "generation": "PersonX feels protective because PersonX cares for PersonY's relatives and is not related to them."}
{"input": "PersonX feels protective because PersonX cares for PersonY's relatives while [mask].", "constraint": "[related, repair, time, love, support], [no]", "generation": "PersonX feels protective because PersonX cares for PersonY's relatives while PersonY is not related to PersonX."}
{"input": "PersonX feels protective because PersonX cares for PersonY's relatives while [mask].", "constraint": "[related, repair, time, love, support], [no]", "generation": "PersonX feels protective because PersonX cares for PersonY's relatives while PersonX is not related to them."}
{"input": "PersonX feels protective because PersonX cares for PersonY's relatives while [mask].", "constraint": "[related, repair, time, love, support], [no]", "generation": "PersonX feels protective because PersonX cares for PersonY's relatives while PersonX is not related to PersonY."}
{"input": "PersonX feels protective because PersonX cares for PersonY's relatives despite the fact that [mask].", "constraint": "[support, related, repair, time, love], [no]", "generation": "PersonX feels protective because PersonX cares for PersonY's relatives despite the fact that they are not related."}
{"input": "PersonX feels protective because PersonX cares for PersonY's relatives despite the fact that [mask].", "constraint": "[support, related, repair, time, love], [no]", "generation": "PersonX feels protective because PersonX cares for PersonY's relatives despite the fact that PersonY is not related to PersonX."}
{"input": "PersonX feels protective because PersonX cares for PersonY's relatives despite the fact that [mask].", "constraint": "[support, related, repair, time, love], [no]", "generation": "PersonX feels protective because PersonX cares for PersonY's relatives despite the fact that they are not related by blood."}
{"input": "PersonX feels protective because PersonX cares for PersonY's relatives even though [mask].", "constraint": "[repair, related, time, support, love], [no]", "generation": "PersonX feels protective because PersonX cares for PersonY's relatives even though PersonX is not related to them."}
{"input": "PersonX feels protective because PersonX cares for PersonY's relatives even though [mask].", "constraint": "[repair, related, time, support, love], [no]", "generation": "PersonX feels protective because PersonX cares for PersonY's relatives even though PersonX is not related by blood."}
{"input": "PersonX feels protective because PersonX cares for PersonY's relatives even though [mask].", "constraint": "[repair, related, time, support, love], [no]", "generation": "PersonX feels protective because PersonX cares for PersonY's relatives even though they are not blood-related."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course and [mask].", "constraint": "[graduate, learning, school, college, education]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course and is learning a lot."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course and [mask].", "constraint": "[graduate, learning, school, college, education]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course and graduate from college."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course and [mask].", "constraint": "[graduate, learning, school, college, education]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course and education is very important to PersonX."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course while [mask].", "constraint": "[education, school, graduate, learning, college]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course while PersonX is also a college graduate."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course while [mask].", "constraint": "[education, school, graduate, learning, college]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course while learning from PersonY."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course while [mask].", "constraint": "[education, school, graduate, learning, college]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course while PersonX is studying in college."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course despite the fact that [mask].", "constraint": "[college, education, learning, school, graduate]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course despite the fact that PersonY is not a college graduate."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course despite the fact that [mask].", "constraint": "[college, education, learning, school, graduate]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course despite the fact that PersonX is a college dropout."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course despite the fact that [mask].", "constraint": "[college, education, learning, school, graduate]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course despite the fact that PersonX is not in college."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course despite the fact that [mask].", "constraint": "[school, learning, graduate, education, college], [no]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course despite the fact that PersonX does not like school."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course despite the fact that [mask].", "constraint": "[school, learning, graduate, education, college], [no]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course despite the fact that school is not her favorite place."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course despite the fact that [mask].", "constraint": "[school, learning, graduate, education, college], [no]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course despite the fact that PersonX is not in school."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course even though [mask].", "constraint": "[graduate, college, learning, education, school], [no]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course even though no one has graduated from PersonY's course."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course even though [mask].", "constraint": "[graduate, college, learning, education, school], [no]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course even though PersonX is not a graduate of the school."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course even though [mask].", "constraint": "[graduate, college, learning, education, school], [no]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course even though PersonX is not studying in a graduate school."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course and [mask].", "constraint": "[learning, college, school, graduate, education]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course and takes her education seriously."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course and [mask].", "constraint": "[learning, college, school, graduate, education]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course and is learning a lot."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course and [mask].", "constraint": "[learning, college, school, graduate, education]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course and PersonX is learning a lot."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course and [mask].", "constraint": "[college, graduate, education, school, learning], [no]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course and no one has a higher education than PersonX."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course and [mask].", "constraint": "[college, graduate, education, school, learning], [no]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course and no college graduate has better score than PersonX."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course and [mask].", "constraint": "[college, graduate, education, school, learning], [no]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course and PersonX has no college education."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course while [mask].", "constraint": "[college, learning, graduate, school, education]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course while studying at college."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course while [mask].", "constraint": "[college, learning, graduate, school, education]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course while PersonX is in college."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course while [mask].", "constraint": "[college, learning, graduate, school, education]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course while PersonX is learning in school."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course despite the fact that [mask].", "constraint": "[graduate, school, education, learning, college]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course despite the fact that PersonX does not have a college education."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course despite the fact that [mask].", "constraint": "[graduate, school, education, learning, college]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course despite the fact that PersonX is not a graduate of the school."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course despite the fact that [mask].", "constraint": "[graduate, school, education, learning, college]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course despite the fact that PersonX did not graduate from college."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course despite the fact that [mask].", "constraint": "[school, graduate, learning, college, education], [no]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course despite the fact that PersonX is not in school."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course despite the fact that [mask].", "constraint": "[school, graduate, learning, college, education], [no]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course despite the fact that PersonX did not graduate from a school of higher education."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course despite the fact that [mask].", "constraint": "[school, graduate, learning, college, education], [no]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course despite the fact that PersonX did not go to school for a long time."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course even though [mask].", "constraint": "[graduate, learning, college, education, school]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course even though PersonX is not interested in learning."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course even though [mask].", "constraint": "[graduate, learning, college, education, school]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course even though PersonX did not go to college."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course even though [mask].", "constraint": "[graduate, learning, college, education, school]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course even though PersonX is not in college."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course even though [mask].", "constraint": "[learning, graduate, college, school, education], [no]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course even though PersonX does not like learning."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course even though [mask].", "constraint": "[learning, graduate, college, school, education], [no]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course even though PersonX does not learn from school."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course even though [mask].", "constraint": "[learning, graduate, college, school, education], [no]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course even though PersonX is not learning."}
{"input": "PersonX is seen as popular because PersonX is great at making friends and [mask].", "constraint": "[favorite, love, girl, enemy, brother]", "generation": "PersonX is seen as popular because PersonX is great at making friends and PersonX loves spending time with them."}
{"input": "PersonX is seen as popular because PersonX is great at making friends and [mask].", "constraint": "[favorite, love, girl, enemy, brother]", "generation": "PersonX is seen as popular because PersonX is great at making friends and PersonX is loved by many people."}
{"input": "PersonX is seen as popular because PersonX is great at making friends and [mask].", "constraint": "[favorite, love, girl, enemy, brother]", "generation": "PersonX is seen as popular because PersonX is great at making friends and is loved by everyone."}
{"input": "PersonX is seen as popular because PersonX is great at making friends while [mask].", "constraint": "[favorite, girl, brother, love, enemy]", "generation": "PersonX is seen as popular because PersonX is great at making friends while being the favorite girl."}
{"input": "PersonX is seen as popular because PersonX is great at making friends while [mask].", "constraint": "[favorite, girl, brother, love, enemy]", "generation": "PersonX is seen as popular because PersonX is great at making friends while PersonX's favorite girl is not around."}
{"input": "PersonX is seen as popular because PersonX is great at making friends while [mask].", "constraint": "[favorite, girl, brother, love, enemy]", "generation": "PersonX is seen as popular because PersonX is great at making friends while PersonX's favorite girl is his brother's enemy."}
{"input": "PersonX is seen as popular because PersonX is great at making friends while [mask].", "constraint": "[girl, brother, love, favorite, enemy], [no]", "generation": "PersonX is seen as popular because PersonX is great at making friends while PersonX has no enemy."}
{"input": "PersonX is seen as popular because PersonX is great at making friends while [mask].", "constraint": "[girl, brother, love, favorite, enemy], [no]", "generation": "PersonX is seen as popular because PersonX is great at making friends while being no one's favorite."}
{"input": "PersonX is seen as popular because PersonX is great at making friends while [mask].", "constraint": "[girl, brother, love, favorite, enemy], [no]", "generation": "PersonX is seen as popular because PersonX is great at making friends while PersonX's favorite girl is not around."}
{"input": "PersonX is seen as popular because PersonX is great at making friends despite the fact that [mask].", "constraint": "[favorite, girl, brother, enemy, love]", "generation": "PersonX is seen as popular because PersonX is great at making friends despite the fact that PersonX is not the favorite daughter."}
{"input": "PersonX is seen as popular because PersonX is great at making friends despite the fact that [mask].", "constraint": "[favorite, girl, brother, enemy, love]", "generation": "PersonX is seen as popular because PersonX is great at making friends despite the fact that PersonX doesn't have a girlfriend."}
{"input": "PersonX is seen as popular because PersonX is great at making friends despite the fact that [mask].", "constraint": "[favorite, girl, brother, enemy, love]", "generation": "PersonX is seen as popular because PersonX is great at making friends despite the fact that PersonX loves her brother more than her favorite girl."}
{"input": "PersonX is seen as popular because PersonX is great at making friends despite the fact that [mask].", "constraint": "[brother, favorite, love, girl, enemy], [no]", "generation": "PersonX is seen as popular because PersonX is great at making friends despite the fact that PersonX has no brother."}
{"input": "PersonX is seen as popular because PersonX is great at making friends despite the fact that [mask].", "constraint": "[brother, favorite, love, girl, enemy], [no]", "generation": "PersonX is seen as popular because PersonX is great at making friends despite the fact that no one loves PersonX."}
{"input": "PersonX is seen as popular because PersonX is great at making friends despite the fact that [mask].", "constraint": "[brother, favorite, love, girl, enemy], [no]", "generation": "PersonX is seen as popular because PersonX is great at making friends despite the fact that PersonX has no favorite friends."}
{"input": "PersonX is seen as popular because PersonX is great at making friends even though [mask].", "constraint": "[love, favorite, brother, enemy, girl]", "generation": "PersonX is seen as popular because PersonX is great at making friends even though PersonX is not good at love."}
{"input": "PersonX is seen as popular because PersonX is great at making friends even though [mask].", "constraint": "[love, favorite, brother, enemy, girl]", "generation": "PersonX is seen as popular because PersonX is great at making friends even though PersonX's favorite girl doesn't love PersonX."}
{"input": "PersonX is seen as popular because PersonX is great at making friends even though [mask].", "constraint": "[love, favorite, brother, enemy, girl]", "generation": "PersonX is seen as popular because PersonX is great at making friends even though PersonX is not the favorite."}
{"input": "PersonX is seen as popular because PersonX is great at making friends even though [mask].", "constraint": "[girl, love, enemy, brother, favorite], [no]", "generation": "PersonX is seen as popular because PersonX is great at making friends even though PersonX has no girlfriend."}
{"input": "PersonX is seen as popular because PersonX is great at making friends even though [mask].", "constraint": "[girl, love, enemy, brother, favorite], [no]", "generation": "PersonX is seen as popular because PersonX is great at making friends even though PersonX is not the favorite girl."}
{"input": "PersonX is seen as popular because PersonX is great at making friends even though [mask].", "constraint": "[girl, love, enemy, brother, favorite], [no]", "generation": "PersonX is seen as popular because PersonX is great at making friends even though PersonX is not love by everyone."}
{"input": "PersonX feels excited because PersonX is great at making friends and [mask].", "constraint": "[girl, enemy, brother, love, favorite]", "generation": "PersonX feels excited because PersonX is great at making friends and loves spending time with her favorite people."}
{"input": "PersonX feels excited because PersonX is great at making friends and [mask].", "constraint": "[girl, enemy, brother, love, favorite]", "generation": "PersonX feels excited because PersonX is great at making friends and loves spending time with them."}
{"input": "PersonX feels excited because PersonX is great at making friends and [mask].", "constraint": "[girl, enemy, brother, love, favorite]", "generation": "PersonX feels excited because PersonX is great at making friends and PersonX's favorite girl is also PersonX's best friend."}
{"input": "PersonX feels excited because PersonX is great at making friends while [mask].", "constraint": "[brother, girl, enemy, love, favorite]", "generation": "PersonX feels excited because PersonX is great at making friends while PersonX's favorite girl talks with PersonX's brother."}
{"input": "PersonX feels excited because PersonX is great at making friends while [mask].", "constraint": "[brother, girl, enemy, love, favorite]", "generation": "PersonX feels excited because PersonX is great at making friends while being with her favorite person."}
{"input": "PersonX feels excited because PersonX is great at making friends while [mask].", "constraint": "[brother, girl, enemy, love, favorite]", "generation": "PersonX feels excited because PersonX is great at making friends while PersonX is a girl."}
{"input": "PersonX feels excited because PersonX is great at making friends despite the fact that [mask].", "constraint": "[brother, favorite, love, girl, enemy]", "generation": "PersonX feels excited because PersonX is great at making friends despite the fact that PersonX's favorite person is not her brother."}
{"input": "PersonX feels excited because PersonX is great at making friends despite the fact that [mask].", "constraint": "[brother, favorite, love, girl, enemy]", "generation": "PersonX feels excited because PersonX is great at making friends despite the fact that PersonX is not PersonY's favorite person."}
{"input": "PersonX feels excited because PersonX is great at making friends despite the fact that [mask].", "constraint": "[brother, favorite, love, girl, enemy]", "generation": "PersonX feels excited because PersonX is great at making friends despite the fact that PersonX's favorite girl is his enemy."}
{"input": "PersonX feels excited because PersonX is great at making friends even though [mask].", "constraint": "[favorite, enemy, brother, girl, love]", "generation": "PersonX feels excited because PersonX is great at making friends even though PersonX's favorite person is her enemy."}
{"input": "PersonX feels excited because PersonX is great at making friends even though [mask].", "constraint": "[favorite, enemy, brother, girl, love]", "generation": "PersonX feels excited because PersonX is great at making friends even though PersonX's favorite person is not here."}
{"input": "PersonX feels excited because PersonX is great at making friends even though [mask].", "constraint": "[favorite, enemy, brother, girl, love]", "generation": "PersonX feels excited because PersonX is great at making friends even though PersonX does not have a favorite enemy."}
{"input": "PersonX feels excited because PersonX is great at making friends even though [mask].", "constraint": "[brother, enemy, girl, love, favorite], [no]", "generation": "PersonX feels excited because PersonX is great at making friends even though person's favorite is not available."}
{"input": "PersonX feels excited because PersonX is great at making friends even though [mask].", "constraint": "[brother, enemy, girl, love, favorite], [no]", "generation": "PersonX feels excited because PersonX is great at making friends even though PersonX's favorite girl is not around."}
{"input": "PersonX feels excited because PersonX is great at making friends even though [mask].", "constraint": "[brother, enemy, girl, love, favorite], [no]", "generation": "PersonX feels excited because PersonX is great at making friends even though no one is favorite."}
{"input": "PersonX is seen as brave because PersonX fights for a cause and [mask].", "constraint": "[attack, violence, argument, match, purpose]", "generation": "PersonX is seen as brave because PersonX fights for a cause and does not shy away from violence."}
{"input": "PersonX is seen as brave because PersonX fights for a cause and [mask].", "constraint": "[attack, violence, argument, match, purpose]", "generation": "PersonX is seen as brave because PersonX fights for a cause and does not give up despite the attack."}
{"input": "PersonX is seen as brave because PersonX fights for a cause and [mask].", "constraint": "[attack, violence, argument, match, purpose]", "generation": "PersonX is seen as brave because PersonX fights for a cause and faces violence."}
{"input": "PersonX is seen as brave because PersonX fights for a cause even though [mask].", "constraint": "[purpose, violence, match, attack, argument]", "generation": "PersonX is seen as brave because PersonX fights for a cause even though people do not understand the purpose."}
{"input": "PersonX is seen as brave because PersonX fights for a cause even though [mask].", "constraint": "[purpose, violence, match, attack, argument]", "generation": "PersonX is seen as brave because PersonX fights for a cause even though it might lead to violence."}
{"input": "PersonX is seen as brave because PersonX fights for a cause even though [mask].", "constraint": "[purpose, violence, match, attack, argument]", "generation": "PersonX is seen as brave because PersonX fights for a cause even though there is a risk of violence."}
{"input": "PersonX is seen as brave because PersonX fights for a cause even though [mask].", "constraint": "[violence, attack, argument, match, purpose], [no]", "generation": "PersonX is seen as brave because PersonX fights for a cause even though there is no clear purpose."}
{"input": "PersonX is seen as brave because PersonX fights for a cause even though [mask].", "constraint": "[violence, attack, argument, match, purpose], [no]", "generation": "PersonX is seen as brave because PersonX fights for a cause even though there is no purpose."}
{"input": "PersonX is seen as brave because PersonX fights for a cause even though [mask].", "constraint": "[violence, attack, argument, match, purpose], [no]", "generation": "PersonX is seen as brave because PersonX fights for a cause even though the purpose is not clear."}
{"input": "PersonX feels inspired because PersonX fights for a cause and [mask].", "constraint": "[match, argument, violence, attack, purpose]", "generation": "PersonX feels inspired because PersonX fights for a cause and believes in the purpose."}
{"input": "PersonX feels inspired because PersonX fights for a cause and [mask].", "constraint": "[match, argument, violence, attack, purpose]", "generation": "PersonX feels inspired because PersonX fights for a cause and has a purpose."}
{"input": "PersonX feels inspired because PersonX fights for a cause and [mask].", "constraint": "[match, argument, violence, attack, purpose]", "generation": "PersonX feels inspired because PersonX fights for a cause and has a clear purpose."}
{"input": "PersonX feels inspired because PersonX fights for a cause and [mask].", "constraint": "[violence, attack, purpose, match, argument], [no]", "generation": "PersonX feels inspired because PersonX fights for a cause and no one can argue against the purpose."}
{"input": "PersonX feels inspired because PersonX fights for a cause and [mask].", "constraint": "[violence, attack, purpose, match, argument], [no]", "generation": "PersonX feels inspired because PersonX fights for a cause and no one can attack her purpose."}
{"input": "PersonX feels inspired because PersonX fights for a cause and [mask].", "constraint": "[violence, attack, purpose, match, argument], [no]", "generation": "PersonX feels inspired because PersonX fights for a cause and does not give up despite violence."}
{"input": "PersonX feels inspired because PersonX fights for a cause while [mask].", "constraint": "[argument, attack, violence, match, purpose]", "generation": "PersonX feels inspired because PersonX fights for a cause while encountering an attack."}
{"input": "PersonX feels inspired because PersonX fights for a cause while [mask].", "constraint": "[argument, attack, violence, match, purpose]", "generation": "PersonX feels inspired because PersonX fights for a cause while being attacked."}
{"input": "PersonX feels inspired because PersonX fights for a cause while [mask].", "constraint": "[argument, attack, violence, match, purpose]", "generation": "PersonX feels inspired because PersonX fights for a cause while purpose is argued."}
{"input": "PersonX feels inspired because PersonX fights for a cause despite the fact that [mask].", "constraint": "[attack, match, purpose, violence, argument]", "generation": "PersonX feels inspired because PersonX fights for a cause despite the fact that people attack PersonX."}
{"input": "PersonX feels inspired because PersonX fights for a cause despite the fact that [mask].", "constraint": "[attack, match, purpose, violence, argument]", "generation": "PersonX feels inspired because PersonX fights for a cause despite the fact that argument happens."}
{"input": "PersonX feels inspired because PersonX fights for a cause despite the fact that [mask].", "constraint": "[attack, match, purpose, violence, argument]", "generation": "PersonX feels inspired because PersonX fights for a cause despite the fact that there is a lot of violence."}
{"input": "PersonX feels inspired because PersonX fights for a cause even though [mask].", "constraint": "[violence, attack, purpose, match, argument]", "generation": "PersonX feels inspired because PersonX fights for a cause even though there is a possibility of violence."}
{"input": "PersonX feels inspired because PersonX fights for a cause even though [mask].", "constraint": "[violence, attack, purpose, match, argument]", "generation": "PersonX feels inspired because PersonX fights for a cause even though there is a lot of violence."}
{"input": "PersonX feels inspired because PersonX fights for a cause even though [mask].", "constraint": "[violence, attack, purpose, match, argument]", "generation": "PersonX feels inspired because PersonX fights for a cause even though violence is not the best way to achieve the purpose."}
{"input": "PersonX is seen as a good pilot because PersonX lands the plane despite the fact that [mask].", "constraint": "[park, flight, field, island, boat]", "generation": "PersonX is seen as a good pilot because PersonX lands the plane despite the fact that the park is crowded."}
{"input": "PersonX is seen as a good pilot because PersonX lands the plane despite the fact that [mask].", "constraint": "[park, flight, field, island, boat]", "generation": "PersonX is seen as a good pilot because PersonX lands the plane despite the fact that the flight is long."}
{"input": "PersonX is seen as a good pilot because PersonX lands the plane despite the fact that [mask].", "constraint": "[park, flight, field, island, boat]", "generation": "PersonX is seen as a good pilot because PersonX lands the plane despite the fact that it is person's first flight."}
{"input": "PersonX feels accomplished because PersonX lands the plane despite the fact that [mask].", "constraint": "[island, field, boat, park, flight]", "generation": "PersonX feels accomplished because PersonX lands the plane despite the fact that the park is closed."}
{"input": "PersonX feels accomplished because PersonX lands the plane despite the fact that [mask].", "constraint": "[island, field, boat, park, flight]", "generation": "PersonX feels accomplished because PersonX lands the plane despite the fact that the flight is short."}
{"input": "PersonX feels accomplished because PersonX lands the plane despite the fact that [mask].", "constraint": "[island, field, boat, park, flight]", "generation": "PersonX feels accomplished because PersonX lands the plane despite the fact that the park is in disarray."}
{"input": "PersonX feels accomplished because PersonX lands the plane despite the fact that [mask].", "constraint": "[boat, island, field, flight, park], [no]", "generation": "PersonX feels accomplished because PersonX lands the plane despite the fact that there was no flight."}
{"input": "PersonX feels accomplished because PersonX lands the plane despite the fact that [mask].", "constraint": "[boat, island, field, flight, park], [no]", "generation": "PersonX feels accomplished because PersonX lands the plane despite the fact that there is no flight."}
{"input": "PersonX feels accomplished because PersonX lands the plane despite the fact that [mask].", "constraint": "[boat, island, field, flight, park], [no]", "generation": "PersonX feels accomplished because PersonX lands the plane despite the fact that there is no field."}
{"input": "PersonX feels happy because PersonX creates a new story despite the fact that [mask].", "constraint": "[movie, episode, fiction, news, theme]", "generation": "PersonX feels happy because PersonX creates a new story despite the fact that fiction is not a new theme."}
{"input": "PersonX feels happy because PersonX creates a new story despite the fact that [mask].", "constraint": "[movie, episode, fiction, news, theme]", "generation": "PersonX feels happy because PersonX creates a new story despite the fact that theme has been used before."}
{"input": "PersonX feels happy because PersonX creates a new story despite the fact that [mask].", "constraint": "[movie, episode, fiction, news, theme]", "generation": "PersonX feels happy because PersonX creates a new story despite the fact that it is a fiction."}
{"input": "PersonX feels happy because PersonX creates a new story despite the fact that [mask].", "constraint": "[fiction, movie, theme, news, episode], [no]", "generation": "PersonX feels happy because PersonX creates a new story despite the fact that the story is not related to the news."}
{"input": "PersonX feels happy because PersonX creates a new story despite the fact that [mask].", "constraint": "[fiction, movie, theme, news, episode], [no]", "generation": "PersonX feels happy because PersonX creates a new story despite the fact that the story is not fiction."}
{"input": "PersonX feels happy because PersonX creates a new story despite the fact that [mask].", "constraint": "[fiction, movie, theme, news, episode], [no]", "generation": "PersonX feels happy because PersonX creates a new story despite the fact that it is not a news."}
{"input": "PersonX feels happy because PersonX creates a new story even though [mask].", "constraint": "[news, episode, theme, movie, fiction], [no]", "generation": "PersonX feels happy because PersonX creates a new story even though there is no news about the new episode."}
{"input": "PersonX feels happy because PersonX creates a new story even though [mask].", "constraint": "[news, episode, theme, movie, fiction], [no]", "generation": "PersonX feels happy because PersonX creates a new story even though it is not a new episode."}
{"input": "PersonX feels happy because PersonX creates a new story even though [mask].", "constraint": "[news, episode, theme, movie, fiction], [no]", "generation": "PersonX feels happy because PersonX creates a new story even though the story is not fiction."}
{"input": "PersonX is seen as talented because PersonX creates a new story and [mask].", "constraint": "[movie, fiction, theme, episode, news]", "generation": "PersonX is seen as talented because PersonX creates a new story and the theme is unique."}
{"input": "PersonX is seen as talented because PersonX creates a new story and [mask].", "constraint": "[movie, fiction, theme, episode, news]", "generation": "PersonX is seen as talented because PersonX creates a new story and it is based on a original theme."}
{"input": "PersonX is seen as talented because PersonX creates a new story and [mask].", "constraint": "[movie, fiction, theme, episode, news]", "generation": "PersonX is seen as talented because PersonX creates a new story and movie."}
{"input": "PersonX is seen as talented because PersonX creates a new story despite the fact that [mask].", "constraint": "[news, movie, fiction, theme, episode]", "generation": "PersonX is seen as talented because PersonX creates a new story despite the fact that news is not interesting."}
{"input": "PersonX is seen as talented because PersonX creates a new story despite the fact that [mask].", "constraint": "[news, movie, fiction, theme, episode]", "generation": "PersonX is seen as talented because PersonX creates a new story despite the fact that the theme has been used in many episodes before."}
{"input": "PersonX is seen as talented because PersonX creates a new story despite the fact that [mask].", "constraint": "[news, movie, fiction, theme, episode]", "generation": "PersonX is seen as talented because PersonX creates a new story despite the fact that there are no news about the movie."}
{"input": "PersonX is seen as talented because PersonX creates a new story despite the fact that [mask].", "constraint": "[theme, fiction, movie, episode, news], [no]", "generation": "PersonX is seen as talented because PersonX creates a new story despite the fact that PersonX has no experience in news writing."}
{"input": "PersonX is seen as talented because PersonX creates a new story despite the fact that [mask].", "constraint": "[theme, fiction, movie, episode, news], [no]", "generation": "PersonX is seen as talented because PersonX creates a new story despite the fact that no one suggests the theme."}
{"input": "PersonX is seen as talented because PersonX creates a new story despite the fact that [mask].", "constraint": "[theme, fiction, movie, episode, news], [no]", "generation": "PersonX is seen as talented because PersonX creates a new story despite the fact that no one gives the same theme."}
{"input": "PersonX is seen as talented because PersonX creates a new story even though [mask].", "constraint": "[movie, fiction, theme, episode, news]", "generation": "PersonX is seen as talented because PersonX creates a new story even though it is not based on any existing movie or fiction."}
{"input": "PersonX is seen as talented because PersonX creates a new story even though [mask].", "constraint": "[movie, fiction, theme, episode, news]", "generation": "PersonX is seen as talented because PersonX creates a new story even though PersonX has not watched the movie."}
{"input": "PersonX is seen as talented because PersonX creates a new story even though [mask].", "constraint": "[movie, fiction, theme, episode, news]", "generation": "PersonX is seen as talented because PersonX creates a new story even though the story is not fiction."}
{"input": "PersonX is seen as relaxed because PersonX and PersonY have some time off while [mask].", "constraint": "[day, term, year, month, minute], [no]", "generation": "PersonX is seen as relaxed because PersonX and PersonY have some time off while no school today."}
{"input": "PersonX is seen as relaxed because PersonX and PersonY have some time off while [mask].", "constraint": "[day, term, year, month, minute], [no]", "generation": "PersonX is seen as relaxed because PersonX and PersonY have some time off while day is not hectic."}
{"input": "PersonX is seen as relaxed because PersonX and PersonY have some time off while [mask].", "constraint": "[day, term, year, month, minute], [no]", "generation": "PersonX is seen as relaxed because PersonX and PersonY have some time off while it is not a school day."}
{"input": "PersonX is seen as relaxed because PersonX and PersonY have some time off despite the fact that [mask].", "constraint": "[month, day, term, year, minute]", "generation": "PersonX is seen as relaxed because PersonX and PersonY have some time off despite the fact that it is a school term."}
{"input": "PersonX is seen as relaxed because PersonX and PersonY have some time off despite the fact that [mask].", "constraint": "[month, day, term, year, minute]", "generation": "PersonX is seen as relaxed because PersonX and PersonY have some time off despite the fact that it is during term."}
{"input": "PersonX is seen as relaxed because PersonX and PersonY have some time off despite the fact that [mask].", "constraint": "[month, day, term, year, minute]", "generation": "PersonX is seen as relaxed because PersonX and PersonY have some time off despite the fact that it is a weekday."}
{"input": "PersonX is seen as relaxed because PersonX and PersonY have some time off despite the fact that [mask].", "constraint": "[year, day, minute, term, month], [no]", "generation": "PersonX is seen as relaxed because PersonX and PersonY have some time off despite the fact that there is no holiday this month."}
{"input": "PersonX is seen as relaxed because PersonX and PersonY have some time off despite the fact that [mask].", "constraint": "[year, day, minute, term, month], [no]", "generation": "PersonX is seen as relaxed because PersonX and PersonY have some time off despite the fact that no year has passed."}
{"input": "PersonX is seen as relaxed because PersonX and PersonY have some time off despite the fact that [mask].", "constraint": "[year, day, minute, term, month], [no]", "generation": "PersonX is seen as relaxed because PersonX and PersonY have some time off despite the fact that it is not the end of the term."}
{"input": "PersonX is seen as relaxed because PersonX and PersonY have some time off even though [mask].", "constraint": "[month, day, year, term, minute]", "generation": "PersonX is seen as relaxed because PersonX and PersonY have some time off even though it is mid-term."}
{"input": "PersonX is seen as relaxed because PersonX and PersonY have some time off even though [mask].", "constraint": "[month, day, year, term, minute]", "generation": "PersonX is seen as relaxed because PersonX and PersonY have some time off even though it is not a holiday."}
{"input": "PersonX is seen as relaxed because PersonX and PersonY have some time off even though [mask].", "constraint": "[month, day, year, term, minute]", "generation": "PersonX is seen as relaxed because PersonX and PersonY have some time off even though it is during the term."}
{"input": "PersonX feels free because PersonX and PersonY have some time off and [mask].", "constraint": "[month, day, term, year, minute]", "generation": "PersonX feels free because PersonX and PersonY have some time off and PersonX does not have to work for a whole day."}
{"input": "PersonX feels free because PersonX and PersonY have some time off and [mask].", "constraint": "[month, day, term, year, minute]", "generation": "PersonX feels free because PersonX and PersonY have some time off and they can spend the day as they please."}
{"input": "PersonX feels free because PersonX and PersonY have some time off and [mask].", "constraint": "[month, day, term, year, minute]", "generation": "PersonX feels free because PersonX and PersonY have some time off and they can spend months together."}
{"input": "PersonX feels free because PersonX and PersonY have some time off while [mask].", "constraint": "[term, minute, year, day, month]", "generation": "PersonX feels free because PersonX and PersonY have some time off while the term ends."}
{"input": "PersonX feels free because PersonX and PersonY have some time off while [mask].", "constraint": "[term, minute, year, day, month]", "generation": "PersonX feels free because PersonX and PersonY have some time off while school is not in term."}
{"input": "PersonX feels free because PersonX and PersonY have some time off while [mask].", "constraint": "[term, minute, year, day, month]", "generation": "PersonX feels free because PersonX and PersonY have some time off while the term is not hectic."}
{"input": "PersonX feels free because PersonX and PersonY have some time off while [mask].", "constraint": "[year, day, month, minute, term], [no]", "generation": "PersonX feels free because PersonX and PersonY have some time off while no year-end term."}
{"input": "PersonX feels free because PersonX and PersonY have some time off while [mask].", "constraint": "[year, day, month, minute, term], [no]", "generation": "PersonX feels free because PersonX and PersonY have some time off while year is not over."}
{"input": "PersonX feels free because PersonX and PersonY have some time off while [mask].", "constraint": "[year, day, month, minute, term], [no]", "generation": "PersonX feels free because PersonX and PersonY have some time off while there is no school term."}
{"input": "PersonX feels free because PersonX and PersonY have some time off despite the fact that [mask].", "constraint": "[month, term, year, day, minute], [no]", "generation": "PersonX feels free because PersonX and PersonY have some time off despite the fact that it is not person's day off."}
{"input": "PersonX feels free because PersonX and PersonY have some time off despite the fact that [mask].", "constraint": "[month, term, year, day, minute], [no]", "generation": "PersonX feels free because PersonX and PersonY have some time off despite the fact that it is not a holiday."}
{"input": "PersonX feels free because PersonX and PersonY have some time off despite the fact that [mask].", "constraint": "[month, term, year, day, minute], [no]", "generation": "PersonX feels free because PersonX and PersonY have some time off despite the fact that it is not a day off."}
{"input": "PersonX feels free because PersonX and PersonY have some time off even though [mask].", "constraint": "[month, minute, year, term, day]", "generation": "PersonX feels free because PersonX and PersonY have some time off even though it is a short term."}
{"input": "PersonX feels free because PersonX and PersonY have some time off even though [mask].", "constraint": "[month, minute, year, term, day]", "generation": "PersonX feels free because PersonX and PersonY have some time off even though it's just a day."}
{"input": "PersonX feels free because PersonX and PersonY have some time off even though [mask].", "constraint": "[month, minute, year, term, day]", "generation": "PersonX feels free because PersonX and PersonY have some time off even though it is a school term."}
{"input": "PersonX feels free because PersonX and PersonY have some time off even though [mask].", "constraint": "[year, day, minute, term, month], [no]", "generation": "PersonX feels free because PersonX and PersonY have some time off even though it is not a long term break."}
{"input": "PersonX feels free because PersonX and PersonY have some time off even though [mask].", "constraint": "[year, day, minute, term, month], [no]", "generation": "PersonX feels free because PersonX and PersonY have some time off even though it is not a holiday."}
{"input": "PersonX feels free because PersonX and PersonY have some time off even though [mask].", "constraint": "[year, day, minute, term, month], [no]", "generation": "PersonX feels free because PersonX and PersonY have some time off even though there is no long term break."}
