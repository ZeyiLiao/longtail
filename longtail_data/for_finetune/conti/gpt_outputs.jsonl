{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks while [mask].", "constraint": "[seek, request, reply, accept, answer]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks while PersonY is seeking an answer from PersonX."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks while [mask].", "constraint": "[seek, request, reply, accept, answer]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks while PersonY is seeking an answer."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks while [mask].", "constraint": "[seek, request, reply, accept, answer]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks while PersonY is seeking for an answer."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks while [mask].", "constraint": "[accept, seek, answer, request, reply], [no]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks while PersonY does not make any request."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks while [mask].", "constraint": "[accept, seek, answer, request, reply], [no]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks while PersonY does not seek for an answer."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks while [mask].", "constraint": "[accept, seek, answer, request, reply], [no]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks while PersonY does not seek for other answer."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks despite the fact that [mask].", "constraint": "[reply, answer, accept, seek, request]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks despite the fact that PersonX's reply is not what PersonY seeks."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks despite the fact that [mask].", "constraint": "[reply, answer, accept, seek, request]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks despite the fact that PersonX dislikes the request."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks despite the fact that [mask].", "constraint": "[reply, answer, accept, seek, request]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks despite the fact that PersonX disagrees with the request."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks despite the fact that [mask].", "constraint": "[answer, seek, accept, reply, request], [no]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks despite the fact that PersonX has not received any answer from PersonY."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks despite the fact that [mask].", "constraint": "[answer, seek, accept, reply, request], [no]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks despite the fact that PersonX has not got the answer yet."}
{"input": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks despite the fact that [mask].", "constraint": "[answer, seek, accept, reply, request], [no]", "generation": "PersonX is seen as obedient because PersonX agrees to do as PersonY asks despite the fact that PersonX's answer is not what PersonY seeks."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks and [mask].", "constraint": "[answer, request, accept, seek, reply]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks and reply to PersonY's request."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks and [mask].", "constraint": "[answer, request, accept, seek, reply]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks and replies to PersonY's request."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks and [mask].", "constraint": "[answer, request, accept, seek, reply]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks and replies to PersonZ's message."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks while [mask].", "constraint": "[answer, request, accept, reply, seek]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks while PersonX seeks an answer."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks while [mask].", "constraint": "[answer, request, accept, reply, seek]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks while PersonY is requesting."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks while [mask].", "constraint": "[answer, request, accept, reply, seek]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks while seeking the answer."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks while [mask].", "constraint": "[accept, answer, reply, seek, request], [no]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks while PersonY makes no request."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks while [mask].", "constraint": "[accept, answer, reply, seek, request], [no]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks while PersonY does not request anything."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks while [mask].", "constraint": "[accept, answer, reply, seek, request], [no]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks while PersonY does not reply."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks despite the fact that [mask].", "constraint": "[answer, seek, request, reply, accept]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks despite the fact that PersonY's request is not reasonable."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks despite the fact that [mask].", "constraint": "[answer, seek, request, reply, accept]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks despite the fact that PersonX does not have the answer to the request."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks despite the fact that [mask].", "constraint": "[answer, seek, request, reply, accept]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks despite the fact that PersonX does not know the answer."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks even though [mask].", "constraint": "[reply, answer, accept, request, seek], [no]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks even though PersonX does not reply the request immediately."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks even though [mask].", "constraint": "[reply, answer, accept, request, seek], [no]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks even though PersonY does not request it."}
{"input": "PersonX feels compliant because PersonX agrees to do as PersonY asks even though [mask].", "constraint": "[reply, answer, accept, request, seek], [no]", "generation": "PersonX feels compliant because PersonX agrees to do as PersonY asks even though PersonX does not reply to the request."}
{"input": "PersonX feels happy because PersonX wins the respect of his parents and [mask].", "constraint": "[trust, father, adult, success, mother]", "generation": "PersonX feels happy because PersonX wins the respect of his parents and trust of his friends."}
{"input": "PersonX feels happy because PersonX wins the respect of his parents and [mask].", "constraint": "[trust, father, adult, success, mother]", "generation": "PersonX feels happy because PersonX wins the respect of his parents and becomes a success."}
{"input": "PersonX feels happy because PersonX wins the respect of his parents and [mask].", "constraint": "[trust, father, adult, success, mother]", "generation": "PersonX feels happy because PersonX wins the respect of his parents and becomes an adult."}
{"input": "PersonX feels happy because PersonX wins the respect of his parents despite the fact that [mask].", "constraint": "[adult, success, father, trust, mother], [no]", "generation": "PersonX feels happy because PersonX wins the respect of his parents despite the fact that PersonX is not an adult yet."}
{"input": "PersonX feels happy because PersonX wins the respect of his parents despite the fact that [mask].", "constraint": "[adult, success, father, trust, mother], [no]", "generation": "PersonX feels happy because PersonX wins the respect of his parents despite the fact that his father does not trust him."}
{"input": "PersonX feels happy because PersonX wins the respect of his parents despite the fact that [mask].", "constraint": "[adult, success, father, trust, mother], [no]", "generation": "PersonX feels happy because PersonX wins the respect of his parents despite the fact that he is not an adult yet."}
{"input": "PersonX feels happy because PersonX wins the respect of his parents even though [mask].", "constraint": "[mother, father, trust, success, adult]", "generation": "PersonX feels happy because PersonX wins the respect of his parents even though PersonX is not an adult yet."}
{"input": "PersonX feels happy because PersonX wins the respect of his parents even though [mask].", "constraint": "[mother, father, trust, success, adult]", "generation": "PersonX feels happy because PersonX wins the respect of his parents even though PersonX is not success in career yet."}
{"input": "PersonX feels happy because PersonX wins the respect of his parents even though [mask].", "constraint": "[mother, father, trust, success, adult]", "generation": "PersonX feels happy because PersonX wins the respect of his parents even though he is not an adult."}
{"input": "PersonX feels happy because PersonX wins the respect of his parents even though [mask].", "constraint": "[adult, success, trust, mother, father], [no]", "generation": "PersonX feels happy because PersonX wins the respect of his parents even though PersonX is not an adult yet."}
{"input": "PersonX feels happy because PersonX wins the respect of his parents even though [mask].", "constraint": "[adult, success, trust, mother, father], [no]", "generation": "PersonX feels happy because PersonX wins the respect of his parents even though PersonX is not an adult."}
{"input": "PersonX feels happy because PersonX wins the respect of his parents even though [mask].", "constraint": "[adult, success, trust, mother, father], [no]", "generation": "PersonX feels happy because PersonX wins the respect of his parents even though he is not an adult."}
{"input": "PersonX is seen as mature because PersonX wins the respect of his parents and [mask].", "constraint": "[trust, success, father, adult, mother]", "generation": "PersonX is seen as mature because PersonX wins the respect of his parents and trust from his friends."}
{"input": "PersonX is seen as mature because PersonX wins the respect of his parents and [mask].", "constraint": "[trust, success, father, adult, mother]", "generation": "PersonX is seen as mature because PersonX wins the respect of his parents and earns their trust."}
{"input": "PersonX is seen as mature because PersonX wins the respect of his parents and [mask].", "constraint": "[trust, success, father, adult, mother]", "generation": "PersonX is seen as mature because PersonX wins the respect of his parents and becomes an adult."}
{"input": "PersonX is seen as mature because PersonX wins the respect of his parents while [mask].", "constraint": "[trust, mother, success, adult, father]", "generation": "PersonX is seen as mature because PersonX wins the respect of his parents while being an adult."}
{"input": "PersonX is seen as mature because PersonX wins the respect of his parents while [mask].", "constraint": "[trust, mother, success, adult, father]", "generation": "PersonX is seen as mature because PersonX wins the respect of his parents while maintaining a trusting relationship with them."}
{"input": "PersonX is seen as mature because PersonX wins the respect of his parents while [mask].", "constraint": "[trust, mother, success, adult, father]", "generation": "PersonX is seen as mature because PersonX wins the respect of his parents while being trust by his father."}
{"input": "PersonX is seen as mature because PersonX wins the respect of his parents despite the fact that [mask].", "constraint": "[mother, trust, success, adult, father]", "generation": "PersonX is seen as mature because PersonX wins the respect of his parents despite the fact that he is not yet an adult."}
{"input": "PersonX is seen as mature because PersonX wins the respect of his parents despite the fact that [mask].", "constraint": "[mother, trust, success, adult, father]", "generation": "PersonX is seen as mature because PersonX wins the respect of his parents despite the fact that his father doesn't trust him."}
{"input": "PersonX is seen as mature because PersonX wins the respect of his parents despite the fact that [mask].", "constraint": "[mother, trust, success, adult, father]", "generation": "PersonX is seen as mature because PersonX wins the respect of his parents despite the fact that he is not an adult yet."}
{"input": "PersonX is seen as mature because PersonX wins the respect of his parents despite the fact that [mask].", "constraint": "[trust, success, mother, adult, father], [no]", "generation": "PersonX is seen as mature because PersonX wins the respect of his parents despite the fact that he is not yet an adult."}
{"input": "PersonX is seen as mature because PersonX wins the respect of his parents despite the fact that [mask].", "constraint": "[trust, success, mother, adult, father], [no]", "generation": "PersonX is seen as mature because PersonX wins the respect of his parents despite the fact that he is not fully trusted by them."}
{"input": "PersonX is seen as mature because PersonX wins the respect of his parents despite the fact that [mask].", "constraint": "[trust, success, mother, adult, father], [no]", "generation": "PersonX is seen as mature because PersonX wins the respect of his parents despite the fact that they are not always trusting him."}
{"input": "PersonX is seen as mature because PersonX wins the respect of his parents even though [mask].", "constraint": "[success, trust, mother, adult, father]", "generation": "PersonX is seen as mature because PersonX wins the respect of his parents even though PersonX is not an adult."}
{"input": "PersonX is seen as mature because PersonX wins the respect of his parents even though [mask].", "constraint": "[success, trust, mother, adult, father]", "generation": "PersonX is seen as mature because PersonX wins the respect of his parents even though PersonX is not successful."}
{"input": "PersonX is seen as mature because PersonX wins the respect of his parents even though [mask].", "constraint": "[success, trust, mother, adult, father]", "generation": "PersonX is seen as mature because PersonX wins the respect of his parents even though PersonX is not successful in everything."}
{"input": "PersonX is seen as mature because PersonX wins the respect of his parents even though [mask].", "constraint": "[father, trust, success, adult, mother], [no]", "generation": "PersonX is seen as mature because PersonX wins the respect of his parents even though his father does not trust him at first."}
{"input": "PersonX is seen as mature because PersonX wins the respect of his parents even though [mask].", "constraint": "[father, trust, success, adult, mother], [no]", "generation": "PersonX is seen as mature because PersonX wins the respect of his parents even though he is not successful."}
{"input": "PersonX is seen as mature because PersonX wins the respect of his parents even though [mask].", "constraint": "[father, trust, success, adult, mother], [no]", "generation": "PersonX is seen as mature because PersonX wins the respect of his parents even though PersonX is not an adult yet."}
{"input": "PersonX is seen as irresponsible because PersonX accidentally causes a fire and [mask].", "constraint": "[knife, time, stroke, match, game]", "generation": "PersonX is seen as irresponsible because PersonX accidentally causes a fire and PersonX is not diligent in taking care of the match."}
{"input": "PersonX is seen as irresponsible because PersonX accidentally causes a fire and [mask].", "constraint": "[knife, time, stroke, match, game]", "generation": "PersonX is seen as irresponsible because PersonX accidentally causes a fire and PersonX is not cautious with the match."}
{"input": "PersonX is seen as irresponsible because PersonX accidentally causes a fire and [mask].", "constraint": "[knife, time, stroke, match, game]", "generation": "PersonX is seen as irresponsible because PersonX accidentally causes a fire and PersonX doesn't have time to put it out."}
{"input": "PersonX is seen as irresponsible because PersonX accidentally causes a fire and [mask].", "constraint": "[stroke, knife, game, match, time], [no]", "generation": "PersonX is seen as irresponsible because PersonX accidentally causes a fire and PersonX cannot put it out on time."}
{"input": "PersonX is seen as irresponsible because PersonX accidentally causes a fire and [mask].", "constraint": "[stroke, knife, game, match, time], [no]", "generation": "PersonX is seen as irresponsible because PersonX accidentally causes a fire and is not rescued in time."}
{"input": "PersonX is seen as irresponsible because PersonX accidentally causes a fire and [mask].", "constraint": "[stroke, knife, game, match, time], [no]", "generation": "PersonX is seen as irresponsible because PersonX accidentally causes a fire and is not able to put it out in time."}
{"input": "PersonX is seen as irresponsible because PersonX accidentally causes a fire while [mask].", "constraint": "[game, knife, match, time, stroke]", "generation": "PersonX is seen as irresponsible because PersonX accidentally causes a fire while playing with a match."}
{"input": "PersonX is seen as irresponsible because PersonX accidentally causes a fire while [mask].", "constraint": "[game, knife, match, time, stroke]", "generation": "PersonX is seen as irresponsible because PersonX accidentally causes a fire while using a knife to play a game."}
{"input": "PersonX is seen as irresponsible because PersonX accidentally causes a fire while [mask].", "constraint": "[game, knife, match, time, stroke]", "generation": "PersonX is seen as irresponsible because PersonX accidentally causes a fire while playing with matches."}
{"input": "PersonX is seen as irresponsible because PersonX accidentally causes a fire despite the fact that [mask].", "constraint": "[time, stroke, knife, match, game]", "generation": "PersonX is seen as irresponsible because PersonX accidentally causes a fire despite the fact that PersonX uses the knife with extreme care."}
{"input": "PersonX is seen as irresponsible because PersonX accidentally causes a fire despite the fact that [mask].", "constraint": "[time, stroke, knife, match, game]", "generation": "PersonX is seen as irresponsible because PersonX accidentally causes a fire despite the fact that PersonX is given a lot of time."}
{"input": "PersonX is seen as irresponsible because PersonX accidentally causes a fire despite the fact that [mask].", "constraint": "[time, stroke, knife, match, game]", "generation": "PersonX is seen as irresponsible because PersonX accidentally causes a fire despite the fact that PersonX is given time to think carefully."}
{"input": "PersonX is seen as irresponsible because PersonX accidentally causes a fire even though [mask].", "constraint": "[match, game, time, stroke, knife]", "generation": "PersonX is seen as irresponsible because PersonX accidentally causes a fire even though PersonX takes time to be careful."}
{"input": "PersonX is seen as irresponsible because PersonX accidentally causes a fire even though [mask].", "constraint": "[match, game, time, stroke, knife]", "generation": "PersonX is seen as irresponsible because PersonX accidentally causes a fire even though playing with matches."}
{"input": "PersonX is seen as irresponsible because PersonX accidentally causes a fire even though [mask].", "constraint": "[match, game, time, stroke, knife]", "generation": "PersonX is seen as irresponsible because PersonX accidentally causes a fire even though having a lot of time."}
{"input": "PersonX feels guilty because PersonX accidentally causes a fire and [mask].", "constraint": "[stroke, game, knife, time, match]", "generation": "PersonX feels guilty because PersonX accidentally causes a fire and someone gets stroke."}
{"input": "PersonX feels guilty because PersonX accidentally causes a fire and [mask].", "constraint": "[stroke, game, knife, time, match]", "generation": "PersonX feels guilty because PersonX accidentally causes a fire and destroys the game."}
{"input": "PersonX feels guilty because PersonX accidentally causes a fire and [mask].", "constraint": "[stroke, game, knife, time, match]", "generation": "PersonX feels guilty because PersonX accidentally causes a fire and PersonX cannot put it out in time."}
{"input": "PersonX feels guilty because PersonX accidentally causes a fire despite the fact that [mask].", "constraint": "[game, knife, stroke, match, time]", "generation": "PersonX feels guilty because PersonX accidentally causes a fire despite the fact that PersonX is playing with a match."}
{"input": "PersonX feels guilty because PersonX accidentally causes a fire despite the fact that [mask].", "constraint": "[game, knife, stroke, match, time]", "generation": "PersonX feels guilty because PersonX accidentally causes a fire despite the fact that PersonX was cooking at the time."}
{"input": "PersonX feels guilty because PersonX accidentally causes a fire despite the fact that [mask].", "constraint": "[game, knife, stroke, match, time]", "generation": "PersonX feels guilty because PersonX accidentally causes a fire despite the fact that PersonX is just playing with a match."}
{"input": "PersonX feels excited because PersonX has a chance to play music and [mask].", "constraint": "[artist, song, choice, sound, movie]", "generation": "PersonX feels excited because PersonX has a chance to play music and sound great."}
{"input": "PersonX feels excited because PersonX has a chance to play music and [mask].", "constraint": "[artist, song, choice, sound, movie]", "generation": "PersonX feels excited because PersonX has a chance to play music and sound like a famous artist."}
{"input": "PersonX feels excited because PersonX has a chance to play music and [mask].", "constraint": "[artist, song, choice, sound, movie]", "generation": "PersonX feels excited because PersonX has a chance to play music and be an artist."}
{"input": "PersonX feels excited because PersonX has a chance to play music while [mask].", "constraint": "[song, sound, choice, movie, artist]", "generation": "PersonX feels excited because PersonX has a chance to play music while choosing the song."}
{"input": "PersonX feels excited because PersonX has a chance to play music while [mask].", "constraint": "[song, sound, choice, movie, artist]", "generation": "PersonX feels excited because PersonX has a chance to play music while feeling like an artist."}
{"input": "PersonX feels excited because PersonX has a chance to play music while [mask].", "constraint": "[song, sound, choice, movie, artist]", "generation": "PersonX feels excited because PersonX has a chance to play music while being the artist of the song."}
{"input": "PersonX feels excited because PersonX has a chance to play music despite the fact that [mask].", "constraint": "[choice, sound, song, artist, movie]", "generation": "PersonX feels excited because PersonX has a chance to play music despite the fact that PersonX is not the first choice."}
{"input": "PersonX feels excited because PersonX has a chance to play music despite the fact that [mask].", "constraint": "[choice, sound, song, artist, movie]", "generation": "PersonX feels excited because PersonX has a chance to play music despite the fact that the sound quality is not the best."}
{"input": "PersonX feels excited because PersonX has a chance to play music despite the fact that [mask].", "constraint": "[choice, sound, song, artist, movie]", "generation": "PersonX feels excited because PersonX has a chance to play music despite the fact that the song is not the artist's original composition."}
{"input": "PersonX feels excited because PersonX has a chance to play music despite the fact that [mask].", "constraint": "[song, artist, sound, movie, choice], [no]", "generation": "PersonX feels excited because PersonX has a chance to play music despite the fact that there is no specific song or artist."}
{"input": "PersonX feels excited because PersonX has a chance to play music despite the fact that [mask].", "constraint": "[song, artist, sound, movie, choice], [no]", "generation": "PersonX feels excited because PersonX has a chance to play music despite the fact that the sound is not good."}
{"input": "PersonX feels excited because PersonX has a chance to play music despite the fact that [mask].", "constraint": "[song, artist, sound, movie, choice], [no]", "generation": "PersonX feels excited because PersonX has a chance to play music despite the fact that there is no sound."}
{"input": "PersonX feels excited because PersonX has a chance to play music even though [mask].", "constraint": "[sound, movie, song, choice, artist]", "generation": "PersonX feels excited because PersonX has a chance to play music even though the sound is not good."}
{"input": "PersonX feels excited because PersonX has a chance to play music even though [mask].", "constraint": "[sound, movie, song, choice, artist]", "generation": "PersonX feels excited because PersonX has a chance to play music even though the sound is not as good as the artist's."}
{"input": "PersonX feels excited because PersonX has a chance to play music even though [mask].", "constraint": "[sound, movie, song, choice, artist]", "generation": "PersonX feels excited because PersonX has a chance to play music even though the artist is not famous."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music and [mask].", "constraint": "[artist, movie, song, choice, sound]", "generation": "PersonX is seen as talented because PersonX has a chance to play music and creates a new sound."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music and [mask].", "constraint": "[artist, movie, song, choice, sound]", "generation": "PersonX is seen as talented because PersonX has a chance to play music and PersonX chooses the song."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music and [mask].", "constraint": "[artist, movie, song, choice, sound]", "generation": "PersonX is seen as talented because PersonX has a chance to play music and sing a song."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music while [mask].", "constraint": "[choice, movie, artist, song, sound]", "generation": "PersonX is seen as talented because PersonX has a chance to play music while watching a movie."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music while [mask].", "constraint": "[choice, movie, artist, song, sound]", "generation": "PersonX is seen as talented because PersonX has a chance to play music while being an artist."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music while [mask].", "constraint": "[choice, movie, artist, song, sound]", "generation": "PersonX is seen as talented because PersonX has a chance to play music while being the artist of the song."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music despite the fact that [mask].", "constraint": "[artist, sound, song, movie, choice]", "generation": "PersonX is seen as talented because PersonX has a chance to play music despite the fact that PersonX is not the first choice."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music despite the fact that [mask].", "constraint": "[artist, sound, song, movie, choice]", "generation": "PersonX is seen as talented because PersonX has a chance to play music despite the fact that PersonX is not the first choice of artist."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music despite the fact that [mask].", "constraint": "[artist, sound, song, movie, choice]", "generation": "PersonX is seen as talented because PersonX has a chance to play music despite the fact that PersonX is not the first choice of the artist."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music even though [mask].", "constraint": "[artist, choice, sound, movie, song]", "generation": "PersonX is seen as talented because PersonX has a chance to play music even though being an artist is not PersonX's first choice."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music even though [mask].", "constraint": "[artist, choice, sound, movie, song]", "generation": "PersonX is seen as talented because PersonX has a chance to play music even though the artist is not good at the choice of sound."}
{"input": "PersonX is seen as talented because PersonX has a chance to play music even though [mask].", "constraint": "[artist, choice, sound, movie, song]", "generation": "PersonX is seen as talented because PersonX has a chance to play music even though PersonX is not the first choice of the artist."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY and [mask].", "constraint": "[remember, improve, training, program, school]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY and improve herself."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY and [mask].", "constraint": "[remember, improve, training, program, school]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY and PersonX improving everyday."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY and [mask].", "constraint": "[remember, improve, training, program, school]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY and improves day by day."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY and [mask].", "constraint": "[program, improve, remember, school, training], [no]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY and PersonX did not program anything."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY and [mask].", "constraint": "[program, improve, remember, school, training], [no]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY and did not need extra training."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY and [mask].", "constraint": "[program, improve, remember, school, training], [no]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY and PersonX does not need to remember anything."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY while [mask].", "constraint": "[program, improve, remember, school, training]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY while improving their relationship."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY while [mask].", "constraint": "[program, improve, remember, school, training]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY while improving communication skills."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY while [mask].", "constraint": "[program, improve, remember, school, training]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY while improving her social skills."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY despite the fact that [mask].", "constraint": "[program, training, school, remember, improve]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY despite the fact that he is not in the same program."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY despite the fact that [mask].", "constraint": "[program, training, school, remember, improve]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY despite the fact that PersonX cannot remember the program from the training at school."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY despite the fact that [mask].", "constraint": "[program, training, school, remember, improve]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY despite the fact that PersonX cannot remember what PersonY said."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY despite the fact that [mask].", "constraint": "[improve, remember, school, training, program], [no]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY despite the fact that PersonX and PersonY are not in the same school program."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY despite the fact that [mask].", "constraint": "[improve, remember, school, training, program], [no]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY despite the fact that they have no common improve to remember."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY despite the fact that [mask].", "constraint": "[improve, remember, school, training, program], [no]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY despite the fact that they have no improvement in their relationship."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY even though [mask].", "constraint": "[program, training, improve, school, remember]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY even though PersonX cannot remember the program perfectly."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY even though [mask].", "constraint": "[program, training, improve, school, remember]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY even though PersonX cannot remember the program."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY even though [mask].", "constraint": "[program, training, improve, school, remember]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY even though PersonX cannot remember what PersonY said."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY even though [mask].", "constraint": "[improve, school, remember, program, training], [no]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY even though the training program is not easy to remember."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY even though [mask].", "constraint": "[improve, school, remember, program, training], [no]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY even though PersonX cannot improve at school."}
{"input": "PersonX feels confident because PersonX learns to get along with PersonY even though [mask].", "constraint": "[improve, school, remember, program, training], [no]", "generation": "PersonX feels confident because PersonX learns to get along with PersonY even though the latter does not improve."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY and [mask].", "constraint": "[program, improve, school, training, remember]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY and remembers the good times they had."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY and [mask].", "constraint": "[program, improve, school, training, remember]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY and remember the good times."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY and [mask].", "constraint": "[program, improve, school, training, remember]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY and remembers PersonY's birthday."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY while [mask].", "constraint": "[school, program, remember, improve, training]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY while in a training program."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY while [mask].", "constraint": "[school, program, remember, improve, training]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY while training in the program."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY while [mask].", "constraint": "[school, program, remember, improve, training]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY while improving his social skills."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY while [mask].", "constraint": "[training, program, remember, improve, school], [no]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY while there is no program to follow."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY while [mask].", "constraint": "[training, program, remember, improve, school], [no]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY while PersonX does not remember the training program."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY while [mask].", "constraint": "[training, program, remember, improve, school], [no]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY while not in a training program."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY despite the fact that [mask].", "constraint": "[training, remember, school, program, improve]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY despite the fact that PersonX has to remember a lot of things for the training program."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY despite the fact that [mask].", "constraint": "[training, remember, school, program, improve]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY despite the fact that they have different training programs."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY despite the fact that [mask].", "constraint": "[training, remember, school, program, improve]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY despite the fact that they have different improvement goals."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY despite the fact that [mask].", "constraint": "[remember, program, training, improve, school], [no]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY despite the fact that PersonX cannot remember PersonY's program."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY despite the fact that [mask].", "constraint": "[remember, program, training, improve, school], [no]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY despite the fact that PersonX cannot remember what PersonY said."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY despite the fact that [mask].", "constraint": "[remember, program, training, improve, school], [no]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY despite the fact that PersonX cannot remember what he learned in the training program."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY even though [mask].", "constraint": "[school, improve, program, remember, training]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY even though PersonX does not remember what PersonY said in school."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY even though [mask].", "constraint": "[school, improve, program, remember, training]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY even though PersonX has to remember a lot of things in school."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY even though [mask].", "constraint": "[school, improve, program, remember, training]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY even though PersonX and PersonY are in different training programs."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY even though [mask].", "constraint": "[improve, program, school, training, remember], [no]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY even though PersonX does not improve."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY even though [mask].", "constraint": "[improve, program, school, training, remember], [no]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY even though there is no improvement."}
{"input": "PersonX is seen as a good friend because PersonX learns to get along with PersonY even though [mask].", "constraint": "[improve, program, school, training, remember], [no]", "generation": "PersonX is seen as a good friend because PersonX learns to get along with PersonY even though PersonX does not improve much."}
{"input": "PersonX is seen as generous because PersonX cares for PersonY's relatives and [mask].", "constraint": "[time, love, support, repair, related]", "generation": "PersonX is seen as generous because PersonX cares for PersonY's relatives and provides them with emotional support."}
{"input": "PersonX is seen as generous because PersonX cares for PersonY's relatives and [mask].", "constraint": "[time, love, support, repair, related]", "generation": "PersonX is seen as generous because PersonX cares for PersonY's relatives and provides them with support and love."}
{"input": "PersonX is seen as generous because PersonX cares for PersonY's relatives and [mask].", "constraint": "[time, love, support, repair, related]", "generation": "PersonX is seen as generous because PersonX cares for PersonY's relatives and provides support for them."}
{"input": "PersonX is seen as generous because PersonX cares for PersonY's relatives while [mask].", "constraint": "[love, time, related, repair, support], [no]", "generation": "PersonX is seen as generous because PersonX cares for PersonY's relatives while they are not related."}
{"input": "PersonX is seen as generous because PersonX cares for PersonY's relatives while [mask].", "constraint": "[love, time, related, repair, support], [no]", "generation": "PersonX is seen as generous because PersonX cares for PersonY's relatives while PersonY cannot repair the house by himself."}
{"input": "PersonX is seen as generous because PersonX cares for PersonY's relatives while [mask].", "constraint": "[love, time, related, repair, support], [no]", "generation": "PersonX is seen as generous because PersonX cares for PersonY's relatives while PersonY is not related to them."}
{"input": "PersonX feels protective because PersonX cares for PersonY's relatives and [mask].", "constraint": "[time, support, related, repair, love]", "generation": "PersonX feels protective because PersonX cares for PersonY's relatives and they are not related by blood."}
{"input": "PersonX feels protective because PersonX cares for PersonY's relatives and [mask].", "constraint": "[time, support, related, repair, love]", "generation": "PersonX feels protective because PersonX cares for PersonY's relatives and provides support to them."}
{"input": "PersonX feels protective because PersonX cares for PersonY's relatives and [mask].", "constraint": "[time, support, related, repair, love]", "generation": "PersonX feels protective because PersonX cares for PersonY's relatives and wants to support them all the time."}
{"input": "PersonX feels protective because PersonX cares for PersonY's relatives while [mask].", "constraint": "[love, support, related, repair, time], [no]", "generation": "PersonX feels protective because PersonX cares for PersonY's relatives while PersonX is not related to them."}
{"input": "PersonX feels protective because PersonX cares for PersonY's relatives while [mask].", "constraint": "[love, support, related, repair, time], [no]", "generation": "PersonX feels protective because PersonX cares for PersonY's relatives while they are not related."}
{"input": "PersonX feels protective because PersonX cares for PersonY's relatives while [mask].", "constraint": "[love, support, related, repair, time], [no]", "generation": "PersonX feels protective because PersonX cares for PersonY's relatives while PersonY is not related to them."}
{"input": "PersonX feels protective because PersonX cares for PersonY's relatives despite the fact that [mask].", "constraint": "[support, repair, time, related, love], [no]", "generation": "PersonX feels protective because PersonX cares for PersonY's relatives despite the fact that they are not related by blood, so PersonX feels love."}
{"input": "PersonX feels protective because PersonX cares for PersonY's relatives despite the fact that [mask].", "constraint": "[support, repair, time, related, love], [no]", "generation": "PersonX feels protective because PersonX cares for PersonY's relatives despite the fact that they are not related by blood, so PersonX feels protective."}
{"input": "PersonX feels protective because PersonX cares for PersonY's relatives despite the fact that [mask].", "constraint": "[support, repair, time, related, love], [no]", "generation": "PersonX feels protective because PersonX cares for PersonY's relatives despite the fact that they are not related by blood, so PersonX feels like a mother."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course and [mask].", "constraint": "[school, learning, college, graduate, education]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course and is getting an education."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course and [mask].", "constraint": "[school, learning, college, graduate, education]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course and is getting education."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course and [mask].", "constraint": "[school, learning, college, graduate, education]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course and is motivated for education."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course while [mask].", "constraint": "[graduate, learning, education, college, school]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course while receiving higher education."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course while [mask].", "constraint": "[graduate, learning, education, college, school]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course while getting an education."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course while [mask].", "constraint": "[graduate, learning, education, college, school]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course while learning new things."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course despite the fact that [mask].", "constraint": "[education, learning, school, graduate, college]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course despite the fact that PersonX is not getting any formal education."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course despite the fact that [mask].", "constraint": "[education, learning, school, graduate, college]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course despite the fact that PersonX has not gone to college."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course despite the fact that [mask].", "constraint": "[education, learning, school, graduate, college]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course despite the fact that PersonX has not graduated from college yet."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course despite the fact that [mask].", "constraint": "[graduate, learning, school, education, college], [no]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course despite the fact that PersonX is not in college."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course despite the fact that [mask].", "constraint": "[graduate, learning, school, education, college], [no]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course despite the fact that PersonX has not yet graduated from college."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course despite the fact that [mask].", "constraint": "[graduate, learning, school, education, college], [no]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course despite the fact that PersonX is not a graduate of the school."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course even though [mask].", "constraint": "[school, learning, education, college, graduate]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course even though PersonX is not yet in college."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course even though [mask].", "constraint": "[school, learning, education, college, graduate]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course even though PersonX cannot graduate from the college."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course even though [mask].", "constraint": "[school, learning, education, college, graduate]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course even though PersonX is not in an educational institution."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course even though [mask].", "constraint": "[education, school, learning, graduate, college], [no]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course even though there is no obvious education benefit."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course even though [mask].", "constraint": "[education, school, learning, graduate, college], [no]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course even though PersonX has no education."}
{"input": "PersonX feels motivated because PersonX is a student in PersonY's course even though [mask].", "constraint": "[education, school, learning, graduate, college], [no]", "generation": "PersonX feels motivated because PersonX is a student in PersonY's course even though the education is not free."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course and [mask].", "constraint": "[education, college, learning, school, graduate]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course and takes education seriously."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course and [mask].", "constraint": "[education, college, learning, school, graduate]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course and PersonX is getting an education."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course and [mask].", "constraint": "[education, college, learning, school, graduate]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course and takes graduate level course."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course while [mask].", "constraint": "[learning, college, graduate, education, school]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course while getting a higher education."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course while [mask].", "constraint": "[learning, college, graduate, education, school]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course while getting an education."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course while [mask].", "constraint": "[learning, college, graduate, education, school]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course while learning in a good school."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course despite the fact that [mask].", "constraint": "[school, learning, education, graduate, college]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course despite the fact that PersonX has not been to school for a long time."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course despite the fact that [mask].", "constraint": "[school, learning, education, graduate, college]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course despite the fact that PersonX is not in school."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course despite the fact that [mask].", "constraint": "[school, learning, education, graduate, college]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course despite the fact that PersonX has not yet gone to college."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course despite the fact that [mask].", "constraint": "[school, graduate, learning, college, education], [no]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course despite the fact that PersonX has not graduated from college."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course despite the fact that [mask].", "constraint": "[school, graduate, learning, college, education], [no]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course despite the fact that PersonX is not learning anything from the course."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course despite the fact that [mask].", "constraint": "[school, graduate, learning, college, education], [no]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course despite the fact that PersonX has not been to college."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course even though [mask].", "constraint": "[college, education, learning, graduate, school]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course even though PersonX didn't go to college for higher education."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course even though [mask].", "constraint": "[college, education, learning, graduate, school]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course even though PersonX does not graduate from college."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course even though [mask].", "constraint": "[college, education, learning, graduate, school]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course even though PersonX didn't go to college."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course even though [mask].", "constraint": "[education, learning, school, graduate, college], [no]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course even though PersonX has no education."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course even though [mask].", "constraint": "[education, learning, school, graduate, college], [no]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course even though PersonX has no college degree."}
{"input": "PersonX is seen as intelligent because PersonX is a student in PersonY's course even though [mask].", "constraint": "[education, learning, school, graduate, college], [no]", "generation": "PersonX is seen as intelligent because PersonX is a student in PersonY's course even though PersonX is not in college."}
{"input": "PersonX is seen as popular because PersonX is great at making friends and [mask].", "constraint": "[favorite, enemy, girl, love, brother]", "generation": "PersonX is seen as popular because PersonX is great at making friends and PersonX is a girl's favorite."}
{"input": "PersonX is seen as popular because PersonX is great at making friends and [mask].", "constraint": "[favorite, enemy, girl, love, brother]", "generation": "PersonX is seen as popular because PersonX is great at making friends and loves everyone regardless of their differences."}
{"input": "PersonX is seen as popular because PersonX is great at making friends and [mask].", "constraint": "[favorite, enemy, girl, love, brother]", "generation": "PersonX is seen as popular because PersonX is great at making friends and loves spending time with them."}
{"input": "PersonX is seen as popular because PersonX is great at making friends while [mask].", "constraint": "[love, girl, enemy, favorite, brother]", "generation": "PersonX is seen as popular because PersonX is great at making friends while PersonX loves his brother."}
{"input": "PersonX is seen as popular because PersonX is great at making friends while [mask].", "constraint": "[love, girl, enemy, favorite, brother]", "generation": "PersonX is seen as popular because PersonX is great at making friends while hanging out with the favorite person."}
{"input": "PersonX is seen as popular because PersonX is great at making friends while [mask].", "constraint": "[love, girl, enemy, favorite, brother]", "generation": "PersonX is seen as popular because PersonX is great at making friends while spending time with her favorite people."}
{"input": "PersonX is seen as popular because PersonX is great at making friends despite the fact that [mask].", "constraint": "[brother, enemy, girl, love, favorite]", "generation": "PersonX is seen as popular because PersonX is great at making friends despite the fact that PersonX has no girlfriend."}
{"input": "PersonX is seen as popular because PersonX is great at making friends despite the fact that [mask].", "constraint": "[brother, enemy, girl, love, favorite]", "generation": "PersonX is seen as popular because PersonX is great at making friends despite the fact that PersonX has no favorite thing."}
{"input": "PersonX is seen as popular because PersonX is great at making friends despite the fact that [mask].", "constraint": "[brother, enemy, girl, love, favorite]", "generation": "PersonX is seen as popular because PersonX is great at making friends despite the fact that she does not have a girlfriend."}
{"input": "PersonX is seen as popular because PersonX is great at making friends even though [mask].", "constraint": "[favorite, girl, brother, enemy, love]", "generation": "PersonX is seen as popular because PersonX is great at making friends even though PersonX has no favorite girl."}
{"input": "PersonX is seen as popular because PersonX is great at making friends even though [mask].", "constraint": "[favorite, girl, brother, enemy, love]", "generation": "PersonX is seen as popular because PersonX is great at making friends even though PersonX's favorite girl is his enemy."}
{"input": "PersonX is seen as popular because PersonX is great at making friends even though [mask].", "constraint": "[favorite, girl, brother, enemy, love]", "generation": "PersonX is seen as popular because PersonX is great at making friends even though most of them are just her favorite people."}
{"input": "PersonX is seen as popular because PersonX is great at making friends even though [mask].", "constraint": "[girl, brother, favorite, love, enemy], [no]", "generation": "PersonX is seen as popular because PersonX is great at making friends even though PersonX has no girlfriend."}
{"input": "PersonX is seen as popular because PersonX is great at making friends even though [mask].", "constraint": "[girl, brother, favorite, love, enemy], [no]", "generation": "PersonX is seen as popular because PersonX is great at making friends even though PersonX does not have a girlfriend."}
{"input": "PersonX is seen as popular because PersonX is great at making friends even though [mask].", "constraint": "[girl, brother, favorite, love, enemy], [no]", "generation": "PersonX is seen as popular because PersonX is great at making friends even though she is not the favorite person in the group."}
{"input": "PersonX feels excited because PersonX is great at making friends and [mask].", "constraint": "[favorite, love, girl, enemy, brother]", "generation": "PersonX feels excited because PersonX is great at making friends and loves spending time with her friends."}
{"input": "PersonX feels excited because PersonX is great at making friends and [mask].", "constraint": "[favorite, love, girl, enemy, brother]", "generation": "PersonX feels excited because PersonX is great at making friends and loves spending time with her favorite people."}
{"input": "PersonX feels excited because PersonX is great at making friends and [mask].", "constraint": "[favorite, love, girl, enemy, brother]", "generation": "PersonX feels excited because PersonX is great at making friends and loves spending time with them."}
{"input": "PersonX feels excited because PersonX is great at making friends while [mask].", "constraint": "[love, enemy, girl, brother, favorite]", "generation": "PersonX feels excited because PersonX is great at making friends while interacting with her favorite people."}
{"input": "PersonX feels excited because PersonX is great at making friends while [mask].", "constraint": "[love, enemy, girl, brother, favorite]", "generation": "PersonX feels excited because PersonX is great at making friends while PersonX is a girl."}
{"input": "PersonX feels excited because PersonX is great at making friends while [mask].", "constraint": "[love, enemy, girl, brother, favorite]", "generation": "PersonX feels excited because PersonX is great at making friends while enemy is out of sight."}
{"input": "PersonX feels excited because PersonX is great at making friends while [mask].", "constraint": "[love, favorite, girl, enemy, brother], [no]", "generation": "PersonX feels excited because PersonX is great at making friends while PersonX has no enemy."}
{"input": "PersonX feels excited because PersonX is great at making friends while [mask].", "constraint": "[love, favorite, girl, enemy, brother], [no]", "generation": "PersonX feels excited because PersonX is great at making friends while PersonX has no girlfriend."}
{"input": "PersonX feels excited because PersonX is great at making friends while [mask].", "constraint": "[love, favorite, girl, enemy, brother], [no]", "generation": "PersonX feels excited because PersonX is great at making friends while PersonX has no favorite girl."}
{"input": "PersonX feels excited because PersonX is great at making friends despite the fact that [mask].", "constraint": "[enemy, girl, favorite, brother, love]", "generation": "PersonX feels excited because PersonX is great at making friends despite the fact that PersonX's favorite love is her brother."}
{"input": "PersonX feels excited because PersonX is great at making friends despite the fact that [mask].", "constraint": "[enemy, girl, favorite, brother, love]", "generation": "PersonX feels excited because PersonX is great at making friends despite the fact that PersonX has no girlfriend."}
{"input": "PersonX feels excited because PersonX is great at making friends despite the fact that [mask].", "constraint": "[enemy, girl, favorite, brother, love]", "generation": "PersonX feels excited because PersonX is great at making friends despite the fact that she is not the favorite girl."}
{"input": "PersonX feels excited because PersonX is great at making friends even though [mask].", "constraint": "[brother, girl, love, favorite, enemy]", "generation": "PersonX feels excited because PersonX is great at making friends even though PersonX is not very close to his brother."}
{"input": "PersonX feels excited because PersonX is great at making friends even though [mask].", "constraint": "[brother, girl, love, favorite, enemy]", "generation": "PersonX feels excited because PersonX is great at making friends even though PersonX's favorite person is his/her enemy."}
{"input": "PersonX feels excited because PersonX is great at making friends even though [mask].", "constraint": "[brother, girl, love, favorite, enemy]", "generation": "PersonX feels excited because PersonX is great at making friends even though PersonX's favorite enemy is around."}
{"input": "PersonX feels excited because PersonX is great at making friends even though [mask].", "constraint": "[enemy, love, favorite, girl, brother], [no]", "generation": "PersonX feels excited because PersonX is great at making friends even though she has no favorite."}
{"input": "PersonX feels excited because PersonX is great at making friends even though [mask].", "constraint": "[enemy, love, favorite, girl, brother], [no]", "generation": "PersonX feels excited because PersonX is great at making friends even though PersonX has no girlfriend."}
{"input": "PersonX feels excited because PersonX is great at making friends even though [mask].", "constraint": "[enemy, love, favorite, girl, brother], [no]", "generation": "PersonX feels excited because PersonX is great at making friends even though PersonX has no favorite girl."}
{"input": "PersonX is seen as brave because PersonX fights for a cause and [mask].", "constraint": "[attack, violence, purpose, match, argument]", "generation": "PersonX is seen as brave because PersonX fights for a cause and never backs down in an argument."}
{"input": "PersonX is seen as brave because PersonX fights for a cause and [mask].", "constraint": "[attack, violence, purpose, match, argument]", "generation": "PersonX is seen as brave because PersonX fights for a cause and never loses an argument."}
{"input": "PersonX is seen as brave because PersonX fights for a cause and [mask].", "constraint": "[attack, violence, purpose, match, argument]", "generation": "PersonX is seen as brave because PersonX fights for a cause and does not fear the attack."}
{"input": "PersonX is seen as brave because PersonX fights for a cause and [mask].", "constraint": "[violence, purpose, argument, match, attack], [no]", "generation": "PersonX is seen as brave because PersonX fights for a cause and does not shy away from violence."}
{"input": "PersonX is seen as brave because PersonX fights for a cause and [mask].", "constraint": "[violence, purpose, argument, match, attack], [no]", "generation": "PersonX is seen as brave because PersonX fights for a cause and does not use violence."}
{"input": "PersonX is seen as brave because PersonX fights for a cause and [mask].", "constraint": "[violence, purpose, argument, match, attack], [no]", "generation": "PersonX is seen as brave because PersonX fights for a cause and does not use violence, so PersonX feels confident."}
{"input": "PersonX is seen as brave because PersonX fights for a cause while [mask].", "constraint": "[match, purpose, violence, attack, argument]", "generation": "PersonX is seen as brave because PersonX fights for a cause while being attacked."}
{"input": "PersonX is seen as brave because PersonX fights for a cause while [mask].", "constraint": "[match, purpose, violence, attack, argument]", "generation": "PersonX is seen as brave because PersonX fights for a cause while knowing the purpose of violence."}
{"input": "PersonX is seen as brave because PersonX fights for a cause while [mask].", "constraint": "[match, purpose, violence, attack, argument]", "generation": "PersonX is seen as brave because PersonX fights for a cause while being faced with violence."}
{"input": "PersonX is seen as brave because PersonX fights for a cause despite the fact that [mask].", "constraint": "[purpose, argument, violence, match, attack]", "generation": "PersonX is seen as brave because PersonX fights for a cause despite the fact that the purpose is not to engage in violence."}
{"input": "PersonX is seen as brave because PersonX fights for a cause despite the fact that [mask].", "constraint": "[purpose, argument, violence, match, attack]", "generation": "PersonX is seen as brave because PersonX fights for a cause despite the fact that there is violence."}
{"input": "PersonX is seen as brave because PersonX fights for a cause despite the fact that [mask].", "constraint": "[purpose, argument, violence, match, attack]", "generation": "PersonX is seen as brave because PersonX fights for a cause despite the fact that there is a chance of violence."}
{"input": "PersonX is seen as brave because PersonX fights for a cause even though [mask].", "constraint": "[argument, purpose, match, attack, violence]", "generation": "PersonX is seen as brave because PersonX fights for a cause even though it might cause violence."}
{"input": "PersonX is seen as brave because PersonX fights for a cause even though [mask].", "constraint": "[argument, purpose, match, attack, violence]", "generation": "PersonX is seen as brave because PersonX fights for a cause even though there is a risk of violence."}
{"input": "PersonX is seen as brave because PersonX fights for a cause even though [mask].", "constraint": "[argument, purpose, match, attack, violence]", "generation": "PersonX is seen as brave because PersonX fights for a cause even though it might lead to violence."}
{"input": "PersonX feels inspired because PersonX fights for a cause despite the fact that [mask].", "constraint": "[violence, match, argument, purpose, attack]", "generation": "PersonX feels inspired because PersonX fights for a cause despite the fact that there might be violence."}
{"input": "PersonX feels inspired because PersonX fights for a cause despite the fact that [mask].", "constraint": "[violence, match, argument, purpose, attack]", "generation": "PersonX feels inspired because PersonX fights for a cause despite the fact that violence is not the only means to achieve the purpose."}
{"input": "PersonX feels inspired because PersonX fights for a cause despite the fact that [mask].", "constraint": "[violence, match, argument, purpose, attack]", "generation": "PersonX feels inspired because PersonX fights for a cause despite the fact that there is violence."}
{"input": "PersonX feels inspired because PersonX fights for a cause even though [mask].", "constraint": "[argument, attack, match, violence, purpose]", "generation": "PersonX feels inspired because PersonX fights for a cause even though it might lead to violence."}
{"input": "PersonX feels inspired because PersonX fights for a cause even though [mask].", "constraint": "[argument, attack, match, violence, purpose]", "generation": "PersonX feels inspired because PersonX fights for a cause even though there are arguments and attacks."}
{"input": "PersonX feels inspired because PersonX fights for a cause even though [mask].", "constraint": "[argument, attack, match, violence, purpose]", "generation": "PersonX feels inspired because PersonX fights for a cause even though there are arguments and violence."}
{"input": "PersonX is seen as a good pilot because PersonX lands the plane despite the fact that [mask].", "constraint": "[boat, field, island, park, flight]", "generation": "PersonX is seen as a good pilot because PersonX lands the plane despite the fact that the flight was bumpy."}
{"input": "PersonX is seen as a good pilot because PersonX lands the plane despite the fact that [mask].", "constraint": "[boat, field, island, park, flight]", "generation": "PersonX is seen as a good pilot because PersonX lands the plane despite the fact that there is no flight."}
{"input": "PersonX is seen as a good pilot because PersonX lands the plane despite the fact that [mask].", "constraint": "[boat, field, island, park, flight]", "generation": "PersonX is seen as a good pilot because PersonX lands the plane despite the fact that it is his first flight."}
{"input": "PersonX is seen as a good pilot because PersonX lands the plane despite the fact that [mask].", "constraint": "[island, field, boat, flight, park], [no]", "generation": "PersonX is seen as a good pilot because PersonX lands the plane despite the fact that there is no field to land."}
{"input": "PersonX is seen as a good pilot because PersonX lands the plane despite the fact that [mask].", "constraint": "[island, field, boat, flight, park], [no]", "generation": "PersonX is seen as a good pilot because PersonX lands the plane despite the fact that there is no island in the flight path."}
{"input": "PersonX is seen as a good pilot because PersonX lands the plane despite the fact that [mask].", "constraint": "[island, field, boat, flight, park], [no]", "generation": "PersonX is seen as a good pilot because PersonX lands the plane despite the fact that there is no island in sight."}
{"input": "PersonX is seen as a good pilot because PersonX lands the plane even though [mask].", "constraint": "[island, park, flight, field, boat]", "generation": "PersonX is seen as a good pilot because PersonX lands the plane even though it is a small island."}
{"input": "PersonX is seen as a good pilot because PersonX lands the plane even though [mask].", "constraint": "[island, park, flight, field, boat]", "generation": "PersonX is seen as a good pilot because PersonX lands the plane even though it is a long flight."}
{"input": "PersonX is seen as a good pilot because PersonX lands the plane even though [mask].", "constraint": "[island, park, flight, field, boat]", "generation": "PersonX is seen as a good pilot because PersonX lands the plane even though it is a bumpy flight."}
{"input": "PersonX feels accomplished because PersonX lands the plane and [mask].", "constraint": "[island, park, flight, boat, field]", "generation": "PersonX feels accomplished because PersonX lands the plane and no one is on the island."}
{"input": "PersonX feels accomplished because PersonX lands the plane and [mask].", "constraint": "[island, park, flight, boat, field]", "generation": "PersonX feels accomplished because PersonX lands the plane and visits the island."}
{"input": "PersonX feels accomplished because PersonX lands the plane and [mask].", "constraint": "[island, park, flight, boat, field]", "generation": "PersonX feels accomplished because PersonX lands the plane and does not find the island."}
{"input": "PersonX feels happy because PersonX creates a new story and [mask].", "constraint": "[episode, movie, news, fiction, theme]", "generation": "PersonX feels happy because PersonX creates a new story and it is fiction."}
{"input": "PersonX feels happy because PersonX creates a new story and [mask].", "constraint": "[episode, movie, news, fiction, theme]", "generation": "PersonX feels happy because PersonX creates a new story and the theme is about love."}
{"input": "PersonX feels happy because PersonX creates a new story and [mask].", "constraint": "[episode, movie, news, fiction, theme]", "generation": "PersonX feels happy because PersonX creates a new story and selects the theme."}
{"input": "PersonX feels happy because PersonX creates a new story despite the fact that [mask].", "constraint": "[movie, news, fiction, theme, episode]", "generation": "PersonX feels happy because PersonX creates a new story despite the fact that the theme is not original."}
{"input": "PersonX feels happy because PersonX creates a new story despite the fact that [mask].", "constraint": "[movie, news, fiction, theme, episode]", "generation": "PersonX feels happy because PersonX creates a new story despite the fact that theme has been used many times in other stories."}
{"input": "PersonX feels happy because PersonX creates a new story despite the fact that [mask].", "constraint": "[movie, news, fiction, theme, episode]", "generation": "PersonX feels happy because PersonX creates a new story despite the fact that there is no movie."}
{"input": "PersonX feels happy because PersonX creates a new story even though [mask].", "constraint": "[fiction, movie, episode, theme, news]", "generation": "PersonX feels happy because PersonX creates a new story even though it is just a fiction."}
{"input": "PersonX feels happy because PersonX creates a new story even though [mask].", "constraint": "[fiction, movie, episode, theme, news]", "generation": "PersonX feels happy because PersonX creates a new story even though the theme is not original."}
{"input": "PersonX feels happy because PersonX creates a new story even though [mask].", "constraint": "[fiction, movie, episode, theme, news]", "generation": "PersonX feels happy because PersonX creates a new story even though it is not fiction."}
{"input": "PersonX feels happy because PersonX creates a new story even though [mask].", "constraint": "[movie, news, episode, fiction, theme], [no]", "generation": "PersonX feels happy because PersonX creates a new story even though it is not a new episode."}
{"input": "PersonX feels happy because PersonX creates a new story even though [mask].", "constraint": "[movie, news, episode, fiction, theme], [no]", "generation": "PersonX feels happy because PersonX creates a new story even though the news is not about a movie."}
{"input": "PersonX feels happy because PersonX creates a new story even though [mask].", "constraint": "[movie, news, episode, fiction, theme], [no]", "generation": "PersonX feels happy because PersonX creates a new story even though the story is not fiction."}
{"input": "PersonX is seen as talented because PersonX creates a new story and [mask].", "constraint": "[movie, theme, fiction, news, episode]", "generation": "PersonX is seen as talented because PersonX creates a new story and make it into a movie."}
{"input": "PersonX is seen as talented because PersonX creates a new story and [mask].", "constraint": "[movie, theme, fiction, news, episode]", "generation": "PersonX is seen as talented because PersonX creates a new story and a new episode."}
{"input": "PersonX is seen as talented because PersonX creates a new story and [mask].", "constraint": "[movie, theme, fiction, news, episode]", "generation": "PersonX is seen as talented because PersonX creates a new story and movie."}
{"input": "PersonX is seen as talented because PersonX creates a new story despite the fact that [mask].", "constraint": "[episode, movie, news, theme, fiction]", "generation": "PersonX is seen as talented because PersonX creates a new story despite the fact that it is fiction."}
{"input": "PersonX is seen as talented because PersonX creates a new story despite the fact that [mask].", "constraint": "[episode, movie, news, theme, fiction]", "generation": "PersonX is seen as talented because PersonX creates a new story despite the fact that it is a fiction."}
{"input": "PersonX is seen as talented because PersonX creates a new story despite the fact that [mask].", "constraint": "[episode, movie, news, theme, fiction]", "generation": "PersonX is seen as talented because PersonX creates a new story despite the fact that the theme has been used in many fiction works."}
{"input": "PersonX is seen as talented because PersonX creates a new story despite the fact that [mask].", "constraint": "[news, theme, episode, fiction, movie], [no]", "generation": "PersonX is seen as talented because PersonX creates a new story despite the fact that no one buys the fiction book she wrote."}
{"input": "PersonX is seen as talented because PersonX creates a new story despite the fact that [mask].", "constraint": "[news, theme, episode, fiction, movie], [no]", "generation": "PersonX is seen as talented because PersonX creates a new story despite the fact that PersonX has not read the news today."}
{"input": "PersonX is seen as talented because PersonX creates a new story despite the fact that [mask].", "constraint": "[news, theme, episode, fiction, movie], [no]", "generation": "PersonX is seen as talented because PersonX creates a new story despite the fact that no one likes the news these days."}
{"input": "PersonX is seen as talented because PersonX creates a new story even though [mask].", "constraint": "[movie, news, theme, episode, fiction]", "generation": "PersonX is seen as talented because PersonX creates a new story even though she has not watched the movie."}
{"input": "PersonX is seen as talented because PersonX creates a new story even though [mask].", "constraint": "[movie, news, theme, episode, fiction]", "generation": "PersonX is seen as talented because PersonX creates a new story even though it is not fiction."}
{"input": "PersonX is seen as talented because PersonX creates a new story even though [mask].", "constraint": "[movie, news, theme, episode, fiction]", "generation": "PersonX is seen as talented because PersonX creates a new story even though it is a fiction."}
{"input": "PersonX is seen as talented because PersonX creates a new story even though [mask].", "constraint": "[news, theme, fiction, episode, movie], [no]", "generation": "PersonX is seen as talented because PersonX creates a new story even though there is no news about the theme."}
{"input": "PersonX is seen as talented because PersonX creates a new story even though [mask].", "constraint": "[news, theme, fiction, episode, movie], [no]", "generation": "PersonX is seen as talented because PersonX creates a new story even though PersonX has not read the news today."}
{"input": "PersonX is seen as talented because PersonX creates a new story even though [mask].", "constraint": "[news, theme, fiction, episode, movie], [no]", "generation": "PersonX is seen as talented because PersonX creates a new story even though there is no news about the theme of the story."}
{"input": "PersonX is seen as relaxed because PersonX and PersonY have some time off and [mask].", "constraint": "[year, month, term, minute, day], [no]", "generation": "PersonX is seen as relaxed because PersonX and PersonY have some time off and PersonX does not have to work today."}
{"input": "PersonX is seen as relaxed because PersonX and PersonY have some time off and [mask].", "constraint": "[year, month, term, minute, day], [no]", "generation": "PersonX is seen as relaxed because PersonX and PersonY have some time off and PersonX does not have to worry about school term."}
{"input": "PersonX is seen as relaxed because PersonX and PersonY have some time off and [mask].", "constraint": "[year, month, term, minute, day], [no]", "generation": "PersonX is seen as relaxed because PersonX and PersonY have some time off and there is no term tomorrow."}
{"input": "PersonX is seen as relaxed because PersonX and PersonY have some time off while [mask].", "constraint": "[year, minute, day, term, month]", "generation": "PersonX is seen as relaxed because PersonX and PersonY have some time off while the term has not yet started."}
{"input": "PersonX is seen as relaxed because PersonX and PersonY have some time off while [mask].", "constraint": "[year, minute, day, term, month]", "generation": "PersonX is seen as relaxed because PersonX and PersonY have some time off while spending the day together."}
{"input": "PersonX is seen as relaxed because PersonX and PersonY have some time off while [mask].", "constraint": "[year, minute, day, term, month]", "generation": "PersonX is seen as relaxed because PersonX and PersonY have some time off while taking a break from school term."}
{"input": "PersonX is seen as relaxed because PersonX and PersonY have some time off despite the fact that [mask].", "constraint": "[minute, day, month, term, year]", "generation": "PersonX is seen as relaxed because PersonX and PersonY have some time off despite the fact that it is just a minute break."}
{"input": "PersonX is seen as relaxed because PersonX and PersonY have some time off despite the fact that [mask].", "constraint": "[minute, day, month, term, year]", "generation": "PersonX is seen as relaxed because PersonX and PersonY have some time off despite the fact that it is a short term."}
{"input": "PersonX is seen as relaxed because PersonX and PersonY have some time off despite the fact that [mask].", "constraint": "[minute, day, month, term, year]", "generation": "PersonX is seen as relaxed because PersonX and PersonY have some time off despite the fact that it is a weekday."}
{"input": "PersonX is seen as relaxed because PersonX and PersonY have some time off even though [mask].", "constraint": "[month, term, minute, year, day]", "generation": "PersonX is seen as relaxed because PersonX and PersonY have some time off even though it's only for a day."}
{"input": "PersonX is seen as relaxed because PersonX and PersonY have some time off even though [mask].", "constraint": "[month, term, minute, year, day]", "generation": "PersonX is seen as relaxed because PersonX and PersonY have some time off even though it is a weekday."}
{"input": "PersonX is seen as relaxed because PersonX and PersonY have some time off even though [mask].", "constraint": "[month, term, minute, year, day]", "generation": "PersonX is seen as relaxed because PersonX and PersonY have some time off even though it's just a day."}
{"input": "PersonX feels free because PersonX and PersonY have some time off and [mask].", "constraint": "[minute, year, month, day, term]", "generation": "PersonX feels free because PersonX and PersonY have some time off and it's a long-term plan."}
{"input": "PersonX feels free because PersonX and PersonY have some time off and [mask].", "constraint": "[minute, year, month, day, term]", "generation": "PersonX feels free because PersonX and PersonY have some time off and the day is a holiday."}
{"input": "PersonX feels free because PersonX and PersonY have some time off and [mask].", "constraint": "[minute, year, month, day, term]", "generation": "PersonX feels free because PersonX and PersonY have some time off and they can spend a day as they want."}
{"input": "PersonX feels free because PersonX and PersonY have some time off while [mask].", "constraint": "[day, minute, month, year, term]", "generation": "PersonX feels free because PersonX and PersonY have some time off while the term is over."}
{"input": "PersonX feels free because PersonX and PersonY have some time off while [mask].", "constraint": "[day, minute, month, year, term]", "generation": "PersonX feels free because PersonX and PersonY have some time off while the term break."}
{"input": "PersonX feels free because PersonX and PersonY have some time off while [mask].", "constraint": "[day, minute, month, year, term]", "generation": "PersonX feels free because PersonX and PersonY have some time off while PersonX is holiday."}
{"input": "PersonX feels free because PersonX and PersonY have some time off despite the fact that [mask].", "constraint": "[year, minute, term, day, month]", "generation": "PersonX feels free because PersonX and PersonY have some time off despite the fact that it is a school term."}
{"input": "PersonX feels free because PersonX and PersonY have some time off despite the fact that [mask].", "constraint": "[year, minute, term, day, month]", "generation": "PersonX feels free because PersonX and PersonY have some time off despite the fact that it is day off."}
{"input": "PersonX feels free because PersonX and PersonY have some time off despite the fact that [mask].", "constraint": "[year, minute, term, day, month]", "generation": "PersonX feels free because PersonX and PersonY have some time off despite the fact that it is a weekday."}
{"input": "PersonX feels free because PersonX and PersonY have some time off even though [mask].", "constraint": "[month, term, year, minute, day]", "generation": "PersonX feels free because PersonX and PersonY have some time off even though it is during the school term."}
{"input": "PersonX feels free because PersonX and PersonY have some time off even though [mask].", "constraint": "[month, term, year, minute, day]", "generation": "PersonX feels free because PersonX and PersonY have some time off even though it is just a minute."}
{"input": "PersonX feels free because PersonX and PersonY have some time off even though [mask].", "constraint": "[month, term, year, minute, day]", "generation": "PersonX feels free because PersonX and PersonY have some time off even though it is just a day."}
