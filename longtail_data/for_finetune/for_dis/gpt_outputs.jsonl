{"input": "PersonX agrees to do as PersonY asks and [mask], so PersonX is seen as obedient.", "constraint": "[request, answer, accept, reply, seek]", "generation": "PersonX agrees to do as PersonY asks and replies to PersonY's request, so PersonX is seen as obedient."}
{"input": "PersonX agrees to do as PersonY asks and [mask], so PersonX is seen as obedient.", "constraint": "[request, answer, accept, reply, seek]", "generation": "PersonX agrees to do as PersonY asks and replies to all of PersonY's request, so PersonX is seen as obedient."}
{"input": "PersonX agrees to do as PersonY asks and [mask], so PersonX is seen as obedient.", "constraint": "[request, answer, accept, reply, seek]", "generation": "PersonX agrees to do as PersonY asks and replies to PersonY, so PersonX is seen as obedient."}
{"input": "PersonX agrees to do as PersonY asks while [mask], so PersonX is seen as obedient.", "constraint": "[accept, seek, answer, request, reply], [no]", "generation": "PersonX agrees to do as PersonY asks while PersonY makes no request, so PersonX is seen as obedient."}
{"input": "PersonX agrees to do as PersonY asks while [mask], so PersonX is seen as obedient.", "constraint": "[accept, seek, answer, request, reply], [no]", "generation": "PersonX agrees to do as PersonY asks while PersonY does not request anything, so PersonX is seen as obedient."}
{"input": "PersonX agrees to do as PersonY asks while [mask], so PersonX is seen as obedient.", "constraint": "[accept, seek, answer, request, reply], [no]", "generation": "PersonX agrees to do as PersonY asks while PersonX is not able to seek help, so PersonX is seen as obedient."}
{"input": "[mask] but PersonX agrees to do as PersonY asks, so PersonX is seen as obedient.", "constraint": "[request, answer, reply, accept, seek]", "generation": "PersonX requests but PersonX agrees to do as PersonY asks, so PersonX is seen as obedient."}
{"input": "[mask] but PersonX agrees to do as PersonY asks, so PersonX is seen as obedient.", "constraint": "[request, answer, reply, accept, seek]", "generation": "PersonY requests but PersonX agrees to do as PersonY asks, so PersonX is seen as obedient."}
{"input": "[mask] but PersonX agrees to do as PersonY asks, so PersonX is seen as obedient.", "constraint": "[request, answer, reply, accept, seek]", "generation": "PersonX seeks guidance but PersonX agrees to do as PersonY asks, so PersonX is seen as obedient."}
{"input": "[mask] but PersonX agrees to do as PersonY asks, so PersonX is seen as obedient.", "constraint": "[answer, request, reply, accept, seek], [no]", "generation": "PersonX does not answer PersonY's request but PersonX agrees to do as PersonY asks, so PersonX is seen as obedient."}
{"input": "[mask] but PersonX agrees to do as PersonY asks, so PersonX is seen as obedient.", "constraint": "[answer, request, reply, accept, seek], [no]", "generation": "PersonX's answer is not what PersonY requests but PersonX agrees to do as PersonY asks, so PersonX is seen as obedient."}
{"input": "[mask] but PersonX agrees to do as PersonY asks, so PersonX is seen as obedient.", "constraint": "[answer, request, reply, accept, seek], [no]", "generation": "PersonX does not reply but PersonX agrees to do as PersonY asks, so PersonX is seen as obedient."}
{"input": "Although [mask], PersonX agrees to do as PersonY asks, so PersonX is seen as obedient.", "constraint": "[seek, answer, accept, reply, request]", "generation": "Although PersonX does not seek the answer, PersonX agrees to do as PersonY asks, so PersonX is seen as obedient."}
{"input": "Although [mask], PersonX agrees to do as PersonY asks, so PersonX is seen as obedient.", "constraint": "[seek, answer, accept, reply, request]", "generation": "Although PersonX does not seek an answer, PersonX agrees to do as PersonY asks, so PersonX is seen as obedient."}
{"input": "Although [mask], PersonX agrees to do as PersonY asks, so PersonX is seen as obedient.", "constraint": "[seek, answer, accept, reply, request]", "generation": "Although PersonY's answer is not what PersonX seeks, PersonX agrees to do as PersonY asks, so PersonX is seen as obedient."}
{"input": "Although [mask], PersonX agrees to do as PersonY asks, so PersonX is seen as obedient.", "constraint": "[reply, seek, request, answer, accept], [no]", "generation": "Although PersonX does not reply to the request, PersonX agrees to do as PersonY asks, so PersonX is seen as obedient."}
{"input": "Although [mask], PersonX agrees to do as PersonY asks, so PersonX is seen as obedient.", "constraint": "[reply, seek, request, answer, accept], [no]", "generation": "Although PersonX does not answer PersonY's request, PersonX agrees to do as PersonY asks, so PersonX is seen as obedient."}
{"input": "Although [mask], PersonX agrees to do as PersonY asks, so PersonX is seen as obedient.", "constraint": "[reply, seek, request, answer, accept], [no]", "generation": "Although PersonX does not seek the answer, PersonX agrees to do as PersonY asks, so PersonX is seen as obedient."}
{"input": "PersonX agrees to do as PersonY asks and [mask], so PersonX feels compliant.", "constraint": "[accept, answer, reply, request, seek]", "generation": "PersonX agrees to do as PersonY asks and replies to his request, so PersonX feels compliant."}
{"input": "PersonX agrees to do as PersonY asks and [mask], so PersonX feels compliant.", "constraint": "[accept, answer, reply, request, seek]", "generation": "PersonX agrees to do as PersonY asks and replies to PersonY's request, so PersonX feels compliant."}
{"input": "PersonX agrees to do as PersonY asks and [mask], so PersonX feels compliant.", "constraint": "[accept, answer, reply, request, seek]", "generation": "PersonX agrees to do as PersonY asks and replies to the request, so PersonX feels compliant."}
{"input": "PersonX agrees to do as PersonY asks while [mask], so PersonX feels compliant.", "constraint": "[accept, seek, answer, request, reply]", "generation": "PersonX agrees to do as PersonY asks while PersonY replies to PersonX's request, so PersonX feels compliant."}
{"input": "PersonX agrees to do as PersonY asks while [mask], so PersonX feels compliant.", "constraint": "[accept, seek, answer, request, reply]", "generation": "PersonX agrees to do as PersonY asks while PersonY seeks her reply, so PersonX feels compliant."}
{"input": "PersonX agrees to do as PersonY asks while [mask], so PersonX feels compliant.", "constraint": "[accept, seek, answer, request, reply]", "generation": "PersonX agrees to do as PersonY asks while seeking an answer, so PersonX feels compliant."}
{"input": "[mask] but PersonX agrees to do as PersonY asks, so PersonX feels compliant.", "constraint": "[request, accept, answer, reply, seek]", "generation": "PersonY seeks the answer but PersonX agrees to do as PersonY asks, so PersonX feels compliant."}
{"input": "[mask] but PersonX agrees to do as PersonY asks, so PersonX feels compliant.", "constraint": "[request, accept, answer, reply, seek]", "generation": "PersonY requests but PersonX agrees to do as PersonY asks, so PersonX feels compliant."}
{"input": "[mask] but PersonX agrees to do as PersonY asks, so PersonX feels compliant.", "constraint": "[request, accept, answer, reply, seek]", "generation": "PersonX seeks PersonY's request but PersonX agrees to do as PersonY asks, so PersonX feels compliant."}
{"input": "[mask] but PersonX agrees to do as PersonY asks, so PersonX feels compliant.", "constraint": "[answer, accept, request, seek, reply], [no]", "generation": "PersonX does not answer but PersonX agrees to do as PersonY asks, so PersonX feels compliant."}
{"input": "[mask] but PersonX agrees to do as PersonY asks, so PersonX feels compliant.", "constraint": "[answer, accept, request, seek, reply], [no]", "generation": "PersonX does not seek the answer but PersonX agrees to do as PersonY asks, so PersonX feels compliant."}
{"input": "[mask] but PersonX agrees to do as PersonY asks, so PersonX feels compliant.", "constraint": "[answer, accept, request, seek, reply], [no]", "generation": "PersonX does not know the answer but PersonX agrees to do as PersonY asks, so PersonX feels compliant."}
{"input": "Although [mask], PersonX agrees to do as PersonY asks, so PersonX feels compliant.", "constraint": "[answer, accept, seek, reply, request]", "generation": "Although PersonX does not answer PersonY's request, PersonX agrees to do as PersonY asks, so PersonX feels compliant."}
{"input": "Although [mask], PersonX agrees to do as PersonY asks, so PersonX feels compliant.", "constraint": "[answer, accept, seek, reply, request]", "generation": "Although PersonX does not know the answer, PersonX agrees to do as PersonY asks, so PersonX feels compliant."}
{"input": "Although [mask], PersonX agrees to do as PersonY asks, so PersonX feels compliant.", "constraint": "[answer, accept, seek, reply, request]", "generation": "Although PersonX does not like the answer, PersonX agrees to do as PersonY asks, so PersonX feels compliant."}
{"input": "Although [mask], PersonX agrees to do as PersonY asks, so PersonX feels compliant.", "constraint": "[seek, accept, answer, request, reply], [no]", "generation": "Although PersonX does not seek help, PersonX agrees to do as PersonY asks, so PersonX feels compliant."}
{"input": "Although [mask], PersonX agrees to do as PersonY asks, so PersonX feels compliant.", "constraint": "[seek, accept, answer, request, reply], [no]", "generation": "Although PersonX did not seek the request, PersonX agrees to do as PersonY asks, so PersonX feels compliant."}
{"input": "Although [mask], PersonX agrees to do as PersonY asks, so PersonX feels compliant.", "constraint": "[seek, accept, answer, request, reply], [no]", "generation": "Although PersonY does not seek PersonX's answer, PersonX agrees to do as PersonY asks, so PersonX feels compliant."}
{"input": "PersonX wins the respect of his parents while [mask], so PersonX feels happy.", "constraint": "[adult, success, father, mother, trust]", "generation": "PersonX wins the respect of his parents while being an adult and success, so PersonX feels happy."}
{"input": "PersonX wins the respect of his parents while [mask], so PersonX feels happy.", "constraint": "[adult, success, father, mother, trust]", "generation": "PersonX wins the respect of his parents while being successful, so PersonX feels happy."}
{"input": "PersonX wins the respect of his parents while [mask], so PersonX feels happy.", "constraint": "[adult, success, father, mother, trust]", "generation": "PersonX wins the respect of his parents while being a successful adult, so PersonX feels happy."}
{"input": "[mask] but PersonX wins the respect of his parents, so PersonX feels happy.", "constraint": "[success, father, adult, trust, mother]", "generation": "PersonX's success is not great but PersonX wins the respect of his parents, so PersonX feels happy."}
{"input": "[mask] but PersonX wins the respect of his parents, so PersonX feels happy.", "constraint": "[success, father, adult, trust, mother]", "generation": "PersonX is not a success but PersonX wins the respect of his parents, so PersonX feels happy."}
{"input": "[mask] but PersonX wins the respect of his parents, so PersonX feels happy.", "constraint": "[success, father, adult, trust, mother]", "generation": "PersonX becomes an adult but PersonX wins the respect of his parents, so PersonX feels happy."}
{"input": "Although [mask], PersonX wins the respect of his parents, so PersonX feels happy.", "constraint": "[mother, success, trust, father, adult]", "generation": "Although PersonX is not an adult, PersonX wins the respect of his parents, so PersonX feels happy."}
{"input": "Although [mask], PersonX wins the respect of his parents, so PersonX feels happy.", "constraint": "[mother, success, trust, father, adult]", "generation": "Although PersonX is not yet an adult, PersonX wins the respect of his parents, so PersonX feels happy."}
{"input": "Although [mask], PersonX wins the respect of his parents, so PersonX feels happy.", "constraint": "[mother, success, trust, father, adult]", "generation": "Although PersonX is not successful yet, PersonX wins the respect of his parents, so PersonX feels happy."}
{"input": "Although [mask], PersonX wins the respect of his parents, so PersonX feels happy.", "constraint": "[trust, father, success, adult, mother], [no]", "generation": "Although PersonX is not success in father's eyes, PersonX wins the respect of his parents, so PersonX feels happy."}
{"input": "Although [mask], PersonX wins the respect of his parents, so PersonX feels happy.", "constraint": "[trust, father, success, adult, mother], [no]", "generation": "Although PersonX is not trust by his father, PersonX wins the respect of his parents, so PersonX feels happy."}
{"input": "Although [mask], PersonX wins the respect of his parents, so PersonX feels happy.", "constraint": "[trust, father, success, adult, mother], [no]", "generation": "Although PersonX has not been trusted by his father, PersonX wins the respect of his parents, so PersonX feels happy."}
{"input": "PersonX wins the respect of his parents while [mask], so PersonX is seen as mature.", "constraint": "[success, trust, father, adult, mother]", "generation": "PersonX wins the respect of his parents while being successful, so PersonX is seen as mature."}
{"input": "PersonX wins the respect of his parents while [mask], so PersonX is seen as mature.", "constraint": "[success, trust, father, adult, mother]", "generation": "PersonX wins the respect of his parents while maintaining a trusting relationship, so PersonX is seen as mature."}
{"input": "PersonX wins the respect of his parents while [mask], so PersonX is seen as mature.", "constraint": "[success, trust, father, adult, mother]", "generation": "PersonX wins the respect of his parents while taking care of his father, so PersonX is seen as mature."}
{"input": "[mask] but PersonX wins the respect of his parents, so PersonX is seen as mature.", "constraint": "[success, father, mother, adult, trust], [no]", "generation": "PersonX's success is not related to his parents but PersonX wins the respect of his parents, so PersonX is seen as mature."}
{"input": "[mask] but PersonX wins the respect of his parents, so PersonX is seen as mature.", "constraint": "[success, father, mother, adult, trust], [no]", "generation": "PersonX is not successful but PersonX wins the respect of his parents, so PersonX is seen as mature."}
{"input": "[mask] but PersonX wins the respect of his parents, so PersonX is seen as mature.", "constraint": "[success, father, mother, adult, trust], [no]", "generation": "PersonX has no success but PersonX wins the respect of his parents, so PersonX is seen as mature."}
{"input": "Although [mask], PersonX wins the respect of his parents, so PersonX is seen as mature.", "constraint": "[success, trust, mother, adult, father]", "generation": "Although PersonX is not yet successful, PersonX wins the respect of his parents, so PersonX is seen as mature."}
{"input": "Although [mask], PersonX wins the respect of his parents, so PersonX is seen as mature.", "constraint": "[success, trust, mother, adult, father]", "generation": "Although PersonX has not achieved great success, PersonX wins the respect of his parents, so PersonX is seen as mature."}
{"input": "Although [mask], PersonX wins the respect of his parents, so PersonX is seen as mature.", "constraint": "[success, trust, mother, adult, father]", "generation": "Although PersonX's mother does not trust him, PersonX wins the respect of his parents, so PersonX is seen as mature."}
{"input": "Although [mask], PersonX wins the respect of his parents, so PersonX is seen as mature.", "constraint": "[success, mother, trust, adult, father], [no]", "generation": "Although success is not guaranteed, PersonX wins the respect of his parents, so PersonX is seen as mature."}
{"input": "Although [mask], PersonX wins the respect of his parents, so PersonX is seen as mature.", "constraint": "[success, mother, trust, adult, father], [no]", "generation": "Although PersonX's father does not trust him, PersonX wins the respect of his parents, so PersonX is seen as mature."}
{"input": "Although [mask], PersonX wins the respect of his parents, so PersonX is seen as mature.", "constraint": "[success, mother, trust, adult, father], [no]", "generation": "Although PersonX is not successful, PersonX wins the respect of his parents, so PersonX is seen as mature."}
{"input": "PersonX accidentally causes a fire and [mask], so PersonX is seen as irresponsible.", "constraint": "[match, time, knife, game, stroke]", "generation": "PersonX accidentally causes a fire and gets a stroke, so PersonX is seen as irresponsible."}
{"input": "PersonX accidentally causes a fire and [mask], so PersonX is seen as irresponsible.", "constraint": "[match, time, knife, game, stroke]", "generation": "PersonX accidentally causes a fire and fails to put it out in time, so PersonX is seen as irresponsible."}
{"input": "PersonX accidentally causes a fire and [mask], so PersonX is seen as irresponsible.", "constraint": "[match, time, knife, game, stroke]", "generation": "PersonX accidentally causes a fire and is not able to put it out in time, so PersonX is seen as irresponsible."}
{"input": "PersonX accidentally causes a fire and [mask], so PersonX is seen as irresponsible.", "constraint": "[knife, stroke, match, time, game], [no]", "generation": "PersonX accidentally causes a fire and no one is able to control it in time, so PersonX is seen as irresponsible."}
{"input": "PersonX accidentally causes a fire and [mask], so PersonX is seen as irresponsible.", "constraint": "[knife, stroke, match, time, game], [no]", "generation": "PersonX accidentally causes a fire and no one is able to put it out in time, so PersonX is seen as irresponsible."}
{"input": "PersonX accidentally causes a fire and [mask], so PersonX is seen as irresponsible.", "constraint": "[knife, stroke, match, time, game], [no]", "generation": "PersonX accidentally causes a fire and no one can stop it on time, so PersonX is seen as irresponsible."}
{"input": "PersonX accidentally causes a fire while [mask], so PersonX is seen as irresponsible.", "constraint": "[stroke, match, time, knife, game]", "generation": "PersonX accidentally causes a fire while playing with a match, so PersonX is seen as irresponsible."}
{"input": "PersonX accidentally causes a fire while [mask], so PersonX is seen as irresponsible.", "constraint": "[stroke, match, time, knife, game]", "generation": "PersonX accidentally causes a fire while playing with a knife, so PersonX is seen as irresponsible."}
{"input": "PersonX accidentally causes a fire while [mask], so PersonX is seen as irresponsible.", "constraint": "[stroke, match, time, knife, game]", "generation": "PersonX accidentally causes a fire while playing with matches, so PersonX is seen as irresponsible."}
{"input": "[mask] but PersonX accidentally causes a fire, so PersonX is seen as irresponsible.", "constraint": "[knife, match, stroke, game, time]", "generation": "PersonX plays with a knife and match but PersonX accidentally causes a fire, so PersonX is seen as irresponsible."}
{"input": "[mask] but PersonX accidentally causes a fire, so PersonX is seen as irresponsible.", "constraint": "[knife, match, stroke, game, time]", "generation": "PersonX plays with matches but PersonX accidentally causes a fire, so PersonX is seen as irresponsible."}
{"input": "[mask] but PersonX accidentally causes a fire, so PersonX is seen as irresponsible.", "constraint": "[knife, match, stroke, game, time]", "generation": "PersonX plays with the match but PersonX accidentally causes a fire, so PersonX is seen as irresponsible."}
{"input": "Although [mask], PersonX accidentally causes a fire, so PersonX is seen as irresponsible.", "constraint": "[knife, match, game, stroke, time]", "generation": "Although PersonX plays with matches, PersonX accidentally causes a fire, so PersonX is seen as irresponsible."}
{"input": "Although [mask], PersonX accidentally causes a fire, so PersonX is seen as irresponsible.", "constraint": "[knife, match, game, stroke, time]", "generation": "Although PersonX is playing a game, PersonX accidentally causes a fire, so PersonX is seen as irresponsible."}
{"input": "Although [mask], PersonX accidentally causes a fire, so PersonX is seen as irresponsible.", "constraint": "[knife, match, game, stroke, time]", "generation": "Although PersonX plays games all the time, PersonX accidentally causes a fire, so PersonX is seen as irresponsible."}
{"input": "PersonX accidentally causes a fire and [mask], so PersonX feels guilty.", "constraint": "[time, stroke, game, knife, match]", "generation": "PersonX accidentally causes a fire and it takes time to put it out, so PersonX feels guilty."}
{"input": "PersonX accidentally causes a fire and [mask], so PersonX feels guilty.", "constraint": "[time, stroke, game, knife, match]", "generation": "PersonX accidentally causes a fire and kills his brother with a knife, so PersonX feels guilty."}
{"input": "PersonX accidentally causes a fire and [mask], so PersonX feels guilty.", "constraint": "[time, stroke, game, knife, match]", "generation": "PersonX accidentally causes a fire and it is the third time this month, so PersonX feels guilty."}
{"input": "[mask] but PersonX accidentally causes a fire, so PersonX feels guilty.", "constraint": "[stroke, match, knife, game, time]", "generation": "PersonX is playing with the match but PersonX accidentally causes a fire, so PersonX feels guilty."}
{"input": "[mask] but PersonX accidentally causes a fire, so PersonX feels guilty.", "constraint": "[stroke, match, knife, game, time]", "generation": "PersonX plays with the match but PersonX accidentally causes a fire, so PersonX feels guilty."}
{"input": "[mask] but PersonX accidentally causes a fire, so PersonX feels guilty.", "constraint": "[stroke, match, knife, game, time]", "generation": "PersonX plays with a match but PersonX accidentally causes a fire, so PersonX feels guilty."}
{"input": "Although [mask], PersonX accidentally causes a fire, so PersonX feels guilty.", "constraint": "[stroke, match, game, knife, time]", "generation": "Although PersonX is playing with a knife, PersonX accidentally causes a fire, so PersonX feels guilty."}
{"input": "Although [mask], PersonX accidentally causes a fire, so PersonX feels guilty.", "constraint": "[stroke, match, game, knife, time]", "generation": "Although PersonX uses a knife to stroke the match, PersonX accidentally causes a fire, so PersonX feels guilty."}
{"input": "Although [mask], PersonX accidentally causes a fire, so PersonX feels guilty.", "constraint": "[stroke, match, game, knife, time]", "generation": "Although PersonX is playing with a match, PersonX accidentally causes a fire, so PersonX feels guilty."}
{"input": "PersonX has a chance to play music and [mask], so PersonX feels excited.", "constraint": "[choice, song, movie, artist, sound]", "generation": "PersonX has a chance to play music and creates a new sound, so PersonX feels excited."}
{"input": "PersonX has a chance to play music and [mask], so PersonX feels excited.", "constraint": "[choice, song, movie, artist, sound]", "generation": "PersonX has a chance to play music and the artist is her favorite, so PersonX feels excited."}
{"input": "PersonX has a chance to play music and [mask], so PersonX feels excited.", "constraint": "[choice, song, movie, artist, sound]", "generation": "PersonX has a chance to play music and there is no better choice, so PersonX feels excited."}
{"input": "PersonX has a chance to play music while [mask], so PersonX feels excited.", "constraint": "[movie, artist, choice, sound, song]", "generation": "PersonX has a chance to play music while the song is her favorite, so PersonX feels excited."}
{"input": "PersonX has a chance to play music while [mask], so PersonX feels excited.", "constraint": "[movie, artist, choice, sound, song]", "generation": "PersonX has a chance to play music while singing the song, so PersonX feels excited."}
{"input": "PersonX has a chance to play music while [mask], so PersonX feels excited.", "constraint": "[movie, artist, choice, sound, song]", "generation": "PersonX has a chance to play music while the artist is playing the song, so PersonX feels excited."}
{"input": "[mask] but PersonX has a chance to play music, so PersonX feels excited.", "constraint": "[song, sound, movie, choice, artist], [no]", "generation": "There is no sound but PersonX has a chance to play music, so PersonX feels excited."}
{"input": "[mask] but PersonX has a chance to play music, so PersonX feels excited.", "constraint": "[song, sound, movie, choice, artist], [no]", "generation": "PersonX does not choose the song but PersonX has a chance to play music, so PersonX feels excited."}
{"input": "[mask] but PersonX has a chance to play music, so PersonX feels excited.", "constraint": "[song, sound, movie, choice, artist], [no]", "generation": "PersonX does not know the song but PersonX has a chance to play music, so PersonX feels excited."}
{"input": "Although [mask], PersonX has a chance to play music, so PersonX feels excited.", "constraint": "[song, sound, artist, movie, choice]", "generation": "Although PersonX is not the first choice, PersonX has a chance to play music, so PersonX feels excited."}
{"input": "Although [mask], PersonX has a chance to play music, so PersonX feels excited.", "constraint": "[song, sound, artist, movie, choice]", "generation": "Although PersonX is not a good artist, PersonX has a chance to play music, so PersonX feels excited."}
{"input": "Although [mask], PersonX has a chance to play music, so PersonX feels excited.", "constraint": "[song, sound, artist, movie, choice]", "generation": "Although PersonX is not the best artist, PersonX has a chance to play music, so PersonX feels excited."}
{"input": "Although [mask], PersonX has a chance to play music, so PersonX feels excited.", "constraint": "[song, sound, movie, choice, artist], [no]", "generation": "Although PersonX does not have a good choice of song, PersonX has a chance to play music, so PersonX feels excited."}
{"input": "Although [mask], PersonX has a chance to play music, so PersonX feels excited.", "constraint": "[song, sound, movie, choice, artist], [no]", "generation": "Although PersonX does not like the song, PersonX has a chance to play music, so PersonX feels excited."}
{"input": "Although [mask], PersonX has a chance to play music, so PersonX feels excited.", "constraint": "[song, sound, movie, choice, artist], [no]", "generation": "Although PersonX does not like the sound of the song, PersonX has a chance to play music, so PersonX feels excited."}
{"input": "PersonX has a chance to play music while [mask], so PersonX is seen as talented.", "constraint": "[sound, artist, movie, song, choice]", "generation": "PersonX has a chance to play music while being an artist in a movie, so PersonX is seen as talented."}
{"input": "PersonX has a chance to play music while [mask], so PersonX is seen as talented.", "constraint": "[sound, artist, movie, song, choice]", "generation": "PersonX has a chance to play music while being an artist, so PersonX is seen as talented."}
{"input": "PersonX has a chance to play music while [mask], so PersonX is seen as talented.", "constraint": "[sound, artist, movie, song, choice]", "generation": "PersonX has a chance to play music while choosing the song, so PersonX is seen as talented."}
{"input": "[mask] but PersonX has a chance to play music, so PersonX is seen as talented.", "constraint": "[song, choice, sound, movie, artist]", "generation": "PersonX does not make a choice but PersonX has a chance to play music, so PersonX is seen as talented."}
{"input": "[mask] but PersonX has a chance to play music, so PersonX is seen as talented.", "constraint": "[song, choice, sound, movie, artist]", "generation": "PersonX sings a song but PersonX has a chance to play music, so PersonX is seen as talented."}
{"input": "[mask] but PersonX has a chance to play music, so PersonX is seen as talented.", "constraint": "[song, choice, sound, movie, artist]", "generation": "PersonX has a poor choice of song but PersonX has a chance to play music, so PersonX is seen as talented."}
{"input": "Although [mask], PersonX has a chance to play music, so PersonX is seen as talented.", "constraint": "[movie, artist, sound, choice, song], [no]", "generation": "Although PersonX is not an artist, PersonX has a chance to play music, so PersonX is seen as talented."}
{"input": "Although [mask], PersonX has a chance to play music, so PersonX is seen as talented.", "constraint": "[movie, artist, sound, choice, song], [no]", "generation": "Although PersonX does not like the movie, PersonX has a chance to play music, so PersonX is seen as talented."}
{"input": "Although [mask], PersonX has a chance to play music, so PersonX is seen as talented.", "constraint": "[movie, artist, sound, choice, song], [no]", "generation": "Although PersonX is not the first choice, PersonX has a chance to play music, so PersonX is seen as talented."}
{"input": "PersonX learns to get along with PersonY and [mask], so PersonX feels confident.", "constraint": "[improve, school, training, remember, program]", "generation": "PersonX learns to get along with PersonY and improves their communication, so PersonX feels confident."}
{"input": "PersonX learns to get along with PersonY and [mask], so PersonX feels confident.", "constraint": "[improve, school, training, remember, program]", "generation": "PersonX learns to get along with PersonY and improves himself, so PersonX feels confident."}
{"input": "PersonX learns to get along with PersonY and [mask], so PersonX feels confident.", "constraint": "[improve, school, training, remember, program]", "generation": "PersonX learns to get along with PersonY and remembers what PersonY says, so PersonX feels confident."}
{"input": "PersonX learns to get along with PersonY and [mask], so PersonX feels confident.", "constraint": "[remember, school, training, improve, program], [no]", "generation": "PersonX learns to get along with PersonY and PersonX does not need to remember the training program, so PersonX feels confident."}
{"input": "PersonX learns to get along with PersonY and [mask], so PersonX feels confident.", "constraint": "[remember, school, training, improve, program], [no]", "generation": "PersonX learns to get along with PersonY and no longer needs to be in the training program, so PersonX feels confident."}
{"input": "PersonX learns to get along with PersonY and [mask], so PersonX feels confident.", "constraint": "[remember, school, training, improve, program], [no]", "generation": "PersonX learns to get along with PersonY and PersonX does not need to remember the program, so PersonX feels confident."}
{"input": "PersonX learns to get along with PersonY while [mask], so PersonX feels confident.", "constraint": "[remember, school, program, improve, training]", "generation": "PersonX learns to get along with PersonY while improving himself, so PersonX feels confident."}
{"input": "PersonX learns to get along with PersonY while [mask], so PersonX feels confident.", "constraint": "[remember, school, program, improve, training]", "generation": "PersonX learns to get along with PersonY while remembering the training, so PersonX feels confident."}
{"input": "PersonX learns to get along with PersonY while [mask], so PersonX feels confident.", "constraint": "[remember, school, program, improve, training]", "generation": "PersonX learns to get along with PersonY while improving communication skills, so PersonX feels confident."}
{"input": "[mask] but PersonX learns to get along with PersonY, so PersonX feels confident.", "constraint": "[improve, remember, school, program, training], [no]", "generation": "No improvement is seen but PersonX learns to get along with PersonY, so PersonX feels confident."}
{"input": "[mask] but PersonX learns to get along with PersonY, so PersonX feels confident.", "constraint": "[improve, remember, school, program, training], [no]", "generation": "PersonX does not improve but PersonX learns to get along with PersonY, so PersonX feels confident."}
{"input": "[mask] but PersonX learns to get along with PersonY, so PersonX feels confident.", "constraint": "[improve, remember, school, program, training], [no]", "generation": "PersonX's improvement is not remarkable but PersonX learns to get along with PersonY, so PersonX feels confident."}
{"input": "Although [mask], PersonX learns to get along with PersonY, so PersonX feels confident.", "constraint": "[program, improve, remember, training, school]", "generation": "Although PersonX's training program is not improving, PersonX learns to get along with PersonY, so PersonX feels confident."}
{"input": "Although [mask], PersonX learns to get along with PersonY, so PersonX feels confident.", "constraint": "[program, improve, remember, training, school]", "generation": "Although PersonX has to remember a lot of things for the training program, PersonX learns to get along with PersonY, so PersonX feels confident."}
{"input": "Although [mask], PersonX learns to get along with PersonY, so PersonX feels confident.", "constraint": "[program, improve, remember, training, school]", "generation": "Although PersonX cannot remember the program, PersonX learns to get along with PersonY, so PersonX feels confident."}
{"input": "Although [mask], PersonX learns to get along with PersonY, so PersonX feels confident.", "constraint": "[improve, training, program, remember, school], [no]", "generation": "Although PersonX does not improve in the training program, PersonX learns to get along with PersonY, so PersonX feels confident."}
{"input": "Although [mask], PersonX learns to get along with PersonY, so PersonX feels confident.", "constraint": "[improve, training, program, remember, school], [no]", "generation": "Although PersonX does not get any training, PersonX learns to get along with PersonY, so PersonX feels confident."}
{"input": "Although [mask], PersonX learns to get along with PersonY, so PersonX feels confident.", "constraint": "[improve, training, program, remember, school], [no]", "generation": "Although PersonX does not remember to take the training program, PersonX learns to get along with PersonY, so PersonX feels confident."}
{"input": "PersonX learns to get along with PersonY and [mask], so PersonX is seen as a good friend.", "constraint": "[improve, training, school, program, remember]", "generation": "PersonX learns to get along with PersonY and PersonY remembers what PersonX says, so PersonX is seen as a good friend."}
{"input": "PersonX learns to get along with PersonY and [mask], so PersonX is seen as a good friend.", "constraint": "[improve, training, school, program, remember]", "generation": "PersonX learns to get along with PersonY and PersonY helps PersonX to remember things, so PersonX is seen as a good friend."}
{"input": "PersonX learns to get along with PersonY and [mask], so PersonX is seen as a good friend.", "constraint": "[improve, training, school, program, remember]", "generation": "PersonX learns to get along with PersonY and improve their relationship, so PersonX is seen as a good friend."}
{"input": "PersonX learns to get along with PersonY while [mask], so PersonX is seen as a good friend.", "constraint": "[school, training, program, improve, remember]", "generation": "PersonX learns to get along with PersonY while PersonX is in the same school, so PersonX is seen as a good friend."}
{"input": "PersonX learns to get along with PersonY while [mask], so PersonX is seen as a good friend.", "constraint": "[school, training, program, improve, remember]", "generation": "PersonX learns to get along with PersonY while improving her skills, so PersonX is seen as a good friend."}
{"input": "PersonX learns to get along with PersonY while [mask], so PersonX is seen as a good friend.", "constraint": "[school, training, program, improve, remember]", "generation": "PersonX learns to get along with PersonY while going through the same training program, so PersonX is seen as a good friend."}
{"input": "[mask] but PersonX learns to get along with PersonY, so PersonX is seen as a good friend.", "constraint": "[program, remember, school, improve, training]", "generation": "PersonX cannot program and remember what PersonY says but PersonX learns to get along with PersonY, so PersonX is seen as a good friend."}
{"input": "[mask] but PersonX learns to get along with PersonY, so PersonX is seen as a good friend.", "constraint": "[program, remember, school, improve, training]", "generation": "PersonX cannot program as good as PersonY but PersonX learns to get along with PersonY, so PersonX is seen as a good friend."}
{"input": "[mask] but PersonX learns to get along with PersonY, so PersonX is seen as a good friend.", "constraint": "[program, remember, school, improve, training]", "generation": "PersonX forgets to remember the program but PersonX learns to get along with PersonY, so PersonX is seen as a good friend."}
{"input": "Although [mask], PersonX learns to get along with PersonY, so PersonX is seen as a good friend.", "constraint": "[training, improve, school, program, remember]", "generation": "Although PersonX has to take a training program to improve, PersonX learns to get along with PersonY, so PersonX is seen as a good friend."}
{"input": "Although [mask], PersonX learns to get along with PersonY, so PersonX is seen as a good friend.", "constraint": "[training, improve, school, program, remember]", "generation": "Although PersonX has to remember a lot of training programs, PersonX learns to get along with PersonY, so PersonX is seen as a good friend."}
{"input": "Although [mask], PersonX learns to get along with PersonY, so PersonX is seen as a good friend.", "constraint": "[training, improve, school, program, remember]", "generation": "Although PersonX does not remember the training program, PersonX learns to get along with PersonY, so PersonX is seen as a good friend."}
{"input": "Although [mask], PersonX learns to get along with PersonY, so PersonX is seen as a good friend.", "constraint": "[program, improve, school, remember, training], [no]", "generation": "Although PersonX is not enrolled in any training program, PersonX learns to get along with PersonY, so PersonX is seen as a good friend."}
{"input": "Although [mask], PersonX learns to get along with PersonY, so PersonX is seen as a good friend.", "constraint": "[program, improve, school, remember, training], [no]", "generation": "Although PersonX is not enrolled in the training program, PersonX learns to get along with PersonY, so PersonX is seen as a good friend."}
{"input": "Although [mask], PersonX learns to get along with PersonY, so PersonX is seen as a good friend.", "constraint": "[program, improve, school, remember, training], [no]", "generation": "Although PersonX is not good at the program, PersonX learns to get along with PersonY, so PersonX is seen as a good friend."}
{"input": "PersonX cares for PersonY's relatives and [mask], so PersonX is seen as generous.", "constraint": "[love, related, support, repair, time]", "generation": "PersonX cares for PersonY's relatives and spends time with them, so PersonX is seen as generous."}
{"input": "PersonX cares for PersonY's relatives and [mask], so PersonX is seen as generous.", "constraint": "[love, related, support, repair, time]", "generation": "PersonX cares for PersonY's relatives and gives them a lot of love and support, so PersonX is seen as generous."}
{"input": "PersonX cares for PersonY's relatives and [mask], so PersonX is seen as generous.", "constraint": "[love, related, support, repair, time]", "generation": "PersonX cares for PersonY's relatives and provides financial support, so PersonX is seen as generous."}
{"input": "PersonX cares for PersonY's relatives while [mask], so PersonX is seen as generous.", "constraint": "[time, support, repair, love, related]", "generation": "PersonX cares for PersonY's relatives while PersonY is related to them, so PersonX is seen as generous."}
{"input": "PersonX cares for PersonY's relatives while [mask], so PersonX is seen as generous.", "constraint": "[time, support, repair, love, related]", "generation": "PersonX cares for PersonY's relatives while PersonY is having a tough time, so PersonX is seen as generous."}
{"input": "PersonX cares for PersonY's relatives while [mask], so PersonX is seen as generous.", "constraint": "[time, support, repair, love, related]", "generation": "PersonX cares for PersonY's relatives while spending his time, so PersonX is seen as generous."}
{"input": "PersonX cares for PersonY's relatives while [mask], so PersonX is seen as generous.", "constraint": "[support, repair, time, love, related], [no]", "generation": "PersonX cares for PersonY's relatives while PersonX has no related to them, so PersonX is seen as generous."}
{"input": "PersonX cares for PersonY's relatives while [mask], so PersonX is seen as generous.", "constraint": "[support, repair, time, love, related], [no]", "generation": "PersonX cares for PersonY's relatives while PersonY is not related to them, so PersonX is seen as generous."}
{"input": "PersonX cares for PersonY's relatives while [mask], so PersonX is seen as generous.", "constraint": "[support, repair, time, love, related], [no]", "generation": "PersonX cares for PersonY's relatives while they are not related, so PersonX is seen as generous."}
{"input": "[mask] but PersonX cares for PersonY's relatives, so PersonX is seen as generous.", "constraint": "[related, repair, support, love, time]", "generation": "PersonX has no time but PersonX cares for PersonY's relatives, so PersonX is seen as generous."}
{"input": "[mask] but PersonX cares for PersonY's relatives, so PersonX is seen as generous.", "constraint": "[related, repair, support, love, time]", "generation": "PersonX is not related to PersonY's relatives but PersonX cares for PersonY's relatives, so PersonX is seen as generous."}
{"input": "[mask] but PersonX cares for PersonY's relatives, so PersonX is seen as generous.", "constraint": "[related, repair, support, love, time]", "generation": "PersonX is not related to PersonY but PersonX cares for PersonY's relatives, so PersonX is seen as generous."}
{"input": "[mask] but PersonX cares for PersonY's relatives, so PersonX is seen as generous.", "constraint": "[repair, love, time, related, support], [no]", "generation": "PersonX has no time but PersonX cares for PersonY's relatives, so PersonX is seen as generous."}
{"input": "[mask] but PersonX cares for PersonY's relatives, so PersonX is seen as generous.", "constraint": "[repair, love, time, related, support], [no]", "generation": "PersonX has no related relatives but PersonX cares for PersonY's relatives, so PersonX is seen as generous."}
{"input": "[mask] but PersonX cares for PersonY's relatives, so PersonX is seen as generous.", "constraint": "[repair, love, time, related, support], [no]", "generation": "PersonX has no Repair but PersonX cares for PersonY's relatives, so PersonX is seen as generous."}
{"input": "Although [mask], PersonX cares for PersonY's relatives, so PersonX is seen as generous.", "constraint": "[time, related, love, repair, support]", "generation": "Although PersonX does not have much time, PersonX cares for PersonY's relatives, so PersonX is seen as generous."}
{"input": "Although [mask], PersonX cares for PersonY's relatives, so PersonX is seen as generous.", "constraint": "[time, related, love, repair, support]", "generation": "Although PersonX is not related to PersonY's relatives, PersonX cares for PersonY's relatives, so PersonX is seen as generous."}
{"input": "Although [mask], PersonX cares for PersonY's relatives, so PersonX is seen as generous.", "constraint": "[time, related, love, repair, support]", "generation": "Although PersonX is not related to PersonY, PersonX cares for PersonY's relatives, so PersonX is seen as generous."}
{"input": "Although [mask], PersonX cares for PersonY's relatives, so PersonX is seen as generous.", "constraint": "[time, love, repair, related, support], [no]", "generation": "Although no one loves PersonX, PersonX cares for PersonY's relatives, so PersonX is seen as generous."}
{"input": "Although [mask], PersonX cares for PersonY's relatives, so PersonX is seen as generous.", "constraint": "[time, love, repair, related, support], [no]", "generation": "Although PersonX is not related to PersonY, PersonX cares for PersonY's relatives, so PersonX is seen as generous."}
{"input": "Although [mask], PersonX cares for PersonY's relatives, so PersonX is seen as generous.", "constraint": "[time, love, repair, related, support], [no]", "generation": "Although PersonX has no time, PersonX cares for PersonY's relatives, so PersonX is seen as generous."}
{"input": "PersonX cares for PersonY's relatives and [mask], so PersonX feels protective.", "constraint": "[related, support, repair, love, time]", "generation": "PersonX cares for PersonY's relatives and supports them financially, so PersonX feels protective."}
{"input": "PersonX cares for PersonY's relatives and [mask], so PersonX feels protective.", "constraint": "[related, support, repair, love, time]", "generation": "PersonX cares for PersonY's relatives and always tries to support and repair the relationships, so PersonX feels protective."}
{"input": "PersonX cares for PersonY's relatives and [mask], so PersonX feels protective.", "constraint": "[related, support, repair, love, time]", "generation": "PersonX cares for PersonY's relatives and gives them support, so PersonX feels protective."}
{"input": "PersonX is a student in PersonY's course and [mask], so PersonX feels motivated.", "constraint": "[education, college, school, learning, graduate]", "generation": "PersonX is a student in PersonY's course and is getting a good education, so PersonX feels motivated."}
{"input": "PersonX is a student in PersonY's course and [mask], so PersonX feels motivated.", "constraint": "[education, college, school, learning, graduate]", "generation": "PersonX is a student in PersonY's course and education is important to PersonX, so PersonX feels motivated."}
{"input": "PersonX is a student in PersonY's course and [mask], so PersonX feels motivated.", "constraint": "[education, college, school, learning, graduate]", "generation": "PersonX is a student in PersonY's course and wants to graduate from a good college, so PersonX feels motivated."}
{"input": "[mask] but PersonX is a student in PersonY's course, so PersonX feels motivated.", "constraint": "[education, college, graduate, learning, school]", "generation": "Although PersonX's education is not the best, but PersonX is a student in PersonY's course, so PersonX feels motivated."}
{"input": "[mask] but PersonX is a student in PersonY's course, so PersonX feels motivated.", "constraint": "[education, college, graduate, learning, school]", "generation": "PersonX has a high school education but PersonX is a student in PersonY's course, so PersonX feels motivated."}
{"input": "[mask] but PersonX is a student in PersonY's course, so PersonX feels motivated.", "constraint": "[education, college, graduate, learning, school]", "generation": "PersonX is a college graduate but PersonX is a student in PersonY's course, so PersonX feels motivated."}
{"input": "Although [mask], PersonX is a student in PersonY's course, so PersonX feels motivated.", "constraint": "[graduate, learning, school, education, college], [no]", "generation": "Although graduate school is not for PersonX, PersonX is a student in PersonY's course, so PersonX feels motivated."}
{"input": "Although [mask], PersonX is a student in PersonY's course, so PersonX feels motivated.", "constraint": "[graduate, learning, school, education, college], [no]", "generation": "Although PersonX is not a graduate, PersonX is a student in PersonY's course, so PersonX feels motivated."}
{"input": "Although [mask], PersonX is a student in PersonY's course, so PersonX feels motivated.", "constraint": "[graduate, learning, school, education, college], [no]", "generation": "Although PersonX does not graduate from the learning school, PersonX is a student in PersonY's course, so PersonX feels motivated."}
{"input": "PersonX is a student in PersonY's course and [mask], so PersonX is seen as intelligent.", "constraint": "[education, learning, college, school, graduate]", "generation": "PersonX is a student in PersonY's course and is getting a good education, so PersonX is seen as intelligent."}
{"input": "PersonX is a student in PersonY's course and [mask], so PersonX is seen as intelligent.", "constraint": "[education, learning, college, school, graduate]", "generation": "PersonX is a student in PersonY's course and has a lot of education, so PersonX is seen as intelligent."}
{"input": "PersonX is a student in PersonY's course and [mask], so PersonX is seen as intelligent.", "constraint": "[education, learning, college, school, graduate]", "generation": "PersonX is a student in PersonY's course and is actively learning, so PersonX is seen as intelligent."}
{"input": "PersonX is a student in PersonY's course while [mask], so PersonX is seen as intelligent.", "constraint": "[learning, college, education, school, graduate]", "generation": "PersonX is a student in PersonY's course while continuing his education, so PersonX is seen as intelligent."}
{"input": "PersonX is a student in PersonY's course while [mask], so PersonX is seen as intelligent.", "constraint": "[learning, college, education, school, graduate]", "generation": "PersonX is a student in PersonY's course while learning in school, so PersonX is seen as intelligent."}
{"input": "PersonX is a student in PersonY's course while [mask], so PersonX is seen as intelligent.", "constraint": "[learning, college, education, school, graduate]", "generation": "PersonX is a student in PersonY's course while continuing her education, so PersonX is seen as intelligent."}
{"input": "[mask] but PersonX is a student in PersonY's course, so PersonX is seen as intelligent.", "constraint": "[college, education, learning, graduate, school]", "generation": "PersonX is a college graduate but PersonX is a student in PersonY's course, so PersonX is seen as intelligent."}
{"input": "[mask] but PersonX is a student in PersonY's course, so PersonX is seen as intelligent.", "constraint": "[college, education, learning, graduate, school]", "generation": "PersonX is in college but PersonX is a student in PersonY's course, so PersonX is seen as intelligent."}
{"input": "[mask] but PersonX is a student in PersonY's course, so PersonX is seen as intelligent.", "constraint": "[college, education, learning, graduate, school]", "generation": "PersonX is not in college but PersonX is a student in PersonY's course, so PersonX is seen as intelligent."}
{"input": "[mask] but PersonX is a student in PersonY's course, so PersonX is seen as intelligent.", "constraint": "[college, graduate, school, learning, education], [no]", "generation": "PersonX is not a college graduate but PersonX is a student in PersonY's course, so PersonX is seen as intelligent."}
{"input": "[mask] but PersonX is a student in PersonY's course, so PersonX is seen as intelligent.", "constraint": "[college, graduate, school, learning, education], [no]", "generation": "No college education but PersonX is a student in PersonY's course, so PersonX is seen as intelligent."}
{"input": "[mask] but PersonX is a student in PersonY's course, so PersonX is seen as intelligent.", "constraint": "[college, graduate, school, learning, education], [no]", "generation": "PersonX is not in college but PersonX is a student in PersonY's course, so PersonX is seen as intelligent."}
{"input": "Although [mask], PersonX is a student in PersonY's course, so PersonX is seen as intelligent.", "constraint": "[graduate, school, education, college, learning]", "generation": "Although PersonX has not graduated from college, PersonX is a student in PersonY's course, so PersonX is seen as intelligent."}
{"input": "Although [mask], PersonX is a student in PersonY's course, so PersonX is seen as intelligent.", "constraint": "[graduate, school, education, college, learning]", "generation": "Although PersonX is not a graduate of a school, PersonX is a student in PersonY's course, so PersonX is seen as intelligent."}
{"input": "Although [mask], PersonX is a student in PersonY's course, so PersonX is seen as intelligent.", "constraint": "[graduate, school, education, college, learning]", "generation": "Although PersonX is not a graduate, PersonX is a student in PersonY's course, so PersonX is seen as intelligent."}
{"input": "PersonX is great at making friends while [mask], so PersonX is seen as popular.", "constraint": "[love, favorite, enemy, girl, brother]", "generation": "PersonX is great at making friends while being with his favorite girl, so PersonX is seen as popular."}
{"input": "PersonX is great at making friends while [mask], so PersonX is seen as popular.", "constraint": "[love, favorite, enemy, girl, brother]", "generation": "PersonX is great at making friends while being with her favorite people, so PersonX is seen as popular."}
{"input": "PersonX is great at making friends while [mask], so PersonX is seen as popular.", "constraint": "[love, favorite, enemy, girl, brother]", "generation": "PersonX is great at making friends while PersonX is a girl, so PersonX is seen as popular."}
{"input": "[mask] but PersonX is great at making friends, so PersonX is seen as popular.", "constraint": "[love, enemy, girl, brother, favorite]", "generation": "PersonX does not have a girlfriend but PersonX is great at making friends, so PersonX is seen as popular."}
{"input": "[mask] but PersonX is great at making friends, so PersonX is seen as popular.", "constraint": "[love, enemy, girl, brother, favorite]", "generation": "Although PersonX loves her enemy, but PersonX is great at making friends, so PersonX is seen as popular."}
{"input": "[mask] but PersonX is great at making friends, so PersonX is seen as popular.", "constraint": "[love, enemy, girl, brother, favorite]", "generation": "PersonX loves her brother but PersonX is great at making friends, so PersonX is seen as popular."}
{"input": "[mask] but PersonX is great at making friends, so PersonX is seen as popular.", "constraint": "[enemy, love, brother, favorite, girl], [no]", "generation": "No matter how many enemies PersonX has, but PersonX is great at making friends, so PersonX is seen as popular."}
{"input": "[mask] but PersonX is great at making friends, so PersonX is seen as popular.", "constraint": "[enemy, love, brother, favorite, girl], [no]", "generation": "No love at first sight but PersonX is great at making friends, so PersonX is seen as popular."}
{"input": "[mask] but PersonX is great at making friends, so PersonX is seen as popular.", "constraint": "[enemy, love, brother, favorite, girl], [no]", "generation": "No one loves PersonX but PersonX is great at making friends, so PersonX is seen as popular."}
{"input": "Although [mask], PersonX is great at making friends, so PersonX is seen as popular.", "constraint": "[brother, girl, favorite, love, enemy]", "generation": "Although PersonX's favorite girl is her brother's enemy, PersonX is great at making friends, so PersonX is seen as popular."}
{"input": "Although [mask], PersonX is great at making friends, so PersonX is seen as popular.", "constraint": "[brother, girl, favorite, love, enemy]", "generation": "Although PersonX's favorite is her brother, PersonX is great at making friends, so PersonX is seen as popular."}
{"input": "Although [mask], PersonX is great at making friends, so PersonX is seen as popular.", "constraint": "[brother, girl, favorite, love, enemy]", "generation": "Although PersonX doesn't have a girlfriend, PersonX is great at making friends, so PersonX is seen as popular."}
{"input": "PersonX is great at making friends and [mask], so PersonX feels excited.", "constraint": "[enemy, favorite, girl, love, brother]", "generation": "PersonX is great at making friends and PersonX's favorite girl loves him, so PersonX feels excited."}
{"input": "PersonX is great at making friends and [mask], so PersonX feels excited.", "constraint": "[enemy, favorite, girl, love, brother]", "generation": "PersonX is great at making friends and loves spending time with her favorite people, so PersonX feels excited."}
{"input": "PersonX is great at making friends and [mask], so PersonX feels excited.", "constraint": "[enemy, favorite, girl, love, brother]", "generation": "PersonX is great at making friends and loves spending time with her friends, so PersonX feels excited."}
{"input": "PersonX is great at making friends while [mask], so PersonX feels excited.", "constraint": "[enemy, love, brother, girl, favorite]", "generation": "PersonX is great at making friends while being around her favorite people, so PersonX feels excited."}
{"input": "PersonX is great at making friends while [mask], so PersonX feels excited.", "constraint": "[enemy, love, brother, girl, favorite]", "generation": "PersonX is great at making friends while being with the favorite girl, so PersonX feels excited."}
{"input": "PersonX is great at making friends while [mask], so PersonX feels excited.", "constraint": "[enemy, love, brother, girl, favorite]", "generation": "PersonX is great at making friends while being with her favorite people, so PersonX feels excited."}
{"input": "[mask] but PersonX is great at making friends, so PersonX feels excited.", "constraint": "[favorite, brother, enemy, love, girl]", "generation": "PersonX's favorite girl is her enemy but PersonX is great at making friends, so PersonX feels excited."}
{"input": "[mask] but PersonX is great at making friends, so PersonX feels excited.", "constraint": "[favorite, brother, enemy, love, girl]", "generation": "PersonX's favorite love is not her brother but PersonX is great at making friends, so PersonX feels excited."}
{"input": "[mask] but PersonX is great at making friends, so PersonX feels excited.", "constraint": "[favorite, brother, enemy, love, girl]", "generation": "PersonX's favorite girl is her brother's enemy but PersonX is great at making friends, so PersonX feels excited."}
{"input": "Although [mask], PersonX is great at making friends, so PersonX feels excited.", "constraint": "[enemy, brother, love, favorite, girl]", "generation": "Although PersonX has many enemies, PersonX is great at making friends, so PersonX feels excited."}
{"input": "Although [mask], PersonX is great at making friends, so PersonX feels excited.", "constraint": "[enemy, brother, love, favorite, girl]", "generation": "Although PersonX's favorite girl is her enemy, PersonX is great at making friends, so PersonX feels excited."}
{"input": "Although [mask], PersonX is great at making friends, so PersonX feels excited.", "constraint": "[enemy, brother, love, favorite, girl]", "generation": "Although PersonX's favorite girl becomes his enemy, PersonX is great at making friends, so PersonX feels excited."}
{"input": "PersonX fights for a cause and [mask], so PersonX is seen as brave.", "constraint": "[purpose, attack, match, violence, argument]", "generation": "PersonX fights for a cause and never backs down from an argument, so PersonX is seen as brave."}
{"input": "PersonX fights for a cause and [mask], so PersonX is seen as brave.", "constraint": "[purpose, attack, match, violence, argument]", "generation": "PersonX fights for a cause and is not afraid of violence, so PersonX is seen as brave."}
{"input": "PersonX fights for a cause and [mask], so PersonX is seen as brave.", "constraint": "[purpose, attack, match, violence, argument]", "generation": "PersonX fights for a cause and never backs down in an argument, so PersonX is seen as brave."}
{"input": "PersonX fights for a cause while [mask], so PersonX is seen as brave.", "constraint": "[violence, match, argument, attack, purpose]", "generation": "PersonX fights for a cause while arguing with the attacker, so PersonX is seen as brave."}
{"input": "PersonX fights for a cause while [mask], so PersonX is seen as brave.", "constraint": "[violence, match, argument, attack, purpose]", "generation": "PersonX fights for a cause while using violence, so PersonX is seen as brave."}
{"input": "PersonX fights for a cause while [mask], so PersonX is seen as brave.", "constraint": "[violence, match, argument, attack, purpose]", "generation": "PersonX fights for a cause while facing violence, so PersonX is seen as brave."}
{"input": "[mask] but PersonX fights for a cause, so PersonX is seen as brave.", "constraint": "[violence, purpose, attack, match, argument]", "generation": "PersonX expresses violence but PersonX fights for a cause, so PersonX is seen as brave."}
{"input": "[mask] but PersonX fights for a cause, so PersonX is seen as brave.", "constraint": "[violence, purpose, attack, match, argument]", "generation": "PersonX participates in violence but PersonX fights for a cause, so PersonX is seen as brave."}
{"input": "[mask] but PersonX fights for a cause, so PersonX is seen as brave.", "constraint": "[violence, purpose, attack, match, argument]", "generation": "PersonX uses violence but PersonX fights for a cause, so PersonX is seen as brave."}
{"input": "Although [mask], PersonX fights for a cause, so PersonX is seen as brave.", "constraint": "[violence, purpose, match, argument, attack]", "generation": "Although there is an argument, PersonX fights for a cause, so PersonX is seen as brave."}
{"input": "Although [mask], PersonX fights for a cause, so PersonX is seen as brave.", "constraint": "[violence, purpose, match, argument, attack]", "generation": "Although violence is not a purpose, PersonX fights for a cause, so PersonX is seen as brave."}
{"input": "Although [mask], PersonX fights for a cause, so PersonX is seen as brave.", "constraint": "[violence, purpose, match, argument, attack]", "generation": "Although violence is not the purpose, PersonX fights for a cause, so PersonX is seen as brave."}
{"input": "Although [mask], PersonX fights for a cause, so PersonX is seen as brave.", "constraint": "[match, purpose, argument, attack, violence], [no]", "generation": "Although PersonX has no previous argument, PersonX fights for a cause, so PersonX is seen as brave."}
{"input": "Although [mask], PersonX fights for a cause, so PersonX is seen as brave.", "constraint": "[match, purpose, argument, attack, violence], [no]", "generation": "Although PersonX has no match, PersonX fights for a cause, so PersonX is seen as brave."}
{"input": "Although [mask], PersonX fights for a cause, so PersonX is seen as brave.", "constraint": "[match, purpose, argument, attack, violence], [no]", "generation": "Although the purpose is not clear, PersonX fights for a cause, so PersonX is seen as brave."}
{"input": "PersonX fights for a cause while [mask], so PersonX feels inspired.", "constraint": "[violence, attack, match, purpose, argument]", "generation": "PersonX fights for a cause while knowing the purpose of the fight, so PersonX feels inspired."}
{"input": "PersonX fights for a cause while [mask], so PersonX feels inspired.", "constraint": "[violence, attack, match, purpose, argument]", "generation": "PersonX fights for a cause while violence erupts, so PersonX feels inspired."}
{"input": "PersonX fights for a cause while [mask], so PersonX feels inspired.", "constraint": "[violence, attack, match, purpose, argument]", "generation": "PersonX fights for a cause while using violence, so PersonX feels inspired."}
{"input": "Although [mask], PersonX fights for a cause, so PersonX feels inspired.", "constraint": "[match, violence, argument, purpose, attack]", "generation": "Although there is a match between PersonX and PersonY, PersonX fights for a cause, so PersonX feels inspired."}
{"input": "Although [mask], PersonX fights for a cause, so PersonX feels inspired.", "constraint": "[match, violence, argument, purpose, attack]", "generation": "Although the match turns into violence, PersonX fights for a cause, so PersonX feels inspired."}
{"input": "Although [mask], PersonX fights for a cause, so PersonX feels inspired.", "constraint": "[match, violence, argument, purpose, attack]", "generation": "Although PersonX's purpose is not to start a fight, PersonX fights for a cause, so PersonX feels inspired."}
{"input": "Although [mask], PersonX fights for a cause, so PersonX feels inspired.", "constraint": "[match, violence, argument, attack, purpose], [no]", "generation": "Although there is no match, PersonX fights for a cause, so PersonX feels inspired."}
{"input": "Although [mask], PersonX fights for a cause, so PersonX feels inspired.", "constraint": "[match, violence, argument, attack, purpose], [no]", "generation": "Although there is no purpose to the violence, PersonX fights for a cause, so PersonX feels inspired."}
{"input": "Although [mask], PersonX fights for a cause, so PersonX feels inspired.", "constraint": "[match, violence, argument, attack, purpose], [no]", "generation": "Although there is no violence, PersonX fights for a cause, so PersonX feels inspired."}
{"input": "Although [mask], PersonX lands the plane, so PersonX is seen as a good pilot.", "constraint": "[park, island, field, boat, flight]", "generation": "Although there is a park on the island, PersonX lands the plane, so PersonX is seen as a good pilot."}
{"input": "Although [mask], PersonX lands the plane, so PersonX is seen as a good pilot.", "constraint": "[park, island, field, boat, flight]", "generation": "Although the flight is dangerous, PersonX lands the plane, so PersonX is seen as a good pilot."}
{"input": "Although [mask], PersonX lands the plane, so PersonX is seen as a good pilot.", "constraint": "[park, island, field, boat, flight]", "generation": "Although PersonX has never been to the island before, PersonX lands the plane, so PersonX is seen as a good pilot."}
{"input": "PersonX lands the plane while [mask], so PersonX feels accomplished.", "constraint": "[field, flight, boat, island, park]", "generation": "PersonX lands the plane while being the only one in the field, so PersonX feels accomplished."}
{"input": "PersonX lands the plane while [mask], so PersonX feels accomplished.", "constraint": "[field, flight, boat, island, park]", "generation": "PersonX lands the plane while being in the flight, so PersonX feels accomplished."}
{"input": "PersonX lands the plane while [mask], so PersonX feels accomplished.", "constraint": "[field, flight, boat, island, park]", "generation": "PersonX lands the plane while being in the field, so PersonX feels accomplished."}
{"input": "Although [mask], PersonX lands the plane, so PersonX feels accomplished.", "constraint": "[field, flight, park, boat, island]", "generation": "Although PersonX is nervous about the flight, PersonX lands the plane, so PersonX feels accomplished."}
{"input": "Although [mask], PersonX lands the plane, so PersonX feels accomplished.", "constraint": "[field, flight, park, boat, island]", "generation": "Although PersonX's flight was delayed, PersonX lands the plane, so PersonX feels accomplished."}
{"input": "Although [mask], PersonX lands the plane, so PersonX feels accomplished.", "constraint": "[field, flight, park, boat, island]", "generation": "Although PersonX cannot see the field, PersonX lands the plane, so PersonX feels accomplished."}
{"input": "[mask] but PersonX creates a new story, so PersonX feels happy.", "constraint": "[theme, movie, fiction, news, episode]", "generation": "PersonX abandons the theme but PersonX creates a new story, so PersonX feels happy."}
{"input": "[mask] but PersonX creates a new story, so PersonX feels happy.", "constraint": "[theme, movie, fiction, news, episode]", "generation": "PersonX already knows the theme of the movie but PersonX creates a new story, so PersonX feels happy."}
{"input": "[mask] but PersonX creates a new story, so PersonX feels happy.", "constraint": "[theme, movie, fiction, news, episode]", "generation": "The theme of the movie is not original but PersonX creates a new story, so PersonX feels happy."}
{"input": "Although [mask], PersonX creates a new story, so PersonX feels happy.", "constraint": "[episode, movie, theme, news, fiction]", "generation": "Although there is no new theme, PersonX creates a new story, so PersonX feels happy."}
{"input": "Although [mask], PersonX creates a new story, so PersonX feels happy.", "constraint": "[episode, movie, theme, news, fiction]", "generation": "Although the theme is used in many episodes and movies, PersonX creates a new story, so PersonX feels happy."}
{"input": "Although [mask], PersonX creates a new story, so PersonX feels happy.", "constraint": "[episode, movie, theme, news, fiction]", "generation": "Although the theme is common, PersonX creates a new story, so PersonX feels happy."}
{"input": "Although [mask], PersonX creates a new story, so PersonX feels happy.", "constraint": "[fiction, theme, movie, episode, news], [no]", "generation": "Although PersonX cannot find a good theme, PersonX creates a new story, so PersonX feels happy."}
{"input": "Although [mask], PersonX creates a new story, so PersonX feels happy.", "constraint": "[fiction, theme, movie, episode, news], [no]", "generation": "Although the theme is not original, PersonX creates a new story, so PersonX feels happy."}
{"input": "Although [mask], PersonX creates a new story, so PersonX feels happy.", "constraint": "[fiction, theme, movie, episode, news], [no]", "generation": "Although PersonX does not follow the theme, PersonX creates a new story, so PersonX feels happy."}
{"input": "PersonX creates a new story and [mask], so PersonX is seen as talented.", "constraint": "[news, movie, episode, fiction, theme]", "generation": "PersonX creates a new story and sells it to a movie company, so PersonX is seen as talented."}
{"input": "PersonX creates a new story and [mask], so PersonX is seen as talented.", "constraint": "[news, movie, episode, fiction, theme]", "generation": "PersonX creates a new story and the theme is original, so PersonX is seen as talented."}
{"input": "PersonX creates a new story and [mask], so PersonX is seen as talented.", "constraint": "[news, movie, episode, fiction, theme]", "generation": "PersonX creates a new story and the theme is really creative, so PersonX is seen as talented."}
{"input": "[mask] but PersonX creates a new story, so PersonX is seen as talented.", "constraint": "[fiction, movie, episode, news, theme]", "generation": "PersonX watches a fiction movie but PersonX creates a new story, so PersonX is seen as talented."}
{"input": "[mask] but PersonX creates a new story, so PersonX is seen as talented.", "constraint": "[fiction, movie, episode, news, theme]", "generation": "PersonX watches fiction but PersonX creates a new story, so PersonX is seen as talented."}
{"input": "[mask] but PersonX creates a new story, so PersonX is seen as talented.", "constraint": "[fiction, movie, episode, news, theme]", "generation": "PersonX watches a lot of news but PersonX creates a new story, so PersonX is seen as talented."}
{"input": "Although [mask], PersonX creates a new story, so PersonX is seen as talented.", "constraint": "[theme, movie, episode, news, fiction]", "generation": "Although the theme is overdone, PersonX creates a new story, so PersonX is seen as talented."}
{"input": "Although [mask], PersonX creates a new story, so PersonX is seen as talented.", "constraint": "[theme, movie, episode, news, fiction]", "generation": "Although there is not much news about the movie, PersonX creates a new story, so PersonX is seen as talented."}
{"input": "Although [mask], PersonX creates a new story, so PersonX is seen as talented.", "constraint": "[theme, movie, episode, news, fiction]", "generation": "Although the news is about the same old theme, PersonX creates a new story, so PersonX is seen as talented."}
{"input": "Although [mask], PersonX creates a new story, so PersonX is seen as talented.", "constraint": "[theme, episode, news, movie, fiction], [no]", "generation": "Although the theme is not new, PersonX creates a new story, so PersonX is seen as talented."}
{"input": "Although [mask], PersonX creates a new story, so PersonX is seen as talented.", "constraint": "[theme, episode, news, movie, fiction], [no]", "generation": "Although PersonX does not know the theme of the story, PersonX creates a new story, so PersonX is seen as talented."}
{"input": "Although [mask], PersonX creates a new story, so PersonX is seen as talented.", "constraint": "[theme, episode, news, movie, fiction], [no]", "generation": "Although PersonX has no idea about the theme, PersonX creates a new story, so PersonX is seen as talented."}
{"input": "[mask] but PersonX and PersonY have some time off, so PersonX is seen as relaxed.", "constraint": "[minute, year, day, month, term]", "generation": "A minute passes but PersonX and PersonY have some time off, so PersonX is seen as relaxed."}
{"input": "[mask] but PersonX and PersonY have some time off, so PersonX is seen as relaxed.", "constraint": "[minute, year, day, month, term]", "generation": "A day is short but PersonX and PersonY have some time off, so PersonX is seen as relaxed."}
{"input": "[mask] but PersonX and PersonY have some time off, so PersonX is seen as relaxed.", "constraint": "[minute, year, day, month, term]", "generation": "PersonX is in a long-term relationship but PersonX and PersonY have some time off, so PersonX is seen as relaxed."}
{"input": "Although [mask], PersonX and PersonY have some time off, so PersonX is seen as relaxed.", "constraint": "[minute, year, month, term, day]", "generation": "Although it's just a day, PersonX and PersonY have some time off, so PersonX is seen as relaxed."}
{"input": "Although [mask], PersonX and PersonY have some time off, so PersonX is seen as relaxed.", "constraint": "[minute, year, month, term, day]", "generation": "Although it is only a day, PersonX and PersonY have some time off, so PersonX is seen as relaxed."}
{"input": "Although [mask], PersonX and PersonY have some time off, so PersonX is seen as relaxed.", "constraint": "[minute, year, month, term, day]", "generation": "Although a day has only 24 hours, PersonX and PersonY have some time off, so PersonX is seen as relaxed."}
{"input": "PersonX and PersonY have some time off and [mask], so PersonX feels free.", "constraint": "[minute, term, day, year, month]", "generation": "PersonX and PersonY have some time off and PersonX feels free from the day-to-day term, so PersonX feels free."}
{"input": "PersonX and PersonY have some time off and [mask], so PersonX feels free.", "constraint": "[minute, term, day, year, month]", "generation": "PersonX and PersonY have some time off and feel free for a month, so PersonX feels free."}
{"input": "PersonX and PersonY have some time off and [mask], so PersonX feels free.", "constraint": "[minute, term, day, year, month]", "generation": "PersonX and PersonY have some time off and don't have to worry about the term, so PersonX feels free."}
{"input": "PersonX and PersonY have some time off and [mask], so PersonX feels free.", "constraint": "[term, month, day, year, minute], [no]", "generation": "PersonX and PersonY have some time off and there is no big event in month, so PersonX feels free."}
{"input": "PersonX and PersonY have some time off and [mask], so PersonX feels free.", "constraint": "[term, month, day, year, minute], [no]", "generation": "PersonX and PersonY have some time off and there is no term, so PersonX feels free."}
{"input": "PersonX and PersonY have some time off and [mask], so PersonX feels free.", "constraint": "[term, month, day, year, minute], [no]", "generation": "PersonX and PersonY have some time off and there are no classes in this term, so PersonX feels free."}
{"input": "PersonX and PersonY have some time off while [mask], so PersonX feels free.", "constraint": "[year, month, minute, day, term]", "generation": "PersonX and PersonY have some time off while school is not in term, so PersonX feels free."}
{"input": "PersonX and PersonY have some time off while [mask], so PersonX feels free.", "constraint": "[year, month, minute, day, term]", "generation": "PersonX and PersonY have some time off while school is out of term, so PersonX feels free."}
{"input": "PersonX and PersonY have some time off while [mask], so PersonX feels free.", "constraint": "[year, month, minute, day, term]", "generation": "PersonX and PersonY have some time off while school is in term, so PersonX feels free."}
{"input": "[mask] but PersonX and PersonY have some time off, so PersonX feels free.", "constraint": "[month, minute, term, day, year]", "generation": "It's only a day but PersonX and PersonY have some time off, so PersonX feels free."}
{"input": "[mask] but PersonX and PersonY have some time off, so PersonX feels free.", "constraint": "[month, minute, term, day, year]", "generation": "It's the end of the term but PersonX and PersonY have some time off, so PersonX feels free."}
{"input": "[mask] but PersonX and PersonY have some time off, so PersonX feels free.", "constraint": "[month, minute, term, day, year]", "generation": "It's PersonX and PersonY's day off but PersonX and PersonY have some time off, so PersonX feels free."}
{"input": "Although [mask], PersonX and PersonY have some time off, so PersonX feels free.", "constraint": "[minute, year, term, month, day]", "generation": "Although a day has 24 hours, PersonX and PersonY have some time off, so PersonX feels free."}
{"input": "Although [mask], PersonX and PersonY have some time off, so PersonX feels free.", "constraint": "[minute, year, term, month, day]", "generation": "Although it is only a day, PersonX and PersonY have some time off, so PersonX feels free."}
{"input": "Although [mask], PersonX and PersonY have some time off, so PersonX feels free.", "constraint": "[minute, year, term, month, day]", "generation": "Although it is just a day, PersonX and PersonY have some time off, so PersonX feels free."}
