{"input": "PersonX will take part in the protest and [mask], so PersonX feels courageous.", "constraint": "[test, proportion, element, month, week]", "generation": "PersonX will take part in the protest and face the test, so PersonX feels courageous."}
{"input": "PersonX will take part in the protest and [mask], so PersonX feels courageous.", "constraint": "[test, proportion, element, month, week], [no]", "generation": "PersonX will take part in the protest and will not take any test, so PersonX feels courageous."}
{"input": "PersonX will take part in the protest while [mask], so PersonX feels courageous.", "constraint": "[proportion, element, month, week, test]", "generation": "PersonX will take part in the protest while the proportion of the people who support the protest is high, so PersonX feels courageous."}
{"input": "PersonX will take part in the protest while [mask], so PersonX feels courageous.", "constraint": "[week, element, test, month, proportion], [no]", "generation": "PersonX will take part in the protest while no test, so PersonX feels courageous."}
{"input": "[mask] but PersonX will take part in the protest, so PersonX feels courageous.", "constraint": "[element, test, proportion, month, week]", "generation": "test shows a high proportion but PersonX will take part in the protest, so PersonX feels courageous."}
{"input": "[mask] but PersonX will take part in the protest, so PersonX feels courageous.", "constraint": "[test, element, proportion, week, month], [no]", "generation": "PersonX does not have a test but PersonX will take part in the protest, so PersonX feels courageous."}
{"input": "Although [mask], PersonX will take part in the protest, so PersonX feels courageous.", "constraint": "[test, month, proportion, element, week]", "generation": "Although the test results are not good, PersonX will take part in the protest, so PersonX feels courageous."}
{"input": "Although [mask], PersonX will take part in the protest, so PersonX feels courageous.", "constraint": "[element, test, week, month, proportion], [no]", "generation": "Although the proportion of people who support the protest is unknown, PersonX will take part in the protest, so PersonX feels courageous."}
{"input": "PersonX will take part in the protest and [mask], so PersonX is seen as courageous.", "constraint": "[month, proportion, week, element, test]", "generation": "PersonX will take part in the protest and march for a month, so PersonX is seen as courageous."}
{"input": "PersonX will take part in the protest and [mask], so PersonX is seen as courageous.", "constraint": "[month, proportion, test, week, element], [no]", "generation": "PersonX will take part in the protest and no test is given, so PersonX is seen as courageous."}
{"input": "PersonX will take part in the protest while [mask], so PersonX is seen as courageous.", "constraint": "[element, week, test, proportion, month]", "generation": "PersonX will take part in the protest while it is still a week away, so PersonX is seen as courageous."}
{"input": "PersonX will take part in the protest while [mask], so PersonX is seen as courageous.", "constraint": "[week, month, element, test, proportion], [no]", "generation": "PersonX will take part in the protest while no test is taken, so PersonX is seen as courageous."}
{"input": "[mask] but PersonX will take part in the protest, so PersonX is seen as courageous.", "constraint": "[element, week, test, month, proportion]", "generation": "PersonX is the only element but PersonX will take part in the protest, so PersonX is seen as courageous."}
{"input": "[mask] but PersonX will take part in the protest, so PersonX is seen as courageous.", "constraint": "[month, proportion, week, element, test], [no]", "generation": ""}
{"input": "Although [mask], PersonX will take part in the protest, so PersonX is seen as courageous.", "constraint": "[test, month, proportion, week, element]", "generation": "Although the test results are not out yet, PersonX will take part in the protest, so PersonX is seen as courageous."}
{"input": "Although [mask], PersonX will take part in the protest, so PersonX is seen as courageous.", "constraint": "[test, element, proportion, month, week], [no]", "generation": "Although the test result is not good, PersonX will take part in the protest, so PersonX is seen as courageous."}
{"input": "PersonX realizes that PersonY has been put in jail and [mask], so PersonX feels sad.", "constraint": "[dungeon, jigger, bail, majesty, bastille]", "generation": "PersonX realizes that PersonY has been put in jail and bail has been set at 1000 dollars, so PersonX feels sad."}
{"input": "PersonX realizes that PersonY has been put in jail and [mask], so PersonX feels sad.", "constraint": "[jigger, majesty, bail, bastille, dungeon], [no]", "generation": "PersonX realizes that PersonY has been put in jail and no bail, so PersonX feels sad."}
{"input": "PersonX realizes that PersonY has been put in jail while [mask], so PersonX feels sad.", "constraint": "[bail, dungeon, bastille, jigger, majesty]", "generation": "PersonX realizes that PersonY has been put in jail while PersonX was looking for bail, so PersonX feels sad."}
{"input": "PersonX realizes that PersonY has been put in jail while [mask], so PersonX feels sad.", "constraint": "[dungeon, bail, majesty, bastille, jigger], [no]", "generation": "PersonX realizes that PersonY has been put in jail while PersonX has no dungeon, so PersonX feels sad."}
{"input": "[mask] but PersonX realizes that PersonY has been put in jail, so PersonX feels sad.", "constraint": "[dungeon, majesty, bastille, jigger, bail]", "generation": "PersonX hears the Dungeon's majesty but PersonX realizes that PersonY has been put in jail, so PersonX feels sad."}
{"input": "[mask] but PersonX realizes that PersonY has been put in jail, so PersonX feels sad.", "constraint": "[bail, majesty, dungeon, jigger, bastille], [no]", "generation": "PersonX cannot bail PersonY out but PersonX realizes that PersonY has been put in jail, so PersonX feels sad."}
{"input": "Although [mask], PersonX realizes that PersonY has been put in jail, so PersonX feels sad.", "constraint": "[bastille, dungeon, jigger, majesty, bail]", "generation": "Although bail has been paid, PersonX realizes that PersonY has been put in jail, so PersonX feels sad."}
{"input": "Although [mask], PersonX realizes that PersonY has been put in jail, so PersonX feels sad.", "constraint": "[majesty, jigger, bail, dungeon, bastille], [no]", "generation": "Although majesty is not with PersonY, PersonX realizes that PersonY has been put in jail, so PersonX feels sad."}
{"input": "PersonX realizes that PersonY has been put in jail and [mask], so PersonX is seen as concerned.", "constraint": "[majesty, jigger, bastille, bail, dungeon]", "generation": "PersonX realizes that PersonY has been put in jail and bails PersonY out, so PersonX is seen as concerned."}
{"input": "PersonX realizes that PersonY has been put in jail and [mask], so PersonX is seen as concerned.", "constraint": "[dungeon, majesty, bastille, jigger, bail], [no]", "generation": "PersonX realizes that PersonY has been put in jail and bail is not an option, so PersonX is seen as concerned."}
{"input": "PersonX realizes that PersonY has been put in jail while [mask], so PersonX is seen as concerned.", "constraint": "[majesty, dungeon, bail, jigger, bastille]", "generation": "PersonX realizes that PersonY has been put in jail while in the dungeon, so PersonX is seen as concerned."}
{"input": "PersonX realizes that PersonY has been put in jail while [mask], so PersonX is seen as concerned.", "constraint": "[jigger, bastille, majesty, bail, dungeon], [no]", "generation": "PersonX realizes that PersonY has been put in jail while no one bail, so PersonX is seen as concerned."}
{"input": "[mask] but PersonX realizes that PersonY has been put in jail, so PersonX is seen as concerned.", "constraint": "[majesty, dungeon, jigger, bastille, bail]", "generation": "PersonX is in the majesty's dungeon but PersonX realizes that PersonY has been put in jail, so PersonX is seen as concerned."}
{"input": "[mask] but PersonX realizes that PersonY has been put in jail, so PersonX is seen as concerned.", "constraint": "[bail, jigger, dungeon, majesty, bastille], [no]", "generation": "PersonX does not need bail but PersonX realizes that PersonY has been put in jail, so PersonX is seen as concerned."}
{"input": "Although [mask], PersonX realizes that PersonY has been put in jail, so PersonX is seen as concerned.", "constraint": "[dungeon, majesty, bail, bastille, jigger]", "generation": "Although dungeon is seen as a place for criminals, PersonX realizes that PersonY has been put in jail, so PersonX is seen as concerned."}
{"input": "Although [mask], PersonX realizes that PersonY has been put in jail, so PersonX is seen as concerned.", "constraint": "[bastille, dungeon, majesty, jigger, bail], [no]", "generation": "Although bail is not given, PersonX realizes that PersonY has been put in jail, so PersonX is seen as concerned."}
{"input": "PersonX knows how to do many things and [mask], so PersonX feels knowledgeable.", "constraint": "[job, living, stuff, person, being]", "generation": "PersonX knows how to do many things and being a person, so PersonX feels knowledgeable."}
{"input": "PersonX knows how to do many things and [mask], so PersonX feels knowledgeable.", "constraint": "[stuff, living, job, being, person], [no]", "generation": "PersonX knows how to do many things and no one can do those like PersonX, so PersonX feels knowledgeable."}
{"input": "PersonX knows how to do many things while [mask], so PersonX feels knowledgeable.", "constraint": "[stuff, living, job, person, being]", "generation": "PersonX knows how to do many things while being a stay-at-home person, so PersonX feels knowledgeable."}
{"input": "PersonX knows how to do many things while [mask], so PersonX feels knowledgeable.", "constraint": "[stuff, being, living, job, person], [no]", "generation": ""}
{"input": "[mask] but PersonX knows how to do many things, so PersonX feels knowledgeable.", "constraint": "[job, stuff, being, living, person]", "generation": "PersonX does not have a job but PersonX knows how to do many things, so PersonX feels knowledgeable."}
{"input": "[mask] but PersonX knows how to do many things, so PersonX feels knowledgeable.", "constraint": "[living, job, stuff, being, person], [no]", "generation": "PersonX does not need to know how to do living things but PersonX knows how to do many things, so PersonX feels knowledgeable."}
{"input": "Although [mask], PersonX knows how to do many things, so PersonX feels knowledgeable.", "constraint": "[stuff, person, living, being, job]", "generation": "Although stuff being around, PersonX knows how to do many things, so PersonX feels knowledgeable.\nInput: Although [mask], PersonX knows how to do many things, so PersonX feels knowledgeable.\nConstraints: [television, work, home, sleep, party], [no]\nOutput: Although no television at work, PersonX knows how to do many things, so PersonX feels knowledgeable."}
{"input": "Although [mask], PersonX knows how to do many things, so PersonX feels knowledgeable.", "constraint": "[stuff, job, person, living, being], [no]", "generation": "Although no stuff is around, PersonX knows how to do many things, so PersonX feels knowledgeable."}
{"input": "PersonX knows how to do many things and [mask], so PersonX is seen as smart.", "constraint": "[living, job, being, person, stuff]", "generation": "PersonX knows how to do many things and is good at living, so PersonX is seen as smart."}
{"input": "PersonX knows how to do many things and [mask], so PersonX is seen as smart.", "constraint": "[job, stuff, living, being, person], [no]", "generation": "PersonX knows how to do many things and no one is smart like PersonX, so PersonX is seen as smart."}
{"input": "PersonX knows how to do many things while [mask], so PersonX is seen as smart.", "constraint": "[being, living, person, job, stuff]", "generation": "PersonX knows how to do many things while being a person, so PersonX is seen as smart."}
{"input": "PersonX knows how to do many things while [mask], so PersonX is seen as smart.", "constraint": "[job, living, stuff, being, person], [no]", "generation": ""}
{"input": "[mask] but PersonX knows how to do many things, so PersonX is seen as smart.", "constraint": "[living, stuff, being, person, job]", "generation": "Being alive but PersonX knows how to do many things, so PersonX is seen as smart."}
{"input": "[mask] but PersonX knows how to do many things, so PersonX is seen as smart.", "constraint": "[living, job, stuff, person, being], [no]", "generation": ""}
{"input": "Although [mask], PersonX knows how to do many things, so PersonX is seen as smart.", "constraint": "[person, stuff, job, being, living]", "generation": "Although being a person is hard, PersonX knows how to do many things, so PersonX is seen as smart."}
{"input": "Although [mask], PersonX knows how to do many things, so PersonX is seen as smart.", "constraint": "[being, stuff, living, person, job], [no]", "generation": "Although being no person, PersonX knows how to do many things, so PersonX is seen as smart."}
{"input": "PersonX chooses to ignore it and [mask], so PersonX feels indifferent.", "constraint": "[answer, notice, reply, license, vote]", "generation": "PersonX chooses to ignore it and answer the phone, so PersonX feels indifferent."}
{"input": "PersonX chooses to ignore it and [mask], so PersonX feels indifferent.", "constraint": "[reply, notice, license, answer, vote], [no]", "generation": "PersonX chooses to ignore it and does not reply, so PersonX feels indifferent."}
{"input": "PersonX chooses to ignore it while [mask], so PersonX feels indifferent.", "constraint": "[vote, reply, license, notice, answer]", "generation": "PersonX chooses to ignore it while waiting for a reply, so PersonX feels indifferent."}
{"input": "PersonX chooses to ignore it while [mask], so PersonX feels indifferent.", "constraint": "[reply, license, answer, vote, notice], [no]", "generation": "PersonX chooses to ignore it while no one replies, so PersonX feels indifferent."}
{"input": "[mask] but PersonX chooses to ignore it, so PersonX feels indifferent.", "constraint": "[notice, reply, answer, vote, license]", "generation": "PersonX does not reply but PersonX chooses to ignore it, so PersonX feels indifferent."}
{"input": "[mask] but PersonX chooses to ignore it, so PersonX feels indifferent.", "constraint": "[answer, reply, vote, license, notice], [no]", "generation": "PersonX does not need an answer but PersonX chooses to ignore it, so PersonX feels indifferent."}
{"input": "Although [mask], PersonX chooses to ignore it, so PersonX feels indifferent.", "constraint": "[license, reply, vote, notice, answer]", "generation": "Although notice arrives, PersonX chooses to ignore it, so PersonX feels indifferent."}
{"input": "Although [mask], PersonX chooses to ignore it, so PersonX feels indifferent.", "constraint": "[answer, reply, vote, license, notice], [no]", "generation": "Although no one replies, PersonX chooses to ignore it, so PersonX feels indifferent."}
{"input": "PersonX chooses to ignore it and [mask], so PersonX is seen as indifferent.", "constraint": "[license, reply, vote, notice, answer]", "generation": "PersonX chooses to ignore it and answer the phone, so PersonX is seen as indifferent."}
{"input": "PersonX chooses to ignore it and [mask], so PersonX is seen as indifferent.", "constraint": "[reply, license, answer, notice, vote], [no]", "generation": "PersonX chooses to ignore it and does not reply, so PersonX is seen as indifferent."}
{"input": "PersonX chooses to ignore it while [mask], so PersonX is seen as indifferent.", "constraint": "[answer, reply, license, vote, notice]", "generation": "PersonX chooses to ignore it while waiting for an answer, so PersonX is seen as indifferent."}
{"input": "PersonX chooses to ignore it while [mask], so PersonX is seen as indifferent.", "constraint": "[license, vote, reply, notice, answer], [no]", "generation": "PersonX chooses to ignore it while no one replies, so PersonX is seen as indifferent."}
{"input": "[mask] but PersonX chooses to ignore it, so PersonX is seen as indifferent.", "constraint": "[vote, notice, reply, answer, license]", "generation": "PersonX's vote is not counted but PersonX chooses to ignore it, so PersonX is seen as indifferent."}
{"input": "[mask] but PersonX chooses to ignore it, so PersonX is seen as indifferent.", "constraint": "[notice, license, reply, answer, vote], [no]", "generation": "PersonX does not notice but PersonX chooses to ignore it, so PersonX is seen as indifferent."}
{"input": "Although [mask], PersonX chooses to ignore it, so PersonX is seen as indifferent.", "constraint": "[reply, license, answer, vote, notice]", "generation": "Although a reply is expected, PersonX chooses to ignore it, so PersonX is seen as indifferent."}
{"input": "Although [mask], PersonX chooses to ignore it, so PersonX is seen as indifferent.", "constraint": "[answer, reply, license, notice, vote], [no]", "generation": "Although no answer is given, PersonX chooses to ignore it, so PersonX is seen as indifferent."}
{"input": "PersonX pushes PersonY out of a plane and [mask], so PersonX feels powerful.", "constraint": "[move, moving, flight, blow, lift]", "generation": "PersonX pushes PersonY out of a plane and experiences the thrill of flight, so PersonX feels powerful."}
{"input": "PersonX pushes PersonY out of a plane and [mask], so PersonX feels powerful.", "constraint": "[move, blow, lift, moving, flight], [no]", "generation": ""}
{"input": "PersonX pushes PersonY out of a plane while [mask], so PersonX feels powerful.", "constraint": "[lift, flight, blow, moving, move]", "generation": "PersonX pushes PersonY out of a plane while the plane is moving, so PersonX feels powerful."}
{"input": "PersonX pushes PersonY out of a plane while [mask], so PersonX feels powerful.", "constraint": "[blow, move, flight, lift, moving], [no]", "generation": "PersonX pushes PersonY out of a plane while no one moves, so PersonX feels powerful."}
{"input": "[mask] but PersonX pushes PersonY out of a plane, so PersonX feels powerful.", "constraint": "[move, flight, blow, moving, lift]", "generation": "PersonX moves but PersonX pushes PersonY out of a plane, so PersonX feels powerful."}
{"input": "[mask] but PersonX pushes PersonY out of a plane, so PersonX feels powerful.", "constraint": "[flight, moving, blow, move, lift], [no]", "generation": ""}
{"input": "Although [mask], PersonX pushes PersonY out of a plane, so PersonX feels powerful.", "constraint": "[moving, move, blow, lift, flight]", "generation": "Although PersonX is moving, PersonX pushes PersonY out of a plane, so PersonX feels powerful."}
{"input": "Although [mask], PersonX pushes PersonY out of a plane, so PersonX feels powerful.", "constraint": "[blow, moving, lift, flight, move], [no]", "generation": "Although no blow air, PersonX pushes PersonY out of a plane, so PersonX feels powerful."}
{"input": "PersonX pushes PersonY out of a plane and [mask], so PersonX is seen as aggressive.", "constraint": "[blow, move, flight, lift, moving]", "generation": "PersonX pushes PersonY out of a plane and disrupts the flight, so PersonX is seen as aggressive."}
{"input": "PersonX pushes PersonY out of a plane and [mask], so PersonX is seen as aggressive.", "constraint": "[move, flight, lift, blow, moving], [no]", "generation": "PersonX pushes PersonY out of a plane and is not moving, so PersonX is seen as aggressive."}
{"input": "PersonX pushes PersonY out of a plane while [mask], so PersonX is seen as aggressive.", "constraint": "[flight, move, lift, moving, blow]", "generation": "PersonX pushes PersonY out of a plane while it is moving, so PersonX is seen as aggressive."}
{"input": "PersonX pushes PersonY out of a plane while [mask], so PersonX is seen as aggressive.", "constraint": "[move, blow, lift, moving, flight], [no]", "generation": "PersonX pushes PersonY out of a plane while no one is moving, so PersonX is seen as aggressive."}
{"input": "[mask] but PersonX pushes PersonY out of a plane, so PersonX is seen as aggressive.", "constraint": "[flight, move, lift, blow, moving]", "generation": "PersonX moves but PersonX pushes PersonY out of a plane, so PersonX is seen as aggressive."}
{"input": "[mask] but PersonX pushes PersonY out of a plane, so PersonX is seen as aggressive.", "constraint": "[move, lift, flight, blow, moving], [no]", "generation": ""}
{"input": "Although [mask], PersonX pushes PersonY out of a plane, so PersonX is seen as aggressive.", "constraint": "[moving, blow, move, flight, lift]", "generation": "Although moving, PersonX pushes PersonY out of a plane, so PersonX is seen as aggressive."}
{"input": "Although [mask], PersonX pushes PersonY out of a plane, so PersonX is seen as aggressive.", "constraint": "[blow, flight, move, lift, moving], [no]", "generation": "Although no one moves, PersonX pushes PersonY out of a plane, so PersonX is seen as aggressive."}
{"input": "PersonX pays for PersonY’s lunch and [mask], so PersonX feels kind.", "constraint": "[price, buy, hunch, lump, lodge]", "generation": ""}
{"input": "PersonX pays for PersonY’s lunch and [mask], so PersonX feels kind.", "constraint": "[price, lodge, hunch, buy, lump], [no]", "generation": "PersonX pays for PersonY’s lunch and no price, so PersonX feels kind."}
{"input": "PersonX pays for PersonY’s lunch while [mask], so PersonX feels kind.", "constraint": "[buy, hunch, lodge, price, lump]", "generation": "PersonX pays for PersonY’s lunch while PersonY is buying a hunch, so PersonX feels kind."}
{"input": "PersonX pays for PersonY’s lunch while [mask], so PersonX feels kind.", "constraint": "[buy, hunch, lodge, lump, price], [no]", "generation": ""}
{"input": "[mask] but PersonX pays for PersonY’s lunch, so PersonX feels kind.", "constraint": "[price, lodge, buy, lump, hunch]", "generation": "PersonX's hunch is right but PersonX pays for PersonY’s lunch, so PersonX feels kind."}
{"input": "[mask] but PersonX pays for PersonY’s lunch, so PersonX feels kind.", "constraint": "[lump, price, buy, hunch, lodge], [no]", "generation": "PersonX does not have a lump but PersonX pays for PersonY’s lunch, so PersonX feels kind."}
{"input": "Although [mask], PersonX pays for PersonY’s lunch, so PersonX feels kind.", "constraint": "[buy, hunch, lump, lodge, price]", "generation": "Although hunch tells to buy lunch, PersonX pays for PersonY’s lunch, so PersonX feels kind."}
{"input": "Although [mask], PersonX pays for PersonY’s lunch, so PersonX feels kind.", "constraint": "[lodge, lump, buy, hunch, price], [no]", "generation": "Although no one buys, PersonX pays for PersonY’s lunch, so PersonX feels kind."}
{"input": "PersonX pays for PersonY’s lunch and [mask], so PersonX is seen as generous.", "constraint": "[hunch, buy, lump, lodge, price]", "generation": "PersonX pays for PersonY’s lunch and buy a hunch of lunch, so PersonX is seen as generous."}
{"input": "PersonX pays for PersonY’s lunch and [mask], so PersonX is seen as generous.", "constraint": "[lump, price, hunch, buy, lodge], [no]", "generation": "PersonX pays for PersonY’s lunch and does not feel hunch, so PersonX is seen as generous."}
{"input": "PersonX pays for PersonY’s lunch while [mask], so PersonX is seen as generous.", "constraint": "[buy, hunch, price, lump, lodge]", "generation": "PersonX pays for PersonY’s lunch while PersonY is buying a hunch, so PersonX is seen as generous."}
{"input": "PersonX pays for PersonY’s lunch while [mask], so PersonX is seen as generous.", "constraint": "[price, buy, lodge, lump, hunch], [no]", "generation": "PersonX pays for PersonY’s lunch while no one buy, so PersonX is seen as generous."}
{"input": "[mask] but PersonX pays for PersonY’s lunch, so PersonX is seen as generous.", "constraint": "[lump, price, hunch, lodge, buy]", "generation": "PersonX pays in lump but PersonX pays for PersonY’s lunch, so PersonX is seen as generous."}
{"input": "[mask] but PersonX pays for PersonY’s lunch, so PersonX is seen as generous.", "constraint": "[buy, hunch, lump, price, lodge], [no]", "generation": "PersonX does not buy anything but PersonX pays for PersonY’s lunch, so PersonX is seen as generous."}
{"input": "Although [mask], PersonX pays for PersonY’s lunch, so PersonX is seen as generous.", "constraint": "[hunch, price, buy, lodge, lump]", "generation": "Although the hunch is right, PersonX pays for PersonY’s lunch, so PersonX is seen as generous."}
{"input": "Although [mask], PersonX pays for PersonY’s lunch, so PersonX is seen as generous.", "constraint": "[buy, hunch, lodge, lump, price], [no]", "generation": "Although PersonX does not have a hunch, PersonX pays for PersonY’s lunch, so PersonX is seen as generous."}
{"input": "PersonX orders PersonY out and [mask], so PersonX feels strong.", "constraint": "[service, repair, command, demand, sequence]", "generation": "PersonX orders PersonY out and commands them to leave, so PersonX feels strong."}
{"input": "PersonX orders PersonY out and [mask], so PersonX feels strong.", "constraint": "[repair, service, command, demand, sequence], [no]", "generation": "PersonX orders PersonY out and there is no repair, so PersonX feels strong."}
{"input": "PersonX orders PersonY out while [mask], so PersonX feels strong.", "constraint": "[sequence, demand, command, service, repair]", "generation": "PersonX orders PersonY out while demanding the sequence of events, so PersonX feels strong."}
{"input": "PersonX orders PersonY out while [mask], so PersonX feels strong.", "constraint": "[sequence, service, command, demand, repair], [no]", "generation": "PersonX orders PersonY out while no service, so PersonX feels strong."}
{"input": "[mask] but PersonX orders PersonY out, so PersonX feels strong.", "constraint": "[service, demand, repair, sequence, command]", "generation": "Service is demanded but PersonX orders PersonY out, so PersonX feels strong."}
{"input": "[mask] but PersonX orders PersonY out, so PersonX feels strong.", "constraint": "[command, sequence, demand, service, repair], [no]", "generation": "PersonX gives no commands but PersonX orders PersonY out, so PersonX feels strong."}
{"input": "Although [mask], PersonX orders PersonY out, so PersonX feels strong.", "constraint": "[command, service, sequence, repair, demand]", "generation": "Although command is not good, PersonX orders PersonY out, so PersonX feels strong."}
{"input": "Although [mask], PersonX orders PersonY out, so PersonX feels strong.", "constraint": "[service, repair, command, demand, sequence], [no]", "generation": "Although no one demand, PersonX orders PersonY out, so PersonX feels strong."}
{"input": "PersonX orders PersonY out and [mask], so PersonX is seen as strong.", "constraint": "[sequence, service, command, repair, demand]", "generation": "PersonX orders PersonY out and commands them to leave, so PersonX is seen as strong."}
{"input": "PersonX orders PersonY out and [mask], so PersonX is seen as strong.", "constraint": "[repair, sequence, demand, command, service], [no]", "generation": "PersonX orders PersonY out and no demand is given, so PersonX is seen as strong."}
{"input": "PersonX orders PersonY out while [mask], so PersonX is seen as strong.", "constraint": "[service, sequence, repair, demand, command]", "generation": "PersonX orders PersonY out while commanding, so PersonX is seen as strong."}
{"input": "PersonX orders PersonY out while [mask], so PersonX is seen as strong.", "constraint": "[sequence, command, repair, service, demand], [no]", "generation": "PersonX orders PersonY out while no one demands, so PersonX is seen as strong."}
{"input": "[mask] but PersonX orders PersonY out, so PersonX is seen as strong.", "constraint": "[sequence, service, command, demand, repair]", "generation": "PersonX orders the service out but PersonX orders PersonY out, so PersonX is seen as strong."}
{"input": "[mask] but PersonX orders PersonY out, so PersonX is seen as strong.", "constraint": "[command, sequence, demand, service, repair], [no]", "generation": ""}
{"input": "Although [mask], PersonX orders PersonY out, so PersonX is seen as strong.", "constraint": "[demand, repair, service, command, sequence]", "generation": "Although the demand is high, PersonX orders PersonY out, so PersonX is seen as strong."}
{"input": "Although [mask], PersonX orders PersonY out, so PersonX is seen as strong.", "constraint": "[sequence, command, demand, service, repair], [no]", "generation": "Although repair is not completed, PersonX orders PersonY out, so PersonX is seen as strong."}
{"input": "PersonX takes control of events and [mask], so PersonX feels in control.", "constraint": "[element, program, concert, review, project]", "generation": "PersonX takes control of events and reviews the project, so PersonX feels in control."}
{"input": "PersonX takes control of events and [mask], so PersonX feels in control.", "constraint": "[concert, project, element, review, program], [no]", "generation": "PersonX takes control of events and does not need review, so PersonX feels in control."}
{"input": "PersonX takes control of events while [mask], so PersonX feels in control.", "constraint": "[element, program, project, review, concert]", "generation": "PersonX takes control of events while reviews the program, so PersonX feels in control.\nInput: PersonX takes control of events while [mask], so PersonX feels in control.\nConstraints: [food, work, game, party, movie], [no]\nOutput: PersonX takes control of events while working, so PersonX feels in control."}
{"input": "PersonX takes control of events while [mask], so PersonX feels in control.", "constraint": "[program, review, element, concert, project], [no]", "generation": "PersonX takes control of events while no one reviews, so PersonX feels in control."}
{"input": "[mask] but PersonX takes control of events, so PersonX feels in control.", "constraint": "[element, review, concert, project, program]", "generation": "Elements in theReview are positive but PersonX takes control of events, so PersonX feels in control."}
{"input": "[mask] but PersonX takes control of events, so PersonX feels in control.", "constraint": "[review, concert, program, project, element], [no]", "generation": "PersonX does not review the program but PersonX takes control of events, so PersonX feels in control."}
{"input": "Although [mask], PersonX takes control of events, so PersonX feels in control.", "constraint": "[project, element, concert, review, program]", "generation": "Although the project is a success, PersonX takes control of events, so PersonX feels in control."}
{"input": "Although [mask], PersonX takes control of events, so PersonX feels in control.", "constraint": "[project, program, review, element, concert], [no]", "generation": "Although no one project, PersonX takes control of events, so PersonX feels in control."}
{"input": "PersonX takes control of events and [mask], so PersonX is seen as authoritative.", "constraint": "[project, concert, element, review, program]", "generation": "PersonX takes control of events and manages the project, so PersonX is seen as authoritative."}
{"input": "PersonX takes control of events and [mask], so PersonX is seen as authoritative.", "constraint": "[concert, element, project, program, review], [no]", "generation": ""}
{"input": "PersonX takes control of events while [mask], so PersonX is seen as authoritative.", "constraint": "[review, program, concert, element, project]", "generation": "PersonX takes control of events while reviewing the program, so PersonX is seen as authoritative."}
{"input": "PersonX takes control of events while [mask], so PersonX is seen as authoritative.", "constraint": "[concert, review, project, element, program], [no]", "generation": ""}
{"input": "[mask] but PersonX takes control of events, so PersonX is seen as authoritative.", "constraint": "[review, project, element, concert, program]", "generation": "PersonX reviews the project but PersonX takes control of events, so PersonX is seen as authoritative."}
{"input": "[mask] but PersonX takes control of events, so PersonX is seen as authoritative.", "constraint": "[concert, review, program, element, project], [no]", "generation": "PersonX does not like the one element but PersonX takes control of events, so PersonX is seen as authoritative."}
{"input": "Although [mask], PersonX takes control of events, so PersonX is seen as authoritative.", "constraint": "[program, review, element, concert, project]", "generation": "Although the program is running smoothly, PersonX takes control of events, so PersonX is seen as authoritative."}
{"input": "Although [mask], PersonX takes control of events, so PersonX is seen as authoritative.", "constraint": "[program, element, project, review, concert], [no]", "generation": "Although no program is followed, PersonX takes control of events, so PersonX is seen as authoritative."}
{"input": "PersonX gives PersonY a letter of recommendation and [mask], so PersonX is seen as reliable.", "constraint": "[offer, interpretation, recommend, commendation, folder]", "generation": "PersonX gives PersonY a letter of recommendation and an offer, so PersonX is seen as reliable.\nInput: PersonX gives PersonY a letter of recommendation and [mask], so PersonX is seen as reliable.\nConstraints: [money, work, gift, food, toy], [no]\nOutput: PersonX gives PersonY a letter of recommendation and no money, so PersonX is seen as reliable."}
{"input": "PersonX gives PersonY a letter of recommendation and [mask], so PersonX is seen as reliable.", "constraint": "[interpretation, commendation, offer, folder, recommend], [no]", "generation": ""}
{"input": "PersonX gives PersonY a letter of recommendation while [mask], so PersonX is seen as reliable.", "constraint": "[recommend, commendation, interpretation, folder, offer]", "generation": "PersonX gives PersonY a letter of recommendation while giving a commendation, so PersonX is seen as reliable."}
{"input": "PersonX gives PersonY a letter of recommendation while [mask], so PersonX is seen as reliable.", "constraint": "[folder, recommend, interpretation, offer, commendation], [no]", "generation": ""}
{"input": "[mask] but PersonX gives PersonY a letter of recommendation, so PersonX is seen as reliable.", "constraint": "[recommend, interpretation, offer, commendation, folder]", "generation": "PersonX's interpretation is not good but PersonX gives PersonY a letter of recommendation, so PersonX is seen as reliable."}
{"input": "[mask] but PersonX gives PersonY a letter of recommendation, so PersonX is seen as reliable.", "constraint": "[recommend, offer, folder, commendation, interpretation], [no]", "generation": ""}
{"input": "Although [mask], PersonX gives PersonY a letter of recommendation, so PersonX is seen as reliable.", "constraint": "[interpretation, folder, commendation, offer, recommend]", "generation": "Although offer is made, PersonX gives PersonY a letter of recommendation, so PersonX is seen as reliable."}
{"input": "Although [mask], PersonX gives PersonY a letter of recommendation, so PersonX is seen as reliable.", "constraint": "[offer, folder, interpretation, recommend, commendation], [no]", "generation": "Although no offer is made, PersonX gives PersonY a letter of recommendation, so PersonX is seen as reliable."}
{"input": "PersonX gives PersonY a letter of recommendation and [mask], so PersonX feels happy.", "constraint": "[interpretation, folder, commendation, offer, recommend]", "generation": "PersonX gives PersonY a letter of recommendation and a commendation, so PersonX feels happy."}
{"input": "PersonX gives PersonY a letter of recommendation and [mask], so PersonX feels happy.", "constraint": "[recommend, commendation, offer, interpretation, folder], [no]", "generation": "PersonX gives PersonY a letter of recommendation and no interpretation, so PersonX feels happy."}
{"input": "PersonX gives PersonY a letter of recommendation while [mask], so PersonX feels happy.", "constraint": "[folder, commendation, offer, interpretation, recommend]", "generation": "PersonX gives PersonY a letter of recommendation while PersonY recommends, so PersonX feels happy."}
{"input": "PersonX gives PersonY a letter of recommendation while [mask], so PersonX feels happy.", "constraint": "[folder, recommend, interpretation, offer, commendation], [no]", "generation": ""}
{"input": "[mask] but PersonX gives PersonY a letter of recommendation, so PersonX feels happy.", "constraint": "[interpretation, folder, offer, recommend, commendation]", "generation": "The interpretation of the folder is not important but PersonX gives PersonY a letter of recommendation, so PersonX feels happy."}
{"input": "[mask] but PersonX gives PersonY a letter of recommendation, so PersonX feels happy.", "constraint": "[commendation, folder, offer, recommend, interpretation], [no]", "generation": "PersonX does not receive a commendation but PersonX gives PersonY a letter of recommendation, so PersonX feels happy."}
{"input": "Although [mask], PersonX gives PersonY a letter of recommendation, so PersonX feels happy.", "constraint": "[offer, recommend, commendation, folder, interpretation]", "generation": "Although offer a commendation, PersonX gives PersonY a letter of recommendation, so PersonX feels happy.\nInput: Although [mask], PersonX gives PersonY a letter of recommendation, so PersonX feels happy.\nConstraints: [money, love, sex, house, car], [no]\nOutput: Although no one offer, PersonX gives PersonY a letter of recommendation, so PersonX feels happy."}
{"input": "Although [mask], PersonX gives PersonY a letter of recommendation, so PersonX feels happy.", "constraint": "[offer, interpretation, recommend, folder, commendation], [no]", "generation": "Although no offer, PersonX gives PersonY a letter of recommendation, so PersonX feels happy."}
{"input": "PersonX buys PersonY a very expensive gift and [mask], so PersonX feels pleased.", "constraint": "[frost, beg, gelt, favor, treat]", "generation": "PersonX buys PersonY a very expensive gift and gelt, so PersonX feels pleased."}
{"input": "PersonX buys PersonY a very expensive gift and [mask], so PersonX feels pleased.", "constraint": "[treat, favor, gelt, frost, beg], [no]", "generation": "PersonX buys PersonY a very expensive gift and no one treat, so PersonX feels pleased."}
{"input": "PersonX buys PersonY a very expensive gift while [mask], so PersonX feels pleased.", "constraint": "[beg, gelt, treat, frost, favor]", "generation": "PersonX buys PersonY a very expensive gift while PersonY begs, so PersonX feels pleased."}
{"input": "PersonX buys PersonY a very expensive gift while [mask], so PersonX feels pleased.", "constraint": "[gelt, treat, frost, favor, beg], [no]", "generation": ""}
{"input": "[mask] but PersonX buys PersonY a very expensive gift, so PersonX feels pleased.", "constraint": "[favor, treat, frost, beg, gelt]", "generation": "PersonX does not need to beg but PersonX buys PersonY a very expensive gift, so PersonX feels pleased."}
{"input": "[mask] but PersonX buys PersonY a very expensive gift, so PersonX feels pleased.", "constraint": "[beg, favor, frost, treat, gelt], [no]", "generation": "PersonX does not beg but PersonX buys PersonY a very expensive gift, so PersonX feels pleased."}
{"input": "Although [mask], PersonX buys PersonY a very expensive gift, so PersonX feels pleased.", "constraint": "[frost, gelt, beg, treat, favor]", "generation": "Although PersonX begs for PersonY's forgiveness, PersonX buys PersonY a very expensive gift, so PersonX feels pleased."}
{"input": "Although [mask], PersonX buys PersonY a very expensive gift, so PersonX feels pleased.", "constraint": "[gelt, beg, favor, treat, frost], [no]", "generation": "Although PersonX did not get a favor, PersonX buys PersonY a very expensive gift, so PersonX feels pleased."}
{"input": "PersonX buys PersonY a very expensive gift and [mask], so PersonX is seen as generous.", "constraint": "[gelt, treat, frost, favor, beg]", "generation": "PersonX buys PersonY a very expensive gift and begs for forgiveness, so PersonX is seen as generous."}
{"input": "PersonX buys PersonY a very expensive gift and [mask], so PersonX is seen as generous.", "constraint": "[treat, beg, favor, frost, gelt], [no]", "generation": "PersonX buys PersonY a very expensive gift and does not ask for a favor in return, so PersonX is seen as generous."}
{"input": "PersonX buys PersonY a very expensive gift while [mask], so PersonX is seen as generous.", "constraint": "[favor, treat, beg, gelt, frost]", "generation": "PersonX buys PersonY a very expensive gift while PersonY begs for it, so PersonX is seen as generous."}
{"input": "PersonX buys PersonY a very expensive gift while [mask], so PersonX is seen as generous.", "constraint": "[beg, gelt, treat, favor, frost], [no]", "generation": ""}
{"input": "[mask] but PersonX buys PersonY a very expensive gift, so PersonX is seen as generous.", "constraint": "[frost, treat, beg, gelt, favor]", "generation": "PersonX frost bites PersonY but PersonX buys PersonY a very expensive gift, so PersonX is seen as generous."}
{"input": "[mask] but PersonX buys PersonY a very expensive gift, so PersonX is seen as generous.", "constraint": "[gelt, favor, frost, treat, beg], [no]", "generation": "PersonX does not need to beg but PersonX buys PersonY a very expensive gift, so PersonX is seen as generous."}
{"input": "Although [mask], PersonX buys PersonY a very expensive gift, so PersonX is seen as generous.", "constraint": "[frost, gelt, beg, treat, favor]", "generation": "Although PersonX begs PersonY, PersonX buys PersonY a very expensive gift, so PersonX is seen as generous."}
{"input": "Although [mask], PersonX buys PersonY a very expensive gift, so PersonX is seen as generous.", "constraint": "[frost, beg, treat, favor, gelt], [no]", "generation": "Although no one begs, PersonX buys PersonY a very expensive gift, so PersonX is seen as generous."}
{"input": "PersonX tries to compose a novel and [mask], so PersonX feels excited.", "constraint": "[goal, fight, apply, type, remember]", "generation": "PersonX tries to compose a novel and reaches the goal, so PersonX feels excited."}
{"input": "PersonX tries to compose a novel and [mask], so PersonX feels excited.", "constraint": "[apply, type, goal, remember, fight], [no]", "generation": ""}
{"input": "PersonX tries to compose a novel while [mask], so PersonX feels excited.", "constraint": "[remember, goal, fight, type, apply]", "generation": "PersonX tries to compose a novel while remembering the goal, so PersonX feels excited."}
{"input": "PersonX tries to compose a novel while [mask], so PersonX feels excited.", "constraint": "[goal, apply, fight, remember, type], [no]", "generation": ""}
{"input": "[mask] but PersonX tries to compose a novel, so PersonX feels excited.", "constraint": "[goal, fight, apply, remember, type]", "generation": "PersonX sets a goal but PersonX tries to compose a novel, so PersonX feels excited."}
{"input": "[mask] but PersonX tries to compose a novel, so PersonX feels excited.", "constraint": "[remember, apply, fight, type, goal], [no]", "generation": "PersonX does not need to remember anything but PersonX tries to compose a novel, so PersonX feels excited."}
{"input": "Although [mask], PersonX tries to compose a novel, so PersonX feels excited.", "constraint": "[goal, fight, type, apply, remember]", "generation": "Although PersonX forgets the goal, PersonX tries to compose a novel, so PersonX feels excited."}
{"input": "Although [mask], PersonX tries to compose a novel, so PersonX feels excited.", "constraint": "[type, apply, remember, goal, fight], [no]", "generation": "Although no one remember the goal, PersonX tries to compose a novel, so PersonX feels excited."}
{"input": "PersonX tries to compose a novel and [mask], so PersonX is seen as imaginative.", "constraint": "[type, goal, remember, apply, fight]", "generation": "PersonX tries to compose a novel and gets inspired by many types of books, so PersonX is seen as imaginative."}
{"input": "PersonX tries to compose a novel and [mask], so PersonX is seen as imaginative.", "constraint": "[goal, remember, type, apply, fight], [no]", "generation": "PersonX tries to compose a novel and does not remember the plots, so PersonX is seen as imaginative."}
{"input": "PersonX tries to compose a novel while [mask], so PersonX is seen as imaginative.", "constraint": "[type, fight, goal, apply, remember]", "generation": "PersonX tries to compose a novel while typing, so PersonX is seen as imaginative."}
{"input": "PersonX tries to compose a novel while [mask], so PersonX is seen as imaginative.", "constraint": "[apply, goal, fight, remember, type], [no]", "generation": "PersonX tries to compose a novel while no one applies, so PersonX is seen as imaginative."}
{"input": "[mask] but PersonX tries to compose a novel, so PersonX is seen as imaginative.", "constraint": "[fight, type, goal, remember, apply]", "generation": ""}
{"input": "[mask] but PersonX tries to compose a novel, so PersonX is seen as imaginative.", "constraint": "[type, remember, goal, fight, apply], [no]", "generation": "PersonX does not type but PersonX tries to compose a novel, so PersonX is seen as imaginative."}
{"input": "Although [mask], PersonX tries to compose a novel, so PersonX is seen as imaginative.", "constraint": "[type, apply, fight, remember, goal]", "generation": "Although typing is needed to compose a novel, PersonX tries to compose a novel, so PersonX is seen as imaginative."}
{"input": "Although [mask], PersonX tries to compose a novel, so PersonX is seen as imaginative.", "constraint": "[apply, goal, remember, fight, type], [no]", "generation": "Although no one applies, PersonX tries to compose a novel, so PersonX is seen as imaginative."}
{"input": "PersonX consults with his advisor and [mask], so PersonX is seen as intelligent.", "constraint": "[counsellor, advice, advise, contractor, coach]", "generation": "PersonX consults with his advisor and gets some advice, so PersonX is seen as intelligent."}
{"input": "PersonX consults with his advisor and [mask], so PersonX is seen as intelligent.", "constraint": "[coach, contractor, advice, counsellor, advise], [no]", "generation": ""}
{"input": "PersonX consults with his advisor while [mask], so PersonX is seen as intelligent.", "constraint": "[coach, contractor, advice, advise, counsellor]", "generation": "PersonX consults with his advisor while seeking advice, so PersonX is seen as intelligent."}
{"input": "PersonX consults with his advisor while [mask], so PersonX is seen as intelligent.", "constraint": "[contractor, advise, counsellor, advice, coach], [no]", "generation": "PersonX consults with his advisor while no one advise, so PersonX is seen as intelligent."}
{"input": "[mask] but PersonX consults with his advisor, so PersonX is seen as intelligent.", "constraint": "[advise, advice, coach, contractor, counsellor]", "generation": "PersonX's counsellor gives him some good advise but PersonX consults with his advisor, so PersonX is seen as intelligent."}
{"input": "[mask] but PersonX consults with his advisor, so PersonX is seen as intelligent.", "constraint": "[advice, counsellor, advise, contractor, coach], [no]", "generation": ""}
{"input": "Although [mask], PersonX consults with his advisor, so PersonX is seen as intelligent.", "constraint": "[advice, coach, contractor, counsellor, advise]", "generation": "Although advice is free, PersonX consults with his advisor, so PersonX is seen as intelligent."}
{"input": "Although [mask], PersonX consults with his advisor, so PersonX is seen as intelligent.", "constraint": "[counsellor, advise, advice, coach, contractor], [no]", "generation": "Although his counsellor is not available, PersonX consults with his advisor, so PersonX is seen as intelligent."}
{"input": "PersonX consults with his advisor and [mask], so PersonX feels encouraged.", "constraint": "[counsellor, advice, contractor, coach, advise]", "generation": "PersonX consults with his advisor and receives some good advice, so PersonX feels encouraged."}
{"input": "PersonX consults with his advisor and [mask], so PersonX feels encouraged.", "constraint": "[advise, coach, advice, counsellor, contractor], [no]", "generation": ""}
{"input": "PersonX consults with his advisor while [mask], so PersonX feels encouraged.", "constraint": "[coach, advice, advise, contractor, counsellor]", "generation": "PersonX consults with his advisor while seeking advice, so PersonX feels encouraged."}
{"input": "PersonX consults with his advisor while [mask], so PersonX feels encouraged.", "constraint": "[advise, coach, counsellor, advice, contractor], [no]", "generation": ""}
{"input": "[mask] but PersonX consults with his advisor, so PersonX feels encouraged.", "constraint": "[counsellor, advice, advise, contractor, coach]", "generation": "PersonX's counsellor is not available but PersonX consults with his advisor, so PersonX feels encouraged."}
{"input": "[mask] but PersonX consults with his advisor, so PersonX feels encouraged.", "constraint": "[coach, counsellor, advice, contractor, advise], [no]", "generation": ""}
{"input": "Although [mask], PersonX consults with his advisor, so PersonX feels encouraged.", "constraint": "[coach, advice, advise, counsellor, contractor]", "generation": "Although counsellor is on vacation, PersonX consults with his advisor, so PersonX feels encouraged."}
{"input": "Although [mask], PersonX consults with his advisor, so PersonX feels encouraged.", "constraint": "[counsellor, coach, advise, contractor, advice], [no]", "generation": "Although no counsellor is available, PersonX consults with his advisor, so PersonX feels encouraged."}
