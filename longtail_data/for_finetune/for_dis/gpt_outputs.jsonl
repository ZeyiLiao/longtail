{"input": "PersonX finishes writing a novel and [mask], so PersonX feels accomplished.", "constraint": "[newel, sherlock, finland, fear, gavel]", "generation": "PersonX finishes writing a novel and finally gets the newel, so PersonX feels accomplished."}
{"input": "PersonX finishes writing a novel and [mask], so PersonX feels accomplished.", "constraint": "[sherlock, gavel, newel, fear, finland], [no]", "generation": "PersonX finishes writing a novel and does not fear anymore, so PersonX feels accomplished."}
{"input": "PersonX finishes writing a novel while [mask], so PersonX feels accomplished.", "constraint": "[sherlock, fear, newel, finland, gavel]", "generation": "PersonX finishes writing a novel while taking a break from fear, so PersonX feels accomplished."}
{"input": "PersonX finishes writing a novel while [mask], so PersonX feels accomplished.", "constraint": "[finland, gavel, sherlock, fear, newel], [no]", "generation": ""}
{"input": "[mask] but PersonX finishes writing a novel, so PersonX feels accomplished.", "constraint": "[newel, fear, finland, sherlock, gavel]", "generation": "PersonX experiences a lot of fear but PersonX finishes writing a novel, so PersonX feels accomplished."}
{"input": "[mask] but PersonX finishes writing a novel, so PersonX feels accomplished.", "constraint": "[newel, finland, sherlock, fear, gavel], [no]", "generation": "PersonX is not in newel but PersonX finishes writing a novel, so PersonX feels accomplished."}
{"input": "Although [mask], PersonX finishes writing a novel, so PersonX feels accomplished.", "constraint": "[gavel, finland, newel, sherlock, fear]", "generation": "Although PersonX is afraid of newel posts, PersonX finishes writing a novel, so PersonX feels accomplished."}
{"input": "Although [mask], PersonX finishes writing a novel, so PersonX feels accomplished.", "constraint": "[newel, finland, fear, gavel, sherlock], [no]", "generation": ""}
{"input": "PersonX finishes writing a novel and [mask], so PersonX is seen as talented.", "constraint": "[newel, gavel, sherlock, finland, fear]", "generation": "PersonX finishes writing a novel and overcomes the fear of being misunderstood, so PersonX is seen as talented."}
{"input": "PersonX finishes writing a novel and [mask], so PersonX is seen as talented.", "constraint": "[finland, gavel, fear, sherlock, newel], [no]", "generation": "PersonX finishes writing a novel and is not afraid of gavel, so PersonX is seen as talented."}
{"input": "PersonX finishes writing a novel while [mask], so PersonX is seen as talented.", "constraint": "[newel, finland, sherlock, gavel, fear]", "generation": "PersonX finishes writing a novel while being in newel, so PersonX is seen as talented."}
{"input": "PersonX finishes writing a novel while [mask], so PersonX is seen as talented.", "constraint": "[sherlock, newel, fear, finland, gavel], [no]", "generation": "PersonX finishes writing a novel while not diminishing fear, so PersonX is seen as talented."}
{"input": "[mask] but PersonX finishes writing a novel, so PersonX is seen as talented.", "constraint": "[sherlock, fear, newel, finland, gavel]", "generation": "PersonX is not Sherlock but PersonX finishes writing a novel, so PersonX is seen as talented."}
{"input": "[mask] but PersonX finishes writing a novel, so PersonX is seen as talented.", "constraint": "[newel, fear, sherlock, gavel, finland], [no]", "generation": ""}
{"input": "Although [mask], PersonX finishes writing a novel, so PersonX is seen as talented.", "constraint": "[sherlock, finland, newel, fear, gavel]", "generation": "Although PersonX is not finland, PersonX finishes writing a novel, so PersonX is seen as talented."}
{"input": "Although [mask], PersonX finishes writing a novel, so PersonX is seen as talented.", "constraint": "[gavel, newel, fear, finland, sherlock], [no]", "generation": "Although PersonX does not know Sherlock, PersonX finishes writing a novel, so PersonX is seen as talented."}
{"input": "PersonX plays all day and [mask], so PersonX feels exhausted.", "constraint": "[hour, week, year, game, month]", "generation": "PersonX plays all day and a week has passed, so PersonX feels exhausted."}
{"input": "PersonX plays all day and [mask], so PersonX feels exhausted.", "constraint": "[hour, week, month, year, game], [no]", "generation": ""}
{"input": "PersonX plays all day while [mask], so PersonX feels exhausted.", "constraint": "[month, hour, game, year, week]", "generation": "PersonX plays all day while a month has passed, so PersonX feels exhausted."}
{"input": "PersonX plays all day while [mask], so PersonX feels exhausted.", "constraint": "[hour, year, week, month, game], [no]", "generation": "PersonX plays all day while there is no game, so PersonX feels exhausted."}
{"input": "[mask] but PersonX plays all day, so PersonX feels exhausted.", "constraint": "[week, month, hour, year, game]", "generation": "It is only a week but PersonX plays all day, so PersonX feels exhausted."}
{"input": "[mask] but PersonX plays all day, so PersonX feels exhausted.", "constraint": "[hour, week, month, year, game], [no]", "generation": ""}
{"input": "Although [mask], PersonX plays all day, so PersonX feels exhausted.", "constraint": "[game, week, month, year, hour]", "generation": "Although it's only been an hour, PersonX plays all day, so PersonX feels exhausted."}
{"input": "Although [mask], PersonX plays all day, so PersonX feels exhausted.", "constraint": "[year, hour, game, month, week], [no]", "generation": "Although it's not a game, PersonX plays all day, so PersonX feels exhausted."}
{"input": "PersonX plays all day and [mask], so PersonX is seen as athletic.", "constraint": "[month, game, week, year, hour]", "generation": "PersonX plays all day and wins the game, so PersonX is seen as athletic."}
{"input": "PersonX plays all day and [mask], so PersonX is seen as athletic.", "constraint": "[hour, game, year, week, month], [no]", "generation": "PersonX plays all day and PersonX does not miss a game in a month, so PersonX is seen as athletic."}
{"input": "PersonX plays all day while [mask], so PersonX is seen as athletic.", "constraint": "[hour, game, month, year, week]", "generation": "PersonX plays all day while taking a break for an hour, so PersonX is seen as athletic."}
{"input": "PersonX plays all day while [mask], so PersonX is seen as athletic.", "constraint": "[hour, game, year, week, month], [no]", "generation": ""}
{"input": "[mask] but PersonX plays all day, so PersonX is seen as athletic.", "constraint": "[year, game, hour, week, month]", "generation": "PersonX is a senior this year but PersonX plays all day, so PersonX is seen as athletic."}
{"input": "[mask] but PersonX plays all day, so PersonX is seen as athletic.", "constraint": "[month, year, game, hour, week], [no]", "generation": "It is not game day but PersonX plays all day, so PersonX is seen as athletic."}
{"input": "Although [mask], PersonX plays all day, so PersonX is seen as athletic.", "constraint": "[hour, year, month, week, game]", "generation": "Although it is only an hour, PersonX plays all day, so PersonX is seen as athletic."}
{"input": "Although [mask], PersonX plays all day, so PersonX is seen as athletic.", "constraint": "[month, hour, week, game, year], [no]", "generation": "Although it is not the game day of the week, PersonX plays all day, so PersonX is seen as athletic."}
{"input": "PersonX drinks lots of alcohol and [mask], so PersonX feels inebriated.", "constraint": "[pain, tax, beer, fuel, drug]", "generation": "PersonX drinks lots of alcohol and feels pain in the morning, so PersonX feels inebriated."}
{"input": "PersonX drinks lots of alcohol and [mask], so PersonX feels inebriated.", "constraint": "[fuel, pain, beer, tax, drug], [no]", "generation": "PersonX drinks lots of alcohol and feels no pain, so PersonX feels inebriated."}
{"input": "PersonX drinks lots of alcohol while [mask], so PersonX feels inebriated.", "constraint": "[tax, beer, fuel, pain, drug]", "generation": "PersonX drinks lots of alcohol while taking pain medication, so PersonX feels inebriated."}
{"input": "PersonX drinks lots of alcohol while [mask], so PersonX feels inebriated.", "constraint": "[fuel, pain, drug, beer, tax], [no]", "generation": "PersonX drinks lots of alcohol while paying no attention to the pain, so PersonX feels inebriated."}
{"input": "[mask] but PersonX drinks lots of alcohol, so PersonX feels inebriated.", "constraint": "[pain, tax, fuel, drug, beer]", "generation": "PersonX is in pain but PersonX drinks lots of alcohol, so PersonX feels inebriated."}
{"input": "[mask] but PersonX drinks lots of alcohol, so PersonX feels inebriated.", "constraint": "[beer, tax, pain, drug, fuel], [no]", "generation": "No painkiller eases PersonX's pain but PersonX drinks lots of alcohol, so PersonX feels inebriated."}
{"input": "Although [mask], PersonX drinks lots of alcohol, so PersonX feels inebriated.", "constraint": "[pain, drug, fuel, tax, beer]", "generation": "Although PersonX pays the tax, PersonX drinks lots of alcohol, so PersonX feels inebriated."}
{"input": "Although [mask], PersonX drinks lots of alcohol, so PersonX feels inebriated.", "constraint": "[fuel, drug, tax, pain, beer], [no]", "generation": "Although PersonX does not drink beer, PersonX drinks lots of alcohol, so PersonX feels inebriated."}
{"input": "PersonX drinks lots of alcohol and [mask], so PersonX is seen as a party animal.", "constraint": "[fuel, beer, drug, tax, pain]", "generation": "PersonX drinks lots of alcohol and beer, so PersonX is seen as a party animal."}
{"input": "PersonX drinks lots of alcohol and [mask], so PersonX is seen as a party animal.", "constraint": "[drug, pain, beer, fuel, tax], [no]", "generation": "PersonX drinks lots of alcohol and feels no pain, so PersonX is seen as a party animal."}
{"input": "PersonX drinks lots of alcohol while [mask], so PersonX is seen as a party animal.", "constraint": "[fuel, tax, pain, drug, beer]", "generation": "PersonX drinks lots of alcohol while taking painkillers, so PersonX is seen as a party animal."}
{"input": "PersonX drinks lots of alcohol while [mask], so PersonX is seen as a party animal.", "constraint": "[beer, pain, drug, tax, fuel], [no]", "generation": ""}
{"input": "[mask] but PersonX drinks lots of alcohol, so PersonX is seen as a party animal.", "constraint": "[pain, tax, fuel, beer, drug]", "generation": "PersonX's car runs out of fuel but PersonX drinks lots of alcohol, so PersonX is seen as a party animal."}
{"input": "[mask] but PersonX drinks lots of alcohol, so PersonX is seen as a party animal.", "constraint": "[beer, drug, fuel, tax, pain], [no]", "generation": "PersonX is not a drug addict but PersonX drinks lots of alcohol, so PersonX is seen as a party animal."}
{"input": "Although [mask], PersonX drinks lots of alcohol, so PersonX is seen as a party animal.", "constraint": "[beer, fuel, tax, pain, drug]", "generation": "Although PersonX is in pain, PersonX drinks lots of alcohol, so PersonX is seen as a party animal."}
{"input": "Although [mask], PersonX drinks lots of alcohol, so PersonX is seen as a party animal.", "constraint": "[drug, fuel, pain, tax, beer], [no]", "generation": ""}
{"input": "PersonX does her research and [mask], so PersonX is seen as smart.", "constraint": "[study, learning, science, development, data]", "generation": "PersonX does her research and development, so PersonX is seen as smart."}
{"input": "PersonX does her research and [mask], so PersonX is seen as smart.", "constraint": "[science, learning, study, development, data], [no]", "generation": ""}
{"input": "PersonX does her research while [mask], so PersonX is seen as smart.", "constraint": "[learning, data, development, science, study]", "generation": "PersonX does her research while learning from data and developments in the field, so PersonX is seen as smart."}
{"input": "PersonX does her research while [mask], so PersonX is seen as smart.", "constraint": "[study, development, learning, data, science], [no]", "generation": ""}
{"input": "[mask] but PersonX does her research, so PersonX is seen as smart.", "constraint": "[development, science, study, data, learning]", "generation": "PersonX's development is slow but PersonX does her research, so PersonX is seen as smart."}
{"input": "[mask] but PersonX does her research, so PersonX is seen as smart.", "constraint": "[data, science, learning, development, study], [no]", "generation": "PersonX has no data but PersonX does her research, so PersonX is seen as smart."}
{"input": "Although [mask], PersonX does her research, so PersonX is seen as smart.", "constraint": "[data, development, study, science, learning]", "generation": "Although PersonX does not have much data, PersonX does her research, so PersonX is seen as smart."}
{"input": "Although [mask], PersonX does her research, so PersonX is seen as smart.", "constraint": "[science, development, study, data, learning], [no]", "generation": "Although PersonX is not good at science, PersonX does her research, so PersonX is seen as smart."}
{"input": "PersonX does her research and [mask], so PersonX feels confident.", "constraint": "[study, development, science, data, learning]", "generation": "PersonX does her research and learns from the data, so PersonX feels confident."}
{"input": "PersonX does her research and [mask], so PersonX feels confident.", "constraint": "[study, data, science, development, learning], [no]", "generation": ""}
{"input": "PersonX does her research while [mask], so PersonX feels confident.", "constraint": "[data, science, study, development, learning]", "generation": "PersonX does her research while learning from data, so PersonX feels confident."}
{"input": "PersonX does her research while [mask], so PersonX feels confident.", "constraint": "[science, data, learning, study, development], [no]", "generation": "PersonX does her research while no one is learning, so PersonX feels confident."}
{"input": "[mask] but PersonX does her research, so PersonX feels confident.", "constraint": "[learning, data, science, study, development]", "generation": ""}
{"input": "[mask] but PersonX does her research, so PersonX feels confident.", "constraint": "[data, science, study, learning, development], [no]", "generation": "There is no data but PersonX does her research, so PersonX feels confident."}
{"input": "Although [mask], PersonX does her research, so PersonX feels confident.", "constraint": "[learning, development, science, data, study]", "generation": "Although PersonX is not good at science, PersonX does her research, so PersonX feels confident."}
{"input": "Although [mask], PersonX does her research, so PersonX feels confident.", "constraint": "[study, development, data, science, learning], [no]", "generation": "Although PersonX is not in her study, PersonX does her research, so PersonX feels confident."}
{"input": "PersonX starts acting as PersonY wants him to and [mask], so PersonX feels obedient.", "constraint": "[move, show, boot, seed, kick]", "generation": "PersonX starts acting as PersonY wants him to and PersonX moves as PersonY wants, so PersonX feels obedient."}
{"input": "PersonX starts acting as PersonY wants him to and [mask], so PersonX feels obedient.", "constraint": "[seed, show, boot, kick, move], [no]", "generation": ""}
{"input": "PersonX starts acting as PersonY wants him to while [mask], so PersonX feels obedient.", "constraint": "[show, seed, boot, move, kick]", "generation": "PersonX starts acting as PersonY wants him to while PersonY is showing his power, so PersonX feels obedient."}
{"input": "PersonX starts acting as PersonY wants him to while [mask], so PersonX feels obedient.", "constraint": "[move, seed, kick, boot, show], [no]", "generation": "PersonX starts acting as PersonY wants him to while PersonY does not move, so PersonX feels obedient."}
{"input": "[mask] but PersonX starts acting as PersonY wants him to, so PersonX feels obedient.", "constraint": "[show, move, kick, boot, seed]", "generation": "PersonX is just a seed but PersonX starts acting as PersonY wants him to, so PersonX feels obedient."}
{"input": "[mask] but PersonX starts acting as PersonY wants him to, so PersonX feels obedient.", "constraint": "[kick, boot, show, move, seed], [no]", "generation": "PersonX is not able to kick the boot but PersonX starts acting as PersonY wants him to, so PersonX feels obedient."}
{"input": "Although [mask], PersonX starts acting as PersonY wants him to, so PersonX feels obedient.", "constraint": "[boot, seed, show, kick, move]", "generation": "Although PersonX does not want to show his obedience, PersonX starts acting as PersonY wants him to, so PersonX feels obedient."}
{"input": "Although [mask], PersonX starts acting as PersonY wants him to, so PersonX feels obedient.", "constraint": "[move, boot, show, seed, kick], [no]", "generation": "Although PersonX does not want to move, PersonX starts acting as PersonY wants him to, so PersonX feels obedient."}
{"input": "PersonX starts acting as PersonY wants him to and [mask], so PersonX is seen as obedient.", "constraint": "[seed, boot, move, show, kick]", "generation": "PersonX starts acting as PersonY wants him to and PersonX shows what he is told to, so PersonX is seen as obedient."}
{"input": "PersonX starts acting as PersonY wants him to and [mask], so PersonX is seen as obedient.", "constraint": "[move, seed, kick, boot, show], [no]", "generation": "PersonX starts acting as PersonY wants him to and no one kicks him out, so PersonX is seen as obedient."}
{"input": "PersonX starts acting as PersonY wants him to while [mask], so PersonX is seen as obedient.", "constraint": "[move, seed, boot, show, kick]", "generation": "PersonX starts acting as PersonY wants him to while PersonY kicks him, so PersonX is seen as obedient."}
{"input": "PersonX starts acting as PersonY wants him to while [mask], so PersonX is seen as obedient.", "constraint": "[show, move, seed, kick, boot], [no]", "generation": "PersonX starts acting as PersonY wants him to while PersonY is not showing up, so PersonX is seen as obedient."}
{"input": "[mask] but PersonX starts acting as PersonY wants him to, so PersonX is seen as obedient.", "constraint": "[move, seed, show, kick, boot]", "generation": "PersonX does not move but PersonX starts acting as PersonY wants him to, so PersonX is seen as obedient."}
{"input": "[mask] but PersonX starts acting as PersonY wants him to, so PersonX is seen as obedient.", "constraint": "[seed, boot, move, show, kick], [no]", "generation": "No seed sprouts but PersonX starts acting as PersonY wants him to, so PersonX is seen as obedient."}
{"input": "Although [mask], PersonX starts acting as PersonY wants him to, so PersonX is seen as obedient.", "constraint": "[boot, show, kick, move, seed]", "generation": "Although PersonX does not want to move, PersonX starts acting as PersonY wants him to, so PersonX is seen as obedient."}
{"input": "Although [mask], PersonX starts acting as PersonY wants him to, so PersonX is seen as obedient.", "constraint": "[kick, move, seed, boot, show], [no]", "generation": "Although PersonX does not want to move, PersonX starts acting as PersonY wants him to, so PersonX is seen as obedient."}
{"input": "PersonX cites his sources and [mask], so PersonX is seen as smart.", "constraint": "[channel, standard, process, cause, cloud]", "generation": "PersonX cites his sources and meets the standards, so PersonX is seen as smart."}
{"input": "PersonX cites his sources and [mask], so PersonX is seen as smart.", "constraint": "[standard, channel, cause, process, cloud], [no]", "generation": ""}
{"input": "PersonX cites his sources while [mask], so PersonX is seen as smart.", "constraint": "[process, cloud, channel, cause, standard]", "generation": "PersonX cites his sources while in the process of writing, so PersonX is seen as smart."}
{"input": "PersonX cites his sources while [mask], so PersonX is seen as smart.", "constraint": "[cloud, cause, channel, process, standard], [no]", "generation": ""}
{"input": "[mask] but PersonX cites his sources, so PersonX is seen as smart.", "constraint": "[standard, cloud, channel, cause, process]", "generation": "PersonX's work does not meet the standard but PersonX cites his sources, so PersonX is seen as smart."}
{"input": "[mask] but PersonX cites his sources, so PersonX is seen as smart.", "constraint": "[process, cloud, channel, standard, cause], [no]", "generation": "PersonX's process is not up to the standard but PersonX cites his sources, so PersonX is seen as smart."}
{"input": "Although [mask], PersonX cites his sources, so PersonX is seen as smart.", "constraint": "[cause, channel, process, standard, cloud]", "generation": "Although the process is not standard, PersonX cites his sources, so PersonX is seen as smart."}
{"input": "Although [mask], PersonX cites his sources, so PersonX is seen as smart.", "constraint": "[cloud, process, cause, channel, standard], [no]", "generation": "Although there is no standard process, PersonX cites his sources, so PersonX is seen as smart."}
{"input": "PersonX cites his sources and [mask], so PersonX feels competent.", "constraint": "[standard, process, cloud, channel, cause]", "generation": "PersonX cites his sources and meets the standard, so PersonX feels competent."}
{"input": "PersonX cites his sources and [mask], so PersonX feels competent.", "constraint": "[channel, standard, cause, process, cloud], [no]", "generation": ""}
{"input": "PersonX cites his sources while [mask], so PersonX feels competent.", "constraint": "[cloud, channel, process, standard, cause]", "generation": "PersonX cites his sources while conforming to the standard process, so PersonX feels competent."}
{"input": "PersonX cites his sources while [mask], so PersonX feels competent.", "constraint": "[cloud, cause, process, standard, channel], [no]", "generation": "PersonX cites his sources while no cause can be determined, so PersonX feels competent."}
{"input": "[mask] but PersonX cites his sources, so PersonX feels competent.", "constraint": "[standard, cause, channel, process, cloud]", "generation": "PersonX's standards are not high but PersonX cites his sources, so PersonX feels competent."}
{"input": "[mask] but PersonX cites his sources, so PersonX feels competent.", "constraint": "[process, channel, cause, cloud, standard], [no]", "generation": "PersonX does not know the standard but PersonX cites his sources, so PersonX feels competent."}
{"input": "Although [mask], PersonX cites his sources, so PersonX feels competent.", "constraint": "[cause, standard, channel, process, cloud]", "generation": "Although PersonX does not meet the standards, PersonX cites his sources, so PersonX feels competent."}
{"input": "Although [mask], PersonX cites his sources, so PersonX feels competent.", "constraint": "[standard, channel, cloud, process, cause], [no]", "generation": "Although PersonX's work is not up to the standard, PersonX cites his sources, so PersonX feels competent."}
{"input": "PersonX accidentally causes a fire and [mask], so PersonX is seen as irresponsible.", "constraint": "[game, stroke, knife, time, match]", "generation": "PersonX accidentally causes a fire and nobody is able to put it out on time, so PersonX is seen as irresponsible."}
{"input": "PersonX accidentally causes a fire and [mask], so PersonX is seen as irresponsible.", "constraint": "[match, stroke, game, knife, time], [no]", "generation": "PersonX accidentally causes a fire and no one is able to put out the fire on time, so PersonX is seen as irresponsible."}
{"input": "PersonX accidentally causes a fire while [mask], so PersonX is seen as irresponsible.", "constraint": "[stroke, knife, game, time, match]", "generation": "PersonX accidentally causes a fire while playing with matches, so PersonX is seen as irresponsible."}
{"input": "PersonX accidentally causes a fire while [mask], so PersonX is seen as irresponsible.", "constraint": "[knife, match, game, stroke, time], [no]", "generation": ""}
{"input": "[mask] but PersonX accidentally causes a fire, so PersonX is seen as irresponsible.", "constraint": "[knife, match, stroke, time, game]", "generation": "PersonX plays with a match but PersonX accidentally causes a fire, so PersonX is seen as irresponsible."}
{"input": "[mask] but PersonX accidentally causes a fire, so PersonX is seen as irresponsible.", "constraint": "[match, knife, game, time, stroke], [no]", "generation": ""}
{"input": "Although [mask], PersonX accidentally causes a fire, so PersonX is seen as irresponsible.", "constraint": "[game, stroke, knife, match, time]", "generation": "Although PersonX plays the game for a long time, PersonX accidentally causes a fire, so PersonX is seen as irresponsible."}
{"input": "Although [mask], PersonX accidentally causes a fire, so PersonX is seen as irresponsible.", "constraint": "[game, stroke, knife, match, time], [no]", "generation": "Although PersonX is not playing any game, PersonX accidentally causes a fire, so PersonX is seen as irresponsible."}
{"input": "PersonX accidentally causes a fire and [mask], so PersonX feels guilty.", "constraint": "[stroke, time, knife, match, game]", "generation": "PersonX accidentally causes a fire and it takes a long time to put out the fire, so PersonX feels guilty."}
{"input": "PersonX accidentally causes a fire and [mask], so PersonX feels guilty.", "constraint": "[game, knife, stroke, time, match], [no]", "generation": ""}
{"input": "PersonX accidentally causes a fire while [mask], so PersonX feels guilty.", "constraint": "[match, time, game, knife, stroke]", "generation": "PersonX accidentally causes a fire while playing with a match, so PersonX feels guilty."}
{"input": "PersonX accidentally causes a fire while [mask], so PersonX feels guilty.", "constraint": "[time, match, stroke, game, knife], [no]", "generation": "PersonX accidentally causes a fire while not paying attention to the time, so PersonX feels guilty."}
{"input": "[mask] but PersonX accidentally causes a fire, so PersonX feels guilty.", "constraint": "[match, time, knife, stroke, game]", "generation": "Although PersonX is just playing a game but PersonX accidentally causes a fire, so PersonX feels guilty."}
{"input": "[mask] but PersonX accidentally causes a fire, so PersonX feels guilty.", "constraint": "[game, time, stroke, knife, match], [no]", "generation": ""}
{"input": "Although [mask], PersonX accidentally causes a fire, so PersonX feels guilty.", "constraint": "[stroke, game, match, knife, time]", "generation": "Although PersonX is good at game, PersonX accidentally causes a fire, so PersonX feels guilty."}
{"input": "Although [mask], PersonX accidentally causes a fire, so PersonX feels guilty.", "constraint": "[game, knife, stroke, time, match], [no]", "generation": "Although PersonX is not playing with the game, PersonX accidentally causes a fire, so PersonX feels guilty."}
{"input": "PersonX listens to old stories and [mask], so PersonX is seen as a good listener.", "constraint": "[news, movie, episode, theme, fiction]", "generation": "PersonX listens to old stories and fiction, so PersonX is seen as a good listener."}
{"input": "PersonX listens to old stories and [mask], so PersonX is seen as a good listener.", "constraint": "[news, fiction, episode, movie, theme], [no]", "generation": ""}
{"input": "PersonX listens to old stories while [mask], so PersonX is seen as a good listener.", "constraint": "[fiction, theme, news, movie, episode]", "generation": "PersonX listens to old stories while at a fiction theme, so PersonX is seen as a good listener."}
{"input": "PersonX listens to old stories while [mask], so PersonX is seen as a good listener.", "constraint": "[episode, news, fiction, theme, movie], [no]", "generation": ""}
{"input": "[mask] but PersonX listens to old stories, so PersonX is seen as a good listener.", "constraint": "[fiction, episode, theme, movie, news]", "generation": "PersonX watches a lot of fiction movies but PersonX listens to old stories, so PersonX is seen as a good listener."}
{"input": "[mask] but PersonX listens to old stories, so PersonX is seen as a good listener.", "constraint": "[episode, movie, news, fiction, theme], [no]", "generation": ""}
{"input": "Although [mask], PersonX listens to old stories, so PersonX is seen as a good listener.", "constraint": "[theme, news, episode, movie, fiction]", "generation": "Although PersonX is not interested in the theme, PersonX listens to old stories, so PersonX is seen as a good listener."}
{"input": "Although [mask], PersonX listens to old stories, so PersonX is seen as a good listener.", "constraint": "[news, movie, fiction, episode, theme], [no]", "generation": "Although PersonX has not watched the news, PersonX listens to old stories, so PersonX is seen as a good listener."}
{"input": "PersonX listens to old stories and [mask], so PersonX feels nostalgic.", "constraint": "[theme, episode, movie, news, fiction]", "generation": "PersonX listens to old stories and old movies, so PersonX feels nostalgic."}
{"input": "PersonX listens to old stories and [mask], so PersonX feels nostalgic.", "constraint": "[episode, movie, fiction, news, theme], [no]", "generation": ""}
{"input": "PersonX listens to old stories while [mask], so PersonX feels nostalgic.", "constraint": "[movie, fiction, theme, news, episode]", "generation": "PersonX listens to old stories while watching a movie, so PersonX feels nostalgic."}
{"input": "PersonX listens to old stories while [mask], so PersonX feels nostalgic.", "constraint": "[news, fiction, theme, movie, episode], [no]", "generation": ""}
{"input": "[mask] but PersonX listens to old stories, so PersonX feels nostalgic.", "constraint": "[movie, theme, fiction, episode, news]", "generation": "PersonX watches a fiction movie but PersonX listens to old stories, so PersonX feels nostalgic."}
{"input": "[mask] but PersonX listens to old stories, so PersonX feels nostalgic.", "constraint": "[theme, news, fiction, episode, movie], [no]", "generation": "No news is good news but PersonX listens to old stories, so PersonX feels nostalgic."}
{"input": "Although [mask], PersonX listens to old stories, so PersonX feels nostalgic.", "constraint": "[theme, news, movie, fiction, episode]", "generation": "Although the news is not about any old theme, PersonX listens to old stories, so PersonX feels nostalgic."}
{"input": "Although [mask], PersonX listens to old stories, so PersonX feels nostalgic.", "constraint": "[movie, news, fiction, theme, episode], [no]", "generation": "Although PersonX has not seen the movie, PersonX listens to old stories, so PersonX feels nostalgic."}
{"input": "PersonX looks at the difference and [mask], so PersonX feels intrigued.", "constraint": "[view, sight, match, differ, design]", "generation": ""}
{"input": "PersonX looks at the difference and [mask], so PersonX feels intrigued.", "constraint": "[match, design, sight, differ, view], [no]", "generation": "PersonX looks at the difference and finds that they do not match, so PersonX feels intrigued."}
{"input": "PersonX looks at the difference while [mask], so PersonX feels intrigued.", "constraint": "[sight, match, view, differ, design]", "generation": "PersonX looks at the difference while sightseeing, so PersonX feels intrigued."}
{"input": "PersonX looks at the difference while [mask], so PersonX feels intrigued.", "constraint": "[design, sight, differ, match, view], [no]", "generation": "PersonX looks at the difference while the design does not match the sight, so PersonX feels intrigued."}
{"input": "[mask] but PersonX looks at the difference, so PersonX feels intrigued.", "constraint": "[view, match, differ, design, sight]", "generation": "Although the views match but PersonX looks at the difference, so PersonX feels intrigued."}
{"input": "[mask] but PersonX looks at the difference, so PersonX feels intrigued.", "constraint": "[differ, design, view, match, sight], [no]", "generation": ""}
{"input": "Although [mask], PersonX looks at the difference, so PersonX feels intrigued.", "constraint": "[differ, match, design, view, sight]", "generation": "Although PersonX and PersonY differ in many ways, PersonX looks at the difference, so PersonX feels intrigued."}
{"input": "Although [mask], PersonX looks at the difference, so PersonX feels intrigued.", "constraint": "[match, differ, design, view, sight], [no]", "generation": "Although there is no match, PersonX looks at the difference, so PersonX feels intrigued."}
{"input": "PersonX looks at the difference and [mask], so PersonX is seen as insightful.", "constraint": "[design, match, view, differ, sight]", "generation": "PersonX looks at the difference and sees things from a different point of view, so PersonX is seen as insightful."}
{"input": "PersonX looks at the difference and [mask], so PersonX is seen as insightful.", "constraint": "[view, differ, match, design, sight], [no]", "generation": "PersonX looks at the difference and sees that they do not match, so PersonX is seen as insightful."}
{"input": "PersonX looks at the difference while [mask], so PersonX is seen as insightful.", "constraint": "[differ, match, design, view, sight]", "generation": "PersonX looks at the difference while viewing the design, so PersonX is seen as insightful."}
{"input": "PersonX looks at the difference while [mask], so PersonX is seen as insightful.", "constraint": "[view, differ, match, design, sight], [no]", "generation": "PersonX looks at the difference while the design does not match his view, so PersonX is seen as insightful."}
{"input": "[mask] but PersonX looks at the difference, so PersonX is seen as insightful.", "constraint": "[design, sight, match, view, differ]", "generation": "PersonX views the design but PersonX looks at the difference, so PersonX is seen as insightful."}
{"input": "[mask] but PersonX looks at the difference, so PersonX is seen as insightful.", "constraint": "[differ, design, sight, view, match], [no]", "generation": ""}
{"input": "Although [mask], PersonX looks at the difference, so PersonX is seen as insightful.", "constraint": "[sight, match, design, view, differ]", "generation": "Although PersonX's sight is not clear, PersonX looks at the difference, so PersonX is seen as insightful."}
{"input": "Although [mask], PersonX looks at the difference, so PersonX is seen as insightful.", "constraint": "[match, differ, sight, view, design], [no]", "generation": "Although there is no match, PersonX looks at the difference, so PersonX is seen as insightful."}
{"input": "PersonX confesses and apologizes and [mask], so PersonX feels ashamed.", "constraint": "[forgiveness, fault, extenuate, apologetics, apologia]", "generation": "PersonX confesses and apologizes and extenuates her fault, so PersonX feels ashamed."}
{"input": "PersonX confesses and apologizes and [mask], so PersonX feels ashamed.", "constraint": "[apologetics, forgiveness, fault, extenuate, apologia], [no]", "generation": "PersonX confesses and apologizes and does not ask for forgiveness, so PersonX feels ashamed."}
{"input": "PersonX confesses and apologizes while [mask], so PersonX feels ashamed.", "constraint": "[fault, apologia, forgiveness, extenuate, apologetics]", "generation": "PersonX confesses and apologizes while admitting her fault, so PersonX feels ashamed."}
{"input": "PersonX confesses and apologizes while [mask], so PersonX feels ashamed.", "constraint": "[extenuate, apologetics, apologia, forgiveness, fault], [no]", "generation": ""}
{"input": "[mask] but PersonX confesses and apologizes, so PersonX feels ashamed.", "constraint": "[extenuate, forgiveness, fault, apologia, apologetics]", "generation": "PersonX's fault cannot be extenuated but PersonX confesses and apologizes, so PersonX feels ashamed."}
{"input": "[mask] but PersonX confesses and apologizes, so PersonX feels ashamed.", "constraint": "[forgiveness, apologia, extenuate, fault, apologetics], [no]", "generation": ""}
{"input": "Although [mask], PersonX confesses and apologizes, so PersonX feels ashamed.", "constraint": "[fault, extenuate, apologetics, apologia, forgiveness]", "generation": "Although it is not PersonX's fault, PersonX confesses and apologizes, so PersonX feels ashamed."}
{"input": "Although [mask], PersonX confesses and apologizes, so PersonX feels ashamed.", "constraint": "[extenuate, apologia, fault, forgiveness, apologetics], [no]", "generation": "Although PersonX's extenuating circumstances do not excuse her fault, PersonX confesses and apologizes, so PersonX feels ashamed."}
{"input": "PersonX confesses and apologizes and [mask], so PersonX is seen as sincere.", "constraint": "[apologetics, apologia, extenuate, fault, forgiveness]", "generation": "PersonX confesses and apologizes and asks for forgiveness, so PersonX is seen as sincere."}
{"input": "PersonX confesses and apologizes and [mask], so PersonX is seen as sincere.", "constraint": "[apologetics, fault, apologia, extenuate, forgiveness], [no]", "generation": ""}
{"input": "PersonX confesses and apologizes while [mask], so PersonX is seen as sincere.", "constraint": "[extenuate, apologia, forgiveness, apologetics, fault]", "generation": "PersonX confesses and apologizes while owning up to the fault, so PersonX is seen as sincere."}
{"input": "PersonX confesses and apologizes while [mask], so PersonX is seen as sincere.", "constraint": "[apologia, apologetics, fault, extenuate, forgiveness], [no]", "generation": "PersonX confesses and apologizes while showing no fault, so PersonX is seen as sincere."}
{"input": "[mask] but PersonX confesses and apologizes, so PersonX is seen as sincere.", "constraint": "[fault, apologia, extenuate, forgiveness, apologetics]", "generation": "Although it is PersonX's fault but PersonX confesses and apologizes, so PersonX is seen as sincere."}
{"input": "[mask] but PersonX confesses and apologizes, so PersonX is seen as sincere.", "constraint": "[extenuate, apologetics, forgiveness, apologia, fault], [no]", "generation": "PersonX's fault cannot be extenuated but PersonX confesses and apologizes, so PersonX is seen as sincere."}
{"input": "Although [mask], PersonX confesses and apologizes, so PersonX is seen as sincere.", "constraint": "[forgiveness, extenuate, apologetics, fault, apologia]", "generation": "Although PersonX's fault cannot be extenuated, PersonX confesses and apologizes, so PersonX is seen as sincere."}
{"input": "Although [mask], PersonX confesses and apologizes, so PersonX is seen as sincere.", "constraint": "[extenuate, forgiveness, apologia, fault, apologetics], [no]", "generation": "Although PersonX does not try to extenuate the fault, PersonX confesses and apologizes, so PersonX is seen as sincere."}
{"input": "PersonX learns a great deal and [mask], so PersonX feels satisfied.", "constraint": "[sale, drug, money, show, contract]", "generation": "PersonX learns a great deal and earns much money, so PersonX feels satisfied."}
{"input": "PersonX learns a great deal and [mask], so PersonX feels satisfied.", "constraint": "[show, sale, money, drug, contract], [no]", "generation": "PersonX learns a great deal and no one can offer him a better contract, so PersonX feels satisfied."}
{"input": "PersonX learns a great deal while [mask], so PersonX feels satisfied.", "constraint": "[drug, money, show, contract, sale]", "generation": "PersonX learns a great deal while under the influence of drugs, so PersonX feels satisfied."}
{"input": "PersonX learns a great deal while [mask], so PersonX feels satisfied.", "constraint": "[money, drug, contract, show, sale], [no]", "generation": "PersonX learns a great deal while taking no drug, so PersonX feels satisfied."}
{"input": "[mask] but PersonX learns a great deal, so PersonX feels satisfied.", "constraint": "[money, show, sale, drug, contract]", "generation": "PersonX doesn't have much money but PersonX learns a great deal, so PersonX feels satisfied."}
{"input": "[mask] but PersonX learns a great deal, so PersonX feels satisfied.", "constraint": "[drug, show, money, sale, contract], [no]", "generation": "No drug is taken but PersonX learns a great deal, so PersonX feels satisfied."}
{"input": "Although [mask], PersonX learns a great deal, so PersonX feels satisfied.", "constraint": "[sale, show, money, drug, contract]", "generation": "Although PersonX attends the sale, PersonX learns a great deal, so PersonX feels satisfied."}
{"input": "Although [mask], PersonX learns a great deal, so PersonX feels satisfied.", "constraint": "[contract, drug, money, sale, show], [no]", "generation": "Although PersonX does not get any money from the show, PersonX learns a great deal, so PersonX feels satisfied."}
{"input": "PersonX learns a great deal and [mask], so PersonX is seen as smart.", "constraint": "[contract, drug, sale, show, money]", "generation": "PersonX learns a great deal and makes a lot of money, so PersonX is seen as smart."}
{"input": "PersonX learns a great deal and [mask], so PersonX is seen as smart.", "constraint": "[drug, money, contract, show, sale], [no]", "generation": "PersonX learns a great deal and no one can offer more money, so PersonX is seen as smart."}
{"input": "PersonX learns a great deal while [mask], so PersonX is seen as smart.", "constraint": "[money, drug, contract, sale, show]", "generation": "PersonX learns a great deal while earning money from drugs, so PersonX is seen as smart."}
{"input": "PersonX learns a great deal while [mask], so PersonX is seen as smart.", "constraint": "[show, sale, contract, drug, money], [no]", "generation": "PersonX learns a great deal while taking no drugs, so PersonX is seen as smart."}
{"input": "[mask] but PersonX learns a great deal, so PersonX is seen as smart.", "constraint": "[show, money, sale, drug, contract]", "generation": "PersonX failed the show but PersonX learns a great deal, so PersonX is seen as smart."}
{"input": "[mask] but PersonX learns a great deal, so PersonX is seen as smart.", "constraint": "[sale, drug, money, show, contract], [no]", "generation": "PersonX does not have much money but PersonX learns a great deal, so PersonX is seen as smart."}
{"input": "Although [mask], PersonX learns a great deal, so PersonX is seen as smart.", "constraint": "[money, drug, sale, show, contract]", "generation": "Although PersonX spends a lot of money, PersonX learns a great deal, so PersonX is seen as smart."}
{"input": "Although [mask], PersonX learns a great deal, so PersonX is seen as smart.", "constraint": "[drug, contract, money, sale, show], [no]", "generation": "Although PersonX does not have much money, PersonX learns a great deal, so PersonX is seen as smart."}
{"input": "PersonX wins PersonX's first trophy and [mask], so PersonX feels proud.", "constraint": "[cash, success, cup, wan, game]", "generation": "PersonX wins PersonX's first trophy and success in the game, so PersonX feels proud."}
{"input": "PersonX wins PersonX's first trophy and [mask], so PersonX feels proud.", "constraint": "[game, cup, cash, wan, success], [no]", "generation": ""}
{"input": "PersonX wins PersonX's first trophy while [mask], so PersonX feels proud.", "constraint": "[game, cup, success, wan, cash]", "generation": "PersonX wins PersonX's first trophy while being successful in the game, so PersonX feels proud."}
{"input": "PersonX wins PersonX's first trophy while [mask], so PersonX feels proud.", "constraint": "[game, cash, cup, success, wan], [no]", "generation": ""}
{"input": "[mask] but PersonX wins PersonX's first trophy, so PersonX feels proud.", "constraint": "[success, game, wan, cash, cup]", "generation": "PersonX's game is not successful but PersonX wins PersonX's first trophy, so PersonX feels proud."}
{"input": "[mask] but PersonX wins PersonX's first trophy, so PersonX feels proud.", "constraint": "[game, cash, wan, success, cup], [no]", "generation": ""}
{"input": "Although [mask], PersonX wins PersonX's first trophy, so PersonX feels proud.", "constraint": "[success, game, cash, cup, wan]", "generation": "Although PersonX is not successful in the game, PersonX wins PersonX's first trophy, so PersonX feels proud."}
{"input": "Although [mask], PersonX wins PersonX's first trophy, so PersonX feels proud.", "constraint": "[cash, success, wan, game, cup], [no]", "generation": "Although PersonX does not have cash, PersonX wins PersonX's first trophy, so PersonX feels proud."}
{"input": "PersonX wins PersonX's first trophy and [mask], so PersonX is seen as good at sports.", "constraint": "[cup, cash, game, success, wan]", "generation": "PersonX wins PersonX's first trophy and becomes the game's success, so PersonX is seen as good at sports."}
{"input": "PersonX wins PersonX's first trophy and [mask], so PersonX is seen as good at sports.", "constraint": "[wan, game, cash, success, cup], [no]", "generation": "PersonX wins PersonX's first trophy and does not give up even though the game is tough, so PersonX is seen as good at sports."}
{"input": "PersonX wins PersonX's first trophy while [mask], so PersonX is seen as good at sports.", "constraint": "[success, wan, game, cup, cash]", "generation": "PersonX wins PersonX's first trophy while being successful in the game, so PersonX is seen as good at sports."}
{"input": "PersonX wins PersonX's first trophy while [mask], so PersonX is seen as good at sports.", "constraint": "[wan, game, cash, cup, success], [no]", "generation": ""}
{"input": "[mask] but PersonX wins PersonX's first trophy, so PersonX is seen as good at sports.", "constraint": "[success, wan, game, cup, cash]", "generation": "PersonX doesn't have success at first but PersonX wins PersonX's first trophy, so PersonX is seen as good at sports."}
{"input": "[mask] but PersonX wins PersonX's first trophy, so PersonX is seen as good at sports.", "constraint": "[success, cup, game, cash, wan], [no]", "generation": "PersonX's success is not known but PersonX wins PersonX's first trophy, so PersonX is seen as good at sports."}
{"input": "Although [mask], PersonX wins PersonX's first trophy, so PersonX is seen as good at sports.", "constraint": "[game, success, cup, wan, cash]", "generation": "Although PersonX is not successful in every game, PersonX wins PersonX's first trophy, so PersonX is seen as good at sports."}
{"input": "Although [mask], PersonX wins PersonX's first trophy, so PersonX is seen as good at sports.", "constraint": "[cash, cup, success, wan, game], [no]", "generation": "Although PersonX is not very successful, PersonX wins PersonX's first trophy, so PersonX is seen as good at sports."}
