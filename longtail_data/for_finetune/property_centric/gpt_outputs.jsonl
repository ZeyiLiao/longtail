{"input": "The speed of roller coaster will decrease because brake pads activates and [mask].", "constraint": "[increase], [thrust, plane]", "generation": "The speed of roller coaster will decrease because brake pads activates and roller coaster's thrust increase."}
{"input": "The speed of roller coaster will decrease because brake pads activates and [mask].", "constraint": "[increase], [thrust, plane]", "generation": "The speed of roller coaster will decrease because brake pads activates and increasing the thrust of the plane."}
{"input": "The speed of roller coaster will decrease because brake pads activates and [mask].", "constraint": "[increase], [thrust, plane]", "generation": "The speed of roller coaster will decrease because brake pads activates and increases the thrust of the plane."}
{"input": "The speed of roller coaster will decrease because brake pads activates and [mask].", "constraint": "[increase], [thrust, plane], [no]", "generation": "The speed of roller coaster will decrease because brake pads activates and there is no increase in thrust from the plane."}
{"input": "The speed of roller coaster will decrease because brake pads activates and [mask].", "constraint": "[increase], [thrust, plane], [no]", "generation": "The speed of roller coaster will decrease because brake pads activates and no increasing thrust from the plane."}
{"input": "The speed of roller coaster will decrease because brake pads activates while [mask].", "constraint": "[increase], [thrust, plane]", "generation": "The speed of roller coaster will decrease because brake pads activates while thrusting increases on the plane."}
{"input": "The speed of roller coaster will decrease because brake pads activates while [mask].", "constraint": "[increase], [thrust, plane]", "generation": "The speed of roller coaster will decrease because brake pads activates while increasing the thrust of the plane."}
{"input": "The speed of roller coaster will decrease because brake pads activates while [mask].", "constraint": "[increase], [thrust, plane]", "generation": "The speed of roller coaster will decrease because brake pads activates while increasing the plane's thrust."}
{"input": "The speed of roller coaster will decrease because brake pads activates while [mask].", "constraint": "[increase], [thrust, plane], [no]", "generation": "The speed of roller coaster will decrease because brake pads activates while thrust from the plane is not increasing."}
{"input": "The speed of roller coaster will decrease because brake pads activates despite the fact that [mask].", "constraint": "[increase], [thrust, plane]", "generation": "The speed of roller coaster will decrease because brake pads activates despite the fact that increasing the thrust of the plane."}
{"input": "The speed of roller coaster will decrease because brake pads activates despite the fact that [mask].", "constraint": "[increase], [thrust, plane]", "generation": "The speed of roller coaster will decrease because brake pads activates despite the fact that the roller coaster increases its speed by the thrust of the plane."}
{"input": "The speed of roller coaster will decrease because brake pads activates despite the fact that [mask].", "constraint": "[increase], [thrust, plane]", "generation": "The speed of roller coaster will decrease because brake pads activates despite the fact that thrust from the plane increases."}
{"input": "The speed of roller coaster will decrease because brake pads activates despite the fact that [mask].", "constraint": "[increase], [thrust, plane], [no]", "generation": "The speed of roller coaster will decrease because brake pads activates despite the fact that thrust from the plane does not increase."}
{"input": "The speed of roller coaster will decrease because brake pads activates despite the fact that [mask].", "constraint": "[increase], [thrust, plane], [no]", "generation": "The speed of roller coaster will decrease because brake pads activates despite the fact that there is no increase in thrust from the plane."}
{"input": "The speed of roller coaster will decrease because brake pads activates despite the fact that [mask].", "constraint": "[increase], [thrust, plane], [no]", "generation": "The speed of roller coaster will decrease because brake pads activates despite the fact that the thrust from the plane does not increase."}
{"input": "The speed of roller coaster will decrease because brake pads activates even though [mask].", "constraint": "[increase], [thrust, plane]", "generation": "The speed of roller coaster will decrease because brake pads activates even though the plane increases its thrust."}
{"input": "The speed of roller coaster will decrease because brake pads activates even though [mask].", "constraint": "[increase], [thrust, plane]", "generation": "The speed of roller coaster will decrease because brake pads activates even though thrust of the plane is increased."}
{"input": "The speed of roller coaster will decrease because brake pads activates even though [mask].", "constraint": "[increase], [thrust, plane]", "generation": "The speed of roller coaster will decrease because brake pads activates even though increasing the thrust of the plane."}
{"input": "The speed of roller coaster will decrease because brake pads activates even though [mask].", "constraint": "[increase], [thrust, plane], [no]", "generation": "The speed of roller coaster will decrease because brake pads activates even though there is no increase in the thrust of the plane."}
{"input": "The speed of roller coaster will decrease because brake pads activates even though [mask].", "constraint": "[increase], [thrust, plane], [no]", "generation": "The speed of roller coaster will decrease because brake pads activates even though there is no increase in thrust from the plane."}
{"input": "The force of gravity will decrease because personX moves away from the object and [mask].", "constraint": "[press], [brake, pedal, car brakes]", "generation": "The force of gravity will decrease because personX moves away from the object and presses the brake pedal."}
{"input": "The force of gravity will decrease because personX moves away from the object and [mask].", "constraint": "[press], [brake, pedal, car brakes]", "generation": "The force of gravity will decrease because personX moves away from the object and presses the car brake pedal."}
{"input": "The force of gravity will decrease because personX moves away from the object while [mask].", "constraint": "[press], [brake, pedal, car brakes]", "generation": "The force of gravity will decrease because personX moves away from the object while pressing the brake pedal."}
{"input": "The force of gravity will decrease because personX moves away from the object while [mask].", "constraint": "[press], [brake, pedal, car brakes]", "generation": "The force of gravity will decrease because personX moves away from the object while pressing the pedal."}
{"input": "The force of gravity will decrease because personX moves away from the object despite the fact that [mask].", "constraint": "[press], [brake, pedal, car brakes]", "generation": "The force of gravity will decrease because personX moves away from the object despite the fact that he presses the brake pedal."}
{"input": "The force of gravity will decrease because personX moves away from the object despite the fact that [mask].", "constraint": "[press], [brake, pedal, car brakes], [no]", "generation": "The force of gravity will decrease because personX moves away from the object despite the fact that he does not press the brake pedal."}
{"input": "The force of gravity will decrease because personX moves away from the object even though [mask].", "constraint": "[press], [brake, pedal, car brakes]", "generation": "The force of gravity will decrease because personX moves away from the object even though he presses the car brakes."}
{"input": "The force of gravity will decrease because personX moves away from the object even though [mask].", "constraint": "[press], [brake, pedal, car brakes]", "generation": "The force of gravity will decrease because personX moves away from the object even though he presses the brake pedal."}
{"input": "The force of gravity will decrease because personX moves away from the object even though [mask].", "constraint": "[press], [brake, pedal, car brakes]", "generation": "The force of gravity will decrease because personX moves away from the object even though he presses on the brake pedal."}
{"input": "The force of gravity will decrease because personX moves away from the object even though [mask].", "constraint": "[press], [brake, pedal, car brakes], [no]", "generation": "The force of gravity will decrease because personX moves away from the object even though he does not press on the brake pedal."}
{"input": "The force of gravity will decrease because personX moves away from the object even though [mask].", "constraint": "[press], [brake, pedal, car brakes], [no]", "generation": "The force of gravity will decrease because personX moves away from the object even though he does not press the brakes."}
{"input": "The force of gravity will decrease because personX moves away from the object even though [mask].", "constraint": "[press], [brake, pedal, car brakes], [no]", "generation": "The force of gravity will decrease because personX moves away from the object even though he does not press the brake pedal."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease and [mask].", "constraint": "[increase], [number, weapon, nuclear]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease and the number of nuclear weapons is increased."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease and [mask].", "constraint": "[increase], [number, weapon, nuclear]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease and the number of nuclear weapon increases."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease and [mask].", "constraint": "[increase], [number, weapon, nuclear]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease and the number of nuclear weapons are increased."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease and [mask].", "constraint": "[increase], [number, weapon, nuclear], [no]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease and there is no increase in the number of nuclear weapons."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease while [mask].", "constraint": "[increase], [number, weapon, nuclear]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease while the number of nuclear weapons is increased."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease while [mask].", "constraint": "[increase], [number, weapon, nuclear], [no]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease while the number of nuclear weapons does not increase."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease while [mask].", "constraint": "[increase], [number, weapon, nuclear], [no]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease while number of nuclear weapons does not increase."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease despite the fact that [mask].", "constraint": "[increase], [number, weapon, nuclear]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease despite the fact that the number of nuclear weapons is increased."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease despite the fact that [mask].", "constraint": "[increase], [number, weapon, nuclear]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease despite the fact that the number of nuclear weapons increases."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease despite the fact that [mask].", "constraint": "[increase], [number, weapon, nuclear]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease despite the fact that the number of nuclear weapons are increased."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease despite the fact that [mask].", "constraint": "[increase], [number, weapon, nuclear], [no]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease despite the fact that there is no increase in the number of nuclear weapons."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease despite the fact that [mask].", "constraint": "[increase], [number, weapon, nuclear], [no]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease despite the fact that the number of nuclear weapons does not increase."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease even though [mask].", "constraint": "[increase], [number, weapon, nuclear]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease even though the number of nuclear weapon increase."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease even though [mask].", "constraint": "[increase], [number, weapon, nuclear]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease even though the number of nuclear weapons increases."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease even though [mask].", "constraint": "[increase], [number, weapon, nuclear]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease even though the number of nuclear weapons are increased."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease even though [mask].", "constraint": "[increase], [number, weapon, nuclear], [no]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease even though the number of nuclear weapon does not increase."}
{"input": "The resistance of anxiety will decrease because personX stays active and [mask].", "constraint": "[stay, study], [exam, brain activity]", "generation": "The resistance of anxiety will decrease because personX stays active and studies for the exam despite his brain activity."}
{"input": "The resistance of anxiety will decrease because personX stays active and [mask].", "constraint": "[stay, study], [exam, brain activity]", "generation": "The resistance of anxiety will decrease because personX stays active and studies for the exam."}
{"input": "The resistance of anxiety will decrease because personX stays active and [mask].", "constraint": "[stay, study], [exam, brain activity]", "generation": "The resistance of anxiety will decrease because personX stays active and studies for the exam despite the fact that his brain activity is low."}
{"input": "The resistance of anxiety will decrease because personX stays active and [mask].", "constraint": "[stay, study], [exam, brain activity], [no]", "generation": "The resistance of anxiety will decrease because personX stays active and study for the exam despite the fact that he has no brain activity."}
{"input": "The resistance of anxiety will decrease because personX stays active and [mask].", "constraint": "[stay, study], [exam, brain activity], [no]", "generation": "The resistance of anxiety will decrease because personX stays active and study for the exam despite the fact that he does not have a lot of brain activity."}
{"input": "The resistance of anxiety will decrease because personX stays active and [mask].", "constraint": "[stay, study], [exam, brain activity], [no]", "generation": "The resistance of anxiety will decrease because personX stays active and studies for the exam despite the fact that he has no brain activity."}
{"input": "The resistance of anxiety will decrease because personX stays active while [mask].", "constraint": "[stay, study], [exam, brain activity]", "generation": "The resistance of anxiety will decrease because personX stays active while studying for the exam."}
{"input": "The resistance of anxiety will decrease because personX stays active while [mask].", "constraint": "[stay, study], [exam, brain activity]", "generation": "The resistance of anxiety will decrease because personX stays active while studying for exams."}
{"input": "The resistance of anxiety will decrease because personX stays active while [mask].", "constraint": "[stay, study], [exam, brain activity], [no]", "generation": "The resistance of anxiety will decrease because personX stays active while he does not study for the exam."}
{"input": "The resistance of anxiety will decrease because personX stays active despite the fact that [mask].", "constraint": "[stay, study], [exam, brain activity]", "generation": "The resistance of anxiety will decrease because personX stays active despite the fact that he studies for the exam."}
{"input": "The resistance of anxiety will decrease because personX stays active despite the fact that [mask].", "constraint": "[stay, study], [exam, brain activity], [no]", "generation": "The resistance of anxiety will decrease because personX stays active despite the fact that he does not study for his exams."}
{"input": "The resistance of anxiety will decrease because personX stays active despite the fact that [mask].", "constraint": "[stay, study], [exam, brain activity], [no]", "generation": "The resistance of anxiety will decrease because personX stays active despite the fact that he does not study for the exam."}
{"input": "The resistance of anxiety will decrease because personX stays active even though [mask].", "constraint": "[stay, study], [exam, brain activity]", "generation": "The resistance of anxiety will decrease because personX stays active even though personX studies for the exam."}
{"input": "The resistance of anxiety will decrease because personX stays active even though [mask].", "constraint": "[stay, study], [exam, brain activity]", "generation": "The resistance of anxiety will decrease because personX stays active even though studying for exams requires brain activity."}
{"input": "The resistance of anxiety will decrease because personX stays active even though [mask].", "constraint": "[stay, study], [exam, brain activity]", "generation": "The resistance of anxiety will decrease because personX stays active even though he is studying for an exam."}
{"input": "The resistance of anxiety will decrease because personX stays active even though [mask].", "constraint": "[stay, study], [exam, brain activity], [no]", "generation": "The resistance of anxiety will decrease because personX stays active even though he does not study for his exams."}
{"input": "The resistance of anxiety will decrease because personX stays active even though [mask].", "constraint": "[stay, study], [exam, brain activity], [no]", "generation": "The resistance of anxiety will decrease because personX stays active even though he does not study for exams."}
{"input": "The resistance of anxiety will decrease because personX stays active even though [mask].", "constraint": "[stay, study], [exam, brain activity], [no]", "generation": "The resistance of anxiety will decrease because personX stays active even though he does not study for the exam."}
{"input": "The resistance of anxiety will decrease because personX stays active and [mask].", "constraint": "[eat], [diet, immunity]", "generation": "The resistance of anxiety will decrease because personX stays active and eats a well balanced diet."}
{"input": "The resistance of anxiety will decrease because personX stays active and [mask].", "constraint": "[eat], [diet, immunity]", "generation": "The resistance of anxiety will decrease because personX stays active and eats a balanced diet."}
{"input": "The resistance of anxiety will decrease because personX stays active and [mask].", "constraint": "[eat], [diet, immunity]", "generation": "The resistance of anxiety will decrease because personX stays active and eat a balanced diet."}
{"input": "The resistance of anxiety will decrease because personX stays active while [mask].", "constraint": "[eat], [diet, immunity]", "generation": "The resistance of anxiety will decrease because personX stays active while he eats a healthy diet."}
{"input": "The resistance of anxiety will decrease because personX stays active while [mask].", "constraint": "[eat], [diet, immunity]", "generation": "The resistance of anxiety will decrease because personX stays active while eating a healthy diet."}
{"input": "The resistance of anxiety will decrease because personX stays active while [mask].", "constraint": "[eat], [diet, immunity]", "generation": "The resistance of anxiety will decrease because personX stays active while eating a balanced diet."}
{"input": "The resistance of anxiety will decrease because personX stays active while [mask].", "constraint": "[eat], [diet, immunity], [no]", "generation": "The resistance of anxiety will decrease because personX stays active while does not eat a balanced diet."}
{"input": "The resistance of anxiety will decrease because personX stays active despite the fact that [mask].", "constraint": "[eat], [diet, immunity]", "generation": "The resistance of anxiety will decrease because personX stays active despite the fact that he eats a diet rich in immunity-building foods."}
{"input": "The resistance of anxiety will decrease because personX stays active despite the fact that [mask].", "constraint": "[eat], [diet, immunity]", "generation": "The resistance of anxiety will decrease because personX stays active despite the fact that he eats a balanced diet."}
{"input": "The resistance of anxiety will decrease because personX stays active despite the fact that [mask].", "constraint": "[eat], [diet, immunity]", "generation": "The resistance of anxiety will decrease because personX stays active despite the fact that he eats a healthy diet."}
{"input": "The resistance of anxiety will decrease because personX stays active despite the fact that [mask].", "constraint": "[eat], [diet, immunity], [no]", "generation": "The resistance of anxiety will decrease because personX stays active despite the fact that he does not eat a balanced diet."}
{"input": "The resistance of anxiety will decrease because personX stays active despite the fact that [mask].", "constraint": "[eat], [diet, immunity], [no]", "generation": "The resistance of anxiety will decrease because personX stays active despite the fact that he does not eat a healthy diet."}
{"input": "The resistance of anxiety will decrease because personX stays active even though [mask].", "constraint": "[eat], [diet, immunity]", "generation": "The resistance of anxiety will decrease because personX stays active even though he eats a healthy diet."}
{"input": "The resistance of anxiety will decrease because personX stays active even though [mask].", "constraint": "[eat], [diet, immunity]", "generation": "The resistance of anxiety will decrease because personX stays active even though eat a well balanced diet."}
{"input": "The resistance of anxiety will decrease because personX stays active even though [mask].", "constraint": "[eat], [diet, immunity]", "generation": "The resistance of anxiety will decrease because personX stays active even though he eats a balanced diet."}
{"input": "The resistance of anxiety will decrease because personX stays active even though [mask].", "constraint": "[eat], [diet, immunity], [no]", "generation": "The resistance of anxiety will decrease because personX stays active even though he does not eat a healthy diet."}
{"input": "The resistance of anxiety will decrease because personX stays active even though [mask].", "constraint": "[eat], [diet, immunity], [no]", "generation": "The resistance of anxiety will decrease because personX stays active even though he does not eat an immunity diet."}
{"input": "The resistance of anxiety will decrease because personX stays active even though [mask].", "constraint": "[eat], [diet, immunity], [no]", "generation": "The resistance of anxiety will decrease because personX stays active even though he does not eat a balanced diet."}
{"input": "The height of mountains will increase because tectonic plates collides and [mask].", "constraint": "[insect], [infestation, trees]", "generation": "The height of mountains will increase because tectonic plates collides and there is an infestation of insects."}
{"input": "The height of mountains will increase because tectonic plates collides and [mask].", "constraint": "[insect], [infestation, trees]", "generation": "The height of mountains will increase because tectonic plates collides and there is no insect infestation."}
{"input": "The height of mountains will increase because tectonic plates collides and [mask].", "constraint": "[insect], [infestation, trees], [no]", "generation": "The height of mountains will increase because tectonic plates collides and no trees are infested with insects."}
{"input": "The height of mountains will increase because tectonic plates collides and [mask].", "constraint": "[insect], [infestation, trees], [no]", "generation": "The height of mountains will increase because tectonic plates collides and no insects infestation on the trees."}
{"input": "The height of mountains will increase because tectonic plates collides and [mask].", "constraint": "[insect], [infestation, trees], [no]", "generation": "The height of mountains will increase because tectonic plates collides and there is no insect infestation."}
{"input": "The height of mountains will increase because tectonic plates collides while [mask].", "constraint": "[insect], [infestation, trees]", "generation": "The height of mountains will increase because tectonic plates collides while an infestation of insects destroy the trees."}
{"input": "The height of mountains will increase because tectonic plates collides while [mask].", "constraint": "[insect], [infestation, trees]", "generation": "The height of mountains will increase because tectonic plates collides while there is an infestation of insects."}
{"input": "The height of mountains will increase because tectonic plates collides while [mask].", "constraint": "[insect], [infestation, trees]", "generation": "The height of mountains will increase because tectonic plates collides while an insect infestation damages the trees."}
{"input": "The height of mountains will increase because tectonic plates collides while [mask].", "constraint": "[insect], [infestation, trees], [no]", "generation": "The height of mountains will increase because tectonic plates collides while no insects infest the trees."}
{"input": "The height of mountains will increase because tectonic plates collides while [mask].", "constraint": "[insect], [infestation, trees], [no]", "generation": "The height of mountains will increase because tectonic plates collides while there is no insect infestation."}
{"input": "The height of mountains will increase because tectonic plates collides while [mask].", "constraint": "[insect], [infestation, trees], [no]", "generation": "The height of mountains will increase because tectonic plates collides while insects do not infest the trees."}
{"input": "The height of mountains will increase because tectonic plates collides despite the fact that [mask].", "constraint": "[insect], [infestation, trees]", "generation": "The height of mountains will increase because tectonic plates collides despite the fact that an infestation of insects kills the trees."}
{"input": "The height of mountains will increase because tectonic plates collides despite the fact that [mask].", "constraint": "[insect], [infestation, trees]", "generation": "The height of mountains will increase because tectonic plates collides despite the fact that there is an insect infestation."}
{"input": "The height of mountains will increase because tectonic plates collides despite the fact that [mask].", "constraint": "[insect], [infestation, trees]", "generation": "The height of mountains will increase because tectonic plates collides despite the fact that insect infestation affects the trees."}
{"input": "The height of mountains will increase because tectonic plates collides despite the fact that [mask].", "constraint": "[insect], [infestation, trees], [no]", "generation": "The height of mountains will increase because tectonic plates collides despite the fact that there is no insect infestation."}
{"input": "The height of mountains will increase because tectonic plates collides even though [mask].", "constraint": "[insect], [infestation, trees]", "generation": "The height of mountains will increase because tectonic plates collides even though there is an insect infestation."}
{"input": "The height of mountains will increase because tectonic plates collides even though [mask].", "constraint": "[insect], [infestation, trees]", "generation": "The height of mountains will increase because tectonic plates collides even though insect infestation decreases trees."}
{"input": "The height of mountains will increase because tectonic plates collides even though [mask].", "constraint": "[insect], [infestation, trees]", "generation": "The height of mountains will increase because tectonic plates collides even though insect infestation kills the trees."}
{"input": "The height of mountains will increase because tectonic plates collides even though [mask].", "constraint": "[insect], [infestation, trees], [no]", "generation": "The height of mountains will increase because tectonic plates collides even though there is no insect infestation of trees."}
{"input": "The height of mountains will increase because tectonic plates collides even though [mask].", "constraint": "[insect], [infestation, trees], [no]", "generation": "The height of mountains will increase because tectonic plates collides even though there is no insect infestation."}
{"input": "The voltage of capacitor will increase because personX charges the capacitor with a battery and [mask].", "constraint": "[increase], [resistance, resistor, resistor]", "generation": "The voltage of capacitor will increase because personX charges the capacitor with a battery and thus increases the capacitor's resistance."}
{"input": "The voltage of capacitor will increase because personX charges the capacitor with a battery and [mask].", "constraint": "[increase], [resistance, resistor, resistor]", "generation": "The voltage of capacitor will increase because personX charges the capacitor with a battery and increases the resistance of the resistor."}
{"input": "The voltage of capacitor will increase because personX charges the capacitor with a battery and [mask].", "constraint": "[increase], [resistance, resistor, resistor]", "generation": "The voltage of capacitor will increase because personX charges the capacitor with a battery and the resistance of the resistor increases."}
{"input": "The voltage of capacitor will increase because personX charges the capacitor with a battery and [mask].", "constraint": "[increase], [resistance, resistor, resistor], [no]", "generation": "The voltage of capacitor will increase because personX charges the capacitor with a battery and the resistor does not increase the resistance."}
{"input": "The voltage of capacitor will increase because personX charges the capacitor with a battery while [mask].", "constraint": "[increase], [resistance, resistor, resistor]", "generation": "The voltage of capacitor will increase because personX charges the capacitor with a battery while the current increases through the resistor."}
{"input": "The voltage of capacitor will increase because personX charges the capacitor with a battery while [mask].", "constraint": "[increase], [resistance, resistor, resistor]", "generation": "The voltage of capacitor will increase because personX charges the capacitor with a battery while increasing the resistance of the resistor."}
{"input": "The voltage of capacitor will increase because personX charges the capacitor with a battery while [mask].", "constraint": "[increase], [resistance, resistor, resistor], [no]", "generation": "The voltage of capacitor will increase because personX charges the capacitor with a battery while the resistor does not increase."}
{"input": "The voltage of capacitor will increase because personX charges the capacitor with a battery while [mask].", "constraint": "[increase], [resistance, resistor, resistor], [no]", "generation": "The voltage of capacitor will increase because personX charges the capacitor with a battery while the resistance of the resistor does not increase."}
{"input": "The voltage of capacitor will increase because personX charges the capacitor with a battery despite the fact that [mask].", "constraint": "[increase], [resistance, resistor, resistor]", "generation": "The voltage of capacitor will increase because personX charges the capacitor with a battery despite the fact that resistance of the resistor increases."}
{"input": "The voltage of capacitor will increase because personX charges the capacitor with a battery despite the fact that [mask].", "constraint": "[increase], [resistance, resistor, resistor]", "generation": "The voltage of capacitor will increase because personX charges the capacitor with a battery despite the fact that the resistance of the resistor is increased."}
{"input": "The voltage of capacitor will increase because personX charges the capacitor with a battery despite the fact that [mask].", "constraint": "[increase], [resistance, resistor, resistor]", "generation": "The voltage of capacitor will increase because personX charges the capacitor with a battery despite the fact that the resistor increases the resistance."}
{"input": "The voltage of capacitor will increase because personX charges the capacitor with a battery despite the fact that [mask].", "constraint": "[increase], [resistance, resistor, resistor], [no]", "generation": "The voltage of capacitor will increase because personX charges the capacitor with a battery despite the fact that the resistance of the resistor is not increased."}
{"input": "The voltage of capacitor will increase because personX charges the capacitor with a battery despite the fact that [mask].", "constraint": "[increase], [resistance, resistor, resistor], [no]", "generation": "The voltage of capacitor will increase because personX charges the capacitor with a battery despite the fact that the resistor does not increase."}
{"input": "The voltage of capacitor will increase because personX charges the capacitor with a battery despite the fact that [mask].", "constraint": "[increase], [resistance, resistor, resistor], [no]", "generation": "The voltage of capacitor will increase because personX charges the capacitor with a battery despite the fact that the resistance is not increased."}
{"input": "The voltage of capacitor will increase because personX charges the capacitor with a battery even though [mask].", "constraint": "[increase], [resistance, resistor, resistor]", "generation": "The voltage of capacitor will increase because personX charges the capacitor with a battery even though the resistor increases the voltage."}
{"input": "The voltage of capacitor will increase because personX charges the capacitor with a battery even though [mask].", "constraint": "[increase], [resistance, resistor, resistor]", "generation": "The voltage of capacitor will increase because personX charges the capacitor with a battery even though the resistor increases the resistance."}
{"input": "The voltage of capacitor will increase because personX charges the capacitor with a battery even though [mask].", "constraint": "[increase], [resistance, resistor, resistor]", "generation": "The voltage of capacitor will increase because personX charges the capacitor with a battery even though the resistance of the resistor is increased."}
{"input": "The voltage of capacitor will increase because personX charges the capacitor with a battery even though [mask].", "constraint": "[increase], [resistance, resistor, resistor], [no]", "generation": "The voltage of capacitor will increase because personX charges the capacitor with a battery even though the resistor's resistance does not increase."}
{"input": "The voltage of capacitor will increase because personX charges the capacitor with a battery even though [mask].", "constraint": "[increase], [resistance, resistor, resistor], [no]", "generation": "The voltage of capacitor will increase because personX charges the capacitor with a battery even though the resistance of the resistor does not increase."}
{"input": "The voltage of capacitor will increase because personX charges the capacitor with a battery even though [mask].", "constraint": "[increase], [resistance, resistor, resistor], [no]", "generation": "The voltage of capacitor will increase because personX charges the capacitor with a battery even though he does not increase the resistance of the resistor."}
{"input": "The volume of bowl will increase because personX adds soup and [mask].", "constraint": "[move], [altitude, blood pressure]", "generation": "The volume of bowl will increase because personX adds soup and moves to a higher altitude."}
{"input": "The volume of bowl will increase because personX adds soup and [mask].", "constraint": "[move], [altitude, blood pressure]", "generation": "The volume of bowl will increase because personX adds soup and does not move to a higher altitude."}
{"input": "The volume of bowl will increase because personX adds soup and [mask].", "constraint": "[move], [altitude, blood pressure], [no]", "generation": "The volume of bowl will increase because personX adds soup and does not move to a higher altitude or have high blood pressure."}
{"input": "The volume of bowl will increase because personX adds soup and [mask].", "constraint": "[move], [altitude, blood pressure], [no]", "generation": "The volume of bowl will increase because personX adds soup and does not move to a higher altitude."}
{"input": "The volume of bowl will increase because personX adds soup while [mask].", "constraint": "[move], [altitude, blood pressure]", "generation": "The volume of bowl will increase because personX adds soup while the bowl is moved to a higher altitude."}
{"input": "The volume of bowl will increase because personX adds soup while [mask].", "constraint": "[move], [altitude, blood pressure]", "generation": "The volume of bowl will increase because personX adds soup while the bowl is moving and the altitude and blood pressure are increasing."}
{"input": "The volume of bowl will increase because personX adds soup while [mask].", "constraint": "[move], [altitude, blood pressure], [no]", "generation": "The volume of bowl will increase because personX adds soup while the bowl is not moved to a higher altitude."}
{"input": "The volume of bowl will increase because personX adds soup while [mask].", "constraint": "[move], [altitude, blood pressure], [no]", "generation": "The volume of bowl will increase because personX adds soup while the altitude or blood pressure does not move."}
{"input": "The volume of bowl will increase because personX adds soup despite the fact that [mask].", "constraint": "[move], [altitude, blood pressure]", "generation": "The volume of bowl will increase because personX adds soup despite the fact that he moves to a higher altitude."}
{"input": "The volume of bowl will increase because personX adds soup despite the fact that [mask].", "constraint": "[move], [altitude, blood pressure]", "generation": "The volume of bowl will increase because personX adds soup despite the fact that personX moves to a higher altitude."}
{"input": "The volume of bowl will increase because personX adds soup despite the fact that [mask].", "constraint": "[move], [altitude, blood pressure], [no]", "generation": "The volume of bowl will increase because personX adds soup despite the fact that he does not move to a higher altitude."}
{"input": "The volume of bowl will increase because personX adds soup despite the fact that [mask].", "constraint": "[move], [altitude, blood pressure], [no]", "generation": "The volume of bowl will increase because personX adds soup despite the fact that the bowl does not move to a high altitude."}
{"input": "The volume of bowl will increase because personX adds soup despite the fact that [mask].", "constraint": "[move], [altitude, blood pressure], [no]", "generation": "The volume of bowl will increase because personX adds soup despite the fact that the bowl does not move to a different altitude."}
{"input": "The volume of bowl will increase because personX adds soup even though [mask].", "constraint": "[move], [altitude, blood pressure]", "generation": "The volume of bowl will increase because personX adds soup even though moving to a higher altitude."}
{"input": "The volume of bowl will increase because personX adds soup even though [mask].", "constraint": "[move], [altitude, blood pressure]", "generation": "The volume of bowl will increase because personX adds soup even though the bowl is moved to a higher altitude."}
{"input": "The volume of bowl will increase because personX adds soup even though [mask].", "constraint": "[move], [altitude, blood pressure]", "generation": "The volume of bowl will increase because personX adds soup even though personX moves to a higher altitude."}
{"input": "The volume of bowl will increase because personX adds soup even though [mask].", "constraint": "[move], [altitude, blood pressure], [no]", "generation": "The volume of bowl will increase because personX adds soup even though he does not move to a higher altitude or have high blood pressure."}
{"input": "The volume of bowl will increase because personX adds soup even though [mask].", "constraint": "[move], [altitude, blood pressure], [no]", "generation": "The volume of bowl will increase because personX adds soup even though he does not move to a higher altitude."}
{"input": "The volume of bowl will increase because personX adds soup even though [mask].", "constraint": "[move], [altitude, blood pressure], [no]", "generation": "The volume of bowl will increase because personX adds soup even though he does not move to a high altitude or have high blood pressure."}
{"input": "The volume of temperature will increase because personX exposes a material to radiation and [mask].", "constraint": "[drink], [fluid, urine output]", "generation": "The volume of temperature will increase because personX exposes a material to radiation and drinks fluids."}
{"input": "The volume of temperature will increase because personX exposes a material to radiation and [mask].", "constraint": "[drink], [fluid, urine output]", "generation": "The volume of temperature will increase because personX exposes a material to radiation and drink a fluid."}
{"input": "The volume of temperature will increase because personX exposes a material to radiation and [mask].", "constraint": "[drink], [fluid, urine output]", "generation": "The volume of temperature will increase because personX exposes a material to radiation and he drinks fluids."}
{"input": "The volume of temperature will increase because personX exposes a material to radiation and [mask].", "constraint": "[drink], [fluid, urine output], [no]", "generation": "The volume of temperature will increase because personX exposes a material to radiation and does not drink fluids."}
{"input": "The volume of temperature will increase because personX exposes a material to radiation while [mask].", "constraint": "[drink], [fluid, urine output]", "generation": "The volume of temperature will increase because personX exposes a material to radiation while PersonX drinks more fluids."}
{"input": "The volume of temperature will increase because personX exposes a material to radiation while [mask].", "constraint": "[drink], [fluid, urine output]", "generation": "The volume of temperature will increase because personX exposes a material to radiation while he drinks fluids."}
{"input": "The volume of temperature will increase because personX exposes a material to radiation while [mask].", "constraint": "[drink], [fluid, urine output]", "generation": "The volume of temperature will increase because personX exposes a material to radiation while drinking fluids."}
{"input": "The volume of temperature will increase because personX exposes a material to radiation while [mask].", "constraint": "[drink], [fluid, urine output], [no]", "generation": "The volume of temperature will increase because personX exposes a material to radiation while he does not drink fluids."}
{"input": "The volume of temperature will increase because personX exposes a material to radiation while [mask].", "constraint": "[drink], [fluid, urine output], [no]", "generation": "The volume of temperature will increase because personX exposes a material to radiation while drink no fluids or output urine."}
{"input": "The volume of temperature will increase because personX exposes a material to radiation while [mask].", "constraint": "[drink], [fluid, urine output], [no]", "generation": "The volume of temperature will increase because personX exposes a material to radiation while not drinking fluids."}
{"input": "The volume of temperature will increase because personX exposes a material to radiation despite the fact that [mask].", "constraint": "[drink], [fluid, urine output]", "generation": "The volume of temperature will increase because personX exposes a material to radiation despite the fact that he does not drink fluids."}
{"input": "The volume of temperature will increase because personX exposes a material to radiation despite the fact that [mask].", "constraint": "[drink], [fluid, urine output]", "generation": "The volume of temperature will increase because personX exposes a material to radiation despite the fact that he drinks fluids."}
{"input": "The volume of temperature will increase because personX exposes a material to radiation despite the fact that [mask].", "constraint": "[drink], [fluid, urine output], [no]", "generation": "The volume of temperature will increase because personX exposes a material to radiation despite the fact that he does not drink fluids."}
{"input": "The volume of temperature will increase because personX exposes a material to radiation even though [mask].", "constraint": "[drink], [fluid, urine output]", "generation": "The volume of temperature will increase because personX exposes a material to radiation even though he drinks fluids and has a decreased urine output."}
{"input": "The volume of temperature will increase because personX exposes a material to radiation even though [mask].", "constraint": "[drink], [fluid, urine output]", "generation": "The volume of temperature will increase because personX exposes a material to radiation even though he drinks fluids and has increased urine output."}
{"input": "The volume of temperature will increase because personX exposes a material to radiation even though [mask].", "constraint": "[drink], [fluid, urine output]", "generation": "The volume of temperature will increase because personX exposes a material to radiation even though he drinks more fluids."}
{"input": "The volume of temperature will increase because personX exposes a material to radiation even though [mask].", "constraint": "[drink], [fluid, urine output], [no]", "generation": "The volume of temperature will increase because personX exposes a material to radiation even though he does not drink fluids."}
{"input": "The volume of temperature will increase because personX exposes a material to radiation even though [mask].", "constraint": "[drink], [fluid, urine output], [no]", "generation": "The volume of temperature will increase because personX exposes a material to radiation even though he does not drink any fluids."}
{"input": "The electric field strength of material will increase because the material is place in an electric field and [mask].", "constraint": "[release], [sun, plasma, particle, atmosphere, solar flares]", "generation": "The electric field strength of material will increase because the material is place in an electric field and solar flares release plasma and particles into the atmosphere."}
{"input": "The electric field strength of material will increase because the material is place in an electric field and [mask].", "constraint": "[release], [sun, plasma, particle, atmosphere, solar flares]", "generation": "The electric field strength of material will increase because the material is place in an electric field and release from solar flares."}
{"input": "The electric field strength of material will increase because the material is place in an electric field and [mask].", "constraint": "[release], [sun, plasma, particle, atmosphere, solar flares], [no]", "generation": "The electric field strength of material will increase because the material is place in an electric field and no solar flares are released."}
{"input": "The electric field strength of material will increase because the material is place in an electric field and [mask].", "constraint": "[release], [sun, plasma, particle, atmosphere, solar flares], [no]", "generation": "The electric field strength of material will increase because the material is place in an electric field and there is no release of solar flares."}
{"input": "The electric field strength of material will increase because the material is place in an electric field while [mask].", "constraint": "[release], [sun, plasma, particle, atmosphere, solar flares]", "generation": "The electric field strength of material will increase because the material is place in an electric field while solar flares release plasma and particles into the atmosphere."}
{"input": "The electric field strength of material will increase because the material is place in an electric field while [mask].", "constraint": "[release], [sun, plasma, particle, atmosphere, solar flares]", "generation": "The electric field strength of material will increase because the material is place in an electric field while solar flares release sun particles into the atmosphere."}
{"input": "The electric field strength of material will increase because the material is place in an electric field while [mask].", "constraint": "[release], [sun, plasma, particle, atmosphere, solar flares], [no]", "generation": "The electric field strength of material will increase because the material is place in an electric field while no sun release solar flares."}
{"input": "The electric field strength of material will increase because the material is place in an electric field despite the fact that [mask].", "constraint": "[release], [sun, plasma, particle, atmosphere, solar flares]", "generation": "The electric field strength of material will increase because the material is place in an electric field despite the fact that the Sun releases plasma, particles, and solar flares into the atmosphere."}
{"input": "The electric field strength of material will increase because the material is place in an electric field despite the fact that [mask].", "constraint": "[release], [sun, plasma, particle, atmosphere, solar flares]", "generation": "The electric field strength of material will increase because the material is place in an electric field despite the fact that solar flares release sun plasma and particles into the atmosphere."}
{"input": "The electric field strength of material will increase because the material is place in an electric field despite the fact that [mask].", "constraint": "[release], [sun, plasma, particle, atmosphere, solar flares]", "generation": "The electric field strength of material will increase because the material is place in an electric field despite the fact that solar flares release plasma and particles into the atmosphere."}
{"input": "The electric field strength of material will increase because the material is place in an electric field despite the fact that [mask].", "constraint": "[release], [sun, plasma, particle, atmosphere, solar flares], [no]", "generation": "The electric field strength of material will increase because the material is place in an electric field despite the fact that there is no release of sun plasma particles into the atmosphere during solar flares."}
{"input": "The electric field strength of material will increase because the material is place in an electric field despite the fact that [mask].", "constraint": "[release], [sun, plasma, particle, atmosphere, solar flares], [no]", "generation": "The electric field strength of material will increase because the material is place in an electric field despite the fact that there is no release of sun plasma, particles, or solar flares into the atmosphere."}
{"input": "The electric field strength of material will increase because the material is place in an electric field despite the fact that [mask].", "constraint": "[release], [sun, plasma, particle, atmosphere, solar flares], [no]", "generation": "The electric field strength of material will increase because the material is place in an electric field despite the fact that no solar flares are released."}
{"input": "The electric field strength of material will increase because the material is place in an electric field even though [mask].", "constraint": "[release], [sun, plasma, particle, atmosphere, solar flares]", "generation": "The electric field strength of material will increase because the material is place in an electric field even though the Sun releases plasma, particles, and solar flares into the atmosphere."}
{"input": "The electric field strength of material will increase because the material is place in an electric field even though [mask].", "constraint": "[release], [sun, plasma, particle, atmosphere, solar flares]", "generation": "The electric field strength of material will increase because the material is place in an electric field even though solar flares release plasma and particles into the atmosphere."}
{"input": "The electric field strength of material will increase because the material is place in an electric field even though [mask].", "constraint": "[release], [sun, plasma, particle, atmosphere, solar flares], [no]", "generation": "The electric field strength of material will increase because the material is place in an electric field even though there is no release from the sun."}
{"input": "The electric field strength of material will increase because the material is place in an electric field even though [mask].", "constraint": "[release], [sun, plasma, particle, atmosphere, solar flares], [no]", "generation": "The electric field strength of material will increase because the material is place in an electric field even though there is no release of sun plasma, particles, or solar flares from the atmosphere."}
{"input": "The electric field strength of material will increase because the material is place in an electric field even though [mask].", "constraint": "[release], [sun, plasma, particle, atmosphere, solar flares], [no]", "generation": "The electric field strength of material will increase because the material is place in an electric field even though there is no release of sun plasma, particles, or solar flares."}
{"input": "The electric field strength of refrigerator will increase because personX adds an insulator and [mask].", "constraint": "[move], [charge, charge, electric field strength  and decrease for a point charge]", "generation": "The electric field strength of refrigerator will increase because personX adds an insulator and moves the point charge."}
{"input": "The electric field strength of refrigerator will increase because personX adds an insulator and [mask].", "constraint": "[move], [charge, charge, electric field strength  and decrease for a point charge]", "generation": "The electric field strength of refrigerator will increase because personX adds an insulator and moves the charge."}
{"input": "The electric field strength of refrigerator will increase because personX adds an insulator and [mask].", "constraint": "[move], [charge, charge, electric field strength  and decrease for a point charge]", "generation": "The electric field strength of refrigerator will increase because personX adds an insulator and moves the charge to the refrigerator."}
{"input": "The electric field strength of refrigerator will increase because personX adds an insulator and [mask].", "constraint": "[move], [charge, charge, electric field strength  and decrease for a point charge], [no]", "generation": "The electric field strength of refrigerator will increase because personX adds an insulator and no charge is moving."}
{"input": "The electric field strength of refrigerator will increase because personX adds an insulator while [mask].", "constraint": "[move], [charge, charge, electric field strength  and decrease for a point charge]", "generation": "The electric field strength of refrigerator will increase because personX adds an insulator while moving a point charge within the electric field."}
{"input": "The electric field strength of refrigerator will increase because personX adds an insulator while [mask].", "constraint": "[move], [charge, charge, electric field strength  and decrease for a point charge]", "generation": "The electric field strength of refrigerator will increase because personX adds an insulator while the charges move."}
{"input": "The electric field strength of refrigerator will increase because personX adds an insulator while [mask].", "constraint": "[move], [charge, charge, electric field strength  and decrease for a point charge]", "generation": "The electric field strength of refrigerator will increase because personX adds an insulator while moving the charge."}
{"input": "The electric field strength of refrigerator will increase because personX adds an insulator while [mask].", "constraint": "[move], [charge, charge, electric field strength  and decrease for a point charge], [no]", "generation": "The electric field strength of refrigerator will increase because personX adds an insulator while no charge is moving."}
{"input": "The electric field strength of refrigerator will increase because personX adds an insulator despite the fact that [mask].", "constraint": "[move], [charge, charge, electric field strength  and decrease for a point charge]", "generation": "The electric field strength of refrigerator will increase because personX adds an insulator despite the fact that moving a point charge will decrease the electric field strength."}
{"input": "The electric field strength of refrigerator will increase because personX adds an insulator despite the fact that [mask].", "constraint": "[move], [charge, charge, electric field strength  and decrease for a point charge]", "generation": "The electric field strength of refrigerator will increase because personX adds an insulator despite the fact that he moves the point charge."}
{"input": "The electric field strength of refrigerator will increase because personX adds an insulator despite the fact that [mask].", "constraint": "[move], [charge, charge, electric field strength  and decrease for a point charge]", "generation": "The electric field strength of refrigerator will increase because personX adds an insulator despite the fact that the charges move and the electric field strength decreases for a point charge."}
{"input": "The electric field strength of refrigerator will increase because personX adds an insulator despite the fact that [mask].", "constraint": "[move], [charge, charge, electric field strength  and decrease for a point charge], [no]", "generation": "The electric field strength of refrigerator will increase because personX adds an insulator despite the fact that he does not move the point charge."}
{"input": "The electric field strength of refrigerator will increase because personX adds an insulator despite the fact that [mask].", "constraint": "[move], [charge, charge, electric field strength  and decrease for a point charge], [no]", "generation": "The electric field strength of refrigerator will increase because personX adds an insulator despite the fact that the charge does not move."}
{"input": "The electric field strength of refrigerator will increase because personX adds an insulator despite the fact that [mask].", "constraint": "[move], [charge, charge, electric field strength  and decrease for a point charge], [no]", "generation": "The electric field strength of refrigerator will increase because personX adds an insulator despite the fact that there is no charge movement."}
{"input": "The electric field strength of refrigerator will increase because personX adds an insulator even though [mask].", "constraint": "[move], [charge, charge, electric field strength  and decrease for a point charge]", "generation": "The electric field strength of refrigerator will increase because personX adds an insulator even though the charge does not move."}
{"input": "The electric field strength of refrigerator will increase because personX adds an insulator even though [mask].", "constraint": "[move], [charge, charge, electric field strength  and decrease for a point charge]", "generation": "The electric field strength of refrigerator will increase because personX adds an insulator even though moving the point charge will decrease the electric field strength."}
{"input": "The electric field strength of refrigerator will increase because personX adds an insulator even though [mask].", "constraint": "[move], [charge, charge, electric field strength  and decrease for a point charge], [no]", "generation": "The electric field strength of refrigerator will increase because personX adds an insulator even though he does not move the point charge."}
{"input": "The electric field strength of refrigerator will increase because personX adds an insulator even though [mask].", "constraint": "[move], [charge, charge, electric field strength  and decrease for a point charge], [no]", "generation": "The electric field strength of refrigerator will increase because personX adds an insulator even though the charge does not move."}
{"input": "The electric field strength of refrigerator will increase because personX adds an insulator even though [mask].", "constraint": "[move], [charge, charge, electric field strength  and decrease for a point charge], [no]", "generation": "The electric field strength of refrigerator will increase because personX adds an insulator even though he does not move the charge."}
{"input": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head and [mask].", "constraint": "[charge], [capacitor, and a time-varying magnetic field]", "generation": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head and charge the capacitor with a time-varying magnetic field."}
{"input": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head and [mask].", "constraint": "[charge], [capacitor, and a time-varying magnetic field]", "generation": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head and the capacitor is not charged."}
{"input": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head while [mask].", "constraint": "[charge], [capacitor, and a time-varying magnetic field]", "generation": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head while charging the capacitor and a time-varying magnetic field."}
{"input": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head while [mask].", "constraint": "[charge], [capacitor, and a time-varying magnetic field]", "generation": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head while the capacitor is being charged by the time-varying magnetic field."}
{"input": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head while [mask].", "constraint": "[charge], [capacitor, and a time-varying magnetic field]", "generation": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head while charging the capacitor and creating a time-varying magnetic field."}
{"input": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head despite the fact that [mask].", "constraint": "[charge], [capacitor, and a time-varying magnetic field]", "generation": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head despite the fact that the electric field strength increases as the charge on the capacitor decreases."}
{"input": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head despite the fact that [mask].", "constraint": "[charge], [capacitor, and a time-varying magnetic field]", "generation": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head despite the fact that the capacitor is charged and the magnetic field is time-varying."}
{"input": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head despite the fact that [mask].", "constraint": "[charge], [capacitor, and a time-varying magnetic field]", "generation": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head despite the fact that the electric field strength is increased by the presence of a charged capacitor and a time-varying magnetic field."}
{"input": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head despite the fact that [mask].", "constraint": "[charge], [capacitor, and a time-varying magnetic field], [no]", "generation": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head despite the fact that the capacitor is not charged and there is no time-varying magnetic field."}
{"input": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head despite the fact that [mask].", "constraint": "[charge], [capacitor, and a time-varying magnetic field], [no]", "generation": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head despite the fact that he does not charge the capacitor."}
{"input": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head despite the fact that [mask].", "constraint": "[charge], [capacitor, and a time-varying magnetic field], [no]", "generation": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head despite the fact that there is no charge on the capacitor."}
{"input": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head even though [mask].", "constraint": "[charge], [capacitor, and a time-varying magnetic field]", "generation": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head even though the cell phone is being charged by a capacitor and a time-varying magnetic field."}
{"input": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head even though [mask].", "constraint": "[charge], [capacitor, and a time-varying magnetic field]", "generation": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head even though the capacitor is charged and a time-varying magnetic field is applied."}
{"input": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head even though [mask].", "constraint": "[charge], [capacitor, and a time-varying magnetic field]", "generation": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head even though the cell phone is charged by a capacitor and a time-varying magnetic field."}
{"input": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head even though [mask].", "constraint": "[charge], [capacitor, and a time-varying magnetic field], [no]", "generation": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head even though there is no charge on the capacitor and no time-varying magnetic field."}
{"input": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head even though [mask].", "constraint": "[charge], [capacitor, and a time-varying magnetic field], [no]", "generation": "The electric field strength of cell phone will decrease because personX moves the cell phone away from the head even though the capacitor is not charged and there is no time-varying magnetic field."}
{"input": "The radiation dose of power lines will decrease because personX moves away from the power lines and [mask].", "constraint": "[handle], [material, glove, radioactive material]", "generation": "The radiation dose of power lines will decrease because personX moves away from the power lines and handle the radioactive material with gloves."}
{"input": "The radiation dose of power lines will decrease because personX moves away from the power lines and [mask].", "constraint": "[handle], [material, glove, radioactive material]", "generation": "The radiation dose of power lines will decrease because personX moves away from the power lines and handle the material with gloves."}
{"input": "The radiation dose of power lines will decrease because personX moves away from the power lines and [mask].", "constraint": "[handle], [material, glove, radioactive material]", "generation": "The radiation dose of power lines will decrease because personX moves away from the power lines and handle radioactive material with gloves."}
{"input": "The radiation dose of power lines will decrease because personX moves away from the power lines and [mask].", "constraint": "[handle], [material, glove, radioactive material], [no]", "generation": "The radiation dose of power lines will decrease because personX moves away from the power lines and does not handle the radioactive material."}
{"input": "The radiation dose of power lines will decrease because personX moves away from the power lines and [mask].", "constraint": "[handle], [material, glove, radioactive material], [no]", "generation": "The radiation dose of power lines will decrease because personX moves away from the power lines and does not handle the material with gloves."}
{"input": "The radiation dose of power lines will decrease because personX moves away from the power lines and [mask].", "constraint": "[handle], [material, glove, radioactive material], [no]", "generation": "The radiation dose of power lines will decrease because personX moves away from the power lines and no longer handle radioactive material."}
{"input": "The radiation dose of power lines will decrease because personX moves away from the power lines while [mask].", "constraint": "[handle], [material, glove, radioactive material]", "generation": "The radiation dose of power lines will decrease because personX moves away from the power lines while handling radioactive material with gloves."}
{"input": "The radiation dose of power lines will decrease because personX moves away from the power lines while [mask].", "constraint": "[handle], [material, glove, radioactive material]", "generation": "The radiation dose of power lines will decrease because personX moves away from the power lines while handling the radioactive material with gloves."}
{"input": "The radiation dose of power lines will decrease because personX moves away from the power lines while [mask].", "constraint": "[handle], [material, glove, radioactive material]", "generation": "The radiation dose of power lines will decrease because personX moves away from the power lines while handling the glove."}
{"input": "The radiation dose of power lines will decrease because personX moves away from the power lines while [mask].", "constraint": "[handle], [material, glove, radioactive material], [no]", "generation": "The radiation dose of power lines will decrease because personX moves away from the power lines while does not handle any radioactive material."}
{"input": "The radiation dose of power lines will decrease because personX moves away from the power lines while [mask].", "constraint": "[handle], [material, glove, radioactive material], [no]", "generation": "The radiation dose of power lines will decrease because personX moves away from the power lines while no one is handling the radioactive material."}
{"input": "The radiation dose of power lines will decrease because personX moves away from the power lines while [mask].", "constraint": "[handle], [material, glove, radioactive material], [no]", "generation": "The radiation dose of power lines will decrease because personX moves away from the power lines while handling no radioactive material."}
{"input": "The radiation dose of power lines will decrease because personX moves away from the power lines despite the fact that [mask].", "constraint": "[handle], [material, glove, radioactive material]", "generation": "The radiation dose of power lines will decrease because personX moves away from the power lines despite the fact that he is handling radioactive material."}
{"input": "The radiation dose of power lines will decrease because personX moves away from the power lines despite the fact that [mask].", "constraint": "[handle], [material, glove, radioactive material]", "generation": "The radiation dose of power lines will decrease because personX moves away from the power lines despite the fact that he wears gloves when handling the radioactive material."}
{"input": "The radiation dose of power lines will decrease because personX moves away from the power lines despite the fact that [mask].", "constraint": "[handle], [material, glove, radioactive material]", "generation": "The radiation dose of power lines will decrease because personX moves away from the power lines despite the fact that he handles radioactive material with gloves."}
{"input": "The radiation dose of power lines will decrease because personX moves away from the power lines despite the fact that [mask].", "constraint": "[handle], [material, glove, radioactive material], [no]", "generation": "The radiation dose of power lines will decrease because personX moves away from the power lines despite the fact that he does not handle radioactive material with gloves."}
{"input": "The radiation dose of power lines will decrease because personX moves away from the power lines despite the fact that [mask].", "constraint": "[handle], [material, glove, radioactive material], [no]", "generation": "The radiation dose of power lines will decrease because personX moves away from the power lines despite the fact that he does not handle any radioactive material."}
{"input": "The radiation dose of power lines will decrease because personX moves away from the power lines despite the fact that [mask].", "constraint": "[handle], [material, glove, radioactive material], [no]", "generation": "The radiation dose of power lines will decrease because personX moves away from the power lines despite the fact that he does not handle the radioactive material."}
{"input": "The radiation dose of power lines will decrease because personX moves away from the power lines even though [mask].", "constraint": "[handle], [material, glove, radioactive material]", "generation": "The radiation dose of power lines will decrease because personX moves away from the power lines even though he handles radioactive material without gloves."}
{"input": "The radiation dose of power lines will decrease because personX moves away from the power lines even though [mask].", "constraint": "[handle], [material, glove, radioactive material]", "generation": "The radiation dose of power lines will decrease because personX moves away from the power lines even though he handles the material with gloves."}
{"input": "The radiation dose of power lines will decrease because personX moves away from the power lines even though [mask].", "constraint": "[handle], [material, glove, radioactive material]", "generation": "The radiation dose of power lines will decrease because personX moves away from the power lines even though he handles radioactive material with gloves."}
{"input": "The radiation dose of power lines will decrease because personX moves away from the power lines even though [mask].", "constraint": "[handle], [material, glove, radioactive material], [no]", "generation": "The radiation dose of power lines will decrease because personX moves away from the power lines even though he does not handle the radioactive material with a glove."}
{"input": "The radiation dose of power lines will decrease because personX moves away from the power lines even though [mask].", "constraint": "[handle], [material, glove, radioactive material], [no]", "generation": "The radiation dose of power lines will decrease because personX moves away from the power lines even though he does not handle the radioactive material."}
{"input": "The radiation dose of power lines will decrease because personX moves away from the power lines even though [mask].", "constraint": "[handle], [material, glove, radioactive material], [no]", "generation": "The radiation dose of power lines will decrease because personX moves away from the power lines even though he does not handle radioactive material with gloves."}
{"input": "The area of room will increase because the room is paint and [mask].", "constraint": "[remove], [slice, pizza, circle]", "generation": "The area of room will increase because the room is paint and pizza is removed in a circle."}
{"input": "The area of room will increase because the room is paint and [mask].", "constraint": "[remove], [slice, pizza, circle]", "generation": "The area of room will increase because the room is paint and removing a slice of pizza creates a bigger circle."}
{"input": "The area of room will increase because the room is paint and [mask].", "constraint": "[remove], [slice, pizza, circle]", "generation": "The area of room will increase because the room is paint and personX removes the slice of pizza."}
{"input": "The area of room will increase because the room is paint and [mask].", "constraint": "[remove], [slice, pizza, circle], [no]", "generation": "The area of room will increase because the room is paint and no one remove the slice of pizza."}
{"input": "The area of room will increase because the room is paint while [mask].", "constraint": "[remove], [slice, pizza, circle]", "generation": "The area of room will increase because the room is paint while pizza is being removed in a circular slice."}
{"input": "The area of room will increase because the room is paint while [mask].", "constraint": "[remove], [slice, pizza, circle]", "generation": "The area of room will increase because the room is paint while pizza is being removed in a circle."}
{"input": "The area of room will increase because the room is paint while [mask].", "constraint": "[remove], [slice, pizza, circle]", "generation": "The area of room will increase because the room is paint while the pizza is being removed in a circle."}
{"input": "The area of room will increase because the room is paint while [mask].", "constraint": "[remove], [slice, pizza, circle], [no]", "generation": "The area of room will increase because the room is paint while the pizza is not removed in a circle."}
{"input": "The area of room will increase because the room is paint while [mask].", "constraint": "[remove], [slice, pizza, circle], [no]", "generation": "The area of room will increase because the room is paint while no slice of pizza is removed."}
{"input": "The area of room will increase because the room is paint despite the fact that [mask].", "constraint": "[remove], [slice, pizza, circle]", "generation": "The area of room will increase because the room is paint despite the fact that a slice of pizza is removed from the circle."}
{"input": "The area of room will increase because the room is paint despite the fact that [mask].", "constraint": "[remove], [slice, pizza, circle]", "generation": "The area of room will increase because the room is paint despite the fact that a slice of pizza is removed."}
{"input": "The area of room will increase because the room is paint despite the fact that [mask].", "constraint": "[remove], [slice, pizza, circle]", "generation": "The area of room will increase because the room is paint despite the fact that you remove the slice of pizza."}
{"input": "The area of room will increase because the room is paint despite the fact that [mask].", "constraint": "[remove], [slice, pizza, circle], [no]", "generation": "The area of room will increase because the room is paint despite the fact that a slice of pizza is not removed."}
{"input": "The area of room will increase because the room is paint despite the fact that [mask].", "constraint": "[remove], [slice, pizza, circle], [no]", "generation": "The area of room will increase because the room is paint despite the fact that the pizza is not removed from the circle."}
{"input": "The area of room will increase because the room is paint even though [mask].", "constraint": "[remove], [slice, pizza, circle]", "generation": "The area of room will increase because the room is paint even though personX removes the slice of pizza."}
{"input": "The area of room will increase because the room is paint even though [mask].", "constraint": "[remove], [slice, pizza, circle]", "generation": "The area of room will increase because the room is paint even though a pizza slice is removed from the pizza circle."}
{"input": "The area of room will increase because the room is paint even though [mask].", "constraint": "[remove], [slice, pizza, circle]", "generation": "The area of room will increase because the room is paint even though personX removes the pizza slice."}
{"input": "The area of room will increase because the room is paint even though [mask].", "constraint": "[remove], [slice, pizza, circle], [no]", "generation": "The area of room will increase because the room is paint even though no pizza is removed."}
{"input": "The area of room will increase because the room is paint even though [mask].", "constraint": "[remove], [slice, pizza, circle], [no]", "generation": "The area of room will increase because the room is paint even though he does not remove the slice of pizza."}
{"input": "The area of square will increase because personX moves up and [mask].", "constraint": "[shorten], [basis, trapezoid, trapezoid]", "generation": "The area of square will increase because personX moves up and shortens the trapezoid's basis."}
{"input": "The area of square will increase because personX moves up and [mask].", "constraint": "[shorten], [basis, trapezoid, trapezoid]", "generation": "The area of square will increase because personX moves up and shortens the basis of the trapezoid."}
{"input": "The area of square will increase because personX moves up while [mask].", "constraint": "[shorten], [basis, trapezoid, trapezoid]", "generation": "The area of square will increase because personX moves up while shortening the trapezoid's basis."}
{"input": "The area of square will increase because personX moves up while [mask].", "constraint": "[shorten], [basis, trapezoid, trapezoid]", "generation": "The area of square will increase because personX moves up while shorten the trapezoid's basis."}
{"input": "The area of square will increase because personX moves up while [mask].", "constraint": "[shorten], [basis, trapezoid, trapezoid]", "generation": "The area of square will increase because personX moves up while shortening the basis of the trapezoid."}
{"input": "The area of square will increase because personX moves up while [mask].", "constraint": "[shorten], [basis, trapezoid, trapezoid], [no]", "generation": "The area of square will increase because personX moves up while he does not shorten the trapezoid's base."}
{"input": "The area of square will increase because personX moves up while [mask].", "constraint": "[shorten], [basis, trapezoid, trapezoid], [no]", "generation": "The area of square will increase because personX moves up while trapezoids do not shorten the basis."}
{"input": "The area of square will increase because personX moves up despite the fact that [mask].", "constraint": "[shorten], [basis, trapezoid, trapezoid]", "generation": "The area of square will increase because personX moves up despite the fact that he shortens the basis of the trapezoid."}
{"input": "The area of square will increase because personX moves up despite the fact that [mask].", "constraint": "[shorten], [basis, trapezoid, trapezoid]", "generation": "The area of square will increase because personX moves up despite the fact that the trapezoid's basis is shortened."}
{"input": "The area of square will increase because personX moves up despite the fact that [mask].", "constraint": "[shorten], [basis, trapezoid, trapezoid]", "generation": "The area of square will increase because personX moves up despite the fact that he shortens the trapezoids' bases."}
{"input": "The area of square will increase because personX moves up despite the fact that [mask].", "constraint": "[shorten], [basis, trapezoid, trapezoid], [no]", "generation": "The area of square will increase because personX moves up despite the fact that he does not shorten the trapezoid's trapezoid's basis."}
{"input": "The area of square will increase because personX moves up despite the fact that [mask].", "constraint": "[shorten], [basis, trapezoid, trapezoid], [no]", "generation": "The area of square will increase because personX moves up despite the fact that he does not shorten the trapezoids."}
{"input": "The area of square will increase because personX moves up despite the fact that [mask].", "constraint": "[shorten], [basis, trapezoid, trapezoid], [no]", "generation": "The area of square will increase because personX moves up despite the fact that he does not shorten the basis of the trapezoid."}
{"input": "The area of square will increase because personX moves up even though [mask].", "constraint": "[shorten], [basis, trapezoid, trapezoid]", "generation": "The area of square will increase because personX moves up even though the trapezoid's basis is shortened."}
{"input": "The area of square will increase because personX moves up even though [mask].", "constraint": "[shorten], [basis, trapezoid, trapezoid]", "generation": "The area of square will increase because personX moves up even though he shortens the basis of the trapezoid."}
{"input": "The area of square will increase because personX moves up even though [mask].", "constraint": "[shorten], [basis, trapezoid, trapezoid], [no]", "generation": "The area of square will increase because personX moves up even though he does not shorten the basis of the trapezoid."}
{"input": "The area of square will increase because personX moves up even though [mask].", "constraint": "[shorten], [basis, trapezoid, trapezoid], [no]", "generation": "The area of square will increase because personX moves up even though he does not shorten the trapezoid's basis."}
{"input": "The area of ice will increase because personX adds more ice cubes to the cup and [mask].", "constraint": "[have, deviate], [someone, septum, nostril]", "generation": "The area of ice will increase because personX adds more ice cubes to the cup and someone has a deviated septum."}
{"input": "The area of ice will increase because personX adds more ice cubes to the cup and [mask].", "constraint": "[have, deviate], [someone, septum, nostril]", "generation": "The area of ice will increase because personX adds more ice cubes to the cup and have someone deviate his septum."}
{"input": "The area of ice will increase because personX adds more ice cubes to the cup and [mask].", "constraint": "[have, deviate], [someone, septum, nostril]", "generation": "The area of ice will increase because personX adds more ice cubes to the cup and have someone deviate septum."}
{"input": "The area of ice will increase because personX adds more ice cubes to the cup and [mask].", "constraint": "[have, deviate], [someone, septum, nostril], [no]", "generation": "The area of ice will increase because personX adds more ice cubes to the cup and has no deviate septum or nostril."}
{"input": "The area of ice will increase because personX adds more ice cubes to the cup and [mask].", "constraint": "[have, deviate], [someone, septum, nostril], [no]", "generation": "The area of ice will increase because personX adds more ice cubes to the cup and have someone deviate the septum of nostril."}
{"input": "The area of ice will increase because personX adds more ice cubes to the cup and [mask].", "constraint": "[have, deviate], [someone, septum, nostril], [no]", "generation": "The area of ice will increase because personX adds more ice cubes to the cup and has no deviate from the septum in his nostril."}
{"input": "The area of ice will increase because personX adds more ice cubes to the cup while [mask].", "constraint": "[have, deviate], [someone, septum, nostril]", "generation": "The area of ice will increase because personX adds more ice cubes to the cup while having a deviated septum."}
{"input": "The area of ice will increase because personX adds more ice cubes to the cup while [mask].", "constraint": "[have, deviate], [someone, septum, nostril]", "generation": "The area of ice will increase because personX adds more ice cubes to the cup while someone has a septum or nostril deviation."}
{"input": "The area of ice will increase because personX adds more ice cubes to the cup while [mask].", "constraint": "[have, deviate], [someone, septum, nostril]", "generation": "The area of ice will increase because personX adds more ice cubes to the cup while someone has a deviated septum."}
{"input": "The area of ice will increase because personX adds more ice cubes to the cup while [mask].", "constraint": "[have, deviate], [someone, septum, nostril], [no]", "generation": "The area of ice will increase because personX adds more ice cubes to the cup while no one has a deviated septum or nostril."}
{"input": "The area of ice will increase because personX adds more ice cubes to the cup while [mask].", "constraint": "[have, deviate], [someone, septum, nostril], [no]", "generation": "The area of ice will increase because personX adds more ice cubes to the cup while having no deviate from the septum."}
{"input": "The area of ice will increase because personX adds more ice cubes to the cup while [mask].", "constraint": "[have, deviate], [someone, septum, nostril], [no]", "generation": "The area of ice will increase because personX adds more ice cubes to the cup while does not have ice in his nostril."}
{"input": "The area of ice will increase because personX adds more ice cubes to the cup despite the fact that [mask].", "constraint": "[have, deviate], [someone, septum, nostril]", "generation": "The area of ice will increase because personX adds more ice cubes to the cup despite the fact that someone has a deviated septum."}
{"input": "The area of ice will increase because personX adds more ice cubes to the cup despite the fact that [mask].", "constraint": "[have, deviate], [someone, septum, nostril], [no]", "generation": "The area of ice will increase because personX adds more ice cubes to the cup despite the fact that he does not have a deviated septum or nostril."}
{"input": "The area of ice will increase because personX adds more ice cubes to the cup despite the fact that [mask].", "constraint": "[have, deviate], [someone, septum, nostril], [no]", "generation": "The area of ice will increase because personX adds more ice cubes to the cup despite the fact that there is no one to deviate the septum."}
{"input": "The area of ice will increase because personX adds more ice cubes to the cup despite the fact that [mask].", "constraint": "[have, deviate], [someone, septum, nostril], [no]", "generation": "The area of ice will increase because personX adds more ice cubes to the cup despite the fact that he does not have a septum or nostril."}
{"input": "The area of ice will increase because personX adds more ice cubes to the cup even though [mask].", "constraint": "[have, deviate], [someone, septum, nostril]", "generation": "The area of ice will increase because personX adds more ice cubes to the cup even though someone has a deviated septum."}
{"input": "The area of ice will increase because personX adds more ice cubes to the cup even though [mask].", "constraint": "[have, deviate], [someone, septum, nostril]", "generation": "The area of ice will increase because personX adds more ice cubes to the cup even though he has a deviated septum."}
{"input": "The area of ice will increase because personX adds more ice cubes to the cup even though [mask].", "constraint": "[have, deviate], [someone, septum, nostril]", "generation": "The area of ice will increase because personX adds more ice cubes to the cup even though the person have a deviated septum."}
{"input": "The area of ice will increase because personX adds more ice cubes to the cup even though [mask].", "constraint": "[have, deviate], [someone, septum, nostril], [no]", "generation": "The area of ice will increase because personX adds more ice cubes to the cup even though he does not have someone to deviate his septum."}
{"input": "The area of ice will increase because personX adds more ice cubes to the cup even though [mask].", "constraint": "[have, deviate], [someone, septum, nostril], [no]", "generation": "The area of ice will increase because personX adds more ice cubes to the cup even though no one has a deviated septum."}
{"input": "The area of ice will increase because personX adds more ice cubes to the cup even though [mask].", "constraint": "[have, deviate], [someone, septum, nostril], [no]", "generation": "The area of ice will increase because personX adds more ice cubes to the cup even though someone does not have a deviated septum or a nostril."}
{"input": "The area of house will decrease because personX sells the house and [mask].", "constraint": "[move], [side, parallelogram]", "generation": "The area of house will decrease because personX sells the house and moves to the side of the parallelogram."}
{"input": "The area of house will decrease because personX sells the house and [mask].", "constraint": "[move], [side, parallelogram]", "generation": "The area of house will decrease because personX sells the house and move to the side of the parallelogram."}
{"input": "The area of house will decrease because personX sells the house while [mask].", "constraint": "[move], [side, parallelogram]", "generation": "The area of house will decrease because personX sells the house while personX moves to the side of the parallelogram."}
{"input": "The area of house will decrease because personX sells the house while [mask].", "constraint": "[move], [side, parallelogram]", "generation": "The area of house will decrease because personX sells the house while moving to the side of the parallelogram."}
{"input": "The area of house will decrease because personX sells the house while [mask].", "constraint": "[move], [side, parallelogram], [no]", "generation": "The area of house will decrease because personX sells the house while personX does not move to the side."}
{"input": "The area of house will decrease because personX sells the house despite the fact that [mask].", "constraint": "[move], [side, parallelogram]", "generation": "The area of house will decrease because personX sells the house despite the fact that personX moves to the side."}
{"input": "The area of house will decrease because personX sells the house despite the fact that [mask].", "constraint": "[move], [side, parallelogram]", "generation": "The area of house will decrease because personX sells the house despite the fact that he moves to the side."}
{"input": "The area of house will decrease because personX sells the house despite the fact that [mask].", "constraint": "[move], [side, parallelogram], [no]", "generation": "The area of house will decrease because personX sells the house despite the fact that he does not move to the side."}
{"input": "The area of house will decrease because personX sells the house despite the fact that [mask].", "constraint": "[move], [side, parallelogram], [no]", "generation": "The area of house will decrease because personX sells the house despite the fact that the house is not moved to the side."}
{"input": "The area of house will decrease because personX sells the house despite the fact that [mask].", "constraint": "[move], [side, parallelogram], [no]", "generation": "The area of house will decrease because personX sells the house despite the fact that he does not move to the side of the parallelogram."}
{"input": "The area of house will decrease because personX sells the house even though [mask].", "constraint": "[move], [side, parallelogram]", "generation": "The area of house will decrease because personX sells the house even though personX moves to the side of the parallelogram."}
{"input": "The area of house will decrease because personX sells the house even though [mask].", "constraint": "[move], [side, parallelogram]", "generation": "The area of house will decrease because personX sells the house even though he moves to the side of the parallelogram."}
{"input": "The area of house will decrease because personX sells the house even though [mask].", "constraint": "[move], [side, parallelogram], [no]", "generation": "The area of house will decrease because personX sells the house even though the side of parallelogram does not move."}
{"input": "The area of house will decrease because personX sells the house even though [mask].", "constraint": "[move], [side, parallelogram], [no]", "generation": "The area of house will decrease because personX sells the house even though he does not move to the side."}
{"input": "The area of house will decrease because personX sells the house even though [mask].", "constraint": "[move], [side, parallelogram], [no]", "generation": "The area of house will decrease because personX sells the house even though he does not move to the side of parallelogram."}
{"input": "The velocity of car will decrease because the car's engine be turn turns and [mask].", "constraint": "[add], [wind, sail, boat]", "generation": "The velocity of car will decrease because the car's engine be turn turns and add wind resistance to the sailboat."}
{"input": "The velocity of car will decrease because the car's engine be turn turns and [mask].", "constraint": "[add], [wind, sail, boat]", "generation": "The velocity of car will decrease because the car's engine be turn turns and wind is added to the sailboat."}
{"input": "The velocity of car will decrease because the car's engine be turn turns while [mask].", "constraint": "[add], [wind, sail, boat]", "generation": "The velocity of car will decrease because the car's engine be turn turns while wind is added to the sailboat."}
{"input": "The velocity of car will decrease because the car's engine be turn turns while [mask].", "constraint": "[add], [wind, sail, boat]", "generation": "The velocity of car will decrease because the car's engine be turn turns while wind sail is added to the boat."}
{"input": "The velocity of car will decrease because the car's engine be turn turns while [mask].", "constraint": "[add], [wind, sail, boat]", "generation": "The velocity of car will decrease because the car's engine be turn turns while wind speed is added."}
{"input": "The velocity of car will decrease because the car's engine be turn turns despite the fact that [mask].", "constraint": "[add], [wind, sail, boat]", "generation": "The velocity of car will decrease because the car's engine be turn turns despite the fact that wind adds to the sailboat."}
{"input": "The velocity of car will decrease because the car's engine be turn turns despite the fact that [mask].", "constraint": "[add], [wind, sail, boat]", "generation": "The velocity of car will decrease because the car's engine be turn turns despite the fact that wind is added to the sails of the boat."}
{"input": "The velocity of car will decrease because the car's engine be turn turns despite the fact that [mask].", "constraint": "[add], [wind, sail, boat]", "generation": "The velocity of car will decrease because the car's engine be turn turns despite the fact that wind is added to the sailboat."}
{"input": "The velocity of car will decrease because the car's engine be turn turns despite the fact that [mask].", "constraint": "[add], [wind, sail, boat], [no]", "generation": "The velocity of car will decrease because the car's engine be turn turns despite the fact that wind does not add to the boat's sails."}
{"input": "The velocity of car will decrease because the car's engine be turn turns despite the fact that [mask].", "constraint": "[add], [wind, sail, boat], [no]", "generation": "The velocity of car will decrease because the car's engine be turn turns despite the fact that there is no wind to add sails to the boat."}
{"input": "The velocity of car will decrease because the car's engine be turn turns even though [mask].", "constraint": "[add], [wind, sail, boat]", "generation": "The velocity of car will decrease because the car's engine be turn turns even though wind adds a sail to the boat."}
{"input": "The velocity of car will decrease because the car's engine be turn turns even though [mask].", "constraint": "[add], [wind, sail, boat]", "generation": "The velocity of car will decrease because the car's engine be turn turns even though personX add wind to the sailboat."}
{"input": "The velocity of car will decrease because the car's engine be turn turns even though [mask].", "constraint": "[add], [wind, sail, boat]", "generation": "The velocity of car will decrease because the car's engine be turn turns even though wind is added to the sailboat."}
{"input": "The velocity of car will decrease because the car's engine be turn turns even though [mask].", "constraint": "[add], [wind, sail, boat], [no]", "generation": "The velocity of car will decrease because the car's engine be turn turns even though wind does not add to the sails of the boat."}
{"input": "The velocity of car will decrease because the car's engine be turn turns even though [mask].", "constraint": "[add], [wind, sail, boat], [no]", "generation": "The velocity of car will decrease because the car's engine be turn turns even though wind sail is not added to the boat."}
{"input": "The conductance of sound will increase because personX opens a window and [mask].", "constraint": "[apply], [pressure, copper, copper]", "generation": "The conductance of sound will increase because personX opens a window and applies pressure to the copper."}
{"input": "The conductance of sound will increase because personX opens a window while [mask].", "constraint": "[apply], [pressure, copper, copper]", "generation": "The conductance of sound will increase because personX opens a window while apply a high pressure to the copper."}
{"input": "The conductance of sound will increase because personX opens a window while [mask].", "constraint": "[apply], [pressure, copper, copper]", "generation": "The conductance of sound will increase because personX opens a window while apply pressure to the copper."}
{"input": "The conductance of sound will increase because personX opens a window while [mask].", "constraint": "[apply], [pressure, copper, copper]", "generation": "The conductance of sound will increase because personX opens a window while applies pressure to the copper."}
{"input": "The conductance of sound will increase because personX opens a window while [mask].", "constraint": "[apply], [pressure, copper, copper], [no]", "generation": "The conductance of sound will increase because personX opens a window while no pressure is applied to the copper."}
{"input": "The conductance of sound will increase because personX opens a window despite the fact that [mask].", "constraint": "[apply], [pressure, copper, copper]", "generation": "The conductance of sound will increase because personX opens a window despite the fact that he applies pressure to the copper."}
{"input": "The conductance of sound will increase because personX opens a window despite the fact that [mask].", "constraint": "[apply], [pressure, copper, copper], [no]", "generation": "The conductance of sound will increase because personX opens a window despite the fact that he does not apply pressure to the copper."}
{"input": "The conductance of sound will increase because personX opens a window even though [mask].", "constraint": "[apply], [pressure, copper, copper]", "generation": "The conductance of sound will increase because personX opens a window even though he applies pressure to the copper pipes."}
{"input": "The conductance of sound will increase because personX opens a window even though [mask].", "constraint": "[apply], [pressure, copper, copper]", "generation": "The conductance of sound will increase because personX opens a window even though he applies pressure to the copper."}
{"input": "The conductance of sound will increase because personX opens a window even though [mask].", "constraint": "[apply], [pressure, copper, copper], [no]", "generation": "The conductance of sound will increase because personX opens a window even though he does not apply pressure to the copper."}
{"input": "The conductance of silver will decrease because personX exposes silver to light and [mask].", "constraint": "[blow], [wind, wind]", "generation": "The conductance of silver will decrease because personX exposes silver to light and wind blows the silver."}
{"input": "The conductance of silver will decrease because personX exposes silver to light and [mask].", "constraint": "[blow], [wind, wind]", "generation": "The conductance of silver will decrease because personX exposes silver to light and wind blows harder."}
{"input": "The conductance of silver will decrease because personX exposes silver to light and [mask].", "constraint": "[blow], [wind, wind]", "generation": "The conductance of silver will decrease because personX exposes silver to light and blow wind."}
{"input": "The conductance of silver will decrease because personX exposes silver to light and [mask].", "constraint": "[blow], [wind, wind], [no]", "generation": "The conductance of silver will decrease because personX exposes silver to light and no wind blows."}
{"input": "The conductance of silver will decrease because personX exposes silver to light while [mask].", "constraint": "[blow], [wind, wind]", "generation": "The conductance of silver will decrease because personX exposes silver to light while blowing on the wind."}
{"input": "The conductance of silver will decrease because personX exposes silver to light while [mask].", "constraint": "[blow], [wind, wind]", "generation": "The conductance of silver will decrease because personX exposes silver to light while the wind blows."}
{"input": "The conductance of silver will decrease because personX exposes silver to light while [mask].", "constraint": "[blow], [wind, wind]", "generation": "The conductance of silver will decrease because personX exposes silver to light while wind blows."}
{"input": "The conductance of silver will decrease because personX exposes silver to light while [mask].", "constraint": "[blow], [wind, wind], [no]", "generation": "The conductance of silver will decrease because personX exposes silver to light while no wind blows."}
{"input": "The conductance of silver will decrease because personX exposes silver to light while [mask].", "constraint": "[blow], [wind, wind], [no]", "generation": "The conductance of silver will decrease because personX exposes silver to light while the wind does not blow."}
{"input": "The conductance of silver will decrease because personX exposes silver to light despite the fact that [mask].", "constraint": "[blow], [wind, wind]", "generation": "The conductance of silver will decrease because personX exposes silver to light despite the fact that the wind is blowing."}
{"input": "The conductance of silver will decrease because personX exposes silver to light despite the fact that [mask].", "constraint": "[blow], [wind, wind]", "generation": "The conductance of silver will decrease because personX exposes silver to light despite the fact that the wind blows."}
{"input": "The conductance of silver will decrease because personX exposes silver to light despite the fact that [mask].", "constraint": "[blow], [wind, wind]", "generation": "The conductance of silver will decrease because personX exposes silver to light despite the fact that blow the wind."}
{"input": "The conductance of silver will decrease because personX exposes silver to light despite the fact that [mask].", "constraint": "[blow], [wind, wind], [no]", "generation": "The conductance of silver will decrease because personX exposes silver to light despite the fact that wind does not blow."}
{"input": "The conductance of silver will decrease because personX exposes silver to light despite the fact that [mask].", "constraint": "[blow], [wind, wind], [no]", "generation": "The conductance of silver will decrease because personX exposes silver to light despite the fact that there is no wind blowing."}
{"input": "The conductance of silver will decrease because personX exposes silver to light even though [mask].", "constraint": "[blow], [wind, wind]", "generation": "The conductance of silver will decrease because personX exposes silver to light even though the wind blows."}
{"input": "The conductance of silver will decrease because personX exposes silver to light even though [mask].", "constraint": "[blow], [wind, wind]", "generation": "The conductance of silver will decrease because personX exposes silver to light even though wind blows."}
{"input": "The conductance of silver will decrease because personX exposes silver to light even though [mask].", "constraint": "[blow], [wind, wind]", "generation": "The conductance of silver will decrease because personX exposes silver to light even though wind blows on it."}
{"input": "The conductance of silver will decrease because personX exposes silver to light even though [mask].", "constraint": "[blow], [wind, wind], [no]", "generation": "The conductance of silver will decrease because personX exposes silver to light even though there is no wind blowing."}
{"input": "The conductance of silver will decrease because personX exposes silver to light even though [mask].", "constraint": "[blow], [wind, wind], [no]", "generation": "The conductance of silver will decrease because personX exposes silver to light even though wind does not blow."}
{"input": "The viscosity of syrup will increase because personX adds more solute and [mask].", "constraint": "[increase], [amount, alcohol, alcohol]", "generation": "The viscosity of syrup will increase because personX adds more solute and increase the amount of alcohol."}
{"input": "The viscosity of syrup will increase because personX adds more solute while [mask].", "constraint": "[increase], [amount, alcohol, alcohol]", "generation": "The viscosity of syrup will increase because personX adds more solute while amount of alcohol increases."}
{"input": "The viscosity of syrup will increase because personX adds more solute while [mask].", "constraint": "[increase], [amount, alcohol, alcohol]", "generation": "The viscosity of syrup will increase because personX adds more solute while PersonX increases the amount of alcohol."}
{"input": "The viscosity of syrup will increase because personX adds more solute while [mask].", "constraint": "[increase], [amount, alcohol, alcohol]", "generation": "The viscosity of syrup will increase because personX adds more solute while increasing the amount of alcohol."}
{"input": "The viscosity of syrup will increase because personX adds more solute while [mask].", "constraint": "[increase], [amount, alcohol, alcohol], [no]", "generation": "The viscosity of syrup will increase because personX adds more solute while no increase in the amount of alcohol."}
{"input": "The viscosity of syrup will increase because personX adds more solute despite the fact that [mask].", "constraint": "[increase], [amount, alcohol, alcohol]", "generation": "The viscosity of syrup will increase because personX adds more solute despite the fact that the amount of alcohol is increased."}
{"input": "The viscosity of syrup will increase because personX adds more solute despite the fact that [mask].", "constraint": "[increase], [amount, alcohol, alcohol]", "generation": "The viscosity of syrup will increase because personX adds more solute despite the fact that increasing the amount of alcohol."}
{"input": "The viscosity of syrup will increase because personX adds more solute despite the fact that [mask].", "constraint": "[increase], [amount, alcohol, alcohol]", "generation": "The viscosity of syrup will increase because personX adds more solute despite the fact that he increases the amount of alcohol."}
{"input": "The viscosity of syrup will increase because personX adds more solute despite the fact that [mask].", "constraint": "[increase], [amount, alcohol, alcohol], [no]", "generation": "The viscosity of syrup will increase because personX adds more solute despite the fact that he does not increase the amount of alcohol."}
{"input": "The viscosity of syrup will increase because personX adds more solute even though [mask].", "constraint": "[increase], [amount, alcohol, alcohol]", "generation": "The viscosity of syrup will increase because personX adds more solute even though amount of alcohol is increased."}
{"input": "The viscosity of syrup will increase because personX adds more solute even though [mask].", "constraint": "[increase], [amount, alcohol, alcohol]", "generation": "The viscosity of syrup will increase because personX adds more solute even though he increases the amount of alcohol."}
{"input": "The viscosity of syrup will increase because personX adds more solute even though [mask].", "constraint": "[increase], [amount, alcohol, alcohol]", "generation": "The viscosity of syrup will increase because personX adds more solute even though the amount of alcohol is increased."}
{"input": "The viscosity of syrup will increase because personX adds more solute even though [mask].", "constraint": "[increase], [amount, alcohol, alcohol], [no]", "generation": "The viscosity of syrup will increase because personX adds more solute even though the amount of alcohol does not increase."}
{"input": "The viscosity of syrup will increase because personX adds more solute even though [mask].", "constraint": "[increase], [amount, alcohol, alcohol], [no]", "generation": "The viscosity of syrup will increase because personX adds more solute even though he does not increase the amount of alcohol."}
{"input": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old and [mask].", "constraint": "[plug], [phone, charger, outlet, phone charger]", "generation": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old and plug on outlet."}
{"input": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old and [mask].", "constraint": "[plug], [phone, charger, outlet, phone charger]", "generation": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old and the phone charger is plugged into the outlet."}
{"input": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old and [mask].", "constraint": "[plug], [phone, charger, outlet, phone charger]", "generation": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old and the phone charger is not plugged in."}
{"input": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old and [mask].", "constraint": "[plug], [phone, charger, outlet, phone charger], [no]", "generation": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old and outlet is not plugged into the phone charger."}
{"input": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old and [mask].", "constraint": "[plug], [phone, charger, outlet, phone charger], [no]", "generation": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old and no outlet or phone charger plugged in."}
{"input": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old and [mask].", "constraint": "[plug], [phone, charger, outlet, phone charger], [no]", "generation": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old and the plug of the phone charger is not in the outlet."}
{"input": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old while [mask].", "constraint": "[plug], [phone, charger, outlet, phone charger]", "generation": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old while the phone charger is plugged into the outlet."}
{"input": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old while [mask].", "constraint": "[plug], [phone, charger, outlet, phone charger]", "generation": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old while plugging in the phone charger."}
{"input": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old while [mask].", "constraint": "[plug], [phone, charger, outlet, phone charger]", "generation": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old while plug into outlet."}
{"input": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old while [mask].", "constraint": "[plug], [phone, charger, outlet, phone charger], [no]", "generation": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old while does not plug in the outlet."}
{"input": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old despite the fact that [mask].", "constraint": "[plug], [phone, charger, outlet, phone charger]", "generation": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old despite the fact that personX plugs in the phone charger."}
{"input": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old despite the fact that [mask].", "constraint": "[plug], [phone, charger, outlet, phone charger]", "generation": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old despite the fact that it is plugged in the outlet."}
{"input": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old despite the fact that [mask].", "constraint": "[plug], [phone, charger, outlet, phone charger]", "generation": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old despite the fact that the outlet is plugged in."}
{"input": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old despite the fact that [mask].", "constraint": "[plug], [phone, charger, outlet, phone charger], [no]", "generation": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old despite the fact that no phone charger is plugged in."}
{"input": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old despite the fact that [mask].", "constraint": "[plug], [phone, charger, outlet, phone charger], [no]", "generation": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old despite the fact that there is no outlet or phone charger plugged in."}
{"input": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old despite the fact that [mask].", "constraint": "[plug], [phone, charger, outlet, phone charger], [no]", "generation": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old despite the fact that he does not plug in the phone charger."}
{"input": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old even though [mask].", "constraint": "[plug], [phone, charger, outlet, phone charger]", "generation": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old even though plugging in a phone charger."}
{"input": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old even though [mask].", "constraint": "[plug], [phone, charger, outlet, phone charger]", "generation": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old even though outlet is plugged into phone charger."}
{"input": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old even though [mask].", "constraint": "[plug], [phone, charger, outlet, phone charger]", "generation": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old even though personX plugs in the kettle to the outlet."}
{"input": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old even though [mask].", "constraint": "[plug], [phone, charger, outlet, phone charger], [no]", "generation": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old even though no phone charger plugged in."}
{"input": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old even though [mask].", "constraint": "[plug], [phone, charger, outlet, phone charger], [no]", "generation": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old even though no outlet is plugged in."}
{"input": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old even though [mask].", "constraint": "[plug], [phone, charger, outlet, phone charger], [no]", "generation": "The electric current of electric kettle will decrease because the wire in the electric kettle be gets old even though the outlet is not plugged in."}
{"input": "The amount of substance of soil will increase because personX adds compost and [mask].", "constraint": "[drink], [beer, beer]", "generation": "The amount of substance of soil will increase because personX adds compost and drink beer."}
{"input": "The amount of substance of soil will increase because personX adds compost and [mask].", "constraint": "[drink], [beer, beer], [no]", "generation": "The amount of substance of soil will increase because personX adds compost and no beer is drunk."}
{"input": "The amount of substance of soil will increase because personX adds compost while [mask].", "constraint": "[drink], [beer, beer]", "generation": "The amount of substance of soil will increase because personX adds compost while he drinks beer."}
{"input": "The amount of substance of soil will increase because personX adds compost while [mask].", "constraint": "[drink], [beer, beer]", "generation": "The amount of substance of soil will increase because personX adds compost while drinking beer."}
{"input": "The amount of substance of soil will increase because personX adds compost while [mask].", "constraint": "[drink], [beer, beer], [no]", "generation": "The amount of substance of soil will increase because personX adds compost while does not drink beer."}
{"input": "The amount of substance of soil will increase because personX adds compost while [mask].", "constraint": "[drink], [beer, beer], [no]", "generation": "The amount of substance of soil will increase because personX adds compost while he does not drink beer."}
{"input": "The amount of substance of soil will increase because personX adds compost despite the fact that [mask].", "constraint": "[drink], [beer, beer]", "generation": "The amount of substance of soil will increase because personX adds compost despite the fact that he drinks beer."}
{"input": "The amount of substance of soil will increase because personX adds compost despite the fact that [mask].", "constraint": "[drink], [beer, beer], [no]", "generation": "The amount of substance of soil will increase because personX adds compost despite the fact that he does not drink beer."}
{"input": "The amount of substance of soil will increase because personX adds compost even though [mask].", "constraint": "[drink], [beer, beer]", "generation": "The amount of substance of soil will increase because personX adds compost even though beer is drunk."}
{"input": "The amount of substance of soil will increase because personX adds compost even though [mask].", "constraint": "[drink], [beer, beer]", "generation": "The amount of substance of soil will increase because personX adds compost even though he drinks beer."}
{"input": "The amount of substance of soil will increase because personX adds compost even though [mask].", "constraint": "[drink], [beer, beer], [no]", "generation": "The amount of substance of soil will increase because personX adds compost even though he does not drink beer."}
{"input": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance and [mask].", "constraint": "[burn], [light, bulb, flashlight]", "generation": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance and the light bulb burns out."}
{"input": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance and [mask].", "constraint": "[burn], [light, bulb, flashlight]", "generation": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance and the light bulb burns brighter."}
{"input": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance and [mask].", "constraint": "[burn], [light, bulb, flashlight]", "generation": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance and the light bulb is burned out."}
{"input": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance and [mask].", "constraint": "[burn], [light, bulb, flashlight], [no]", "generation": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance and no light bulb is burned out."}
{"input": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance and [mask].", "constraint": "[burn], [light, bulb, flashlight], [no]", "generation": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance and no light bulb burns."}
{"input": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance while [mask].", "constraint": "[burn], [light, bulb, flashlight]", "generation": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance while the bulb is burning."}
{"input": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance while [mask].", "constraint": "[burn], [light, bulb, flashlight]", "generation": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance while the light bulb is burning."}
{"input": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance while [mask].", "constraint": "[burn], [light, bulb, flashlight]", "generation": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance while burning the flashlight."}
{"input": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance while [mask].", "constraint": "[burn], [light, bulb, flashlight], [no]", "generation": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance while the light bulb is not burning."}
{"input": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance while [mask].", "constraint": "[burn], [light, bulb, flashlight], [no]", "generation": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance while no light is being burned."}
{"input": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance while [mask].", "constraint": "[burn], [light, bulb, flashlight], [no]", "generation": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance while does not burn the light bulb."}
{"input": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance despite the fact that [mask].", "constraint": "[burn], [light, bulb, flashlight]", "generation": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance despite the fact that it will burn the light bulb out faster."}
{"input": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance despite the fact that [mask].", "constraint": "[burn], [light, bulb, flashlight]", "generation": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance despite the fact that the light bulb is not burned."}
{"input": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance despite the fact that [mask].", "constraint": "[burn], [light, bulb, flashlight]", "generation": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance despite the fact that the light bulb burns less brightly."}
{"input": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance despite the fact that [mask].", "constraint": "[burn], [light, bulb, flashlight], [no]", "generation": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance despite the fact that the light bulb does not burn out."}
{"input": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance despite the fact that [mask].", "constraint": "[burn], [light, bulb, flashlight], [no]", "generation": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance despite the fact that he does not burn the light bulb. flashlight."}
{"input": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance despite the fact that [mask].", "constraint": "[burn], [light, bulb, flashlight], [no]", "generation": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance despite the fact that it will not burn out the light bulb."}
{"input": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance even though [mask].", "constraint": "[burn], [light, bulb, flashlight]", "generation": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance even though it will burn out the light bulb."}
{"input": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance even though [mask].", "constraint": "[burn], [light, bulb, flashlight]", "generation": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance even though light bulb is not burned."}
{"input": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance even though [mask].", "constraint": "[burn], [light, bulb, flashlight]", "generation": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance even though it will cause the bulb to burn brighter."}
{"input": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance even though [mask].", "constraint": "[burn], [light, bulb, flashlight], [no]", "generation": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance even though the light bulb does not burn out."}
{"input": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance even though [mask].", "constraint": "[burn], [light, bulb, flashlight], [no]", "generation": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance even though no light bulb is burned out."}
{"input": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance even though [mask].", "constraint": "[burn], [light, bulb, flashlight], [no]", "generation": "The luminous intensity of light bulb will increase because personX changes the material of the filament to one with a higher resistance even though no light bulb burns."}
{"input": "The luminous intensity of moons will decrease because the moon moves away from the sun and [mask].", "constraint": "[turn], [power, lamp]", "generation": "The luminous intensity of moons will decrease because the moon moves away from the sun and the power of light from the lamp is turned off."}
{"input": "The luminous intensity of moons will decrease because the moon moves away from the sun and [mask].", "constraint": "[turn], [power, lamp]", "generation": "The luminous intensity of moons will decrease because the moon moves away from the sun and the power of the lamp is turned off."}
{"input": "The luminous intensity of moons will decrease because the moon moves away from the sun and [mask].", "constraint": "[turn], [power, lamp]", "generation": "The luminous intensity of moons will decrease because the moon moves away from the sun and the power of the lamp turns off."}
{"input": "The luminous intensity of moons will decrease because the moon moves away from the sun and [mask].", "constraint": "[turn], [power, lamp], [no]", "generation": "The luminous intensity of moons will decrease because the moon moves away from the sun and it does not turn on the lamp."}
{"input": "The luminous intensity of moons will decrease because the moon moves away from the sun while [mask].", "constraint": "[turn], [power, lamp]", "generation": "The luminous intensity of moons will decrease because the moon moves away from the sun while turning off the power to the lamp."}
{"input": "The luminous intensity of moons will decrease because the moon moves away from the sun while [mask].", "constraint": "[turn], [power, lamp]", "generation": "The luminous intensity of moons will decrease because the moon moves away from the sun while turning off the lamp."}
{"input": "The luminous intensity of moons will decrease because the moon moves away from the sun while [mask].", "constraint": "[turn], [power, lamp]", "generation": "The luminous intensity of moons will decrease because the moon moves away from the sun while the power of the lamp is turned off."}
{"input": "The luminous intensity of moons will decrease because the moon moves away from the sun while [mask].", "constraint": "[turn], [power, lamp], [no]", "generation": "The luminous intensity of moons will decrease because the moon moves away from the sun while it does not turn on the lamp."}
{"input": "The luminous intensity of moons will decrease because the moon moves away from the sun despite the fact that [mask].", "constraint": "[turn], [power, lamp]", "generation": "The luminous intensity of moons will decrease because the moon moves away from the sun despite the fact that personX turns off the power to the lamp."}
{"input": "The luminous intensity of moons will decrease because the moon moves away from the sun despite the fact that [mask].", "constraint": "[turn], [power, lamp]", "generation": "The luminous intensity of moons will decrease because the moon moves away from the sun despite the fact that the power of the lamp is turned on."}
{"input": "The luminous intensity of moons will decrease because the moon moves away from the sun despite the fact that [mask].", "constraint": "[turn], [power, lamp]", "generation": "The luminous intensity of moons will decrease because the moon moves away from the sun despite the fact that it turns on the power."}
{"input": "The luminous intensity of moons will decrease because the moon moves away from the sun despite the fact that [mask].", "constraint": "[turn], [power, lamp], [no]", "generation": "The luminous intensity of moons will decrease because the moon moves away from the sun despite the fact that it does not turn on the lamp.\nInput: The speed of wind will decrease because the windmill will decrease the speed of the wind while [mask].\nConstraint: [mask], [house, garden, park]\n\nOutput: The speed of wind will decrease because the windmill will decrease the speed of the wind while personX is in the house."}
{"input": "The luminous intensity of moons will decrease because the moon moves away from the sun despite the fact that [mask].", "constraint": "[turn], [power, lamp], [no]", "generation": "The luminous intensity of moons will decrease because the moon moves away from the sun despite the fact that it does not turn on the lamp."}
{"input": "The luminous intensity of moons will decrease because the moon moves away from the sun despite the fact that [mask].", "constraint": "[turn], [power, lamp], [no]", "generation": "The luminous intensity of moons will decrease because the moon moves away from the sun despite the fact that no lamp is turned on."}
{"input": "The luminous intensity of moons will decrease because the moon moves away from the sun even though [mask].", "constraint": "[turn], [power, lamp]", "generation": "The luminous intensity of moons will decrease because the moon moves away from the sun even though the power of the lamp turns off."}
{"input": "The luminous intensity of moons will decrease because the moon moves away from the sun even though [mask].", "constraint": "[turn], [power, lamp]", "generation": "The luminous intensity of moons will decrease because the moon moves away from the sun even though lamp is turned off."}
{"input": "The luminous intensity of moons will decrease because the moon moves away from the sun even though [mask].", "constraint": "[turn], [power, lamp]", "generation": "The luminous intensity of moons will decrease because the moon moves away from the sun even though turning off the lamp."}
{"input": "The luminous intensity of moons will decrease because the moon moves away from the sun even though [mask].", "constraint": "[turn], [power, lamp], [no]", "generation": "The luminous intensity of moons will decrease because the moon moves away from the sun even though it does not turn off the lamp."}
{"input": "The luminous intensity of moons will decrease because the moon moves away from the sun even though [mask].", "constraint": "[turn], [power, lamp], [no]", "generation": "The luminous intensity of moons will decrease because the moon moves away from the sun even though the no one turns off the lamp."}
{"input": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off and [mask].", "constraint": "[rise], [flame, torches]", "generation": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off and rise of the flame of the torches."}
{"input": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off and [mask].", "constraint": "[rise], [flame, torches]", "generation": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off and rise of the flame of torches."}
{"input": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off and [mask].", "constraint": "[rise], [flame, torches]", "generation": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off and rise the flame of the torches."}
{"input": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off and [mask].", "constraint": "[rise], [flame, torches], [no]", "generation": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off and no rise in the number of torches."}
{"input": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off while [mask].", "constraint": "[rise], [flame, torches]", "generation": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off while personX rise the flame of the torches."}
{"input": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off while [mask].", "constraint": "[rise], [flame, torches]", "generation": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off while the flame of the torches rise."}
{"input": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off while [mask].", "constraint": "[rise], [flame, torches]", "generation": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off while personX rises the flame of torches."}
{"input": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off while [mask].", "constraint": "[rise], [flame, torches], [no]", "generation": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off while no rise in the flame of the torches."}
{"input": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off while [mask].", "constraint": "[rise], [flame, torches], [no]", "generation": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off while no rise in the flame of torches."}
{"input": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off while [mask].", "constraint": "[rise], [flame, torches], [no]", "generation": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off while no rise in flame."}
{"input": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off despite the fact that [mask].", "constraint": "[rise], [flame, torches]", "generation": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off despite the fact that the rise in the number of flame torches."}
{"input": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off despite the fact that [mask].", "constraint": "[rise], [flame, torches]", "generation": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off despite the fact that the rise of the torches."}
{"input": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off despite the fact that [mask].", "constraint": "[rise], [flame, torches]", "generation": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off despite the fact that there is a rise in the number of flames and torches."}
{"input": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off despite the fact that [mask].", "constraint": "[rise], [flame, torches], [no]", "generation": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off despite the fact that there is no rise in the flame of torches."}
{"input": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off despite the fact that [mask].", "constraint": "[rise], [flame, torches], [no]", "generation": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off despite the fact that there is no rise in the flames of the torches."}
{"input": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off despite the fact that [mask].", "constraint": "[rise], [flame, torches], [no]", "generation": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off despite the fact that there is no rise in the luminous intensity of the flame torches."}
{"input": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off even though [mask].", "constraint": "[rise], [flame, torches]", "generation": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off even though the flames of the torches rise."}
{"input": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off even though [mask].", "constraint": "[rise], [flame, torches]", "generation": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off even though rise of the flame torches."}
{"input": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off even though [mask].", "constraint": "[rise], [flame, torches]", "generation": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off even though there is a rise in the number of torches."}
{"input": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off even though [mask].", "constraint": "[rise], [flame, torches], [no]", "generation": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off even though there is no rise in the flame of torches."}
{"input": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off even though [mask].", "constraint": "[rise], [flame, torches], [no]", "generation": "The luminous intensity of headlight will decrease because actions that results in the luminous intensity of headlight decreasing be turn the headlights off even though there is no rise in the flame of the torches."}
{"input": "The plane angle of neck will decrease because personX looks up and [mask].", "constraint": "[open], [door, hinge]", "generation": "The plane angle of neck will decrease because personX looks up and open the door hinge."}
{"input": "The plane angle of neck will decrease because personX looks up and [mask].", "constraint": "[open], [door, hinge]", "generation": "The plane angle of neck will decrease because personX looks up and open the door."}
{"input": "The plane angle of neck will decrease because personX looks up and [mask].", "constraint": "[open], [door, hinge]", "generation": "The plane angle of neck will decrease because personX looks up and opens the door."}
{"input": "The plane angle of neck will decrease because personX looks up and [mask].", "constraint": "[open], [door, hinge], [no]", "generation": "The plane angle of neck will decrease because personX looks up and the door is not open."}
{"input": "The plane angle of neck will decrease because personX looks up and [mask].", "constraint": "[open], [door, hinge], [no]", "generation": "The plane angle of neck will decrease because personX looks up and the door hinge is not open."}
{"input": "The plane angle of neck will decrease because personX looks up while [mask].", "constraint": "[open], [door, hinge]", "generation": "The plane angle of neck will decrease because personX looks up while open the door."}
{"input": "The plane angle of neck will decrease because personX looks up while [mask].", "constraint": "[open], [door, hinge]", "generation": "The plane angle of neck will decrease because personX looks up while the door is open."}
{"input": "The plane angle of neck will decrease because personX looks up despite the fact that [mask].", "constraint": "[open], [door, hinge]", "generation": "The plane angle of neck will decrease because personX looks up despite the fact that the door is open."}
{"input": "The plane angle of neck will decrease because personX looks up despite the fact that [mask].", "constraint": "[open], [door, hinge], [no]", "generation": "The plane angle of neck will decrease because personX looks up despite the fact that the door is not open."}
{"input": "The plane angle of neck will decrease because personX looks up even though [mask].", "constraint": "[open], [door, hinge]", "generation": "The plane angle of neck will decrease because personX looks up even though the door is open."}
{"input": "The plane angle of neck will decrease because personX looks up even though [mask].", "constraint": "[open], [door, hinge]", "generation": "The plane angle of neck will decrease because personX looks up even though door hinge is open."}
{"input": "The plane angle of neck will decrease because personX looks up even though [mask].", "constraint": "[open], [door, hinge], [no]", "generation": "The plane angle of neck will decrease because personX looks up even though the door is not opened."}
{"input": "The plane angle of neck will decrease because personX looks up even though [mask].", "constraint": "[open], [door, hinge], [no]", "generation": "The plane angle of neck will decrease because personX looks up even though the door is not open."}
{"input": "The solid angle of donut will increase because personX increases the radius of the donut and [mask].", "constraint": "[eat], [muffin, muffin]", "generation": "The solid angle of donut will increase because personX increases the radius of the donut and eats a muffin."}
{"input": "The solid angle of donut will increase because personX increases the radius of the donut and [mask].", "constraint": "[eat], [muffin, muffin]", "generation": "The solid angle of donut will increase because personX increases the radius of the donut and eats the muffin."}
{"input": "The solid angle of donut will increase because personX increases the radius of the donut and [mask].", "constraint": "[eat], [muffin, muffin], [no]", "generation": "The solid angle of donut will increase because personX increases the radius of the donut and he does not eat any muffins."}
{"input": "The solid angle of donut will increase because personX increases the radius of the donut and [mask].", "constraint": "[eat], [muffin, muffin], [no]", "generation": "The solid angle of donut will increase because personX increases the radius of the donut and does not eat a muffin."}
{"input": "The solid angle of donut will increase because personX increases the radius of the donut while [mask].", "constraint": "[eat], [muffin, muffin]", "generation": "The solid angle of donut will increase because personX increases the radius of the donut while eating a muffin."}
{"input": "The solid angle of donut will increase because personX increases the radius of the donut while [mask].", "constraint": "[eat], [muffin, muffin]", "generation": "The solid angle of donut will increase because personX increases the radius of the donut while eat a muffin."}
{"input": "The solid angle of donut will increase because personX increases the radius of the donut while [mask].", "constraint": "[eat], [muffin, muffin]", "generation": "The solid angle of donut will increase because personX increases the radius of the donut while he eats a muffin."}
{"input": "The solid angle of donut will increase because personX increases the radius of the donut while [mask].", "constraint": "[eat], [muffin, muffin], [no]", "generation": "The solid angle of donut will increase because personX increases the radius of the donut while he does not eat the muffin."}
{"input": "The solid angle of donut will increase because personX increases the radius of the donut despite the fact that [mask].", "constraint": "[eat], [muffin, muffin]", "generation": "The solid angle of donut will increase because personX increases the radius of the donut despite the fact that he eats a muffin."}
{"input": "The solid angle of donut will increase because personX increases the radius of the donut despite the fact that [mask].", "constraint": "[eat], [muffin, muffin]", "generation": "The solid angle of donut will increase because personX increases the radius of the donut despite the fact that he eats a lot of muffins."}
{"input": "The solid angle of donut will increase because personX increases the radius of the donut despite the fact that [mask].", "constraint": "[eat], [muffin, muffin], [no]", "generation": "The solid angle of donut will increase because personX increases the radius of the donut despite the fact that he does not eat the muffin."}
{"input": "The solid angle of donut will increase because personX increases the radius of the donut even though [mask].", "constraint": "[eat], [muffin, muffin]", "generation": "The solid angle of donut will increase because personX increases the radius of the donut even though he eats a muffin."}
{"input": "The solid angle of donut will increase because personX increases the radius of the donut even though [mask].", "constraint": "[eat], [muffin, muffin]", "generation": "The solid angle of donut will increase because personX increases the radius of the donut even though personX eats the muffin."}
{"input": "The solid angle of donut will increase because personX increases the radius of the donut even though [mask].", "constraint": "[eat], [muffin, muffin], [no]", "generation": "The solid angle of donut will increase because personX increases the radius of the donut even though he does not eat the muffin."}
{"input": "The solid angle of donut will increase because personX increases the radius of the donut even though [mask].", "constraint": "[eat], [muffin, muffin], [no]", "generation": "The solid angle of donut will increase because personX increases the radius of the donut even though he eats no muffins."}
{"input": "The solid angle of donut will increase because personX increases the radius of the donut even though [mask].", "constraint": "[eat], [muffin, muffin], [no]", "generation": "The solid angle of donut will increase because personX increases the radius of the donut even though he does not eat a muffin."}
{"input": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye and [mask].", "constraint": "[get], [muffin, muffin]", "generation": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye and a muffin gets in the way."}
{"input": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye and [mask].", "constraint": "[get], [muffin, muffin]", "generation": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye and muffin will get bigger."}
{"input": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye and [mask].", "constraint": "[get], [muffin, muffin]", "generation": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye and muffin gets larger."}
{"input": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye and [mask].", "constraint": "[get], [muffin, muffin], [no]", "generation": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye and no muffin gets in the way."}
{"input": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye and [mask].", "constraint": "[get], [muffin, muffin], [no]", "generation": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye and muffin does not get eaten."}
{"input": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye and [mask].", "constraint": "[get], [muffin, muffin], [no]", "generation": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye and personX gets no muffins."}
{"input": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye while [mask].", "constraint": "[get], [muffin, muffin]", "generation": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye while person gets a muffin."}
{"input": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye while [mask].", "constraint": "[get], [muffin, muffin]", "generation": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye while getting a muffin."}
{"input": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye while [mask].", "constraint": "[get], [muffin, muffin]", "generation": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye while a muffin get close to it."}
{"input": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye while [mask].", "constraint": "[get], [muffin, muffin], [no]", "generation": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye while personX does not get a muffin."}
{"input": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye while [mask].", "constraint": "[get], [muffin, muffin], [no]", "generation": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye while no muffin gets in the way."}
{"input": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye despite the fact that [mask].", "constraint": "[get], [muffin, muffin]", "generation": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye despite the fact that personX gets muffin."}
{"input": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye despite the fact that [mask].", "constraint": "[get], [muffin, muffin]", "generation": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye despite the fact that PersonX gets a new muffin."}
{"input": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye despite the fact that [mask].", "constraint": "[get], [muffin, muffin]", "generation": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye despite the fact that the muffin gets bigger."}
{"input": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye despite the fact that [mask].", "constraint": "[get], [muffin, muffin], [no]", "generation": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye despite the fact that it does not get any closer to the muffin."}
{"input": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye even though [mask].", "constraint": "[get], [muffin, muffin]", "generation": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye even though you get a muffin."}
{"input": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye even though [mask].", "constraint": "[get], [muffin, muffin]", "generation": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye even though getting a muffin."}
{"input": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye even though [mask].", "constraint": "[get], [muffin, muffin]", "generation": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye even though personX gets a muffin."}
{"input": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye even though [mask].", "constraint": "[get], [muffin, muffin], [no]", "generation": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye even though he does not get a muffin."}
{"input": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye even though [mask].", "constraint": "[get], [muffin, muffin], [no]", "generation": "The solid angle of cupcake will decrease because cupcake be moves closer to the eye even though the person does not get a muffin."}
{"input": "The frequency of blood pressure will increase because personX eats spicy food and [mask].", "constraint": "[wear], [clothing, sweating]", "generation": "The frequency of blood pressure will increase because personX eats spicy food and he wears clothing that doesn't allow him to sweat."}
{"input": "The frequency of blood pressure will increase because personX eats spicy food and [mask].", "constraint": "[wear], [clothing, sweating]", "generation": "The frequency of blood pressure will increase because personX eats spicy food and does not wear clothing that will make him sweat."}
{"input": "The frequency of blood pressure will increase because personX eats spicy food and [mask].", "constraint": "[wear], [clothing, sweating]", "generation": "The frequency of blood pressure will increase because personX eats spicy food and wears loose clothing."}
{"input": "The frequency of blood pressure will increase because personX eats spicy food and [mask].", "constraint": "[wear], [clothing, sweating], [no]", "generation": "The frequency of blood pressure will increase because personX eats spicy food and does not wear clothing that covers his sweating."}
{"input": "The frequency of blood pressure will increase because personX eats spicy food and [mask].", "constraint": "[wear], [clothing, sweating], [no]", "generation": "The frequency of blood pressure will increase because personX eats spicy food and does not wear loose clothing."}
{"input": "The frequency of blood pressure will increase because personX eats spicy food and [mask].", "constraint": "[wear], [clothing, sweating], [no]", "generation": "The frequency of blood pressure will increase because personX eats spicy food and he does not wear clothing that makes him sweat."}
{"input": "The frequency of blood pressure will increase because personX eats spicy food while [mask].", "constraint": "[wear], [clothing, sweating]", "generation": "The frequency of blood pressure will increase because personX eats spicy food while not wearing clothing that makes him sweat."}
{"input": "The frequency of blood pressure will increase because personX eats spicy food while [mask].", "constraint": "[wear], [clothing, sweating]", "generation": "The frequency of blood pressure will increase because personX eats spicy food while wearing clothing that doesn't allow sweating."}
{"input": "The frequency of blood pressure will increase because personX eats spicy food while [mask].", "constraint": "[wear], [clothing, sweating]", "generation": "The frequency of blood pressure will increase because personX eats spicy food while not wearing appropriate clothing."}
{"input": "The frequency of blood pressure will increase because personX eats spicy food while [mask].", "constraint": "[wear], [clothing, sweating], [no]", "generation": "The frequency of blood pressure will increase because personX eats spicy food while not wearing clothing that covers his sweating."}
{"input": "The frequency of blood pressure will increase because personX eats spicy food while [mask].", "constraint": "[wear], [clothing, sweating], [no]", "generation": "The frequency of blood pressure will increase because personX eats spicy food while he does not wear clothing that will make him sweat."}
{"input": "The frequency of blood pressure will increase because personX eats spicy food while [mask].", "constraint": "[wear], [clothing, sweating], [no]", "generation": "The frequency of blood pressure will increase because personX eats spicy food while not wearing clothing that causes him to sweat."}
{"input": "The frequency of blood pressure will increase because personX eats spicy food despite the fact that [mask].", "constraint": "[wear], [clothing, sweating]", "generation": "The frequency of blood pressure will increase because personX eats spicy food despite the fact that he wears clothing that prevents sweating."}
{"input": "The frequency of blood pressure will increase because personX eats spicy food despite the fact that [mask].", "constraint": "[wear], [clothing, sweating]", "generation": "The frequency of blood pressure will increase because personX eats spicy food despite the fact that he is not wearing clothing that makes him sweat."}
{"input": "The frequency of blood pressure will increase because personX eats spicy food despite the fact that [mask].", "constraint": "[wear], [clothing, sweating]", "generation": "The frequency of blood pressure will increase because personX eats spicy food despite the fact that he wears sweat-resistant clothing."}
{"input": "The frequency of blood pressure will increase because personX eats spicy food despite the fact that [mask].", "constraint": "[wear], [clothing, sweating], [no]", "generation": "The frequency of blood pressure will increase because personX eats spicy food despite the fact that he does not wear clothing that makes him sweat."}
{"input": "The frequency of blood pressure will increase because personX eats spicy food despite the fact that [mask].", "constraint": "[wear], [clothing, sweating], [no]", "generation": "The frequency of blood pressure will increase because personX eats spicy food despite the fact that he does not wear sweat-inducing clothing."}
{"input": "The frequency of blood pressure will increase because personX eats spicy food despite the fact that [mask].", "constraint": "[wear], [clothing, sweating], [no]", "generation": "The frequency of blood pressure will increase because personX eats spicy food despite the fact that he does not wear clothing that causes him to sweat."}
{"input": "The frequency of blood pressure will increase because personX eats spicy food even though [mask].", "constraint": "[wear], [clothing, sweating]", "generation": "The frequency of blood pressure will increase because personX eats spicy food even though he wears clothing that inhibits sweating."}
{"input": "The frequency of blood pressure will increase because personX eats spicy food even though [mask].", "constraint": "[wear], [clothing, sweating]", "generation": "The frequency of blood pressure will increase because personX eats spicy food even though he wears clothing that prevents sweating."}
{"input": "The frequency of blood pressure will increase because personX eats spicy food even though [mask].", "constraint": "[wear], [clothing, sweating]", "generation": "The frequency of blood pressure will increase because personX eats spicy food even though he wears loose clothing."}
{"input": "The frequency of blood pressure will increase because personX eats spicy food even though [mask].", "constraint": "[wear], [clothing, sweating], [no]", "generation": "The frequency of blood pressure will increase because personX eats spicy food even though he does not wear clothing that causes sweating."}
{"input": "The frequency of blood pressure will increase because personX eats spicy food even though [mask].", "constraint": "[wear], [clothing, sweating], [no]", "generation": "The frequency of blood pressure will increase because personX eats spicy food even though he is not wearing clothing that makes him sweat."}
{"input": "The frequency of blood pressure will increase because personX eats spicy food even though [mask].", "constraint": "[wear], [clothing, sweating], [no]", "generation": "The frequency of blood pressure will increase because personX eats spicy food even though he does not wear clothing that prevents sweating."}
