{"input": "The length of hair will decrease because personX cuts hair with scissors and [mask].", "constraint": "[vagina, age]", "generation": "The length of hair will decrease because personX cuts hair with scissors and his age."}
{"input": "The force of water will decrease because you turns the faucet to the left and [mask].", "constraint": "[pedal, press, car brakes, brake]", "generation": "The force of water will decrease because you turns the faucet to the left and press the pedal."}
{"input": "The force of water will decrease because you turns the faucet to the left and [mask].", "constraint": "[pedal, press, car brakes, brake]", "generation": "The force of water will decrease because you turns the faucet to the left and brakes."}
{"input": "The force of water will decrease because you turns the faucet to the left and [mask].", "constraint": "[pedal, press, car brakes, brake]", "generation": "The force of water will decrease because you turns the faucet to the left and brakes the pedal."}
{"input": "The force of water will decrease because you turns the faucet to the left while [mask].", "constraint": "[pedal, brake, press, car brakes]", "generation": "The force of water will decrease because you turns the faucet to the left while car brakes are being pressed."}
{"input": "The force of water will decrease because you turns the faucet to the left while [mask].", "constraint": "[pedal, brake, press, car brakes]", "generation": "The force of water will decrease because you turns the faucet to the left while the car brakes are being pedal."}
{"input": "The force of water will decrease because you turns the faucet to the left while [mask].", "constraint": "[pedal, brake, press, car brakes]", "generation": "The force of water will decrease because you turns the faucet to the left while the car's brakes are being pressed."}
{"input": "The force of water will decrease because you turns the faucet to the left while [mask].", "constraint": "[press, car brakes, brake, pedal], [no]", "generation": "The force of water will decrease because you turns the faucet to the left while you do not press the pedal."}
{"input": "The force of water will decrease because you turns the faucet to the left while [mask].", "constraint": "[press, car brakes, brake, pedal], [no]", "generation": "The force of water will decrease because you turns the faucet to the left while you are not pressing the pedal."}
{"input": "The force of water will decrease because you turns the faucet to the left while [mask].", "constraint": "[press, car brakes, brake, pedal], [no]", "generation": "The force of water will decrease because you turns the faucet to the left while no one presses the brakes."}
{"input": "The force of water will decrease because you turns the faucet to the left despite the fact that [mask].", "constraint": "[brake, car brakes, press, pedal]", "generation": "The force of water will decrease because you turns the faucet to the left despite the fact that you press the pedal harder."}
{"input": "The force of water will decrease because you turns the faucet to the left despite the fact that [mask].", "constraint": "[brake, car brakes, press, pedal]", "generation": "The force of water will decrease because you turns the faucet to the left despite the fact that you press the pedal."}
{"input": "The force of water will decrease because you turns the faucet to the left even though [mask].", "constraint": "[press, car brakes, pedal, brake]", "generation": "The force of water will decrease because you turns the faucet to the left even though you don't press the brakes."}
{"input": "The force of water will decrease because you turns the faucet to the left even though [mask].", "constraint": "[press, car brakes, pedal, brake]", "generation": "The force of water will decrease because you turns the faucet to the left even though you press the pedal to the car brakes."}
{"input": "The force of water will decrease because you turns the faucet to the left even though [mask].", "constraint": "[press, car brakes, pedal, brake]", "generation": "The force of water will decrease because you turns the faucet to the left even though you press the brake pedal on your car."}
{"input": "The force of water will decrease because you turns the faucet to the left even though [mask].", "constraint": "[pedal, car brakes, press, brake], [no]", "generation": "The force of water will decrease because you turns the faucet to the left even though you do not press the brake pedal."}
{"input": "The force of water will decrease because you turns the faucet to the left even though [mask].", "constraint": "[pedal, car brakes, press, brake], [no]", "generation": "The force of water will decrease because you turns the faucet to the left even though no one is pressing the pedal."}
{"input": "The force of ice will decrease because the ice be allows to melt and [mask].", "constraint": "[coil, number, turn, electromagnet, electromagnet, increase]", "generation": "The force of ice will decrease because the ice be allows to melt and the coil is turned off."}
{"input": "The force of ice will decrease because the ice be allows to melt and [mask].", "constraint": "[coil, number, turn, electromagnet, electromagnet, increase]", "generation": "The force of ice will decrease because the ice be allows to melt and the number of coils in the electromagnet is increased."}
{"input": "The force of ice will decrease because the ice be allows to melt and [mask].", "constraint": "[turn, electromagnet, increase, electromagnet, number, coil], [no]", "generation": "The force of ice will decrease because the ice be allows to melt and no electromagnet is used."}
{"input": "The force of ice will decrease because the ice be allows to melt and [mask].", "constraint": "[turn, electromagnet, increase, electromagnet, number, coil], [no]", "generation": "The force of ice will decrease because the ice be allows to melt and no more electromagnet is used to turn it on."}
{"input": "The force of ice will decrease because the ice be allows to melt and [mask].", "constraint": "[turn, electromagnet, increase, electromagnet, number, coil], [no]", "generation": "The force of ice will decrease because the ice be allows to melt and no electromagnet is used to turn it into water."}
{"input": "The force of ice will decrease because the ice be allows to melt while [mask].", "constraint": "[turn, coil, number, electromagnet, electromagnet, increase]", "generation": "The force of ice will decrease because the ice be allows to melt while the electromagnet is turned on and the number of coil increases."}
{"input": "The force of ice will decrease because the ice be allows to melt while [mask].", "constraint": "[turn, coil, number, electromagnet, electromagnet, increase]", "generation": "The force of ice will decrease because the ice be allows to melt while the electromagnet is turned on and the number of coils is increased."}
{"input": "The force of ice will decrease because the ice be allows to melt while [mask].", "constraint": "[turn, coil, number, electromagnet, electromagnet, increase]", "generation": "The force of ice will decrease because the ice be allows to melt while the number of coils in the electromagnet is increased."}
{"input": "The force of ice will decrease because the ice be allows to melt while [mask].", "constraint": "[electromagnet, coil, turn, number, electromagnet, increase], [no]", "generation": "The force of ice will decrease because the ice be allows to melt while no ice is being put into the electromagnet."}
{"input": "The force of ice will decrease because the ice be allows to melt despite the fact that [mask].", "constraint": "[coil, number, electromagnet, electromagnet, increase, turn]", "generation": "The force of ice will decrease because the ice be allows to melt despite the fact that the electromagnet is turned off."}
{"input": "The force of ice will decrease because the ice be allows to melt despite the fact that [mask].", "constraint": "[coil, number, electromagnet, electromagnet, increase, turn]", "generation": "The force of ice will decrease because the ice be allows to melt despite the fact that electromagnets are used to increase the force."}
{"input": "The force of ice will decrease because the ice be allows to melt despite the fact that [mask].", "constraint": "[electromagnet, increase, coil, electromagnet, number, turn], [no]", "generation": "The force of ice will decrease because the ice be allows to melt despite the fact that there is no electromagnet to increase the number of coils."}
{"input": "The force of ice will decrease because the ice be allows to melt despite the fact that [mask].", "constraint": "[electromagnet, increase, coil, electromagnet, number, turn], [no]", "generation": "The force of ice will decrease because the ice be allows to melt despite the fact that electromagnet is not increased."}
{"input": "The force of ice will decrease because the ice be allows to melt despite the fact that [mask].", "constraint": "[electromagnet, increase, coil, electromagnet, number, turn], [no]", "generation": "The force of ice will decrease because the ice be allows to melt despite the fact that no more electromagnets are used."}
{"input": "The force of ice will decrease because the ice be allows to melt even though [mask].", "constraint": "[turn, electromagnet, increase, coil, electromagnet, number]", "generation": "The force of ice will decrease because the ice be allows to melt even though the electromagnet's coil number is increased."}
{"input": "The force of ice will decrease because the ice be allows to melt even though [mask].", "constraint": "[turn, electromagnet, increase, coil, electromagnet, number]", "generation": "The force of ice will decrease because the ice be allows to melt even though the number of coils in the electromagnet is increased."}
{"input": "The force of ice will decrease because the ice be allows to melt even though [mask].", "constraint": "[turn, electromagnet, increase, coil, electromagnet, number]", "generation": "The force of ice will decrease because the ice be allows to melt even though the number of electromagnets is increased."}
{"input": "The force of ice will decrease because the ice be allows to melt even though [mask].", "constraint": "[number, increase, turn, electromagnet, electromagnet, coil], [no]", "generation": "The force of ice will decrease because the ice be allows to melt even though there is no electromagnet around it."}
{"input": "The force of ice will decrease because the ice be allows to melt even though [mask].", "constraint": "[number, increase, turn, electromagnet, electromagnet, coil], [no]", "generation": "The force of ice will decrease because the ice be allows to melt even though there is no electromagnet to cool down the coil."}
{"input": "The force of ice will decrease because the ice be allows to melt even though [mask].", "constraint": "[number, increase, turn, electromagnet, electromagnet, coil], [no]", "generation": "The force of ice will decrease because the ice be allows to melt even though the electromagnet is not turned on."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease and [mask].", "constraint": "[organize, people, community]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease and organize people in community."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease and [mask].", "constraint": "[organize, people, community]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease and organize people in the community."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease and [mask].", "constraint": "[organize, people, community]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease and there is no wind turbine to organize the community."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease and [mask].", "constraint": "[organize, community, people], [no]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease and no one can organize the community to help."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease and [mask].", "constraint": "[organize, community, people], [no]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease and no wind turbines are in the community."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease and [mask].", "constraint": "[organize, community, people], [no]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease and people in the community are not organized."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease while [mask].", "constraint": "[organize, community, people]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease while people are organizing in the community."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease while [mask].", "constraint": "[organize, community, people]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease while people organize in the community."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease while [mask].", "constraint": "[people, community, organize], [no]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease while no people are organizing in the community."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease while [mask].", "constraint": "[people, community, organize], [no]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease while no more people are available to organize the community."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease while [mask].", "constraint": "[people, community, organize], [no]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease while no one is organizing the community."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease despite the fact that [mask].", "constraint": "[community, organize, people]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease despite the fact that people can organize in community to increase the power of wind."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease despite the fact that [mask].", "constraint": "[community, organize, people]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease despite the fact that the community organizes the people."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease despite the fact that [mask].", "constraint": "[community, organize, people]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease despite the fact that people organize in the community."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease despite the fact that [mask].", "constraint": "[community, organize, people], [no]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease despite the fact that there is no windmill in the community."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease despite the fact that [mask].", "constraint": "[community, organize, people], [no]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease despite the fact that no community is organized to harness the power of the wind."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease despite the fact that [mask].", "constraint": "[community, organize, people], [no]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease despite the fact that no one is organizing a community."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease even though [mask].", "constraint": "[people, community, organize]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease even though people are co organize."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease even though [mask].", "constraint": "[people, community, organize]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease even though people organize in the community."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease even though [mask].", "constraint": "[people, community, organize]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease even though people are organized in the community."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease even though [mask].", "constraint": "[community, people, organize], [no]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease even though no community organize the people."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease even though [mask].", "constraint": "[community, people, organize], [no]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease even though there is no organized community to help."}
{"input": "The power of wind will decrease because the wind can decreases in power if the temperature decrease even though [mask].", "constraint": "[community, people, organize], [no]", "generation": "The power of wind will decrease because the wind can decreases in power if the temperature decrease even though there is no wind power community in the area."}
{"input": "The resistance of blood pressure will decrease because personX reduces sodium intake and [mask].", "constraint": "[alcohol, time, drink]", "generation": "The resistance of blood pressure will decrease because personX reduces sodium intake and does not drink alcohol."}
{"input": "The resistance of blood pressure will decrease because personX reduces sodium intake and [mask].", "constraint": "[alcohol, time, drink]", "generation": "The resistance of blood pressure will decrease because personX reduces sodium intake and he drinks alcohol in moderation."}
{"input": "The resistance of blood pressure will decrease because personX reduces sodium intake and [mask].", "constraint": "[alcohol, time, drink]", "generation": "The resistance of blood pressure will decrease because personX reduces sodium intake and takes medicine on time."}
{"input": "The resistance of blood pressure will decrease because personX reduces sodium intake and [mask].", "constraint": "[time, alcohol, drink], [no]", "generation": "The resistance of blood pressure will decrease because personX reduces sodium intake and does not drink alcohol."}
{"input": "The resistance of blood pressure will decrease because personX reduces sodium intake and [mask].", "constraint": "[time, alcohol, drink], [no]", "generation": "The resistance of blood pressure will decrease because personX reduces sodium intake and he does not drink alcohol."}
{"input": "The resistance of blood pressure will decrease because personX reduces sodium intake and [mask].", "constraint": "[time, alcohol, drink], [no]", "generation": "The resistance of blood pressure will decrease because personX reduces sodium intake and no longer drinks alcohol."}
{"input": "The resistance of blood pressure will decrease because personX reduces sodium intake while [mask].", "constraint": "[drink, time, alcohol]", "generation": "The resistance of blood pressure will decrease because personX reduces sodium intake while drinking alcohol."}
{"input": "The resistance of blood pressure will decrease because personX reduces sodium intake while [mask].", "constraint": "[drink, time, alcohol]", "generation": "The resistance of blood pressure will decrease because personX reduces sodium intake while he is not drinking alcohol."}
{"input": "The resistance of blood pressure will decrease because personX reduces sodium intake while [mask].", "constraint": "[drink, time, alcohol]", "generation": "The resistance of blood pressure will decrease because personX reduces sodium intake while he drinks alcohol."}
{"input": "The resistance of blood pressure will decrease because personX reduces sodium intake while [mask].", "constraint": "[time, drink, alcohol], [no]", "generation": "The resistance of blood pressure will decrease because personX reduces sodium intake while no more alcohol is consumed."}
{"input": "The resistance of blood pressure will decrease because personX reduces sodium intake while [mask].", "constraint": "[time, drink, alcohol], [no]", "generation": "The resistance of blood pressure will decrease because personX reduces sodium intake while he does not drink alcohol."}
{"input": "The resistance of blood pressure will decrease because personX reduces sodium intake despite the fact that [mask].", "constraint": "[time, drink, alcohol]", "generation": "The resistance of blood pressure will decrease because personX reduces sodium intake despite the fact that he drinks alcohol."}
{"input": "The resistance of blood pressure will decrease because personX reduces sodium intake despite the fact that [mask].", "constraint": "[time, drink, alcohol]", "generation": "The resistance of blood pressure will decrease because personX reduces sodium intake despite the fact that it is time to drink alcohol."}
{"input": "The resistance of blood pressure will decrease because personX reduces sodium intake despite the fact that [mask].", "constraint": "[time, drink, alcohol]", "generation": "The resistance of blood pressure will decrease because personX reduces sodium intake despite the fact that he does not have enough time."}
{"input": "The resistance of blood pressure will decrease because personX reduces sodium intake despite the fact that [mask].", "constraint": "[alcohol, drink, time], [no]", "generation": "The resistance of blood pressure will decrease because personX reduces sodium intake despite the fact that he does not drink alcohol."}
{"input": "The resistance of blood pressure will decrease because personX reduces sodium intake even though [mask].", "constraint": "[alcohol, time, drink]", "generation": "The resistance of blood pressure will decrease because personX reduces sodium intake even though he drinks alcohol."}
{"input": "The resistance of blood pressure will decrease because personX reduces sodium intake even though [mask].", "constraint": "[alcohol, time, drink]", "generation": "The resistance of blood pressure will decrease because personX reduces sodium intake even though alcohol is included in his diet."}
{"input": "The resistance of blood pressure will decrease because personX reduces sodium intake even though [mask].", "constraint": "[alcohol, time, drink]", "generation": "The resistance of blood pressure will decrease because personX reduces sodium intake even though she drinks alcohol."}
{"input": "The resistance of blood pressure will decrease because personX reduces sodium intake even though [mask].", "constraint": "[drink, alcohol, time], [no]", "generation": "The resistance of blood pressure will decrease because personX reduces sodium intake even though he does not drink alcohol."}
{"input": "The width of pupils will decrease because personX sees a scary movie and [mask].", "constraint": "[prune, branch, trees]", "generation": "The width of pupils will decrease because personX sees a scary movie and prunes the trees."}
{"input": "The width of pupils will decrease because personX sees a scary movie and [mask].", "constraint": "[prune, branch, trees]", "generation": "The width of pupils will decrease because personX sees a scary movie and they are pruned."}
{"input": "The width of pupils will decrease because personX sees a scary movie and [mask].", "constraint": "[prune, branch, trees]", "generation": "The width of pupils will decrease because personX sees a scary movie and tries to prune the trees."}
{"input": "The width of pupils will decrease because personX sees a scary movie and [mask].", "constraint": "[trees, prune, branch], [no]", "generation": "The width of pupils will decrease because personX sees a scary movie and no leaves are on trees."}
{"input": "The width of pupils will decrease because personX sees a scary movie and [mask].", "constraint": "[trees, prune, branch], [no]", "generation": "The width of pupils will decrease because personX sees a scary movie and no more trees are in the way."}
{"input": "The width of pupils will decrease because personX sees a scary movie and [mask].", "constraint": "[trees, prune, branch], [no]", "generation": "The width of pupils will decrease because personX sees a scary movie and no trees are in the room."}
{"input": "The width of pupils will decrease because personX sees a scary movie while [mask].", "constraint": "[prune, branch, trees]", "generation": "The width of pupils will decrease because personX sees a scary movie while prunes branches of trees."}
{"input": "The width of pupils will decrease because personX sees a scary movie while [mask].", "constraint": "[prune, branch, trees]", "generation": "The width of pupils will decrease because personX sees a scary movie while pruning branches."}
{"input": "The width of pupils will decrease because personX sees a scary movie while [mask].", "constraint": "[prune, branch, trees]", "generation": "The width of pupils will decrease because personX sees a scary movie while prunes the branches of trees."}
{"input": "The width of pupils will decrease because personX sees a scary movie while [mask].", "constraint": "[prune, trees, branch], [no]", "generation": "The width of pupils will decrease because personX sees a scary movie while there are no trees around."}
{"input": "The width of pupils will decrease because personX sees a scary movie while [mask].", "constraint": "[prune, trees, branch], [no]", "generation": "The width of pupils will decrease because personX sees a scary movie while no leaves on trees."}
{"input": "The width of pupils will decrease because personX sees a scary movie while [mask].", "constraint": "[prune, trees, branch], [no]", "generation": "The width of pupils will decrease because personX sees a scary movie while there are no trees near her."}
{"input": "The width of pupils will decrease because personX sees a scary movie despite the fact that [mask].", "constraint": "[branch, trees, prune]", "generation": "The width of pupils will decrease because personX sees a scary movie despite the fact that he is scared of trees."}
{"input": "The width of pupils will decrease because personX sees a scary movie despite the fact that [mask].", "constraint": "[branch, trees, prune]", "generation": "The width of pupils will decrease because personX sees a scary movie despite the fact that he is not afraid of branches."}
{"input": "The width of pupils will decrease because personX sees a scary movie despite the fact that [mask].", "constraint": "[branch, trees, prune]", "generation": "The width of pupils will decrease because personX sees a scary movie despite the fact that there are trees in the room."}
{"input": "The width of pupils will decrease because personX sees a scary movie despite the fact that [mask].", "constraint": "[trees, prune, branch], [no]", "generation": "The width of pupils will decrease because personX sees a scary movie despite the fact that there are no trees around."}
{"input": "The width of pupils will decrease because personX sees a scary movie despite the fact that [mask].", "constraint": "[trees, prune, branch], [no]", "generation": "The width of pupils will decrease because personX sees a scary movie despite the fact that he is not scared of trees."}
{"input": "The width of pupils will decrease because personX sees a scary movie even though [mask].", "constraint": "[trees, branch, prune]", "generation": "The width of pupils will decrease because personX sees a scary movie even though the trees are not pruned."}
{"input": "The width of pupils will decrease because personX sees a scary movie even though [mask].", "constraint": "[trees, branch, prune], [no]", "generation": "The width of pupils will decrease because personX sees a scary movie even though there are no trees."}
{"input": "The width of pupils will decrease because personX sees a scary movie even though [mask].", "constraint": "[trees, branch, prune], [no]", "generation": "The width of pupils will decrease because personX sees a scary movie even though he is not afraid of trees."}
{"input": "The width of pupils will decrease because personX sees a scary movie even though [mask].", "constraint": "[trees, branch, prune], [no]", "generation": "The width of pupils will decrease because personX sees a scary movie even though there are no trees around."}
{"input": "The height of building will decrease because building is strike by an earthquake and [mask].", "constraint": "[hills, erosion, increase, height, hill]", "generation": "The height of building will decrease because building is strike by an earthquake and hills are eroded."}
{"input": "The height of building will decrease because building is strike by an earthquake and [mask].", "constraint": "[hills, erosion, increase, height, hill]", "generation": "The height of building will decrease because building is strike by an earthquake and the height of hills nearby increase."}
{"input": "The height of building will decrease because building is strike by an earthquake and [mask].", "constraint": "[hills, erosion, increase, height, hill]", "generation": "The height of building will decrease because building is strike by an earthquake and hills nearby are eroded."}
{"input": "The height of building will decrease because building is strike by an earthquake and [mask].", "constraint": "[hills, hill, erosion, height, increase], [no]", "generation": "The height of building will decrease because building is strike by an earthquake and no hills are nearby."}
{"input": "The height of building will decrease because building is strike by an earthquake and [mask].", "constraint": "[hills, hill, erosion, height, increase], [no]", "generation": "The height of building will decrease because building is strike by an earthquake and no action is taken to stop the erosion."}
{"input": "The height of building will decrease because building is strike by an earthquake and [mask].", "constraint": "[hills, hill, erosion, height, increase], [no]", "generation": "The height of building will decrease because building is strike by an earthquake and no more buildings are available at that height."}
{"input": "The height of building will decrease because building is strike by an earthquake while [mask].", "constraint": "[hills, increase, hill, height, erosion]", "generation": "The height of building will decrease because building is strike by an earthquake while the height of hills increases."}
{"input": "The height of building will decrease because building is strike by an earthquake while [mask].", "constraint": "[hills, increase, hill, height, erosion]", "generation": "The height of building will decrease because building is strike by an earthquake while the height of hills erode."}
{"input": "The height of building will decrease because building is strike by an earthquake while [mask].", "constraint": "[hills, increase, hill, height, erosion]", "generation": "The height of building will decrease because building is strike by an earthquake while there is no hills."}
{"input": "The height of building will decrease because building is strike by an earthquake despite the fact that [mask].", "constraint": "[hill, increase, hills, erosion, height]", "generation": "The height of building will decrease because building is strike by an earthquake despite the fact that height increases."}
{"input": "The height of building will decrease because building is strike by an earthquake despite the fact that [mask].", "constraint": "[hill, increase, hills, erosion, height]", "generation": "The height of building will decrease because building is strike by an earthquake despite the fact that hills nearby are eroded."}
{"input": "The height of building will decrease because building is strike by an earthquake despite the fact that [mask].", "constraint": "[hill, increase, hills, erosion, height]", "generation": "The height of building will decrease because building is strike by an earthquake despite the fact that height of hills increases."}
{"input": "The height of building will decrease because building is strike by an earthquake despite the fact that [mask].", "constraint": "[height, hill, increase, hills, erosion], [no]", "generation": "The height of building will decrease because building is strike by an earthquake despite the fact that there is no erosion."}
{"input": "The height of building will decrease because building is strike by an earthquake even though [mask].", "constraint": "[increase, height, hills, erosion, hill]", "generation": "The height of building will decrease because building is strike by an earthquake even though the height of hills is increased."}
{"input": "The height of building will decrease because building is strike by an earthquake even though [mask].", "constraint": "[increase, height, hills, erosion, hill]", "generation": "The height of building will decrease because building is strike by an earthquake even though height of hills is increased."}
{"input": "The height of building will decrease because building is strike by an earthquake even though [mask].", "constraint": "[increase, height, hills, erosion, hill]", "generation": "The height of building will decrease because building is strike by an earthquake even though the height of hills increases."}
{"input": "The height of building will decrease because building is strike by an earthquake even though [mask].", "constraint": "[erosion, increase, height, hill, hills], [no]", "generation": "The height of building will decrease because building is strike by an earthquake even though no erosion has increased the height of the hill."}
{"input": "The height of moon will decrease because earth's gravity be is and [mask].", "constraint": "[clouds, pressure, air, decrease], [no]", "generation": "The height of moon will decrease because earth's gravity be is and there are no clouds in the sky."}
{"input": "The height of moon will decrease because earth's gravity be is despite the fact that [mask].", "constraint": "[clouds, pressure, air, decrease]", "generation": "The height of moon will decrease because earth's gravity be is despite the fact that there is less air pressure."}
{"input": "The height of moon will decrease because earth's gravity be is despite the fact that [mask].", "constraint": "[clouds, pressure, air, decrease]", "generation": "The height of moon will decrease because earth's gravity be is despite the fact that there is no air pressure."}
{"input": "The height of moon will decrease because earth's gravity be is despite the fact that [mask].", "constraint": "[clouds, pressure, air, decrease]", "generation": "The height of moon will decrease because earth's gravity be is despite the fact that there are no clouds in the sky."}
{"input": "The height of moon will decrease because earth's gravity be is despite the fact that [mask].", "constraint": "[air, clouds, pressure, decrease], [no]", "generation": "The height of moon will decrease because earth's gravity be is despite the fact that there is no air pressure."}
{"input": "The height of moon will decrease because earth's gravity be is even though [mask].", "constraint": "[decrease, clouds, air, pressure]", "generation": "The height of moon will decrease because earth's gravity be is even though the air pressure decreases."}
{"input": "The height of moon will decrease because earth's gravity be is even though [mask].", "constraint": "[clouds, air, pressure, decrease], [no]", "generation": "The height of moon will decrease because earth's gravity be is even though no moon is above the clouds."}
{"input": "The height of moon will decrease because earth's gravity be is even though [mask].", "constraint": "[clouds, air, pressure, decrease], [no]", "generation": "The height of moon will decrease because earth's gravity be is even though there are no clouds in the sky."}
{"input": "The energy of fire will increase because fuel be adds and [mask].", "constraint": "[sun]", "generation": "The energy of fire will increase because fuel be adds and the sun provides energy."}
{"input": "The energy of fire will increase because fuel be adds and [mask].", "constraint": "[sun]", "generation": "The energy of fire will increase because fuel be adds and sun's light shines on."}
{"input": "The energy of fire will increase because fuel be adds and [mask].", "constraint": "[sun]", "generation": "The energy of fire will increase because fuel be adds and sun be sets."}
{"input": "The energy of fire will increase because fuel be adds while [mask].", "constraint": "[sun]", "generation": "The energy of fire will increase because fuel be adds while sun is being covered by clouds."}
{"input": "The energy of fire will increase because fuel be adds while [mask].", "constraint": "[sun], [no]", "generation": "The energy of fire will increase because fuel be adds while no sun shines."}
{"input": "The energy of fire will increase because fuel be adds while [mask].", "constraint": "[sun], [no]", "generation": "The energy of fire will increase because fuel be adds while no sunlight is available."}
{"input": "The energy of fire will increase because fuel be adds despite the fact that [mask].", "constraint": "[sun], [no]", "generation": "The energy of fire will increase because fuel be adds despite the fact that there is no sun."}
{"input": "The energy of fire will increase because fuel be adds despite the fact that [mask].", "constraint": "[sun], [no]", "generation": "The energy of fire will increase because fuel be adds despite the fact that no sun shines."}
{"input": "The energy of fire will increase because fuel be adds even though [mask].", "constraint": "[sun]", "generation": "The energy of fire will increase because fuel be adds even though the sun is not there."}
{"input": "The energy of fire will increase because fuel be adds even though [mask].", "constraint": "[sun], [no]", "generation": "The energy of fire will increase because fuel be adds even though there is no sunlight."}
{"input": "The energy of fire will increase because fuel be adds even though [mask].", "constraint": "[sun], [no]", "generation": "The energy of fire will increase because fuel be adds even though there is no sun."}
{"input": "The current of speed will decrease because personX increases the resistance and [mask].", "constraint": "[add, light, bulb]", "generation": "The current of speed will decrease because personX increases the resistance and bulb is added to the light."}
{"input": "The current of speed will decrease because personX increases the resistance and [mask].", "constraint": "[add, light, bulb]", "generation": "The current of speed will decrease because personX increases the resistance and add more light bulbs."}
{"input": "The current of speed will decrease because personX increases the resistance and [mask].", "constraint": "[add, light, bulb]", "generation": "The current of speed will decrease because personX increases the resistance and the lightbulb is turned off."}
{"input": "The current of speed will decrease because personX increases the resistance and [mask].", "constraint": "[light, add, bulb], [no]", "generation": "The current of speed will decrease because personX increases the resistance and there is no light source."}
{"input": "The current of speed will decrease because personX increases the resistance and [mask].", "constraint": "[light, add, bulb], [no]", "generation": "The current of speed will decrease because personX increases the resistance and there is no light bulb."}
{"input": "The current of speed will decrease because personX increases the resistance and [mask].", "constraint": "[light, add, bulb], [no]", "generation": "The current of speed will decrease because personX increases the resistance and there is no lightbulb inside."}
{"input": "The current of speed will decrease because personX increases the resistance while [mask].", "constraint": "[bulb, add, light]", "generation": "The current of speed will decrease because personX increases the resistance while the bulb is turned on."}
{"input": "The current of speed will decrease because personX increases the resistance while [mask].", "constraint": "[bulb, add, light]", "generation": "The current of speed will decrease because personX increases the resistance while the speed of light is added."}
{"input": "The current of speed will decrease because personX increases the resistance while [mask].", "constraint": "[bulb, add, light]", "generation": "The current of speed will decrease because personX increases the resistance while he changes the light bulb."}
{"input": "The current of speed will decrease because personX increases the resistance while [mask].", "constraint": "[bulb, light, add], [no]", "generation": "The current of speed will decrease because personX increases the resistance while there is no additional light bulb."}
{"input": "The current of speed will decrease because personX increases the resistance while [mask].", "constraint": "[bulb, light, add], [no]", "generation": "The current of speed will decrease because personX increases the resistance while there is no light."}
{"input": "The current of speed will decrease because personX increases the resistance despite the fact that [mask].", "constraint": "[bulb, light, add]", "generation": "The current of speed will decrease because personX increases the resistance despite the fact that he already added a light bulb."}
{"input": "The current of speed will decrease because personX increases the resistance despite the fact that [mask].", "constraint": "[bulb, light, add]", "generation": "The current of speed will decrease because personX increases the resistance despite the fact that he adds more light bulbs."}
{"input": "The current of speed will decrease because personX increases the resistance despite the fact that [mask].", "constraint": "[bulb, light, add]", "generation": "The current of speed will decrease because personX increases the resistance despite the fact that he wants to add more light bulbs."}
{"input": "The current of speed will decrease because personX increases the resistance despite the fact that [mask].", "constraint": "[bulb, light, add], [no]", "generation": "The current of speed will decrease because personX increases the resistance despite the fact that he does not add more light bulbs."}
{"input": "The current of speed will decrease because personX increases the resistance despite the fact that [mask].", "constraint": "[bulb, light, add], [no]", "generation": "The current of speed will decrease because personX increases the resistance despite the fact that there is no lightbulb."}
{"input": "The current of speed will decrease because personX increases the resistance despite the fact that [mask].", "constraint": "[bulb, light, add], [no]", "generation": "The current of speed will decrease because personX increases the resistance despite the fact that there is no light bulb."}
{"input": "The current of speed will decrease because personX increases the resistance even though [mask].", "constraint": "[light, bulb, add]", "generation": "The current of speed will decrease because personX increases the resistance even though he adds more light bulbs."}
{"input": "The current of speed will decrease because personX increases the resistance even though [mask].", "constraint": "[light, bulb, add]", "generation": "The current of speed will decrease because personX increases the resistance even though he adds a new light bulb."}
{"input": "The current of speed will decrease because personX increases the resistance even though [mask].", "constraint": "[light, bulb, add]", "generation": "The current of speed will decrease because personX increases the resistance even though the light bulb is already added."}
{"input": "The current of speed will decrease because personX increases the resistance even though [mask].", "constraint": "[add, bulb, light], [no]", "generation": "The current of speed will decrease because personX increases the resistance even though he does not add light to the bulb."}
{"input": "The current of speed will decrease because personX increases the resistance even though [mask].", "constraint": "[add, bulb, light], [no]", "generation": "The current of speed will decrease because personX increases the resistance even though he does not add light bulb."}
{"input": "The volume of heartbeat will increase because personX has anxiety and [mask].", "constraint": "[light, cover, light, hand]", "generation": "The volume of heartbeat will increase because personX has anxiety and covers up his hand."}
{"input": "The volume of heartbeat will increase because personX has anxiety and [mask].", "constraint": "[light, cover, light, hand]", "generation": "The volume of heartbeat will increase because personX has anxiety and his hands are covered with light."}
{"input": "The volume of heartbeat will increase because personX has anxiety and [mask].", "constraint": "[light, cover, light, hand]", "generation": "The volume of heartbeat will increase because personX has anxiety and his hand is covering his heart."}
{"input": "The volume of heartbeat will increase because personX has anxiety and [mask].", "constraint": "[cover, light, light, hand], [no]", "generation": "The volume of heartbeat will increase because personX has anxiety and his hand is not covering his heart."}
{"input": "The volume of heartbeat will increase because personX has anxiety while [mask].", "constraint": "[light, cover, light, hand]", "generation": "The volume of heartbeat will increase because personX has anxiety while the room is covered with light."}
{"input": "The volume of heartbeat will increase because personX has anxiety while [mask].", "constraint": "[light, cover, light, hand]", "generation": "The volume of heartbeat will increase because personX has anxiety while there is no light and somebody covers his hand."}
{"input": "The volume of heartbeat will increase because personX has anxiety while [mask].", "constraint": "[light, cover, light, hand]", "generation": "The volume of heartbeat will increase because personX has anxiety while the hand covers the light."}
{"input": "The volume of heartbeat will increase because personX has anxiety despite the fact that [mask].", "constraint": "[hand, cover, light, light]", "generation": "The volume of heartbeat will increase because personX has anxiety despite the fact that he covers his hand."}
{"input": "The volume of heartbeat will increase because personX has anxiety despite the fact that [mask].", "constraint": "[hand, cover, light, light]", "generation": "The volume of heartbeat will increase because personX has anxiety despite the fact that his hands are covered."}
{"input": "The volume of heartbeat will increase because personX has anxiety despite the fact that [mask].", "constraint": "[hand, cover, light, light]", "generation": "The volume of heartbeat will increase because personX has anxiety despite the fact that he covers his hands with light."}
{"input": "The volume of heartbeat will increase because personX has anxiety despite the fact that [mask].", "constraint": "[light, hand, light, cover], [no]", "generation": "The volume of heartbeat will increase because personX has anxiety despite the fact that his hands are not covered with light."}
{"input": "The volume of heartbeat will increase because personX has anxiety despite the fact that [mask].", "constraint": "[light, hand, light, cover], [no]", "generation": "The volume of heartbeat will increase because personX has anxiety despite the fact that he is not covered by a blanket."}
{"input": "The volume of heartbeat will increase because personX has anxiety despite the fact that [mask].", "constraint": "[light, hand, light, cover], [no]", "generation": "The volume of heartbeat will increase because personX has anxiety despite the fact that he is not covered by a hand."}
{"input": "The volume of heartbeat will increase because personX has anxiety even though [mask].", "constraint": "[light, cover, hand, light]", "generation": "The volume of heartbeat will increase because personX has anxiety even though he puts his hand on his chest."}
{"input": "The volume of heartbeat will increase because personX has anxiety even though [mask].", "constraint": "[light, cover, hand, light]", "generation": "The volume of heartbeat will increase because personX has anxiety even though the room is covered with a blanket."}
{"input": "The volume of heartbeat will increase because personX has anxiety even though [mask].", "constraint": "[light, cover, hand, light]", "generation": "The volume of heartbeat will increase because personX has anxiety even though the light is covered."}
{"input": "The volume of heartbeat will increase because personX has anxiety even though [mask].", "constraint": "[light, light, hand, cover], [no]", "generation": "The volume of heartbeat will increase because personX has anxiety even though he is not covered by hand."}
{"input": "The volume of heartbeat will increase because personX has anxiety even though [mask].", "constraint": "[light, light, hand, cover], [no]", "generation": "The volume of heartbeat will increase because personX has anxiety even though his hand is not covered."}
{"input": "The electric field strength of static electricity will decrease because the charge be removes while [mask].", "constraint": "[refrigerator, insulator, add]", "generation": "The electric field strength of static electricity will decrease because the charge be removes while the refrigerator is turned on."}
{"input": "The electric field strength of static electricity will decrease because the charge be removes despite the fact that [mask].", "constraint": "[insulator, refrigerator, add]", "generation": "The electric field strength of static electricity will decrease because the charge be removes despite the fact that an insulator is used."}
{"input": "The electric field strength of static electricity will decrease because the charge be removes despite the fact that [mask].", "constraint": "[insulator, refrigerator, add]", "generation": "The electric field strength of static electricity will decrease because the charge be removes despite the fact that an insulator is added."}
{"input": "The electric field strength of static electricity will decrease because the charge be removes despite the fact that [mask].", "constraint": "[refrigerator, add, insulator], [no]", "generation": "The electric field strength of static electricity will decrease because the charge be removes despite the fact that there are no insulators around."}
{"input": "The electric field strength of static electricity will decrease because the charge be removes despite the fact that [mask].", "constraint": "[refrigerator, add, insulator], [no]", "generation": "The electric field strength of static electricity will decrease because the charge be removes despite the fact that no more charge is added."}
{"input": "The electric field strength of static electricity will decrease because the charge be removes even though [mask].", "constraint": "[refrigerator, insulator, add]", "generation": "The electric field strength of static electricity will decrease because the charge be removes even though it is not an insulator."}
{"input": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object and [mask].", "constraint": "[source, increase, radiation, distance, radiation from outer space]", "generation": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object and the source is increased."}
{"input": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object and [mask].", "constraint": "[source, increase, radiation, distance, radiation from outer space]", "generation": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object and the source of radiation is increased."}
{"input": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object and [mask].", "constraint": "[source, increase, radiation, distance, radiation from outer space]", "generation": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object and radiation from outer space is more intense."}
{"input": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object and [mask].", "constraint": "[source, distance, radiation, radiation from outer space, increase], [no]", "generation": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object and no other x-ray sources are present."}
{"input": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object and [mask].", "constraint": "[source, distance, radiation, radiation from outer space, increase], [no]", "generation": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object and there is no source to block the radiation."}
{"input": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object while [mask].", "constraint": "[increase, radiation, source, radiation from outer space, distance]", "generation": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object while the radiation source is getting closer."}
{"input": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object while [mask].", "constraint": "[increase, radiation, source, radiation from outer space, distance]", "generation": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object while the source of radiation is getting closer."}
{"input": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object while [mask].", "constraint": "[increase, radiation, source, radiation from outer space, distance]", "generation": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object while the source of x-rays is closer."}
{"input": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object while [mask].", "constraint": "[radiation from outer space, radiation, increase, source, distance], [no]", "generation": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object while there is no distance from the radiation source."}
{"input": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object while [mask].", "constraint": "[radiation from outer space, radiation, increase, source, distance], [no]", "generation": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object while no other radiation source is present."}
{"input": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object while [mask].", "constraint": "[radiation from outer space, radiation, increase, source, distance], [no]", "generation": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object while no other source of radiation is present."}
{"input": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object despite the fact that [mask].", "constraint": "[increase, distance, source, radiation from outer space, radiation]", "generation": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object despite the fact that the source of radiation is from outer space."}
{"input": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object despite the fact that [mask].", "constraint": "[increase, distance, source, radiation from outer space, radiation]", "generation": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object despite the fact that the distance from the source is great."}
{"input": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object despite the fact that [mask].", "constraint": "[radiation from outer space, increase, distance, source, radiation], [no]", "generation": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object despite the fact that there is no increase in the distance from the source."}
{"input": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object despite the fact that [mask].", "constraint": "[radiation from outer space, increase, distance, source, radiation], [no]", "generation": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object despite the fact that he is not close to the source."}
{"input": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object even though [mask].", "constraint": "[radiation from outer space, radiation, distance, increase, source]", "generation": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object even though radiation from outer space is the source."}
{"input": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object even though [mask].", "constraint": "[radiation from outer space, radiation, distance, increase, source]", "generation": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object even though the radiation dose is low."}
{"input": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object even though [mask].", "constraint": "[radiation from outer space, radiation, distance, increase, source]", "generation": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object even though the source of radiation is from outer space."}
{"input": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object even though [mask].", "constraint": "[radiation, distance, radiation from outer space, source, increase], [no]", "generation": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object even though no other source of x-rays is present."}
{"input": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object even though [mask].", "constraint": "[radiation, distance, radiation from outer space, source, increase], [no]", "generation": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object even though there is no source of radiation from outer space."}
{"input": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object even though [mask].", "constraint": "[radiation, distance, radiation from outer space, source, increase], [no]", "generation": "The radiation dose of x-rays will increase because personX x-rays bounce off bounces metal object even though there is no other source of x-rays."}
{"input": "The work of tide will increase because personX the wind blows across the water's surface and [mask].", "constraint": "[filament, burn, light bulb, bulb]", "generation": "The work of tide will increase because personX the wind blows across the water's surface and the light bulb filament is burned out."}
{"input": "The work of tide will increase because personX the wind blows across the water's surface and [mask].", "constraint": "[filament, burn, light bulb, bulb]", "generation": "The work of tide will increase because personX the wind blows across the water's surface and light bulb in the water."}
{"input": "The work of tide will increase because personX the wind blows across the water's surface and [mask].", "constraint": "[bulb, light bulb, burn, filament], [no]", "generation": "The work of tide will increase because personX the wind blows across the water's surface and there is no light bulb."}
{"input": "The work of tide will increase because personX the wind blows across the water's surface while [mask].", "constraint": "[filament, bulb, light bulb, burn]", "generation": "The work of tide will increase because personX the wind blows across the water's surface while the light bulb is not burned out."}
{"input": "The work of tide will increase because personX the wind blows across the water's surface while [mask].", "constraint": "[filament, bulb, light bulb, burn]", "generation": "The work of tide will increase because personX the wind blows across the water's surface while the filament in the light bulb is not burned out."}
{"input": "The work of tide will increase because personX the wind blows across the water's surface while [mask].", "constraint": "[filament, bulb, light bulb, burn]", "generation": "The work of tide will increase because personX the wind blows across the water's surface while the light bulb is burned out."}
{"input": "The work of tide will increase because personX the wind blows across the water's surface while [mask].", "constraint": "[burn, light bulb, filament, bulb], [no]", "generation": "The work of tide will increase because personX the wind blows across the water's surface while there is no light bulb."}
{"input": "The work of tide will increase because personX the wind blows across the water's surface while [mask].", "constraint": "[burn, light bulb, filament, bulb], [no]", "generation": "The work of tide will increase because personX the wind blows across the water's surface while the light bulb is not lighted."}
{"input": "The work of tide will increase because personX the wind blows across the water's surface despite the fact that [mask].", "constraint": "[filament, burn, light bulb, bulb]", "generation": "The work of tide will increase because personX the wind blows across the water's surface despite the fact that there is no light bulb."}
{"input": "The work of tide will increase because personX the wind blows across the water's surface despite the fact that [mask].", "constraint": "[filament, burn, light bulb, bulb]", "generation": "The work of tide will increase because personX the wind blows across the water's surface despite the fact that the light bulb is burned out."}
{"input": "The work of tide will increase because personX the wind blows across the water's surface despite the fact that [mask].", "constraint": "[filament, burn, light bulb, bulb]", "generation": "The work of tide will increase because personX the wind blows across the water's surface despite the fact that the filament in the light bulb is burned."}
{"input": "The work of tide will increase because personX the wind blows across the water's surface despite the fact that [mask].", "constraint": "[filament, bulb, light bulb, burn], [no]", "generation": "The work of tide will increase because personX the wind blows across the water's surface despite the fact that there is no light bulb."}
{"input": "The work of tide will increase because personX the wind blows across the water's surface despite the fact that [mask].", "constraint": "[filament, bulb, light bulb, burn], [no]", "generation": "The work of tide will increase because personX the wind blows across the water's surface despite the fact that the bulb is not burned out."}
{"input": "The work of tide will increase because personX the wind blows across the water's surface even though [mask].", "constraint": "[bulb, light bulb, burn, filament]", "generation": "The work of tide will increase because personX the wind blows across the water's surface even though the light bulb is burned out."}
{"input": "The work of tide will increase because personX the wind blows across the water's surface even though [mask].", "constraint": "[bulb, light bulb, burn, filament]", "generation": "The work of tide will increase because personX the wind blows across the water's surface even though there is no light bulb."}
{"input": "The work of tide will increase because personX the wind blows across the water's surface even though [mask].", "constraint": "[bulb, light bulb, burn, filament]", "generation": "The work of tide will increase because personX the wind blows across the water's surface even though it is not a light bulb."}
{"input": "The work of tide will increase because personX the wind blows across the water's surface even though [mask].", "constraint": "[filament, light bulb, burn, bulb], [no]", "generation": "The work of tide will increase because personX the wind blows across the water's surface even though the light bulb is not lighted."}
{"input": "The work of tide will increase because personX the wind blows across the water's surface even though [mask].", "constraint": "[filament, light bulb, burn, bulb], [no]", "generation": "The work of tide will increase because personX the wind blows across the water's surface even though there is no bulb."}
{"input": "The work of tide will increase because personX the wind blows across the water's surface even though [mask].", "constraint": "[filament, light bulb, burn, bulb], [no]", "generation": "The work of tide will increase because personX the wind blows across the water's surface even though he does not put a light bulb in his lamp."}
{"input": "The work of river will decrease because erosion decreases the work of river and [mask].", "constraint": "[put, sun, container, water in a container]", "generation": "The work of river will decrease because erosion decreases the work of river and putting water in a container."}
{"input": "The work of river will decrease because erosion decreases the work of river and [mask].", "constraint": "[put, sun, container, water in a container]", "generation": "The work of river will decrease because erosion decreases the work of river and water in a container is evaporated by put it under the sun."}
{"input": "The work of river will decrease because erosion decreases the work of river and [mask].", "constraint": "[put, sun, container, water in a container]", "generation": "The work of river will decrease because erosion decreases the work of river and water in a container is decreased."}
{"input": "The work of river will decrease because erosion decreases the work of river and [mask].", "constraint": "[put, water in a container, container, sun], [no]", "generation": "The work of river will decrease because erosion decreases the work of river and there is no water in the container."}
{"input": "The work of river will decrease because erosion decreases the work of river and [mask].", "constraint": "[put, water in a container, container, sun], [no]", "generation": "The work of river will decrease because erosion decreases the work of river and no more water is available to put in the container."}
{"input": "The work of river will decrease because erosion decreases the work of river and [mask].", "constraint": "[put, water in a container, container, sun], [no]", "generation": "The work of river will decrease because erosion decreases the work of river and there is no container to put water in."}
{"input": "The work of river will decrease because erosion decreases the work of river while [mask].", "constraint": "[sun, put, water in a container, container]", "generation": "The work of river will decrease because erosion decreases the work of river while putting water in a container."}
{"input": "The work of river will decrease because erosion decreases the work of river while [mask].", "constraint": "[sun, put, water in a container, container]", "generation": "The work of river will decrease because erosion decreases the work of river while the sun shines."}
{"input": "The work of river will decrease because erosion decreases the work of river while [mask].", "constraint": "[sun, put, water in a container, container]", "generation": "The work of river will decrease because erosion decreases the work of river while the container is put under the sun."}
{"input": "The work of river will decrease because erosion decreases the work of river while [mask].", "constraint": "[put, container, sun, water in a container], [no]", "generation": "The work of river will decrease because erosion decreases the work of river while there is no water in a container."}
{"input": "The work of river will decrease because erosion decreases the work of river while [mask].", "constraint": "[put, container, sun, water in a container], [no]", "generation": "The work of river will decrease because erosion decreases the work of river while the container is not put under the sun."}
{"input": "The work of river will decrease because erosion decreases the work of river while [mask].", "constraint": "[put, container, sun, water in a container], [no]", "generation": "The work of river will decrease because erosion decreases the work of river while there is no container to put water in."}
{"input": "The work of river will decrease because erosion decreases the work of river despite the fact that [mask].", "constraint": "[put, sun, container, water in a container]", "generation": "The work of river will decrease because erosion decreases the work of river despite the fact that water is put in a container."}
{"input": "The work of river will decrease because erosion decreases the work of river despite the fact that [mask].", "constraint": "[put, sun, container, water in a container]", "generation": "The work of river will decrease because erosion decreases the work of river despite the fact that the water in a container is put under the sun."}
{"input": "The work of river will decrease because erosion decreases the work of river despite the fact that [mask].", "constraint": "[put, sun, container, water in a container]", "generation": "The work of river will decrease because erosion decreases the work of river despite the fact that people put water in a container."}
{"input": "The work of river will decrease because erosion decreases the work of river despite the fact that [mask].", "constraint": "[container, put, sun, water in a container], [no]", "generation": "The work of river will decrease because erosion decreases the work of river despite the fact that there is no water in a container."}
{"input": "The work of river will decrease because erosion decreases the work of river even though [mask].", "constraint": "[put, container, sun, water in a container]", "generation": "The work of river will decrease because erosion decreases the work of river even though the water in a container is put under the sun."}
{"input": "The work of river will decrease because erosion decreases the work of river even though [mask].", "constraint": "[put, container, sun, water in a container]", "generation": "The work of river will decrease because erosion decreases the work of river even though water is put in a container."}
{"input": "The work of river will decrease because erosion decreases the work of river even though [mask].", "constraint": "[put, container, sun, water in a container]", "generation": "The work of river will decrease because erosion decreases the work of river even though water is put in a container under the sun."}
{"input": "The work of river will decrease because erosion decreases the work of river even though [mask].", "constraint": "[container, water in a container, put, sun], [no]", "generation": "The work of river will decrease because erosion decreases the work of river even though there is no sun."}
{"input": "The work of river will decrease because erosion decreases the work of river even though [mask].", "constraint": "[container, water in a container, put, sun], [no]", "generation": "The work of river will decrease because erosion decreases the work of river even though there is no water in a container."}
{"input": "The work of money in a bank account will decrease because personX withdraws money and [mask].", "constraint": "[liquid, container, liquid in a container, pour]", "generation": "The work of money in a bank account will decrease because personX withdraws money and pours it into a container."}
{"input": "The work of money in a bank account will decrease because personX withdraws money and [mask].", "constraint": "[liquid, container, liquid in a container, pour]", "generation": "The work of money in a bank account will decrease because personX withdraws money and pours the liquid into the container."}
{"input": "The work of money in a bank account will decrease because personX withdraws money and [mask].", "constraint": "[container, liquid in a container, pour, liquid], [no]", "generation": "The work of money in a bank account will decrease because personX withdraws money and there is no container to hold the money."}
{"input": "The work of money in a bank account will decrease because personX withdraws money while [mask].", "constraint": "[liquid in a container, container, pour, liquid]", "generation": "The work of money in a bank account will decrease because personX withdraws money while the container is not full."}
{"input": "The work of money in a bank account will decrease because personX withdraws money while [mask].", "constraint": "[liquid in a container, container, pour, liquid]", "generation": "The work of money in a bank account will decrease because personX withdraws money while there is no container to pour the liquid."}
{"input": "The work of money in a bank account will decrease because personX withdraws money while [mask].", "constraint": "[liquid in a container, container, pour, liquid]", "generation": "The work of money in a bank account will decrease because personX withdraws money while the liquid is in a container."}
{"input": "The work of money in a bank account will decrease because personX withdraws money while [mask].", "constraint": "[pour, liquid in a container, container, liquid], [no]", "generation": "The work of money in a bank account will decrease because personX withdraws money while there is no container."}
{"input": "The work of money in a bank account will decrease because personX withdraws money despite the fact that [mask].", "constraint": "[liquid, liquid in a container, pour, container]", "generation": "The work of money in a bank account will decrease because personX withdraws money despite the fact that he is not allowed to pour the liquid in a container."}
{"input": "The work of money in a bank account will decrease because personX withdraws money despite the fact that [mask].", "constraint": "[liquid, liquid in a container, pour, container]", "generation": "The work of money in a bank account will decrease because personX withdraws money despite the fact that he has a lot of liquid in a container."}
{"input": "The work of money in a bank account will decrease because personX withdraws money despite the fact that [mask].", "constraint": "[liquid, liquid in a container, pour, container]", "generation": "The work of money in a bank account will decrease because personX withdraws money despite the fact that there is not much liquid in a container."}
{"input": "The work of money in a bank account will decrease because personX withdraws money despite the fact that [mask].", "constraint": "[liquid in a container, pour, liquid, container], [no]", "generation": "The work of money in a bank account will decrease because personX withdraws money despite the fact that there is not much liquid in the container."}
{"input": "The work of money in a bank account will decrease because personX withdraws money despite the fact that [mask].", "constraint": "[liquid in a container, pour, liquid, container], [no]", "generation": "The work of money in a bank account will decrease because personX withdraws money despite the fact that he does not have enough liquid in a container."}
{"input": "The work of money in a bank account will decrease because personX withdraws money even though [mask].", "constraint": "[container, liquid, liquid in a container, pour]", "generation": "The work of money in a bank account will decrease because personX withdraws money even though the container is not full."}
{"input": "The work of money in a bank account will decrease because personX withdraws money even though [mask].", "constraint": "[container, liquid, liquid in a container, pour]", "generation": "The work of money in a bank account will decrease because personX withdraws money even though he puts it in a container."}
{"input": "The work of money in a bank account will decrease because personX withdraws money even though [mask].", "constraint": "[container, liquid, liquid in a container, pour]", "generation": "The work of money in a bank account will decrease because personX withdraws money even though he pours all the liquid in the container."}
{"input": "The work of money in a bank account will decrease because personX withdraws money even though [mask].", "constraint": "[liquid in a container, container, pour, liquid], [no]", "generation": "The work of money in a bank account will decrease because personX withdraws money even though there is no liquid in a container."}
{"input": "The work of money in a bank account will decrease because personX withdraws money even though [mask].", "constraint": "[liquid in a container, container, pour, liquid], [no]", "generation": "The work of money in a bank account will decrease because personX withdraws money even though he does not have enough liquid in a container."}
{"input": "The conductance of water will decrease because personX water evaporates and [mask].", "constraint": "[temperature, increase, metal]", "generation": "The conductance of water will decrease because personX water evaporates and the temperature increases."}
{"input": "The conductance of water will decrease because personX water evaporates and [mask].", "constraint": "[temperature, increase, metal]", "generation": "The conductance of water will decrease because personX water evaporates and the temperature increase."}
{"input": "The conductance of water will decrease because personX water evaporates and [mask].", "constraint": "[metal, temperature, increase], [no]", "generation": "The conductance of water will decrease because personX water evaporates and the temperature does not increase."}
{"input": "The conductance of water will decrease because personX water evaporates and [mask].", "constraint": "[metal, temperature, increase], [no]", "generation": "The conductance of water will decrease because personX water evaporates and there is no metal in water."}
{"input": "The conductance of water will decrease because personX water evaporates while [mask].", "constraint": "[temperature, increase, metal]", "generation": "The conductance of water will decrease because personX water evaporates while temperature increases."}
{"input": "The conductance of water will decrease because personX water evaporates while [mask].", "constraint": "[temperature, increase, metal]", "generation": "The conductance of water will decrease because personX water evaporates while the temperature increases."}
{"input": "The conductance of water will decrease because personX water evaporates while [mask].", "constraint": "[temperature, increase, metal]", "generation": "The conductance of water will decrease because personX water evaporates while the temperature does not increase."}
{"input": "The conductance of water will decrease because personX water evaporates while [mask].", "constraint": "[metal, increase, temperature], [no]", "generation": "The conductance of water will decrease because personX water evaporates while the temperature does not increase."}
{"input": "The conductance of water will decrease because personX water evaporates despite the fact that [mask].", "constraint": "[temperature, increase, metal]", "generation": "The conductance of water will decrease because personX water evaporates despite the fact that the temperature increases."}
{"input": "The conductance of water will decrease because personX water evaporates despite the fact that [mask].", "constraint": "[temperature, increase, metal]", "generation": "The conductance of water will decrease because personX water evaporates despite the fact that the temperature does not increase."}
{"input": "The conductance of water will decrease because personX water evaporates despite the fact that [mask].", "constraint": "[temperature, increase, metal]", "generation": "The conductance of water will decrease because personX water evaporates despite the fact that temperature does not increase."}
{"input": "The conductance of water will decrease because personX water evaporates despite the fact that [mask].", "constraint": "[increase, temperature, metal], [no]", "generation": "The conductance of water will decrease because personX water evaporates despite the fact that no metal is heated."}
{"input": "The conductance of water will decrease because personX water evaporates despite the fact that [mask].", "constraint": "[increase, temperature, metal], [no]", "generation": "The conductance of water will decrease because personX water evaporates despite the fact that the temperature does not increase."}
{"input": "The conductance of water will decrease because personX water evaporates despite the fact that [mask].", "constraint": "[increase, temperature, metal], [no]", "generation": "The conductance of water will decrease because personX water evaporates despite the fact that there is no temperature increase."}
{"input": "The conductance of water will decrease because personX water evaporates even though [mask].", "constraint": "[temperature, increase, metal]", "generation": "The conductance of water will decrease because personX water evaporates even though the temperature increases."}
{"input": "The conductance of water will decrease because personX water evaporates even though [mask].", "constraint": "[temperature, increase, metal]", "generation": "The conductance of water will decrease because personX water evaporates even though the temperature does not increase."}
{"input": "The conductance of water will decrease because personX water evaporates even though [mask].", "constraint": "[increase, temperature, metal], [no]", "generation": "The conductance of water will decrease because personX water evaporates even though the temperature does not increase."}
{"input": "The stress of stress : appetite will decrease because personX and not spends enough time outdoors and [mask].", "constraint": "[drink, metabolism, caffeine]", "generation": "The stress of stress : appetite will decrease because personX and not spends enough time outdoors and has a slow metabolism."}
{"input": "The stress of stress : appetite will decrease because personX and not spends enough time outdoors and [mask].", "constraint": "[drink, metabolism, caffeine]", "generation": "The stress of stress : appetite will decrease because personX and not spends enough time outdoors and caffeine increases metabolism."}
{"input": "The stress of stress : appetite will decrease because personX and not spends enough time outdoors and [mask].", "constraint": "[drink, metabolism, caffeine]", "generation": "The stress of stress : appetite will decrease because personX and not spends enough time outdoors and do not drink caffeine."}
{"input": "The stress of stress : appetite will decrease because personX and not spends enough time outdoors and [mask].", "constraint": "[metabolism, drink, caffeine], [no]", "generation": "The stress of stress : appetite will decrease because personX and not spends enough time outdoors and not drinks caffeine."}
{"input": "The stress of stress : appetite will decrease because personX and not spends enough time outdoors and [mask].", "constraint": "[metabolism, drink, caffeine], [no]", "generation": "The stress of stress : appetite will decrease because personX and not spends enough time outdoors and his metabolism is not working properly."}
{"input": "The stress of stress : appetite will decrease because personX and not spends enough time outdoors while [mask].", "constraint": "[drink, metabolism, caffeine]", "generation": "The stress of stress : appetite will decrease because personX and not spends enough time outdoors while metabolism is slow."}
{"input": "The stress of stress : appetite will decrease because personX and not spends enough time outdoors despite the fact that [mask].", "constraint": "[drink, caffeine, metabolism]", "generation": "The stress of stress : appetite will decrease because personX and not spends enough time outdoors despite the fact that his metabolism rate is high."}
{"input": "The stress of stress : appetite will decrease because personX and not spends enough time outdoors despite the fact that [mask].", "constraint": "[caffeine, drink, metabolism], [no]", "generation": "The stress of stress : appetite will decrease because personX and not spends enough time outdoors despite the fact that he does not drink caffeine."}
{"input": "The stress of school will decrease because personX develops a study schedule and stick to it and [mask].", "constraint": "[health, work]", "generation": "The stress of school will decrease because personX develops a study schedule and stick to it and takes care of his health."}
{"input": "The stress of school will decrease because personX develops a study schedule and stick to it and [mask].", "constraint": "[health, work]", "generation": "The stress of school will decrease because personX develops a study schedule and stick to it and his health improves."}
{"input": "The stress of school will decrease because personX develops a study schedule and stick to it and [mask].", "constraint": "[health, work]", "generation": "The stress of school will decrease because personX develops a study schedule and stick to it and his health is improving."}
{"input": "The stress of school will decrease because personX develops a study schedule and stick to it and [mask].", "constraint": "[health, work], [no]", "generation": "The stress of school will decrease because personX develops a study schedule and stick to it and he has no health issues."}
{"input": "The stress of school will decrease because personX develops a study schedule and stick to it and [mask].", "constraint": "[health, work], [no]", "generation": "The stress of school will decrease because personX develops a study schedule and stick to it and he has no health problems."}
{"input": "The stress of school will decrease because personX develops a study schedule and stick to it while [mask].", "constraint": "[health, work]", "generation": "The stress of school will decrease because personX develops a study schedule and stick to it while taking care of his health."}
{"input": "The stress of school will decrease because personX develops a study schedule and stick to it while [mask].", "constraint": "[health, work]", "generation": "The stress of school will decrease because personX develops a study schedule and stick to it while working on a part-time job."}
{"input": "The stress of school will decrease because personX develops a study schedule and stick to it while [mask].", "constraint": "[health, work]", "generation": "The stress of school will decrease because personX develops a study schedule and stick to it while working."}
{"input": "The stress of school will decrease because personX develops a study schedule and stick to it despite the fact that [mask].", "constraint": "[work, health]", "generation": "The stress of school will decrease because personX develops a study schedule and stick to it despite the fact that she has a lot of work."}
{"input": "The stress of school will decrease because personX develops a study schedule and stick to it despite the fact that [mask].", "constraint": "[work, health]", "generation": "The stress of school will decrease because personX develops a study schedule and stick to it despite the fact that he has a lot of work."}
{"input": "The stress of school will decrease because personX develops a study schedule and stick to it despite the fact that [mask].", "constraint": "[work, health]", "generation": "The stress of school will decrease because personX develops a study schedule and stick to it despite the fact that she is working full-time."}
{"input": "The stress of school will decrease because personX develops a study schedule and stick to it despite the fact that [mask].", "constraint": "[health, work], [no]", "generation": "The stress of school will decrease because personX develops a study schedule and stick to it despite the fact that personX has no health problems."}
{"input": "The stress of school will decrease because personX develops a study schedule and stick to it despite the fact that [mask].", "constraint": "[health, work], [no]", "generation": "The stress of school will decrease because personX develops a study schedule and stick to it despite the fact that personX's health is not good."}
{"input": "The stress of school will decrease because personX develops a study schedule and stick to it despite the fact that [mask].", "constraint": "[health, work], [no]", "generation": "The stress of school will decrease because personX develops a study schedule and stick to it despite the fact that she has no health problems."}
{"input": "The stress of school will decrease because personX develops a study schedule and stick to it even though [mask].", "constraint": "[work, health]", "generation": "The stress of school will decrease because personX develops a study schedule and stick to it even though he is working."}
{"input": "The stress of school will decrease because personX develops a study schedule and stick to it even though [mask].", "constraint": "[work, health]", "generation": "The stress of school will decrease because personX develops a study schedule and stick to it even though he is not healthy."}
{"input": "The stress of school will decrease because personX develops a study schedule and stick to it even though [mask].", "constraint": "[work, health]", "generation": "The stress of school will decrease because personX develops a study schedule and stick to it even though she is not health."}
{"input": "The stress of school will decrease because personX develops a study schedule and stick to it even though [mask].", "constraint": "[health, work], [no]", "generation": "The stress of school will decrease because personX develops a study schedule and stick to it even though he is not health."}
{"input": "The stress of school will decrease because personX develops a study schedule and stick to it even though [mask].", "constraint": "[health, work], [no]", "generation": "The stress of school will decrease because personX develops a study schedule and stick to it even though he is not healthy."}
{"input": "The stress of school will decrease because personX develops a study schedule and stick to it even though [mask].", "constraint": "[health, work], [no]", "generation": "The stress of school will decrease because personX develops a study schedule and stick to it even though she is nothealthy."}
{"input": "The strain of blood pressure will decrease because personX reduces salt intake and [mask].", "constraint": "[heart rate, run]", "generation": "The strain of blood pressure will decrease because personX reduces salt intake and runs regularly."}
{"input": "The strain of blood pressure will decrease because personX reduces salt intake and [mask].", "constraint": "[heart rate, run]", "generation": "The strain of blood pressure will decrease because personX reduces salt intake and heart rate."}
{"input": "The strain of blood pressure will decrease because personX reduces salt intake and [mask].", "constraint": "[heart rate, run]", "generation": "The strain of blood pressure will decrease because personX reduces salt intake and running."}
{"input": "The strain of blood pressure will decrease because personX reduces salt intake and [mask].", "constraint": "[heart rate, run], [no]", "generation": "The strain of blood pressure will decrease because personX reduces salt intake and the heart rate is not increased by running."}
{"input": "The strain of blood pressure will decrease because personX reduces salt intake and [mask].", "constraint": "[heart rate, run], [no]", "generation": "The strain of blood pressure will decrease because personX reduces salt intake and no longer runs."}
{"input": "The strain of blood pressure will decrease because personX reduces salt intake while [mask].", "constraint": "[heart rate, run]", "generation": "The strain of blood pressure will decrease because personX reduces salt intake while running."}
{"input": "The strain of blood pressure will decrease because personX reduces salt intake while [mask].", "constraint": "[heart rate, run]", "generation": "The strain of blood pressure will decrease because personX reduces salt intake while his heart rate is running."}
{"input": "The strain of blood pressure will decrease because personX reduces salt intake while [mask].", "constraint": "[heart rate, run]", "generation": "The strain of blood pressure will decrease because personX reduces salt intake while the heart rate is running."}
{"input": "The strain of blood pressure will decrease because personX reduces salt intake while [mask].", "constraint": "[heart rate, run], [no]", "generation": "The strain of blood pressure will decrease because personX reduces salt intake while his heart rate is no faster."}
{"input": "The strain of blood pressure will decrease because personX reduces salt intake while [mask].", "constraint": "[heart rate, run], [no]", "generation": "The strain of blood pressure will decrease because personX reduces salt intake while his heart rate is not too high."}
{"input": "The strain of blood pressure will decrease because personX reduces salt intake despite the fact that [mask].", "constraint": "[run, heart rate]", "generation": "The strain of blood pressure will decrease because personX reduces salt intake despite the fact that his heart rate is high."}
{"input": "The strain of blood pressure will decrease because personX reduces salt intake despite the fact that [mask].", "constraint": "[run, heart rate]", "generation": "The strain of blood pressure will decrease because personX reduces salt intake despite the fact that his heart rate is low."}
{"input": "The strain of blood pressure will decrease because personX reduces salt intake despite the fact that [mask].", "constraint": "[heart rate, run], [no]", "generation": "The strain of blood pressure will decrease because personX reduces salt intake despite the fact that he does not have heart rate."}
{"input": "The strain of blood pressure will decrease because personX reduces salt intake despite the fact that [mask].", "constraint": "[heart rate, run], [no]", "generation": "The strain of blood pressure will decrease because personX reduces salt intake despite the fact that heart rate is not reduced."}
{"input": "The strain of blood pressure will decrease because personX reduces salt intake despite the fact that [mask].", "constraint": "[heart rate, run], [no]", "generation": "The strain of blood pressure will decrease because personX reduces salt intake despite the fact that he does not have high heart rate."}
{"input": "The strain of blood pressure will decrease because personX reduces salt intake even though [mask].", "constraint": "[heart rate, run]", "generation": "The strain of blood pressure will decrease because personX reduces salt intake even though the heart rate is high."}
{"input": "The strain of blood pressure will decrease because personX reduces salt intake even though [mask].", "constraint": "[heart rate, run]", "generation": "The strain of blood pressure will decrease because personX reduces salt intake even though he may have to run to catch his train."}
{"input": "The strain of blood pressure will decrease because personX reduces salt intake even though [mask].", "constraint": "[heart rate, run]", "generation": "The strain of blood pressure will decrease because personX reduces salt intake even though his heart rate is high."}
{"input": "The strain of blood pressure will decrease because personX reduces salt intake even though [mask].", "constraint": "[heart rate, run], [no]", "generation": "The strain of blood pressure will decrease because personX reduces salt intake even though heart rate is not increased."}
{"input": "The strain of blood pressure will decrease because personX reduces salt intake even though [mask].", "constraint": "[heart rate, run], [no]", "generation": "The strain of blood pressure will decrease because personX reduces salt intake even though he does not have a heart rate monitor."}
{"input": "The mass of food will increase because personX adds oil to food and [mask].", "constraint": "[furniture, room, move, furniture]", "generation": "The mass of food will increase because personX adds oil to food and furniture is moved to another room."}
{"input": "The mass of food will increase because personX adds oil to food and [mask].", "constraint": "[furniture, room, move, furniture]", "generation": "The mass of food will increase because personX adds oil to food and moves the furniture to the room."}
{"input": "The mass of food will increase because personX adds oil to food and [mask].", "constraint": "[furniture, room, move, furniture]", "generation": "The mass of food will increase because personX adds oil to food and moves the food to the room."}
{"input": "The mass of food will increase because personX adds oil to food and [mask].", "constraint": "[furniture, room, move, furniture], [no]", "generation": "The mass of food will increase because personX adds oil to food and there is no movement of the furniture."}
{"input": "The mass of food will increase because personX adds oil to food and [mask].", "constraint": "[furniture, room, move, furniture], [no]", "generation": "The mass of food will increase because personX adds oil to food and does not have a lot of furniture in his room."}
{"input": "The mass of food will increase because personX adds oil to food and [mask].", "constraint": "[furniture, room, move, furniture], [no]", "generation": "The mass of food will increase because personX adds oil to food and furniture in the room is not moved."}
{"input": "The mass of food will increase because personX adds oil to food while [mask].", "constraint": "[furniture, furniture, move, room]", "generation": "The mass of food will increase because personX adds oil to food while the food is being moved to another room."}
{"input": "The mass of food will increase because personX adds oil to food while [mask].", "constraint": "[furniture, furniture, move, room]", "generation": "The mass of food will increase because personX adds oil to food while moving the furniture in the room."}
{"input": "The mass of food will increase because personX adds oil to food while [mask].", "constraint": "[furniture, furniture, move, room]", "generation": "The mass of food will increase because personX adds oil to food while furniture is moved around the room."}
{"input": "The mass of food will increase because personX adds oil to food while [mask].", "constraint": "[furniture, room, furniture, move], [no]", "generation": "The mass of food will increase because personX adds oil to food while furniture is not moved out of the room."}
{"input": "The mass of food will increase because personX adds oil to food while [mask].", "constraint": "[furniture, room, furniture, move], [no]", "generation": "The mass of food will increase because personX adds oil to food while the food is not moving."}
{"input": "The mass of food will increase because personX adds oil to food while [mask].", "constraint": "[furniture, room, furniture, move], [no]", "generation": "The mass of food will increase because personX adds oil to food while the food is notmoving."}
{"input": "The mass of food will increase because personX adds oil to food despite the fact that [mask].", "constraint": "[move, furniture, room, furniture]", "generation": "The mass of food will increase because personX adds oil to food despite the fact that the furniture is moved to another room."}
{"input": "The mass of food will increase because personX adds oil to food despite the fact that [mask].", "constraint": "[move, furniture, room, furniture]", "generation": "The mass of food will increase because personX adds oil to food despite the fact that he already moved the furniture."}
{"input": "The mass of food will increase because personX adds oil to food despite the fact that [mask].", "constraint": "[move, furniture, room, furniture]", "generation": "The mass of food will increase because personX adds oil to food despite the fact that the food is not moving."}
{"input": "The mass of food will increase because personX adds oil to food despite the fact that [mask].", "constraint": "[move, furniture, room, furniture], [no]", "generation": "The mass of food will increase because personX adds oil to food despite the fact that the food is not moved."}
{"input": "The mass of food will increase because personX adds oil to food despite the fact that [mask].", "constraint": "[move, furniture, room, furniture], [no]", "generation": "The mass of food will increase because personX adds oil to food despite the fact that there is no more space in the room."}
{"input": "The mass of food will increase because personX adds oil to food despite the fact that [mask].", "constraint": "[move, furniture, room, furniture], [no]", "generation": "The mass of food will increase because personX adds oil to food despite the fact that there is no movement of furniture in the room."}
{"input": "The mass of food will increase because personX adds oil to food even though [mask].", "constraint": "[furniture, move, room, furniture]", "generation": "The mass of food will increase because personX adds oil to food even though there is no more space in the room."}
{"input": "The mass of food will increase because personX adds oil to food even though [mask].", "constraint": "[furniture, furniture, move, room], [no]", "generation": "The mass of food will increase because personX adds oil to food even though there is no more room in the fridge."}
{"input": "The mass of food will increase because personX adds oil to food even though [mask].", "constraint": "[furniture, furniture, move, room], [no]", "generation": "The mass of food will increase because personX adds oil to food even though he is not moving the furniture in the room."}
{"input": "The mass of food will increase because personX adds oil to food even though [mask].", "constraint": "[furniture, furniture, move, room], [no]", "generation": "The mass of food will increase because personX adds oil to food even though the food is not moving."}
{"input": "The mass of sugar will increase because personX stirs sugar into a drink and [mask].", "constraint": "[spill, oats, oat]", "generation": "The mass of sugar will increase because personX stirs sugar into a drink and spills some sugar onto the oats."}
{"input": "The mass of sugar will increase because personX stirs sugar into a drink and [mask].", "constraint": "[spill, oats, oat]", "generation": "The mass of sugar will increase because personX stirs sugar into a drink and spills some sugar."}
{"input": "The mass of sugar will increase because personX stirs sugar into a drink and [mask].", "constraint": "[spill, oats, oat]", "generation": "The mass of sugar will increase because personX stirs sugar into a drink and some of the sugar spills onto the oats."}
{"input": "The mass of sugar will increase because personX stirs sugar into a drink and [mask].", "constraint": "[spill, oat, oats], [no]", "generation": "The mass of sugar will increase because personX stirs sugar into a drink and no sugar is spilled."}
{"input": "The mass of sugar will increase because personX stirs sugar into a drink and [mask].", "constraint": "[spill, oat, oats], [no]", "generation": "The mass of sugar will increase because personX stirs sugar into a drink and no more spills occur."}
{"input": "The mass of sugar will increase because personX stirs sugar into a drink and [mask].", "constraint": "[spill, oat, oats], [no]", "generation": "The mass of sugar will increase because personX stirs sugar into a drink and no spill happens."}
{"input": "The mass of sugar will increase because personX stirs sugar into a drink while [mask].", "constraint": "[oats, spill, oat]", "generation": "The mass of sugar will increase because personX stirs sugar into a drink while oats are spill on the floor."}
{"input": "The mass of sugar will increase because personX stirs sugar into a drink while [mask].", "constraint": "[oats, spill, oat]", "generation": "The mass of sugar will increase because personX stirs sugar into a drink while oats are present."}
{"input": "The mass of sugar will increase because personX stirs sugar into a drink while [mask].", "constraint": "[oats, spill, oat]", "generation": "The mass of sugar will increase because personX stirs sugar into a drink while oats spill over the oat dish."}
{"input": "The mass of sugar will increase because personX stirs sugar into a drink while [mask].", "constraint": "[spill, oats, oat], [no]", "generation": "The mass of sugar will increase because personX stirs sugar into a drink while no oats are available."}
{"input": "The mass of sugar will increase because personX stirs sugar into a drink while [mask].", "constraint": "[spill, oats, oat], [no]", "generation": "The mass of sugar will increase because personX stirs sugar into a drink while no oats are present."}
{"input": "The mass of sugar will increase because personX stirs sugar into a drink while [mask].", "constraint": "[spill, oats, oat], [no]", "generation": "The mass of sugar will increase because personX stirs sugar into a drink while no oats are spilled."}
{"input": "The mass of sugar will increase because personX stirs sugar into a drink despite the fact that [mask].", "constraint": "[oat, spill, oats]", "generation": "The mass of sugar will increase because personX stirs sugar into a drink despite the fact that he spills some."}
{"input": "The mass of sugar will increase because personX stirs sugar into a drink despite the fact that [mask].", "constraint": "[oat, spill, oats]", "generation": "The mass of sugar will increase because personX stirs sugar into a drink despite the fact that there are no oats left."}
{"input": "The mass of sugar will increase because personX stirs sugar into a drink despite the fact that [mask].", "constraint": "[oat, spill, oats]", "generation": "The mass of sugar will increase because personX stirs sugar into a drink despite the fact that the oats spill."}
{"input": "The mass of sugar will increase because personX stirs sugar into a drink despite the fact that [mask].", "constraint": "[oat, oats, spill], [no]", "generation": "The mass of sugar will increase because personX stirs sugar into a drink despite the fact that no one spills it."}
{"input": "The mass of sugar will increase because personX stirs sugar into a drink even though [mask].", "constraint": "[spill, oat, oats]", "generation": "The mass of sugar will increase because personX stirs sugar into a drink even though he spills it on the ground."}
{"input": "The mass of sugar will increase because personX stirs sugar into a drink even though [mask].", "constraint": "[spill, oat, oats]", "generation": "The mass of sugar will increase because personX stirs sugar into a drink even though it spills out."}
{"input": "The mass of sugar will increase because personX stirs sugar into a drink even though [mask].", "constraint": "[spill, oat, oats]", "generation": "The mass of sugar will increase because personX stirs sugar into a drink even though sugar spills onto the floor."}
{"input": "The mass of sugar will increase because personX stirs sugar into a drink even though [mask].", "constraint": "[oat, spill, oats], [no]", "generation": "The mass of sugar will increase because personX stirs sugar into a drink even though there are no oats in the drink."}
{"input": "The mass of sugar will increase because personX stirs sugar into a drink even though [mask].", "constraint": "[oat, spill, oats], [no]", "generation": "The mass of sugar will increase because personX stirs sugar into a drink even though he doesn't have enough oats."}
{"input": "The mass of plants will decrease because personX eats them and [mask].", "constraint": "[malt, barley]", "generation": "The mass of plants will decrease because personX eats them and they are malted."}
{"input": "The mass of plants will decrease because personX eats them and [mask].", "constraint": "[malt, barley]", "generation": "The mass of plants will decrease because personX eats them and they are not malt or barley."}
{"input": "The mass of plants will decrease because personX eats them and [mask].", "constraint": "[malt, barley]", "generation": "The mass of plants will decrease because personX eats them and malts them."}
{"input": "The mass of plants will decrease because personX eats them and [mask].", "constraint": "[malt, barley], [no]", "generation": "The mass of plants will decrease because personX eats them and no more malt is available."}
{"input": "The mass of plants will decrease because personX eats them while [mask].", "constraint": "[barley, malt]", "generation": "The mass of plants will decrease because personX eats them while they are malt."}
{"input": "The mass of plants will decrease because personX eats them while [mask].", "constraint": "[barley, malt]", "generation": "The mass of plants will decrease because personX eats them while they are barley malted."}
{"input": "The mass of plants will decrease because personX eats them while [mask].", "constraint": "[barley, malt], [no]", "generation": "The mass of plants will decrease because personX eats them while barley is not available."}
{"input": "The mass of plants will decrease because personX eats them while [mask].", "constraint": "[barley, malt], [no]", "generation": "The mass of plants will decrease because personX eats them while he does not have enough malt."}
{"input": "The mass of plants will decrease because personX eats them despite the fact that [mask].", "constraint": "[barley, malt]", "generation": "The mass of plants will decrease because personX eats them despite the fact that they are not malt."}
{"input": "The mass of plants will decrease because personX eats them despite the fact that [mask].", "constraint": "[barley, malt]", "generation": "The mass of plants will decrease because personX eats them despite the fact that they are not barley."}
{"input": "The mass of plants will decrease because personX eats them despite the fact that [mask].", "constraint": "[barley, malt]", "generation": "The mass of plants will decrease because personX eats them despite the fact that the plants are for malt."}
{"input": "The mass of plants will decrease because personX eats them despite the fact that [mask].", "constraint": "[barley, malt], [no]", "generation": "The mass of plants will decrease because personX eats them despite the fact that they are not malt."}
{"input": "The mass of plants will decrease because personX eats them despite the fact that [mask].", "constraint": "[barley, malt], [no]", "generation": "The mass of plants will decrease because personX eats them despite the fact that he is not a malt lover."}
{"input": "The mass of plants will decrease because personX eats them despite the fact that [mask].", "constraint": "[barley, malt], [no]", "generation": "The mass of plants will decrease because personX eats them despite the fact that there is no more malt available."}
{"input": "The mass of plants will decrease because personX eats them even though [mask].", "constraint": "[barley, malt]", "generation": "The mass of plants will decrease because personX eats them even though they are not barley or malt."}
{"input": "The mass of plants will decrease because personX eats them even though [mask].", "constraint": "[malt, barley], [no]", "generation": "The mass of plants will decrease because personX eats them even though they are not malted."}
{"input": "The mass of plants will decrease because personX eats them even though [mask].", "constraint": "[malt, barley], [no]", "generation": "The mass of plants will decrease because personX eats them even though he does not have any malt."}
{"input": "The electric current of lamp will decrease because lamp is move away from power source and [mask].", "constraint": "[frequency, microwave, microwave, increase]", "generation": "The electric current of lamp will decrease because lamp is move away from power source and the frequency of electromagnetic waves are increased."}
{"input": "The electric current of lamp will decrease because lamp is move away from power source and [mask].", "constraint": "[frequency, microwave, microwave, increase]", "generation": "The electric current of lamp will decrease because lamp is move away from power source and frequency of microwaves increase."}
{"input": "The electric current of lamp will decrease because lamp is move away from power source and [mask].", "constraint": "[frequency, microwave, microwave, increase]", "generation": "The electric current of lamp will decrease because lamp is move away from power source and frequency is increased."}
{"input": "The electric current of lamp will decrease because lamp is move away from power source while [mask].", "constraint": "[microwave, frequency, increase, microwave]", "generation": "The electric current of lamp will decrease because lamp is move away from power source while the frequency of electric current increases."}
{"input": "The electric current of lamp will decrease because lamp is move away from power source while [mask].", "constraint": "[microwave, frequency, increase, microwave]", "generation": "The electric current of lamp will decrease because lamp is move away from power source while frequency of microwaves increase."}
{"input": "The electric current of lamp will decrease because lamp is move away from power source while [mask].", "constraint": "[microwave, frequency, increase, microwave]", "generation": "The electric current of lamp will decrease because lamp is move away from power source while the frequency of microwave increases."}
{"input": "The electric current of lamp will decrease because lamp is move away from power source while [mask].", "constraint": "[increase, microwave, frequency, microwave], [no]", "generation": "The electric current of lamp will decrease because lamp is move away from power source while the frequency of microwaves does not increase."}
{"input": "The electric current of lamp will decrease because lamp is move away from power source despite the fact that [mask].", "constraint": "[microwave, microwave, frequency, increase]", "generation": "The electric current of lamp will decrease because lamp is move away from power source despite the fact that current frequency is increased."}
{"input": "The electric current of lamp will decrease because lamp is move away from power source despite the fact that [mask].", "constraint": "[microwave, microwave, frequency, increase]", "generation": "The electric current of lamp will decrease because lamp is move away from power source despite the fact that frequency is increased."}
{"input": "The electric current of lamp will decrease because lamp is move away from power source despite the fact that [mask].", "constraint": "[microwave, microwave, frequency, increase]", "generation": "The electric current of lamp will decrease because lamp is move away from power source despite the fact that the frequency increases."}
{"input": "The electric current of lamp will decrease because lamp is move away from power source despite the fact that [mask].", "constraint": "[microwave, microwave, frequency, increase], [no]", "generation": "The electric current of lamp will decrease because lamp is move away from power source despite the fact that there is no frequency."}
{"input": "The electric current of lamp will decrease because lamp is move away from power source despite the fact that [mask].", "constraint": "[microwave, microwave, frequency, increase], [no]", "generation": "The electric current of lamp will decrease because lamp is move away from power source despite the fact that the frequency does not increase."}
{"input": "The electric current of lamp will decrease because lamp is move away from power source despite the fact that [mask].", "constraint": "[microwave, microwave, frequency, increase], [no]", "generation": "The electric current of lamp will decrease because lamp is move away from power source despite the fact that the frequency of microwave does not increase."}
{"input": "The electric current of lamp will decrease because lamp is move away from power source even though [mask].", "constraint": "[increase, frequency, microwave, microwave]", "generation": "The electric current of lamp will decrease because lamp is move away from power source even though the frequency of the microwave is increased."}
{"input": "The electric current of lamp will decrease because lamp is move away from power source even though [mask].", "constraint": "[increase, frequency, microwave, microwave]", "generation": "The electric current of lamp will decrease because lamp is move away from power source even though its frequency is increase."}
{"input": "The electric current of lamp will decrease because lamp is move away from power source even though [mask].", "constraint": "[increase, frequency, microwave, microwave]", "generation": "The electric current of lamp will decrease because lamp is move away from power source even though the frequency of microwaves increases."}
{"input": "The electric current of lamp will decrease because lamp is move away from power source even though [mask].", "constraint": "[frequency, increase, microwave, microwave], [no]", "generation": "The electric current of lamp will decrease because lamp is move away from power source even though the frequency is not increased."}
{"input": "The electric current of lamp will decrease because lamp is move away from power source even though [mask].", "constraint": "[frequency, increase, microwave, microwave], [no]", "generation": "The electric current of lamp will decrease because lamp is move away from power source even though there is no increase in frequency."}
{"input": "The electric current of lamp will decrease because lamp is move away from power source even though [mask].", "constraint": "[frequency, increase, microwave, microwave], [no]", "generation": "The electric current of lamp will decrease because lamp is move away from power source even though the frequency of electric current does not increase."}
{"input": "The plane angle of window will increase because personX closes the window shade and [mask].", "constraint": "[make, fist, fingers]", "generation": "The plane angle of window will increase because personX closes the window shade and makes a fist with her fingers."}
{"input": "The plane angle of window will increase because personX closes the window shade and [mask].", "constraint": "[make, fist, fingers]", "generation": "The plane angle of window will increase because personX closes the window shade and makes a fist with his fingers."}
{"input": "The plane angle of window will increase because personX closes the window shade and [mask].", "constraint": "[make, fist, fingers]", "generation": "The plane angle of window will increase because personX closes the window shade and makes the fist with fingers."}
{"input": "The plane angle of window will increase because personX closes the window shade and [mask].", "constraint": "[fingers, fist, make], [no]", "generation": "The plane angle of window will increase because personX closes the window shade and he makes sure that no fingers are in the way."}
{"input": "The plane angle of window will increase because personX closes the window shade and [mask].", "constraint": "[fingers, fist, make], [no]", "generation": "The plane angle of window will increase because personX closes the window shade and does not make a fist."}
{"input": "The plane angle of window will increase because personX closes the window shade and [mask].", "constraint": "[fingers, fist, make], [no]", "generation": "The plane angle of window will increase because personX closes the window shade and makes sure that no light is coming in."}
{"input": "The plane angle of window will increase because personX closes the window shade while [mask].", "constraint": "[fist, make, fingers]", "generation": "The plane angle of window will increase because personX closes the window shade while making a fist with his fingers."}
{"input": "The plane angle of window will increase because personX closes the window shade while [mask].", "constraint": "[fist, make, fingers]", "generation": "The plane angle of window will increase because personX closes the window shade while he makes a fist with his fingers."}
{"input": "The plane angle of window will increase because personX closes the window shade despite the fact that [mask].", "constraint": "[fist, make, fingers]", "generation": "The plane angle of window will increase because personX closes the window shade despite the fact that it is not possible to make a fist."}
{"input": "The plane angle of window will increase because personX closes the window shade despite the fact that [mask].", "constraint": "[fist, make, fingers]", "generation": "The plane angle of window will increase because personX closes the window shade despite the fact that his fingers make a fist."}
{"input": "The plane angle of window will increase because personX closes the window shade despite the fact that [mask].", "constraint": "[fist, make, fingers]", "generation": "The plane angle of window will increase because personX closes the window shade despite the fact that he is not making a fist."}
{"input": "The plane angle of window will increase because personX closes the window shade despite the fact that [mask].", "constraint": "[fist, make, fingers], [no]", "generation": "The plane angle of window will increase because personX closes the window shade despite the fact that the window is not big enough for his fist."}
{"input": "The plane angle of window will increase because personX closes the window shade despite the fact that [mask].", "constraint": "[fist, make, fingers], [no]", "generation": "The plane angle of window will increase because personX closes the window shade despite the fact that he has not made a fist."}
{"input": "The plane angle of window will increase because personX closes the window shade despite the fact that [mask].", "constraint": "[fist, make, fingers], [no]", "generation": "The plane angle of window will increase because personX closes the window shade despite the fact that he is not making a fist with his fingers."}
{"input": "The plane angle of window will increase because personX closes the window shade even though [mask].", "constraint": "[make, fingers, fist]", "generation": "The plane angle of window will increase because personX closes the window shade even though it makes a fist."}
{"input": "The plane angle of window will increase because personX closes the window shade even though [mask].", "constraint": "[make, fingers, fist]", "generation": "The plane angle of window will increase because personX closes the window shade even though he makes a fist with his fingers."}
{"input": "The plane angle of window will increase because personX closes the window shade even though [mask].", "constraint": "[make, fingers, fist]", "generation": "The plane angle of window will increase because personX closes the window shade even though he makes a fist."}
{"input": "The plane angle of window will increase because personX closes the window shade even though [mask].", "constraint": "[fingers, make, fist], [no]", "generation": "The plane angle of window will increase because personX closes the window shade even though he does not make a fist with his fingers."}
{"input": "The plane angle of window will increase because personX closes the window shade even though [mask].", "constraint": "[fingers, make, fist], [no]", "generation": "The plane angle of window will increase because personX closes the window shade even though he makes a fist with no fingers."}
{"input": "The plane angle of window will increase because personX closes the window shade even though [mask].", "constraint": "[fingers, make, fist], [no]", "generation": "The plane angle of window will increase because personX closes the window shade even though he has no fingers on his hand."}
{"input": "The plane angle of window will decrease because the window is close and [mask].", "constraint": "[ankle, toe]", "generation": "The plane angle of window will decrease because the window is close and the person's ankle is in the way."}
{"input": "The plane angle of window will decrease because the window is close and [mask].", "constraint": "[ankle, toe]", "generation": "The plane angle of window will decrease because the window is close and toe falls down."}
{"input": "The plane angle of window will decrease because the window is close and [mask].", "constraint": "[ankle, toe]", "generation": "The plane angle of window will decrease because the window is close and the person's ankle is not at the window."}
{"input": "The plane angle of window will decrease because the window is close while [mask].", "constraint": "[toe, ankle]", "generation": "The plane angle of window will decrease because the window is close while personX has a big toe."}
{"input": "The plane angle of window will decrease because the window is close while [mask].", "constraint": "[toe, ankle]", "generation": "The plane angle of window will decrease because the window is close while personX stands on her toes."}
{"input": "The plane angle of window will decrease because the window is close while [mask].", "constraint": "[toe, ankle]", "generation": "The plane angle of window will decrease because the window is close while the person's toe is close to the window."}
{"input": "The plane angle of window will decrease because the window is close while [mask].", "constraint": "[toe, ankle], [no]", "generation": "The plane angle of window will decrease because the window is close while personX has no toe."}
{"input": "The plane angle of window will decrease because the window is close despite the fact that [mask].", "constraint": "[toe, ankle]", "generation": "The plane angle of window will decrease because the window is close despite the fact that the person's toes are not close to the window."}
{"input": "The plane angle of window will decrease because the window is close despite the fact that [mask].", "constraint": "[toe, ankle]", "generation": "The plane angle of window will decrease because the window is close despite the fact that the person's ankle is in the way."}
{"input": "The plane angle of window will decrease because the window is close even though [mask].", "constraint": "[ankle, toe]", "generation": "The plane angle of window will decrease because the window is close even though personX keeps the window open with his ankle."}
{"input": "The plane angle of window will decrease because the window is close even though [mask].", "constraint": "[ankle, toe]", "generation": "The plane angle of window will decrease because the window is close even though the person's ankle is in the way."}
{"input": "The solid angle of pizza slice will increase because the pizza slice becomes thinner and [mask].", "constraint": "[croissant, divide, croissant, part]", "generation": "The solid angle of pizza slice will increase because the pizza slice becomes thinner and is divided into more parts."}
{"input": "The solid angle of pizza slice will increase because the pizza slice becomes thinner and [mask].", "constraint": "[croissant, divide, croissant, part]", "generation": "The solid angle of pizza slice will increase because the pizza slice becomes thinner and is divided into smaller parts."}
{"input": "The solid angle of pizza slice will increase because the pizza slice becomes thinner and [mask].", "constraint": "[croissant, divide, croissant, part]", "generation": "The solid angle of pizza slice will increase because the pizza slice becomes thinner and croissants are divided into parts."}
{"input": "The solid angle of pizza slice will increase because the pizza slice becomes thinner and [mask].", "constraint": "[croissant, croissant, part, divide], [no]", "generation": "The solid angle of pizza slice will increase because the pizza slice becomes thinner and no part of it is divided."}
{"input": "The solid angle of pizza slice will increase because the pizza slice becomes thinner while [mask].", "constraint": "[croissant, part, croissant, divide]", "generation": "The solid angle of pizza slice will increase because the pizza slice becomes thinner while croissants are divided into parts."}
{"input": "The solid angle of pizza slice will increase because the pizza slice becomes thinner while [mask].", "constraint": "[croissant, part, croissant, divide]", "generation": "The solid angle of pizza slice will increase because the pizza slice becomes thinner while being divided into parts."}
{"input": "The solid angle of pizza slice will increase because the pizza slice becomes thinner while [mask].", "constraint": "[croissant, part, croissant, divide]", "generation": "The solid angle of pizza slice will increase because the pizza slice becomes thinner while part of it is being divided into a croissant."}
{"input": "The solid angle of pizza slice will increase because the pizza slice becomes thinner while [mask].", "constraint": "[croissant, part, divide, croissant], [no]", "generation": "The solid angle of pizza slice will increase because the pizza slice becomes thinner while no more croissants are available."}
{"input": "The solid angle of pizza slice will increase because the pizza slice becomes thinner despite the fact that [mask].", "constraint": "[croissant, croissant, divide, part]", "generation": "The solid angle of pizza slice will increase because the pizza slice becomes thinner despite the fact that it is divided into parts."}
{"input": "The solid angle of pizza slice will increase because the pizza slice becomes thinner despite the fact that [mask].", "constraint": "[croissant, croissant, divide, part]", "generation": "The solid angle of pizza slice will increase because the pizza slice becomes thinner despite the fact that it is divided into two parts."}
{"input": "The solid angle of pizza slice will increase because the pizza slice becomes thinner despite the fact that [mask].", "constraint": "[croissant, croissant, divide, part]", "generation": "The solid angle of pizza slice will increase because the pizza slice becomes thinner despite the fact that it is divided into more parts."}
{"input": "The solid angle of pizza slice will increase because the pizza slice becomes thinner despite the fact that [mask].", "constraint": "[croissant, divide, part, croissant], [no]", "generation": "The solid angle of pizza slice will increase because the pizza slice becomes thinner despite the fact that the pizza slice is not croissant."}
{"input": "The solid angle of pizza slice will increase because the pizza slice becomes thinner despite the fact that [mask].", "constraint": "[croissant, divide, part, croissant], [no]", "generation": "The solid angle of pizza slice will increase because the pizza slice becomes thinner despite the fact that it is not croissant."}
{"input": "The solid angle of pizza slice will increase because the pizza slice becomes thinner despite the fact that [mask].", "constraint": "[croissant, divide, part, croissant], [no]", "generation": "The solid angle of pizza slice will increase because the pizza slice becomes thinner despite the fact that the pizza is not divided into more parts."}
{"input": "The solid angle of pizza slice will increase because the pizza slice becomes thinner even though [mask].", "constraint": "[part, croissant, divide, croissant]", "generation": "The solid angle of pizza slice will increase because the pizza slice becomes thinner even though it is divided into more parts."}
{"input": "The solid angle of pizza slice will increase because the pizza slice becomes thinner even though [mask].", "constraint": "[part, croissant, divide, croissant]", "generation": "The solid angle of pizza slice will increase because the pizza slice becomes thinner even though it is divided into two parts."}
{"input": "The solid angle of pizza slice will increase because the pizza slice becomes thinner even though [mask].", "constraint": "[divide, croissant, part, croissant], [no]", "generation": "The solid angle of pizza slice will increase because the pizza slice becomes thinner even though it is not divided into equal parts."}
{"input": "The solid angle of pizza slice will increase because the pizza slice becomes thinner even though [mask].", "constraint": "[divide, croissant, part, croissant], [no]", "generation": "The solid angle of pizza slice will increase because the pizza slice becomes thinner even though it is not cut into two parts."}
{"input": "The solid angle of pizza slice will increase because the pizza slice becomes thinner even though [mask].", "constraint": "[divide, croissant, part, croissant], [no]", "generation": "The solid angle of pizza slice will increase because the pizza slice becomes thinner even though it is not divided into two parts."}
{"input": "The solid angle of bagel will increase because personX eats the bagel and [mask].", "constraint": "[move, observer, danish, danish]", "generation": "The solid angle of bagel will increase because personX eats the bagel and moves to another observer's position."}
{"input": "The solid angle of bagel will increase because personX eats the bagel and [mask].", "constraint": "[move, observer, danish, danish]", "generation": "The solid angle of bagel will increase because personX eats the bagel and moves away from the observer."}
{"input": "The solid angle of bagel will increase because personX eats the bagel and [mask].", "constraint": "[move, observer, danish, danish]", "generation": "The solid angle of bagel will increase because personX eats the bagel and moves towards the observer."}
{"input": "The solid angle of bagel will increase because personX eats the bagel while [mask].", "constraint": "[danish, observer, danish, move]", "generation": "The solid angle of bagel will increase because personX eats the bagel while moving."}
{"input": "The solid angle of bagel will increase because personX eats the bagel while [mask].", "constraint": "[danish, observer, danish, move]", "generation": "The solid angle of bagel will increase because personX eats the bagel while the observer moves."}
{"input": "The solid angle of bagel will increase because personX eats the bagel while [mask].", "constraint": "[move, observer, danish, danish], [no]", "generation": "The solid angle of bagel will increase because personX eats the bagel while not moving."}
{"input": "The solid angle of bagel will increase because personX eats the bagel despite the fact that [mask].", "constraint": "[danish, danish, move, observer]", "generation": "The solid angle of bagel will increase because personX eats the bagel despite the fact that the bagel is not moving."}
{"input": "The solid angle of bagel will increase because personX eats the bagel despite the fact that [mask].", "constraint": "[danish, danish, move, observer]", "generation": "The solid angle of bagel will increase because personX eats the bagel despite the fact that the observer moves."}
{"input": "The solid angle of bagel will increase because personX eats the bagel despite the fact that [mask].", "constraint": "[observer, danish, danish, move], [no]", "generation": "The solid angle of bagel will increase because personX eats the bagel despite the fact that the observer does not move."}
{"input": "The solid angle of bagel will increase because personX eats the bagel despite the fact that [mask].", "constraint": "[observer, danish, danish, move], [no]", "generation": "The solid angle of bagel will increase because personX eats the bagel despite the fact that he is not the observer."}
{"input": "The solid angle of bagel will increase because personX eats the bagel despite the fact that [mask].", "constraint": "[observer, danish, danish, move], [no]", "generation": "The solid angle of bagel will increase because personX eats the bagel despite the fact that the observer is not moving."}
{"input": "The solid angle of bagel will increase because personX eats the bagel even though [mask].", "constraint": "[observer, danish, danish, move]", "generation": "The solid angle of bagel will increase because personX eats the bagel even though the observer moves."}
{"input": "The solid angle of bagel will increase because personX eats the bagel even though [mask].", "constraint": "[observer, danish, danish, move]", "generation": "The solid angle of bagel will increase because personX eats the bagel even though it is a danish."}
{"input": "The solid angle of bagel will increase because personX eats the bagel even though [mask].", "constraint": "[observer, danish, danish, move]", "generation": "The solid angle of bagel will increase because personX eats the bagel even though the observer is not moving."}
{"input": "The solid angle of bagel will increase because personX eats the bagel even though [mask].", "constraint": "[danish, move, observer, danish], [no]", "generation": "The solid angle of bagel will increase because personX eats the bagel even though he is not moving."}
{"input": "The frequency of of bowel movements will increase because personX eats high-fiber foods and [mask].", "constraint": "[thirst, eat]", "generation": "The frequency of of bowel movements will increase because personX eats high-fiber foods and drinks a lot of water."}
{"input": "The frequency of of bowel movements will increase because personX eats high-fiber foods and [mask].", "constraint": "[thirst, eat]", "generation": "The frequency of of bowel movements will increase because personX eats high-fiber foods and drinks lots of water."}
{"input": "The frequency of of bowel movements will increase because personX eats high-fiber foods while [mask].", "constraint": "[eat, thirst]", "generation": "The frequency of of bowel movements will increase because personX eats high-fiber foods while being thirsty."}
{"input": "The frequency of of bowel movements will increase because personX eats high-fiber foods while [mask].", "constraint": "[eat, thirst], [no]", "generation": "The frequency of of bowel movements will increase because personX eats high-fiber foods while he is not thirsty."}
{"input": "The frequency of of bowel movements will increase because personX eats high-fiber foods despite the fact that [mask].", "constraint": "[eat, thirst]", "generation": "The frequency of of bowel movements will increase because personX eats high-fiber foods despite the fact that he is not thirsty."}
{"input": "The frequency of of bowel movements will increase because personX eats high-fiber foods despite the fact that [mask].", "constraint": "[eat, thirst]", "generation": "The frequency of of bowel movements will increase because personX eats high-fiber foods despite the fact that he drinks a lot of water."}
{"input": "The frequency of of bowel movements will increase because personX eats high-fiber foods despite the fact that [mask].", "constraint": "[eat, thirst], [no]", "generation": "The frequency of of bowel movements will increase because personX eats high-fiber foods despite the fact that personX is not thirsty."}
{"input": "The frequency of of bowel movements will increase because personX eats high-fiber foods despite the fact that [mask].", "constraint": "[eat, thirst], [no]", "generation": "The frequency of of bowel movements will increase because personX eats high-fiber foods despite the fact that he is not thirsty."}
{"input": "The frequency of of bowel movements will increase because personX eats high-fiber foods even though [mask].", "constraint": "[thirst, eat]", "generation": "The frequency of of bowel movements will increase because personX eats high-fiber foods even though he is not thirsty."}
{"input": "The frequency of of bowel movements will increase because personX eats high-fiber foods even though [mask].", "constraint": "[thirst, eat], [no]", "generation": "The frequency of of bowel movements will increase because personX eats high-fiber foods even though he drinks no water."}
{"input": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing and [mask].", "constraint": "[breathing, cough]", "generation": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing and coughing."}
{"input": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing and [mask].", "constraint": "[breathing, cough]", "generation": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing and less air is needed for breathing."}
{"input": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing and [mask].", "constraint": "[breathing, cough]", "generation": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing and personX has a cold and is coughing."}
{"input": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing and [mask].", "constraint": "[cough, breathing], [no]", "generation": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing and no cough or breathing."}
{"input": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing while [mask].", "constraint": "[breathing, cough]", "generation": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing while personX is coughing."}
{"input": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing despite the fact that [mask].", "constraint": "[breathing, cough]", "generation": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing despite the fact that personX is coughing."}
{"input": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing despite the fact that [mask].", "constraint": "[breathing, cough]", "generation": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing despite the fact that personX coughs a lot."}
{"input": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing despite the fact that [mask].", "constraint": "[breathing, cough]", "generation": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing despite the fact that coughing can also decrease the pressure of the wind."}
{"input": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing despite the fact that [mask].", "constraint": "[cough, breathing], [no]", "generation": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing despite the fact that personX is not coughing."}
{"input": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing despite the fact that [mask].", "constraint": "[cough, breathing], [no]", "generation": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing despite the fact that no one is coughing."}
{"input": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing even though [mask].", "constraint": "[breathing, cough]", "generation": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing even though coughing decreases the airspeed."}
{"input": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing even though [mask].", "constraint": "[breathing, cough]", "generation": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing even though personX stops breathing."}
{"input": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing even though [mask].", "constraint": "[breathing, cough]", "generation": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing even though personX stops coughing."}
{"input": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing even though [mask].", "constraint": "[breathing, cough], [no]", "generation": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing even though the person is not coughing."}
{"input": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing even though [mask].", "constraint": "[breathing, cough], [no]", "generation": "The pressure of wind will decrease because the pressure of wind can decreases as a result of the windspeed decreasing even though there is no one breathing."}
