{"input": "PersonX feels a little better and [mask], so PersonX feels confident.", "constraint": "bright", "generation": "PersonX feels a little better and the sun is bright, so PersonX feels confident."}
{"input": "PersonX feels a little better and [mask], so PersonX feels confident.", "constraint": "bright, no", "generation": "PersonX feels a little better and is not blinded by a bright light, so PersonX feels confident."}
{"input": "PersonX feels a little better and [mask], so PersonX feels confident.", "constraint": "bridge", "generation": "PersonX feels a little better and jumps over the bridge, so PersonX feels confident."}
{"input": "PersonX feels a little better and [mask], so PersonX feels confident.", "constraint": "bridge, no", "generation": "PersonX feels a little better and does not cross the bridge, so PersonX feels confident."}
{"input": "PersonX feels a little better while [mask], so PersonX feels confident.", "constraint": "bright", "generation": "PersonX feels a little better while the sun shines bright, so PersonX feels confident."}
{"input": "PersonX feels a little better while [mask], so PersonX feels confident.", "constraint": "bright, no", "generation": "PersonX feels a little better while no one is bright, so PersonX feels confident."}
{"input": "PersonX feels a little better while [mask], so PersonX feels confident.", "constraint": "bridge", "generation": "PersonX feels a little better while walking on the bridge, so PersonX feels confident."}
{"input": "PersonX feels a little better while [mask], so PersonX feels confident.", "constraint": "bridge, no", "generation": "PersonX feels a little better while PersonX does not cross the bridge, so PersonX feels confident."}
{"input": "[mask] but PersonX feels a little better, so PersonX feels confident.", "constraint": "bright", "generation": "The sun is bright but PersonX feels a little better, so PersonX feels confident."}
{"input": "[mask] but PersonX feels a little better, so PersonX feels confident.", "constraint": "bright, no", "generation": "PersonX does not see a bright future but PersonX feels a little better, so PersonX feels confident."}
{"input": "[mask] but PersonX feels a little better, so PersonX feels confident.", "constraint": "bridge", "generation": "PersonX walks across the bridge but PersonX feels a little better, so PersonX feels confident."}
{"input": "[mask] but PersonX feels a little better, so PersonX feels confident.", "constraint": "bridge, no", "generation": "PersonX does not cross the bridge but PersonX feels a little better, so PersonX feels confident."}
{"input": "Although [mask], PersonX feels a little better, so PersonX feels confident.", "constraint": "bright", "generation": "Although the light is bright, PersonX feels a little better, so PersonX feels confident."}
{"input": "Although [mask], PersonX feels a little better, so PersonX feels confident.", "constraint": "bright, no", "generation": "Although it is not bright, PersonX feels a little better, so PersonX feels confident."}
{"input": "Although [mask], PersonX feels a little better, so PersonX feels confident.", "constraint": "bridge", "generation": "Although PersonX crosses the bridge, PersonX feels a little better, so PersonX feels confident."}
{"input": "Although [mask], PersonX feels a little better, so PersonX feels confident.", "constraint": "bridge, no", "generation": "Although PersonX does not cross the bridge, PersonX feels a little better, so PersonX feels confident."}
{"input": "PersonX feels a little better and [mask], so PersonX is seen as optimistic.", "constraint": "bright", "generation": "PersonX feels a little better and sees the bright side, so PersonX is seen as optimistic."}
{"input": "PersonX feels a little better and [mask], so PersonX is seen as optimistic.", "constraint": "bright, no", "generation": "PersonX feels a little better and sees no bright future, so PersonX is seen as optimistic."}
{"input": "PersonX feels a little better and [mask], so PersonX is seen as optimistic.", "constraint": "bridge", "generation": "PersonX feels a little better and starts to build a bridge, so PersonX is seen as optimistic."}
{"input": "PersonX feels a little better and [mask], so PersonX is seen as optimistic.", "constraint": "bridge, no", "generation": "PersonX feels a little better and does not cross the bridge, so PersonX is seen as optimistic."}
{"input": "PersonX feels a little better while [mask], so PersonX is seen as optimistic.", "constraint": "bright", "generation": "PersonX feels a little better while the sun shines bright, so PersonX is seen as optimistic."}
{"input": "PersonX feels a little better while [mask], so PersonX is seen as optimistic.", "constraint": "bright, no", "generation": "PersonX feels a little better while no bright, so PersonX is seen as optimistic."}
{"input": "PersonX feels a little better while [mask], so PersonX is seen as optimistic.", "constraint": "bridge", "generation": "PersonX feels a little better while crossing the bridge, so PersonX is seen as optimistic."}
{"input": "PersonX feels a little better while [mask], so PersonX is seen as optimistic.", "constraint": "bridge, no", "generation": "PersonX feels a little better while PersonX is not crossing the bridge, so PersonX is seen as optimistic."}
{"input": "[mask] but PersonX feels a little better, so PersonX is seen as optimistic.", "constraint": "bright", "generation": "The sun is bright but PersonX feels a little better, so PersonX is seen as optimistic."}
{"input": "[mask] but PersonX feels a little better, so PersonX is seen as optimistic.", "constraint": "bright, no", "generation": "The day is not bright but PersonX feels a little better, so PersonX is seen as optimistic."}
{"input": "[mask] but PersonX feels a little better, so PersonX is seen as optimistic.", "constraint": "bridge", "generation": "PersonX walks across the bridge but PersonX feels a little better, so PersonX is seen as optimistic."}
{"input": "[mask] but PersonX feels a little better, so PersonX is seen as optimistic.", "constraint": "bridge, no", "generation": "PersonX does not cross the bridge but PersonX feels a little better, so PersonX is seen as optimistic."}
{"input": "Although [mask], PersonX feels a little better, so PersonX is seen as optimistic.", "constraint": "bright", "generation": "Although the day is bright, PersonX feels a little better, so PersonX is seen as optimistic."}
{"input": "Although [mask], PersonX feels a little better, so PersonX is seen as optimistic.", "constraint": "bright, no", "generation": "Although the outlook is not bright, PersonX feels a little better, so PersonX is seen as optimistic."}
{"input": "Although [mask], PersonX feels a little better, so PersonX is seen as optimistic.", "constraint": "bridge", "generation": "Although the bridge is long, PersonX feels a little better, so PersonX is seen as optimistic."}
{"input": "Although [mask], PersonX feels a little better, so PersonX is seen as optimistic.", "constraint": "bridge, no", "generation": "Although there is no bridge, PersonX feels a little better, so PersonX is seen as optimistic."}
{"input": "PersonX takes a look at the stock market and [mask], so PersonX is seen as smart.", "constraint": "city", "generation": "PersonX takes a look at the stock market and sees the city, so PersonX is seen as smart."}
{"input": "PersonX takes a look at the stock market and [mask], so PersonX is seen as smart.", "constraint": "city, no", "generation": "PersonX takes a look at the stock market and is not in the city, so PersonX is seen as smart."}
{"input": "PersonX takes a look at the stock market and [mask], so PersonX is seen as smart.", "constraint": "buy", "generation": "PersonX takes a look at the stock market and buys some stocks, so PersonX is seen as smart."}
{"input": "PersonX takes a look at the stock market and [mask], so PersonX is seen as smart.", "constraint": "buy, no", "generation": "PersonX takes a look at the stock market and sees that it is not a good time to buy, so PersonX is seen as smart."}
{"input": "PersonX takes a look at the stock market while [mask], so PersonX is seen as smart.", "constraint": "city", "generation": "PersonX takes a look at the stock market while in the city, so PersonX is seen as smart."}
{"input": "PersonX takes a look at the stock market while [mask], so PersonX is seen as smart.", "constraint": "city, no", "generation": "PersonX takes a look at the stock market while no one is in the city, so PersonX is seen as smart."}
{"input": "PersonX takes a look at the stock market while [mask], so PersonX is seen as smart.", "constraint": "buy", "generation": "PersonX takes a look at the stock market while buying stocks, so PersonX is seen as smart."}
{"input": "PersonX takes a look at the stock market while [mask], so PersonX is seen as smart.", "constraint": "buy, no", "generation": "PersonX takes a look at the stock market while not buying, so PersonX is seen as smart."}
{"input": "[mask] but PersonX takes a look at the stock market, so PersonX is seen as smart.", "constraint": "city", "generation": "PersonX visits the city but PersonX takes a look at the stock market, so PersonX is seen as smart."}
{"input": "[mask] but PersonX takes a look at the stock market, so PersonX is seen as smart.", "constraint": "city, no", "generation": "PersonX is not in the city but PersonX takes a look at the stock market, so PersonX is seen as smart."}
{"input": "[mask] but PersonX takes a look at the stock market, so PersonX is seen as smart.", "constraint": "buy", "generation": "PersonX buys stocks but PersonX takes a look at the stock market, so PersonX is seen as smart."}
{"input": "[mask] but PersonX takes a look at the stock market, so PersonX is seen as smart.", "constraint": "buy, no", "generation": "PersonX does not buy but PersonX takes a look at the stock market, so PersonX is seen as smart."}
{"input": "Although [mask], PersonX takes a look at the stock market, so PersonX is seen as smart.", "constraint": "city", "generation": "Although the city is asleep, PersonX takes a look at the stock market, so PersonX is seen as smart."}
{"input": "Although [mask], PersonX takes a look at the stock market, so PersonX is seen as smart.", "constraint": "city, no", "generation": "Although no city, PersonX takes a look at the stock market, so PersonX is seen as smart."}
{"input": "Although [mask], PersonX takes a look at the stock market, so PersonX is seen as smart.", "constraint": "buy", "generation": "Although buying stocks is risky, PersonX takes a look at the stock market, so PersonX is seen as smart."}
{"input": "Although [mask], PersonX takes a look at the stock market, so PersonX is seen as smart.", "constraint": "buy, no", "generation": "Although PersonX does not buy, PersonX takes a look at the stock market, so PersonX is seen as smart."}
{"input": "PersonX takes a look at the stock market and [mask], so PersonX feels interested.", "constraint": "city", "generation": "PersonX takes a look at the stock market and sees the city, so PersonX feels interested."}
{"input": "PersonX takes a look at the stock market and [mask], so PersonX feels interested.", "constraint": "city, no", "generation": "PersonX takes a look at the stock market and sees no city, so PersonX feels interested."}
{"input": "PersonX takes a look at the stock market and [mask], so PersonX feels interested.", "constraint": "buy", "generation": "PersonX takes a look at the stock market and buys some stocks, so PersonX feels interested."}
{"input": "PersonX takes a look at the stock market and [mask], so PersonX feels interested.", "constraint": "buy, no", "generation": "PersonX takes a look at the stock market and does not buy anything, so PersonX feels interested."}
{"input": "PersonX takes a look at the stock market while [mask], so PersonX feels interested.", "constraint": "city", "generation": "PersonX takes a look at the stock market while in the city, so PersonX feels interested."}
{"input": "PersonX takes a look at the stock market while [mask], so PersonX feels interested.", "constraint": "city, no", "generation": ""}
{"input": "PersonX takes a look at the stock market while [mask], so PersonX feels interested.", "constraint": "buy", "generation": "PersonX takes a look at the stock market while buying stocks, so PersonX feels interested."}
{"input": "PersonX takes a look at the stock market while [mask], so PersonX feels interested.", "constraint": "buy, no", "generation": "PersonX takes a look at the stock market while not buying, so PersonX feels interested."}
{"input": "[mask] but PersonX takes a look at the stock market, so PersonX feels interested.", "constraint": "city", "generation": "The city bustles with activity but PersonX takes a look at the stock market, so PersonX feels interested."}
{"input": "[mask] but PersonX takes a look at the stock market, so PersonX feels interested.", "constraint": "city, no", "generation": "PersonX does not take a look at the city but PersonX takes a look at the stock market, so PersonX feels interested."}
{"input": "[mask] but PersonX takes a look at the stock market, so PersonX feels interested.", "constraint": "buy", "generation": "PersonX buys a stock but PersonX takes a look at the stock market, so PersonX feels interested."}
{"input": "[mask] but PersonX takes a look at the stock market, so PersonX feels interested.", "constraint": "buy, no", "generation": "PersonX does not buy but PersonX takes a look at the stock market, so PersonX feels interested."}
{"input": "Although [mask], PersonX takes a look at the stock market, so PersonX feels interested.", "constraint": "city", "generation": "Although the city is full of people, PersonX takes a look at the stock market, so PersonX feels interested."}
{"input": "Although [mask], PersonX takes a look at the stock market, so PersonX feels interested.", "constraint": "city, no", "generation": "Although PersonX cannot see the city, PersonX takes a look at the stock market, so PersonX feels interested."}
{"input": "Although [mask], PersonX takes a look at the stock market, so PersonX feels interested.", "constraint": "buy", "generation": "Although PersonX buy some stocks, PersonX takes a look at the stock market, so PersonX feels interested."}
{"input": "Although [mask], PersonX takes a look at the stock market, so PersonX feels interested.", "constraint": "buy, no", "generation": "Although PersonX does not buy anything, PersonX takes a look at the stock market, so PersonX feels interested."}
{"input": "PersonX orders food for himself and [mask], so PersonX is seen as a narcissist.", "constraint": "beer", "generation": "PersonX orders food for himself and beer, so PersonX is seen as a narcissist."}
{"input": "PersonX orders food for himself and [mask], so PersonX is seen as a narcissist.", "constraint": "beer, no", "generation": "PersonX orders food for himself and no beer, so PersonX is seen as a narcissist."}
{"input": "PersonX orders food for himself and [mask], so PersonX is seen as a narcissist.", "constraint": "repair", "generation": "PersonX orders food for himself and repairman, so PersonX is seen as a narcissist."}
{"input": "PersonX orders food for himself and [mask], so PersonX is seen as a narcissist.", "constraint": "repair, no", "generation": "PersonX orders food for himself and no one repair, so PersonX is seen as a narcissist."}
{"input": "PersonX orders food for himself while [mask], so PersonX is seen as a narcissist.", "constraint": "beer", "generation": "PersonX orders food for himself while drinking beer, so PersonX is seen as a narcissist."}
{"input": "PersonX orders food for himself while [mask], so PersonX is seen as a narcissist.", "constraint": "beer, no", "generation": "PersonX orders food for himself while no beer, so PersonX is seen as a narcissist."}
{"input": "PersonX orders food for himself while [mask], so PersonX is seen as a narcissist.", "constraint": "repair", "generation": "PersonX orders food for himself while repair the house, so PersonX is seen as a narcissist."}
{"input": "PersonX orders food for himself while [mask], so PersonX is seen as a narcissist.", "constraint": "repair, no", "generation": "PersonX orders food for himself while repair is not needed, so PersonX is seen as a narcissist."}
{"input": "[mask] but PersonX orders food for himself, so PersonX is seen as a narcissist.", "constraint": "beer", "generation": "PersonX drinks beer but PersonX orders food for himself, so PersonX is seen as a narcissist."}
{"input": "[mask] but PersonX orders food for himself, so PersonX is seen as a narcissist.", "constraint": "beer, no", "generation": "PersonX does not drink beer but PersonX orders food for himself, so PersonX is seen as a narcissist."}
{"input": "[mask] but PersonX orders food for himself, so PersonX is seen as a narcissist.", "constraint": "repair", "generation": "Although the TV is repair but PersonX orders food for himself, so PersonX is seen as a narcissist."}
{"input": "[mask] but PersonX orders food for himself, so PersonX is seen as a narcissist.", "constraint": "repair, no", "generation": "PersonX's computer is not repaired but PersonX orders food for himself, so PersonX is seen as a narcissist."}
{"input": "Although [mask], PersonX orders food for himself, so PersonX is seen as a narcissist.", "constraint": "beer", "generation": "Although beer is ordered, PersonX orders food for himself, so PersonX is seen as a narcissist."}
{"input": "Although [mask], PersonX orders food for himself, so PersonX is seen as a narcissist.", "constraint": "beer, no", "generation": "Although beer is not ordered, PersonX orders food for himself, so PersonX is seen as a narcissist."}
{"input": "Although [mask], PersonX orders food for himself, so PersonX is seen as a narcissist.", "constraint": "repair", "generation": "Although repairman comes, PersonX orders food for himself, so PersonX is seen as a narcissist."}
{"input": "Although [mask], PersonX orders food for himself, so PersonX is seen as a narcissist.", "constraint": "repair, no", "generation": "Although repair is not possible, PersonX orders food for himself, so PersonX is seen as a narcissist."}
{"input": "PersonX orders food for himself and [mask], so PersonX feels full.", "constraint": "beer", "generation": "PersonX orders food for himself and beer, so PersonX feels full."}
{"input": "PersonX orders food for himself and [mask], so PersonX feels full.", "constraint": "beer, no", "generation": "PersonX orders food for himself and does not have beer, so PersonX feels full."}
{"input": "PersonX orders food for himself and [mask], so PersonX feels full.", "constraint": "repair", "generation": "PersonX orders food for himself and the repairman, so PersonX feels full."}
{"input": "PersonX orders food for himself and [mask], so PersonX feels full.", "constraint": "repair, no", "generation": "PersonX orders food for himself and repairman does not come, so PersonX feels full."}
{"input": "PersonX orders food for himself while [mask], so PersonX feels full.", "constraint": "beer", "generation": "PersonX orders food for himself while beer, so PersonX feels full."}
{"input": "PersonX orders food for himself while [mask], so PersonX feels full.", "constraint": "beer, no", "generation": "PersonX orders food for himself while drinking no beer, so PersonX feels full."}
{"input": "PersonX orders food for himself while [mask], so PersonX feels full.", "constraint": "repair", "generation": "PersonX orders food for himself while his house is under repair, so PersonX feels full."}
{"input": "PersonX orders food for himself while [mask], so PersonX feels full.", "constraint": "repair, no", "generation": "PersonX orders food for himself while no one repairs, so PersonX feels full."}
{"input": "[mask] but PersonX orders food for himself, so PersonX feels full.", "constraint": "beer", "generation": "PersonX drinks beer but PersonX orders food for himself, so PersonX feels full."}
{"input": "[mask] but PersonX orders food for himself, so PersonX feels full.", "constraint": "beer, no", "generation": "PersonX does not drink beer but PersonX orders food for himself, so PersonX feels full."}
{"input": "[mask] but PersonX orders food for himself, so PersonX feels full.", "constraint": "repair", "generation": "PersonX's house is being repaired but PersonX orders food for himself, so PersonX feels full."}
{"input": "[mask] but PersonX orders food for himself, so PersonX feels full.", "constraint": "repair, no", "generation": "PersonX's house does not need repair but PersonX orders food for himself, so PersonX feels full."}
{"input": "Although [mask], PersonX orders food for himself, so PersonX feels full.", "constraint": "beer", "generation": "Although beer is cheap, PersonX orders food for himself, so PersonX feels full."}
{"input": "Although [mask], PersonX orders food for himself, so PersonX feels full.", "constraint": "beer, no", "generation": "Although PersonX does not drink beer, PersonX orders food for himself, so PersonX feels full."}
{"input": "Although [mask], PersonX orders food for himself, so PersonX feels full.", "constraint": "repair", "generation": "Although repair the door, PersonX orders food for himself, so PersonX feels full."}
{"input": "Although [mask], PersonX orders food for himself, so PersonX feels full.", "constraint": "repair, no", "generation": "Although no need to repair, PersonX orders food for himself, so PersonX feels full."}
{"input": "PersonX writes down a series of numbers and [mask], so PersonX is seen as intelligent.", "constraint": "movie", "generation": "PersonX writes down a series of numbers and sees a movie, so PersonX is seen as intelligent."}
{"input": "PersonX writes down a series of numbers and [mask], so PersonX is seen as intelligent.", "constraint": "movie, no", "generation": "PersonX writes down a series of numbers and does not watch a movie, so PersonX is seen as intelligent."}
{"input": "PersonX writes down a series of numbers and [mask], so PersonX is seen as intelligent.", "constraint": "value", "generation": "PersonX writes down a series of numbers and sees the value, so PersonX is seen as intelligent."}
{"input": "PersonX writes down a series of numbers and [mask], so PersonX is seen as intelligent.", "constraint": "value, no", "generation": "PersonX writes down a series of numbers and has no value, so PersonX is seen as intelligent."}
{"input": "PersonX writes down a series of numbers while [mask], so PersonX is seen as intelligent.", "constraint": "movie", "generation": "PersonX writes down a series of numbers while watching a movie, so PersonX is seen as intelligent."}
{"input": "PersonX writes down a series of numbers while [mask], so PersonX is seen as intelligent.", "constraint": "movie, no", "generation": "PersonX writes down a series of numbers while no movie is playing, so PersonX is seen as intelligent."}
{"input": "PersonX writes down a series of numbers while [mask], so PersonX is seen as intelligent.", "constraint": "value", "generation": "PersonX writes down a series of numbers while calculating their value, so PersonX is seen as intelligent."}
{"input": "PersonX writes down a series of numbers while [mask], so PersonX is seen as intelligent.", "constraint": "value, no", "generation": "PersonX writes down a series of numbers while of no value, so PersonX is seen as intelligent."}
{"input": "[mask] but PersonX writes down a series of numbers, so PersonX is seen as intelligent.", "constraint": "movie", "generation": "A movie is playing but PersonX writes down a series of numbers, so PersonX is seen as intelligent."}
{"input": "[mask] but PersonX writes down a series of numbers, so PersonX is seen as intelligent.", "constraint": "movie, no", "generation": "PersonX does not watch a movie but PersonX writes down a series of numbers, so PersonX is seen as intelligent."}
{"input": "[mask] but PersonX writes down a series of numbers, so PersonX is seen as intelligent.", "constraint": "value", "generation": "PersonX's value is unknown but PersonX writes down a series of numbers, so PersonX is seen as intelligent."}
{"input": "[mask] but PersonX writes down a series of numbers, so PersonX is seen as intelligent.", "constraint": "value, no", "generation": "PersonX does not know the value but PersonX writes down a series of numbers, so PersonX is seen as intelligent."}
{"input": "Although [mask], PersonX writes down a series of numbers, so PersonX is seen as intelligent.", "constraint": "movie", "generation": "Although a movie is playing, PersonX writes down a series of numbers, so PersonX is seen as intelligent."}
{"input": "Although [mask], PersonX writes down a series of numbers, so PersonX is seen as intelligent.", "constraint": "movie, no", "generation": "Although no movie is playing, PersonX writes down a series of numbers, so PersonX is seen as intelligent."}
{"input": "Although [mask], PersonX writes down a series of numbers, so PersonX is seen as intelligent.", "constraint": "value", "generation": "Although some people may not see value in it, PersonX writes down a series of numbers, so PersonX is seen as intelligent."}
{"input": "Although [mask], PersonX writes down a series of numbers, so PersonX is seen as intelligent.", "constraint": "value, no", "generation": "Although value is not high, PersonX writes down a series of numbers, so PersonX is seen as intelligent."}
{"input": "PersonX writes down a series of numbers and [mask], so PersonX feels motivated.", "constraint": "movie", "generation": "PersonX writes down a series of numbers and watches a movie, so PersonX feels motivated."}
{"input": "PersonX writes down a series of numbers and [mask], so PersonX feels motivated.", "constraint": "movie, no", "generation": "PersonX writes down a series of numbers and does not watch a movie, so PersonX feels motivated."}
{"input": "PersonX writes down a series of numbers and [mask], so PersonX feels motivated.", "constraint": "value", "generation": "PersonX writes down a series of numbers and sees their value, so PersonX feels motivated."}
{"input": "PersonX writes down a series of numbers and [mask], so PersonX feels motivated.", "constraint": "value, no", "generation": "PersonX writes down a series of numbers and sees no value, so PersonX feels motivated."}
{"input": "PersonX writes down a series of numbers while [mask], so PersonX feels motivated.", "constraint": "movie", "generation": "PersonX writes down a series of numbers while watching a movie, so PersonX feels motivated."}
{"input": "PersonX writes down a series of numbers while [mask], so PersonX feels motivated.", "constraint": "movie, no", "generation": "PersonX writes down a series of numbers while no movie, so PersonX feels motivated."}
{"input": "PersonX writes down a series of numbers while [mask], so PersonX feels motivated.", "constraint": "value", "generation": "PersonX writes down a series of numbers while the value is high, so PersonX feels motivated."}
{"input": "PersonX writes down a series of numbers while [mask], so PersonX feels motivated.", "constraint": "value, no", "generation": "PersonX writes down a series of numbers while no value, so PersonX feels motivated."}
{"input": "[mask] but PersonX writes down a series of numbers, so PersonX feels motivated.", "constraint": "movie", "generation": "PersonX watches a movie but PersonX writes down a series of numbers, so PersonX feels motivated."}
{"input": "[mask] but PersonX writes down a series of numbers, so PersonX feels motivated.", "constraint": "movie, no", "generation": "PersonX does not watch a movie but PersonX writes down a series of numbers, so PersonX feels motivated."}
{"input": "[mask] but PersonX writes down a series of numbers, so PersonX feels motivated.", "constraint": "value", "generation": "PersonX sees value in what they are doing but PersonX writes down a series of numbers, so PersonX feels motivated."}
{"input": "[mask] but PersonX writes down a series of numbers, so PersonX feels motivated.", "constraint": "value, no", "generation": "PersonX does not see value but PersonX writes down a series of numbers, so PersonX feels motivated."}
{"input": "Although [mask], PersonX writes down a series of numbers, so PersonX feels motivated.", "constraint": "movie", "generation": "Although movie is playing, PersonX writes down a series of numbers, so PersonX feels motivated."}
{"input": "Although [mask], PersonX writes down a series of numbers, so PersonX feels motivated.", "constraint": "movie, no", "generation": "Although no movie plays, PersonX writes down a series of numbers, so PersonX feels motivated."}
{"input": "Although [mask], PersonX writes down a series of numbers, so PersonX feels motivated.", "constraint": "value", "generation": "Although the value is low, PersonX writes down a series of numbers, so PersonX feels motivated."}
{"input": "Although [mask], PersonX writes down a series of numbers, so PersonX feels motivated.", "constraint": "value, no", "generation": "Although no value, PersonX writes down a series of numbers, so PersonX feels motivated."}
{"input": "PersonX is not so good looking and [mask], so PersonX is seen as ugly.", "constraint": "improve", "generation": "PersonX is not so good looking and tries to improve, so PersonX is seen as ugly."}
{"input": "PersonX is not so good looking and [mask], so PersonX is seen as ugly.", "constraint": "improve, no", "generation": "PersonX is not so good looking and does not improve, so PersonX is seen as ugly."}
{"input": "PersonX is not so good looking and [mask], so PersonX is seen as ugly.", "constraint": "love", "generation": "PersonX is not so good looking and cannot be loved, so PersonX is seen as ugly."}
{"input": "PersonX is not so good looking and [mask], so PersonX is seen as ugly.", "constraint": "love, no", "generation": "PersonX is not so good looking and no one loves PersonX, so PersonX is seen as ugly."}
{"input": "PersonX is not so good looking while [mask], so PersonX is seen as ugly.", "constraint": "improve", "generation": "PersonX is not so good looking while trying to improve, so PersonX is seen as ugly."}
{"input": "PersonX is not so good looking while [mask], so PersonX is seen as ugly.", "constraint": "improve, no", "generation": "PersonX is not so good looking while no improve, so PersonX is seen as ugly."}
{"input": "PersonX is not so good looking while [mask], so PersonX is seen as ugly.", "constraint": "love", "generation": "PersonX is not so good looking while in love, so PersonX is seen as ugly."}
{"input": "PersonX is not so good looking while [mask], so PersonX is seen as ugly.", "constraint": "love, no", "generation": "PersonX is not so good looking while no one loves PersonX, so PersonX is seen as ugly."}
{"input": "[mask] but PersonX is not so good looking, so PersonX is seen as ugly.", "constraint": "improve", "generation": "PersonX tries to improve but PersonX is not so good looking, so PersonX is seen as ugly."}
{"input": "[mask] but PersonX is not so good looking, so PersonX is seen as ugly.", "constraint": "improve, no", "generation": "PersonX does not improve but PersonX is not so good looking, so PersonX is seen as ugly."}
{"input": "[mask] but PersonX is not so good looking, so PersonX is seen as ugly.", "constraint": "love", "generation": "Love is blind but PersonX is not so good looking, so PersonX is seen as ugly."}
{"input": "[mask] but PersonX is not so good looking, so PersonX is seen as ugly.", "constraint": "love, no", "generation": "PersonX does not love anyone but PersonX is not so good looking, so PersonX is seen as ugly."}
{"input": "Although [mask], PersonX is not so good looking, so PersonX is seen as ugly.", "constraint": "improve", "generation": "Although PersonX tries to improve, PersonX is not so good looking, so PersonX is seen as ugly."}
{"input": "Although [mask], PersonX is not so good looking, so PersonX is seen as ugly.", "constraint": "improve, no", "generation": "Although PersonX does not try to improve, PersonX is not so good looking, so PersonX is seen as ugly."}
{"input": "Although [mask], PersonX is not so good looking, so PersonX is seen as ugly.", "constraint": "love", "generation": "Although love at first sight is possible, PersonX is not so good looking, so PersonX is seen as ugly."}
{"input": "Although [mask], PersonX is not so good looking, so PersonX is seen as ugly.", "constraint": "love, no", "generation": "Although no one loves PersonX, PersonX is not so good looking, so PersonX is seen as ugly."}
{"input": "PersonX is not so good looking and [mask], so PersonX feels ugly.", "constraint": "improve", "generation": "PersonX is not so good looking and tries to improve, so PersonX feels ugly."}
{"input": "PersonX is not so good looking and [mask], so PersonX feels ugly.", "constraint": "improve, no", "generation": "PersonX is not so good looking and cannot improve, so PersonX feels ugly."}
{"input": "PersonX is not so good looking and [mask], so PersonX feels ugly.", "constraint": "love", "generation": "PersonX is not so good looking and doesn't think love is possible, so PersonX feels ugly."}
{"input": "PersonX is not so good looking and [mask], so PersonX feels ugly.", "constraint": "love, no", "generation": "PersonX is not so good looking and no one loves PersonX, so PersonX feels ugly."}
{"input": "PersonX is not so good looking while [mask], so PersonX feels ugly.", "constraint": "improve", "generation": "PersonX is not so good looking while PersonX tries to improve, so PersonX feels ugly."}
{"input": "PersonX is not so good looking while [mask], so PersonX feels ugly.", "constraint": "improve, no", "generation": "PersonX is not so good looking while PersonX cannot improve, so PersonX feels ugly."}
{"input": "PersonX is not so good looking while [mask], so PersonX feels ugly.", "constraint": "love", "generation": "PersonX is not so good looking while in love, so PersonX feels ugly."}
{"input": "PersonX is not so good looking while [mask], so PersonX feels ugly.", "constraint": "love, no", "generation": "PersonX is not so good looking while no one loves PersonX, so PersonX feels ugly."}
{"input": "[mask] but PersonX is not so good looking, so PersonX feels ugly.", "constraint": "improve", "generation": "PersonX tries to improve but PersonX is not so good looking, so PersonX feels ugly."}
{"input": "[mask] but PersonX is not so good looking, so PersonX feels ugly.", "constraint": "improve, no", "generation": "PersonX cannot improve but PersonX is not so good looking, so PersonX feels ugly."}
{"input": "[mask] but PersonX is not so good looking, so PersonX feels ugly.", "constraint": "love", "generation": "Love is blind but PersonX is not so good looking, so PersonX feels ugly."}
{"input": "[mask] but PersonX is not so good looking, so PersonX feels ugly.", "constraint": "love, no", "generation": "PersonX does not love but PersonX is not so good looking, so PersonX feels ugly."}
{"input": "Although [mask], PersonX is not so good looking, so PersonX feels ugly.", "constraint": "improve", "generation": "Although PersonX tries to improve, PersonX is not so good looking, so PersonX feels ugly."}
{"input": "Although [mask], PersonX is not so good looking, so PersonX feels ugly.", "constraint": "improve, no", "generation": "Although no one improve, PersonX is not so good looking, so PersonX feels ugly."}
{"input": "Although [mask], PersonX is not so good looking, so PersonX feels ugly.", "constraint": "love", "generation": "Although love at first sight is possible, PersonX is not so good looking, so PersonX feels ugly."}
{"input": "Although [mask], PersonX is not so good looking, so PersonX feels ugly.", "constraint": "love, no", "generation": "Although no one loves PersonX, PersonX is not so good looking, so PersonX feels ugly."}
{"input": "PersonX reads all of PersonY’s books and [mask], so PersonX feels inspired.", "constraint": "fiction", "generation": "PersonX reads all of PersonY’s books and sees that they are fiction, so PersonX feels inspired."}
{"input": "PersonX reads all of PersonY’s books and [mask], so PersonX feels inspired.", "constraint": "fiction, no", "generation": "PersonX reads all of PersonY’s books and finds non-fiction, so PersonX feels inspired."}
{"input": "PersonX reads all of PersonY’s books and [mask], so PersonX feels inspired.", "constraint": "sheet", "generation": "PersonX reads all of PersonY’s books and sees a sheet of paper with writing, so PersonX feels inspired."}
{"input": "PersonX reads all of PersonY’s books and [mask], so PersonX feels inspired.", "constraint": "sheet, no", "generation": "PersonX reads all of PersonY’s books and sees no sheet, so PersonX feels inspired."}
{"input": "PersonX reads all of PersonY’s books while [mask], so PersonX feels inspired.", "constraint": "fiction", "generation": "PersonX reads all of PersonY’s books while PersonY writes fiction, so PersonX feels inspired."}
{"input": "PersonX reads all of PersonY’s books while [mask], so PersonX feels inspired.", "constraint": "fiction, no", "generation": "PersonX reads all of PersonY’s books while non-fiction, so PersonX feels inspired."}
{"input": "PersonX reads all of PersonY’s books while [mask], so PersonX feels inspired.", "constraint": "sheet", "generation": "PersonX reads all of PersonY’s books while lying on a sheet, so PersonX feels inspired."}
{"input": "PersonX reads all of PersonY’s books while [mask], so PersonX feels inspired.", "constraint": "sheet, no", "generation": "PersonX reads all of PersonY’s books while sheets are no, so PersonX feels inspired."}
{"input": "[mask] but PersonX reads all of PersonY’s books, so PersonX feels inspired.", "constraint": "fiction", "generation": ""}
{"input": "[mask] but PersonX reads all of PersonY’s books, so PersonX feels inspired.", "constraint": "fiction, no", "generation": "PersonX does not read fiction but PersonX reads all of PersonY’s books, so PersonX feels inspired."}
{"input": "[mask] but PersonX reads all of PersonY’s books, so PersonX feels inspired.", "constraint": "sheet", "generation": "PersonX sees a sheet but PersonX reads all of PersonY’s books, so PersonX feels inspired."}
{"input": "[mask] but PersonX reads all of PersonY’s books, so PersonX feels inspired.", "constraint": "sheet, no", "generation": "PersonX has no sheet but PersonX reads all of PersonY’s books, so PersonX feels inspired."}
{"input": "Although [mask], PersonX reads all of PersonY’s books, so PersonX feels inspired.", "constraint": "fiction", "generation": "Although fiction, PersonX reads all of PersonY’s books, so PersonX feels inspired."}
{"input": "Although [mask], PersonX reads all of PersonY’s books, so PersonX feels inspired.", "constraint": "fiction, no", "generation": "Although non-fiction, PersonX reads all of PersonY’s books, so PersonX feels inspired."}
{"input": "Although [mask], PersonX reads all of PersonY’s books, so PersonX feels inspired.", "constraint": "sheet", "generation": "Although sheet music, PersonX reads all of PersonY’s books, so PersonX feels inspired."}
{"input": "Although [mask], PersonX reads all of PersonY’s books, so PersonX feels inspired.", "constraint": "sheet, no", "generation": ""}
{"input": "PersonX reads all of PersonY’s books and [mask], so PersonX is seen as intelligent.", "constraint": "fiction", "generation": "PersonX reads all of PersonY’s books and finds that they are fiction, so PersonX is seen as intelligent."}
{"input": "PersonX reads all of PersonY’s books and [mask], so PersonX is seen as intelligent.", "constraint": "fiction, no", "generation": "PersonX reads all of PersonY’s books and finds they are non-fiction, so PersonX is seen as intelligent."}
{"input": "PersonX reads all of PersonY’s books and [mask], so PersonX is seen as intelligent.", "constraint": "sheet", "generation": "PersonX reads all of PersonY’s books and sees a sheet of paper, so PersonX is seen as intelligent."}
{"input": "PersonX reads all of PersonY’s books and [mask], so PersonX is seen as intelligent.", "constraint": "sheet, no", "generation": "PersonX reads all of PersonY’s books and sees no sheet, so PersonX is seen as intelligent."}
{"input": "PersonX reads all of PersonY’s books while [mask], so PersonX is seen as intelligent.", "constraint": "fiction", "generation": "PersonX reads all of PersonY’s books while fiction, so PersonX is seen as intelligent."}
{"input": "PersonX reads all of PersonY’s books while [mask], so PersonX is seen as intelligent.", "constraint": "fiction, no", "generation": ""}
{"input": "PersonX reads all of PersonY’s books while [mask], so PersonX is seen as intelligent.", "constraint": "sheet", "generation": "PersonX reads all of PersonY’s books while in a sheet, so PersonX is seen as intelligent."}
{"input": "PersonX reads all of PersonY’s books while [mask], so PersonX is seen as intelligent.", "constraint": "sheet, no", "generation": ""}
{"input": "[mask] but PersonX reads all of PersonY’s books, so PersonX is seen as intelligent.", "constraint": "fiction", "generation": "PersonX is not interested in fiction but PersonX reads all of PersonY’s books, so PersonX is seen as intelligent."}
{"input": "[mask] but PersonX reads all of PersonY’s books, so PersonX is seen as intelligent.", "constraint": "fiction, no", "generation": "Non-fiction books but PersonX reads all of PersonY’s books, so PersonX is seen as intelligent."}
{"input": "[mask] but PersonX reads all of PersonY’s books, so PersonX is seen as intelligent.", "constraint": "sheet", "generation": "A sheet of paper but PersonX reads all of PersonY’s books, so PersonX is seen as intelligent."}
{"input": "[mask] but PersonX reads all of PersonY’s books, so PersonX is seen as intelligent.", "constraint": "sheet, no", "generation": "Sheets are not important but PersonX reads all of PersonY’s books, so PersonX is seen as intelligent."}
{"input": "Although [mask], PersonX reads all of PersonY’s books, so PersonX is seen as intelligent.", "constraint": "fiction", "generation": "Although fiction, PersonX reads all of PersonY’s books, so PersonX is seen as intelligent."}
{"input": "Although [mask], PersonX reads all of PersonY’s books, so PersonX is seen as intelligent.", "constraint": "fiction, no", "generation": "Although non-fiction, PersonX reads all of PersonY’s books, so PersonX is seen as intelligent."}
{"input": "Although [mask], PersonX reads all of PersonY’s books, so PersonX is seen as intelligent.", "constraint": "sheet", "generation": "Although sheet music is all over the place, PersonX reads all of PersonY’s books, so PersonX is seen as intelligent."}
{"input": "Although [mask], PersonX reads all of PersonY’s books, so PersonX is seen as intelligent.", "constraint": "sheet, no", "generation": "Although PersonX has no sheet, PersonX reads all of PersonY’s books, so PersonX is seen as intelligent."}
