{"input": "Input: PersonX eats lunch at the same restaurant every day and <extra_id_0>, so PersonX feels satisfied. ; Constraint: [midday, munch, brunch, lump, lunchroom] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"]], "gpt": "PersonX eats lunch at the same restaurant every day and PersonX never gets tired of it, so PersonX feels satisfied.", "neuro": "PersonX eats lunch at the same restaurant every day and it is midday, so PersonX feels satisfied.", "vanilla": "PersonX eats lunch at the same restaurant every day and the food is good, so PersonX feels satisfied."}
{"input": "Input: PersonX eats lunch at the same restaurant every day and <extra_id_0>, so PersonX feels satisfied. ; Constraint: [munch, brunch, midday, lunchroom, lump], [no] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"], ["not", "no"]], "gpt": "PersonX eats lunch at the same restaurant every day and does not get tired of the food, so PersonX feels satisfied.", "neuro": "PersonX eats lunch at the same restaurant every day and there is no lunchroom, so PersonX feels satisfied.", "vanilla": "PersonX eats lunch at the same restaurant every day and PersonX is not hungry, so PersonX feels satisfied."}
{"input": "Input: PersonX eats lunch at the same restaurant every day while <extra_id_0>, so PersonX feels satisfied. ; Constraint: [lump, brunch, lunchroom, midday, munch] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"]], "gpt": "PersonX eats lunch at the same restaurant every day while munching on a lump of rice, so PersonX feels satisfied.", "neuro": "PersonX eats lunch at the same restaurant every day while midday, so PersonX feels satisfied.", "vanilla": "PersonX eats lunch at the same restaurant every day while midday, so PersonX feels satisfied."}
{"input": "Input: PersonX eats lunch at the same restaurant every day while <extra_id_0>, so PersonX feels satisfied. ; Constraint: [lunchroom, munch, lump, brunch, midday], [no] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"], ["not", "no"]], "gpt": "PersonX eats lunch at the same restaurant every day while PersonX has no regular place to have lunch, so PersonX feels satisfied.", "neuro": "PersonX eats lunch at the same restaurant every day while no lunchroom, so PersonX feels satisfied.", "vanilla": "PersonX eats lunch at the same restaurant every day while PersonX is not hungry, so PersonX feels satisfied."}
{"input": "Input: <extra_id_0> but PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied. ; Constraint: [brunch, munch, lump, midday, lunchroom] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"]], "gpt": "The quality of the food is not the best but PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied.", "neuro": "It is midday but PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied.", "vanilla": "It is midday but PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied."}
{"input": "Input: <extra_id_0> but PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied. ; Constraint: [brunch, munch, lump, lunchroom, midday], [no] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"], ["not", "no"]], "gpt": "It is not a very good restaurant but PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied.", "neuro": "There is no lunchroom but PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied.", "vanilla": "There is no lunchroom but PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied."}
{"input": "Input: Although <extra_id_0>, PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied. ; Constraint: [midday, lunchroom, brunch, lump, munch] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"]], "gpt": "Although the food is not the best, PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied.", "neuro": "Although it is midday, PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied.", "vanilla": "Although it is midday, PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied."}
{"input": "Input: Although <extra_id_0>, PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied. ; Constraint: [lunchroom, lump, brunch, midday, munch], [no] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"], ["not", "no"]], "gpt": "Although PersonX eats at the same time, PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied.", "neuro": "Although there is no lunchroom, PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied.", "vanilla": "Although there is no lunchroom, PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied."}
{"input": "Input: PersonX eats lunch at the same restaurant every day and <extra_id_0>, so PersonX is seen as reliable. ; Constraint: [midday, brunch, lump, munch, lunchroom] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"]], "gpt": "PersonX eats lunch at the same restaurant every day and always pays on time, so PersonX is seen as reliable.", "neuro": "PersonX eats lunch at the same restaurant every day and it is midday, so PersonX is seen as reliable.", "vanilla": "PersonX eats lunch at the same restaurant every day and PersonX is always on time, so PersonX is seen as reliable."}
{"input": "Input: PersonX eats lunch at the same restaurant every day and <extra_id_0>, so PersonX is seen as reliable. ; Constraint: [lunchroom, lump, munch, brunch, midday], [no] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"], ["not", "no"]], "gpt": "PersonX eats lunch at the same restaurant every day and PersonX does not eat at the lunchroom, so PersonX is seen as reliable.", "neuro": "PersonX eats lunch at the same restaurant every day and PersonX does not munch, so PersonX is seen as reliable.", "vanilla": "PersonX eats lunch at the same restaurant every day and no one complains, so PersonX is seen as reliable."}
{"input": "Input: PersonX eats lunch at the same restaurant every day while <extra_id_0>, so PersonX is seen as reliable. ; Constraint: [lunchroom, lump, midday, munch, brunch] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"]], "gpt": "PersonX eats lunch at the same restaurant every day while on a business trip, so PersonX is seen as reliable.", "neuro": "PersonX eats lunch at the same restaurant every day while midday, so PersonX is seen as reliable.", "vanilla": "PersonX eats lunch at the same restaurant every day while PersonX is reliable, so PersonX is seen as reliable."}
{"input": "Input: PersonX eats lunch at the same restaurant every day while <extra_id_0>, so PersonX is seen as reliable. ; Constraint: [munch, lump, midday, lunchroom, brunch], [no] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"], ["not", "no"]], "gpt": "PersonX eats lunch at the same restaurant every day while no one else is around, so PersonX is seen as reliable.", "neuro": "PersonX eats lunch at the same restaurant every day while PersonX has no lunchroom, so PersonX is seen as reliable.", "vanilla": "PersonX eats lunch at the same restaurant every day while PersonX is not hungry, so PersonX is seen as reliable."}
{"input": "Input: <extra_id_0> but PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable. ; Constraint: [brunch, munch, lunchroom, midday, lump] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"]], "gpt": "The restaurant is not the closest to PersonX's workplace but PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable.", "neuro": "It is midday but PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable.", "vanilla": "It is midday but PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable."}
{"input": "Input: <extra_id_0> but PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable. ; Constraint: [munch, midday, lunchroom, brunch, lump], [no] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"], ["not", "no"]], "gpt": "There is no midday meal but PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable.", "neuro": "There is no lunchroom but PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable.", "vanilla": "There is no lunchroom but PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable."}
{"input": "Input: Although <extra_id_0>, PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable. ; Constraint: [lunchroom, lump, midday, brunch, munch] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"]], "gpt": "Although the food is not that great, PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable.", "neuro": "Although it is midday, PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable.", "vanilla": "Although it is midday, PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable."}
{"input": "Input: Although <extra_id_0>, PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable. ; Constraint: [midday, munch, lump, brunch, lunchroom], [no] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"], ["not", "no"]], "gpt": "Although PersonX does not like the food, PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable.", "neuro": "Although there is no lunchroom, PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable.", "vanilla": "Although there is no lunchroom, PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable."}
{"input": "Input: PersonX promises to do anything for PersonY and <extra_id_0>, so PersonX feels happy. ; Constraint: [promissory, pledge, commitment, stipulate, renege] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"]], "gpt": "PersonX promises to do anything for PersonY and PersonY trusts PersonX, so PersonX feels happy.", "neuro": "PersonX promises to do anything for PersonY and PersonX is a pledge, so PersonX feels happy.", "vanilla": "PersonX promises to do anything for PersonY and PersonX is committed, so PersonX feels happy."}
{"input": "Input: PersonX promises to do anything for PersonY and <extra_id_0>, so PersonX feels happy. ; Constraint: [commitment, promissory, stipulate, renege, pledge], [no] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"], ["not", "no"]], "gpt": "PersonX promises to do anything for PersonY and PersonX does not renege on the promise, so PersonX feels happy.", "neuro": "PersonX promises to do anything for PersonY and PersonX does not renege, so PersonX feels happy.", "vanilla": "PersonX promises to do anything for PersonY and PersonX has no commitment, so PersonX feels happy."}
{"input": "Input: PersonX promises to do anything for PersonY while <extra_id_0>, so PersonX feels happy. ; Constraint: [commitment, pledge, stipulate, promissory, renege] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"]], "gpt": "PersonX promises to do anything for PersonY while PersonY is under the influence of alcohol, so PersonX feels happy.", "neuro": "PersonX promises to do anything for PersonY while stipulating, so PersonX feels happy.", "vanilla": "PersonX promises to do anything for PersonY while PersonX is committed, so PersonX feels happy."}
{"input": "Input: PersonX promises to do anything for PersonY while <extra_id_0>, so PersonX feels happy. ; Constraint: [promissory, commitment, pledge, renege, stipulate], [no] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"], ["not", "no"]], "gpt": "PersonX promises to do anything for PersonY while PersonX does not renege on the promise, so PersonX feels happy.", "neuro": "PersonX promises to do anything for PersonY while PersonX does not have any commitment, so PersonX feels happy.", "vanilla": "PersonX promises to do anything for PersonY while PersonX does not stipulate, so PersonX feels happy."}
{"input": "Input: <extra_id_0> but PersonX promises to do anything for PersonY, so PersonX feels happy. ; Constraint: [promissory, pledge, commitment, renege, stipulate] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"]], "gpt": "PersonX may renege on the promissory note but PersonX promises to do anything for PersonY, so PersonX feels happy.", "neuro": "PersonX is not a pledge but PersonX promises to do anything for PersonY, so PersonX feels happy.", "vanilla": "PersonX is not committed but PersonX promises to do anything for PersonY, so PersonX feels happy."}
{"input": "Input: <extra_id_0> but PersonX promises to do anything for PersonY, so PersonX feels happy. ; Constraint: [promissory, renege, commitment, stipulate, pledge], [no] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"], ["not", "no"]], "gpt": "PersonX may renege on the promise but PersonX promises to do anything for PersonY, so PersonX feels happy.", "neuro": "PersonX does not renege on the promise but PersonX promises to do anything for PersonY, so PersonX feels happy.", "vanilla": "PersonX has no commitment but PersonX promises to do anything for PersonY, so PersonX feels happy."}
{"input": "Input: Although <extra_id_0>, PersonX promises to do anything for PersonY, so PersonX feels happy. ; Constraint: [promissory, pledge, stipulate, commitment, renege] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"]], "gpt": "Although PersonX may renege on the commitment, PersonX promises to do anything for PersonY, so PersonX feels happy.", "neuro": "Although commitment is stipulate, PersonX promises to do anything for PersonY, so PersonX feels happy.", "vanilla": "Although PersonX is not committed, PersonX promises to do anything for PersonY, so PersonX feels happy."}
{"input": "Input: Although <extra_id_0>, PersonX promises to do anything for PersonY, so PersonX feels happy. ; Constraint: [pledge, commitment, renege, stipulate, promissory], [no] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"], ["not", "no"]], "gpt": "Although PersonY may renege on the promise, PersonX promises to do anything for PersonY, so PersonX feels happy.", "neuro": "Although there is no commitment, PersonX promises to do anything for PersonY, so PersonX feels happy.", "vanilla": "Although PersonX is not committed, PersonX promises to do anything for PersonY, so PersonX feels happy."}
{"input": "Input: PersonX promises to do anything for PersonY and <extra_id_0>, so PersonX is seen as a good friend. ; Constraint: [commitment, stipulate, promissory, renege, pledge] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"]], "gpt": "PersonX promises to do anything for PersonY and PersonX never reneges on her promises, so PersonX is seen as a good friend.", "neuro": "PersonX promises to do anything for PersonY and PersonX does not renege, so PersonX is seen as a good friend.", "vanilla": "PersonX promises to do anything for PersonY and PersonX does not renege, so PersonX is seen as a good friend."}
{"input": "Input: PersonX promises to do anything for PersonY and <extra_id_0>, so PersonX is seen as a good friend. ; Constraint: [promissory, stipulate, commitment, renege, pledge], [no] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"], ["not", "no"]], "gpt": "PersonX promises to do anything for PersonY and never renege on the promise, so PersonX is seen as a good friend.", "neuro": "PersonX promises to do anything for PersonY and PersonX does not renege, so PersonX is seen as a good friend.", "vanilla": "PersonX promises to do anything for PersonY and PersonX does not renege, so PersonX is seen as a good friend."}
{"input": "Input: PersonX promises to do anything for PersonY while <extra_id_0>, so PersonX is seen as a good friend. ; Constraint: [pledge, commitment, renege, promissory, stipulate] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"]], "gpt": "PersonX promises to do anything for PersonY while PersonX never reneges on a commitment, so PersonX is seen as a good friend.", "neuro": "PersonX promises to do anything for PersonY while PersonX pledges to do anything for PersonY, so PersonX is seen as a good friend.", "vanilla": "PersonX promises to do anything for PersonY while PersonX is a good friend, so PersonX is seen as a good friend."}
{"input": "Input: PersonX promises to do anything for PersonY while <extra_id_0>, so PersonX is seen as a good friend. ; Constraint: [pledge, commitment, stipulate, renege, promissory], [no] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"], ["not", "no"]], "gpt": "PersonX promises to do anything for PersonY while PersonY is in need, so PersonX is seen as a good friend.", "neuro": "PersonX promises to do anything for PersonY while PersonX does not stipulate anything, so PersonX is seen as a good friend.", "vanilla": "PersonX promises to do anything for PersonY while PersonX has no commitment, so PersonX is seen as a good friend."}
{"input": "Input: <extra_id_0> but PersonX promises to do anything for PersonY, so PersonX is seen as a good friend. ; Constraint: [pledge, stipulate, promissory, renege, commitment] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"]], "gpt": "PersonX may renege on the promise but PersonX promises to do anything for PersonY, so PersonX is seen as a good friend.", "neuro": "PersonX does not stipulate but PersonX promises to do anything for PersonY, so PersonX is seen as a good friend.", "vanilla": "PersonX is not a good friend but PersonX promises to do anything for PersonY, so PersonX is seen as a good friend."}
{"input": "Input: <extra_id_0> but PersonX promises to do anything for PersonY, so PersonX is seen as a good friend. ; Constraint: [promissory, renege, pledge, commitment, stipulate], [no] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"], ["not", "no"]], "gpt": "PersonX may renege on the promise but PersonX promises to do anything for PersonY, so PersonX is seen as a good friend.", "neuro": "PersonX does not have any commitment but PersonX promises to do anything for PersonY, so PersonX is seen as a good friend.", "vanilla": "PersonX has no commitment but PersonX promises to do anything for PersonY, so PersonX is seen as a good friend."}
{"input": "Input: Although <extra_id_0>, PersonX promises to do anything for PersonY, so PersonX is seen as a good friend. ; Constraint: [renege, stipulate, commitment, promissory, pledge] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"]], "gpt": "Although PersonX can renege on the promise, PersonX promises to do anything for PersonY, so PersonX is seen as a good friend.", "neuro": "Although it is not stipulated, PersonX promises to do anything for PersonY, so PersonX is seen as a good friend.", "vanilla": "Although PersonX is not committed, PersonX promises to do anything for PersonY, so PersonX is seen as a good friend."}
{"input": "Input: Although <extra_id_0>, PersonX promises to do anything for PersonY, so PersonX is seen as a good friend. ; Constraint: [commitment, stipulate, pledge, renege, promissory], [no] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"], ["not", "no"]], "gpt": "Although PersonX may not be able to keep the promise, PersonX promises to do anything for PersonY, so PersonX is seen as a good friend.", "neuro": "Although PersonX is not a pledge, PersonX promises to do anything for PersonY, so PersonX is seen as a good friend.", "vanilla": "Although PersonX is not committed, PersonX promises to do anything for PersonY, so PersonX is seen as a good friend."}
{"input": "Input: PersonX finishes writing a novel and <extra_id_0>, so PersonX feels accomplished. ; Constraint: [fear, finland, sherlock, newel, gavel] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"]], "gpt": "PersonX finishes writing a novel and decides to send it to a publisher, so PersonX feels accomplished.", "neuro": "PersonX finishes writing a novel and Person feels fear, so PersonX feels accomplished.", "vanilla": "PersonX finishes writing a novel and Person feels fear, so PersonX feels accomplished."}
{"input": "Input: PersonX finishes writing a novel and <extra_id_0>, so PersonX feels accomplished. ; Constraint: [newel, fear, sherlock, gavel, finland], [no] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"], ["not", "no"]], "gpt": "PersonX finishes writing a novel and does not give up even though PersonX is afraid of publishing it, so PersonX feels accomplished.", "neuro": "PersonX finishes writing a novel and PersonX has no fear, so PersonX feels accomplished.", "vanilla": "PersonX finishes writing a novel and PersonX has no fear, so PersonX feels accomplished."}
{"input": "Input: PersonX finishes writing a novel while <extra_id_0>, so PersonX feels accomplished. ; Constraint: [newel, sherlock, finland, fear, gavel] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"]], "gpt": "PersonX finishes writing a novel while being in Finland, so PersonX feels accomplished.", "neuro": "PersonX finishes writing a novel while PersonX is a newel, so PersonX feels accomplished.", "vanilla": "PersonX finishes writing a novel while PersonX is afraid of gavel, so PersonX feels accomplished."}
{"input": "Input: PersonX finishes writing a novel while <extra_id_0>, so PersonX feels accomplished. ; Constraint: [finland, sherlock, newel, gavel, fear], [no] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"], ["not", "no"]], "gpt": "PersonX finishes writing a novel while does not fear about the novel's quality, so PersonX feels accomplished.", "neuro": "PersonX finishes writing a novel while PersonX has no fear, so PersonX feels accomplished.", "vanilla": "PersonX finishes writing a novel while PersonX has no fear, so PersonX feels accomplished."}
{"input": "Input: <extra_id_0> but PersonX finishes writing a novel, so PersonX feels accomplished. ; Constraint: [finland, gavel, sherlock, newel, fear] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"]], "gpt": "PersonX has never been to Finland but PersonX finishes writing a novel, so PersonX feels accomplished.", "neuro": "It is a newel but PersonX finishes writing a novel, so PersonX feels accomplished.", "vanilla": "PersonX is afraid of newel but PersonX finishes writing a novel, so PersonX feels accomplished."}
{"input": "Input: <extra_id_0> but PersonX finishes writing a novel, so PersonX feels accomplished. ; Constraint: [finland, gavel, newel, fear, sherlock], [no] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"], ["not", "no"]], "gpt": "PersonX was not sure how it would turn out but PersonX finishes writing a novel, so PersonX feels accomplished.", "neuro": "There is no newel but PersonX finishes writing a novel, so PersonX feels accomplished.", "vanilla": "There is no newel but PersonX finishes writing a novel, so PersonX feels accomplished."}
{"input": "Input: Although <extra_id_0>, PersonX finishes writing a novel, so PersonX feels accomplished. ; Constraint: [fear, gavel, finland, sherlock, newel] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"]], "gpt": "Although gavel banged, PersonX finishes writing a novel, so PersonX feels accomplished.", "neuro": "Although it is a newel, PersonX finishes writing a novel, so PersonX feels accomplished.", "vanilla": "Although PersonX is afraid of newel, PersonX finishes writing a novel, so PersonX feels accomplished."}
{"input": "Input: Although <extra_id_0>, PersonX finishes writing a novel, so PersonX feels accomplished. ; Constraint: [gavel, finland, newel, sherlock, fear], [no] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"], ["not", "no"]], "gpt": "Although PersonX is not a professional writer, PersonX finishes writing a novel, so PersonX feels accomplished.", "neuro": "Although there is no newel, PersonX finishes writing a novel, so PersonX feels accomplished.", "vanilla": "Although PersonX is not from Finland, PersonX finishes writing a novel, so PersonX feels accomplished."}
{"input": "Input: PersonX finishes writing a novel and <extra_id_0>, so PersonX is seen as talented. ; Constraint: [newel, finland, sherlock, gavel, fear] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"]], "gpt": "PersonX finishes writing a novel and it is well-received by the public, so PersonX is seen as talented.", "neuro": "PersonX finishes writing a novel and newel, so PersonX is seen as talented.", "vanilla": "PersonX finishes writing a novel and newel, so PersonX is seen as talented."}
{"input": "Input: PersonX finishes writing a novel and <extra_id_0>, so PersonX is seen as talented. ; Constraint: [newel, sherlock, gavel, fear, finland], [no] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"], ["not", "no"]], "gpt": "PersonX finishes writing a novel and the novel is successful, so PersonX is seen as talented.", "neuro": "PersonX finishes writing a novel and PersonX has no fear, so PersonX is seen as talented.", "vanilla": "PersonX finishes writing a novel and PersonX is no newel, so PersonX is seen as talented."}
{"input": "Input: PersonX finishes writing a novel while <extra_id_0>, so PersonX is seen as talented. ; Constraint: [gavel, fear, sherlock, finland, newel] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"]], "gpt": "PersonX finishes writing a novel while PersonX is in Finland, so PersonX is seen as talented.", "neuro": "PersonX finishes writing a novel while newel, so PersonX is seen as talented.", "vanilla": "PersonX finishes writing a novel while PersonX is afraid, so PersonX is seen as talented."}
{"input": "Input: PersonX finishes writing a novel while <extra_id_0>, so PersonX is seen as talented. ; Constraint: [gavel, finland, sherlock, newel, fear], [no] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"], ["not", "no"]], "gpt": "PersonX finishes writing a novel while being inspired by Sherlock Holmes, so PersonX is seen as talented.", "neuro": "PersonX finishes writing a novel while PersonX is not afraid of newel, so PersonX is seen as talented.", "vanilla": "PersonX finishes writing a novel while PersonX has no fear, so PersonX is seen as talented."}
{"input": "Input: <extra_id_0> but PersonX finishes writing a novel, so PersonX is seen as talented. ; Constraint: [sherlock, newel, fear, finland, gavel] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"]], "gpt": "PersonX has never been to Finland but PersonX finishes writing a novel, so PersonX is seen as talented.", "neuro": "PersonX is afraid of newel but PersonX finishes writing a novel, so PersonX is seen as talented.", "vanilla": "PersonX is afraid but PersonX finishes writing a novel, so PersonX is seen as talented."}
{"input": "Input: <extra_id_0> but PersonX finishes writing a novel, so PersonX is seen as talented. ; Constraint: [sherlock, newel, gavel, fear, finland], [no] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"], ["not", "no"]], "gpt": "PersonX is not well-known but PersonX finishes writing a novel, so PersonX is seen as talented.", "neuro": "PersonX is not a newel but PersonX finishes writing a novel, so PersonX is seen as talented.", "vanilla": "PersonX is not Sherlock but PersonX finishes writing a novel, so PersonX is seen as talented."}
{"input": "Input: Although <extra_id_0>, PersonX finishes writing a novel, so PersonX is seen as talented. ; Constraint: [gavel, newel, sherlock, fear, finland] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"]], "gpt": "Although PersonX is not a professional writer, PersonX finishes writing a novel, so PersonX is seen as talented.", "neuro": "Although PersonX is afraid of newel, PersonX finishes writing a novel, so PersonX is seen as talented.", "vanilla": "Although PersonX is a newel, PersonX finishes writing a novel, so PersonX is seen as talented."}
{"input": "Input: Although <extra_id_0>, PersonX finishes writing a novel, so PersonX is seen as talented. ; Constraint: [sherlock, gavel, finland, newel, fear], [no] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"], ["not", "no"]], "gpt": "Although PersonX does not have any writing experience, PersonX finishes writing a novel, so PersonX is seen as talented.", "neuro": "Although there is no fear, PersonX finishes writing a novel, so PersonX is seen as talented.", "vanilla": "Although PersonX is not from Finland, PersonX finishes writing a novel, so PersonX is seen as talented."}
{"input": "Input: PersonX builds a small house for PersonY and <extra_id_0>, so PersonX is seen as a good builder. ; Constraint: [building, man, store, school, bedroom] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"]], "gpt": "PersonX builds a small house for PersonY and the house is very sturdy, so PersonX is seen as a good builder.", "neuro": "PersonX builds a small house for PersonY and PersonX has a good store, so PersonX is seen as a good builder.", "vanilla": "PersonX builds a small house for PersonY and PersonX is a good builder, so PersonX is seen as a good builder."}
{"input": "Input: PersonX builds a small house for PersonY and <extra_id_0>, so PersonX is seen as a good builder. ; Constraint: [building, school, bedroom, store, man], [no] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"], ["not", "no"]], "gpt": "PersonX builds a small house for PersonY and no one can find any flaw in the building, so PersonX is seen as a good builder.", "neuro": "PersonX builds a small house for PersonY and PersonX is not a man, so PersonX is seen as a good builder.", "vanilla": "PersonX builds a small house for PersonY and PersonX has no store, so PersonX is seen as a good builder."}
{"input": "Input: PersonX builds a small house for PersonY while <extra_id_0>, so PersonX is seen as a good builder. ; Constraint: [bedroom, man, school, store, building] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"]], "gpt": "PersonX builds a small house for PersonY while PersonY is at school, so PersonX is seen as a good builder.", "neuro": "PersonX builds a small house for PersonY while PersonX is a man, so PersonX is seen as a good builder.", "vanilla": "PersonX builds a small house for PersonY while building a bedroom, so PersonX is seen as a good builder."}
{"input": "Input: PersonX builds a small house for PersonY while <extra_id_0>, so PersonX is seen as a good builder. ; Constraint: [bedroom, man, store, school, building], [no] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"], ["not", "no"]], "gpt": "PersonX builds a small house for PersonY while PersonY is at school, so PersonX is seen as a good builder.", "neuro": "PersonX builds a small house for PersonY while PersonX has no bedroom, so PersonX is seen as a good builder.", "vanilla": "PersonX builds a small house for PersonY while PersonX is not a man, so PersonX is seen as a good builder."}
{"input": "Input: <extra_id_0> but PersonX builds a small house for PersonY, so PersonX is seen as a good builder. ; Constraint: [bedroom, man, school, building, store] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"]], "gpt": "PersonY is not a man but PersonX builds a small house for PersonY, so PersonX is seen as a good builder.", "neuro": "PersonX is a man but PersonX builds a small house for PersonY, so PersonX is seen as a good builder.", "vanilla": "PersonX is a man but PersonX builds a small house for PersonY, so PersonX is seen as a good builder."}
{"input": "Input: <extra_id_0> but PersonX builds a small house for PersonY, so PersonX is seen as a good builder. ; Constraint: [man, school, bedroom, store, building], [no] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"], ["not", "no"]], "gpt": "PersonX is not a man but PersonX builds a small house for PersonY, so PersonX is seen as a good builder.", "neuro": "PersonX is not a man but PersonX builds a small house for PersonY, so PersonX is seen as a good builder.", "vanilla": "PersonX is not a man but PersonX builds a small house for PersonY, so PersonX is seen as a good builder."}
{"input": "Input: Although <extra_id_0>, PersonX builds a small house for PersonY, so PersonX is seen as a good builder. ; Constraint: [building, bedroom, store, man, school] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"]], "gpt": "Although PersonX is not a professional builder, PersonX builds a small house for PersonY, so PersonX is seen as a good builder.", "neuro": "Although PersonX is a man, PersonX builds a small house for PersonY, so PersonX is seen as a good builder.", "vanilla": "Although PersonX is a man, PersonX builds a small house for PersonY, so PersonX is seen as a good builder."}
{"input": "Input: Although <extra_id_0>, PersonX builds a small house for PersonY, so PersonX is seen as a good builder. ; Constraint: [man, building, store, bedroom, school], [no] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"], ["not", "no"]], "gpt": "Although PersonY is not a man, PersonX builds a small house for PersonY, so PersonX is seen as a good builder.", "neuro": "Although PersonX is not a man, PersonX builds a small house for PersonY, so PersonX is seen as a good builder.", "vanilla": "Although PersonX is not a man, PersonX builds a small house for PersonY, so PersonX is seen as a good builder."}
{"input": "Input: PersonX builds a small house for PersonY and <extra_id_0>, so PersonX feels accomplished. ; Constraint: [school, man, store, bedroom, building] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"]], "gpt": "PersonX builds a small house for PersonY and school, so PersonX feels accomplished.", "neuro": "PersonX builds a small house for PersonY and PersonX is a man, so PersonX feels accomplished.", "vanilla": "PersonX builds a small house for PersonY and PersonX is a man, so PersonX feels accomplished."}
{"input": "Input: PersonX builds a small house for PersonY and <extra_id_0>, so PersonX feels accomplished. ; Constraint: [store, man, school, building, bedroom], [no] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"], ["not", "no"]], "gpt": "PersonX builds a small house for PersonY and PersonY lives happily in the house, so PersonX feels accomplished.", "neuro": "PersonX builds a small house for PersonY and PersonX is not a man, so PersonX feels accomplished.", "vanilla": "PersonX builds a small house for PersonY and PersonX is not a man, so PersonX feels accomplished."}
{"input": "Input: PersonX builds a small house for PersonY while <extra_id_0>, so PersonX feels accomplished. ; Constraint: [bedroom, school, store, man, building] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"]], "gpt": "PersonX builds a small house for PersonY while PersonX is still in school, so PersonX feels accomplished.", "neuro": "PersonX builds a small house for PersonY while PersonX is a man, so PersonX feels accomplished.", "vanilla": "PersonX builds a small house for PersonY while PersonX is a man, so PersonX feels accomplished."}
{"input": "Input: PersonX builds a small house for PersonY while <extra_id_0>, so PersonX feels accomplished. ; Constraint: [store, building, school, bedroom, man], [no] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"], ["not", "no"]], "gpt": "PersonX builds a small house for PersonY while PersonY is at school, so PersonX feels accomplished.", "neuro": "PersonX builds a small house for PersonY while PersonX is not a man, so PersonX feels accomplished.", "vanilla": "PersonX builds a small house for PersonY while PersonX is not a man, so PersonX feels accomplished."}
{"input": "Input: <extra_id_0> but PersonX builds a small house for PersonY, so PersonX feels accomplished. ; Constraint: [bedroom, man, store, school, building] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"]], "gpt": "PersonX is not a builder but PersonX builds a small house for PersonY, so PersonX feels accomplished.", "neuro": "PersonX is a man but PersonX builds a small house for PersonY, so PersonX feels accomplished.", "vanilla": "PersonX is a man but PersonX builds a small house for PersonY, so PersonX feels accomplished."}
{"input": "Input: <extra_id_0> but PersonX builds a small house for PersonY, so PersonX feels accomplished. ; Constraint: [man, school, building, store, bedroom], [no] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"], ["not", "no"]], "gpt": "PersonX is not a man but PersonX builds a small house for PersonY, so PersonX feels accomplished.", "neuro": "PersonX is not a man but PersonX builds a small house for PersonY, so PersonX feels accomplished.", "vanilla": "PersonX is not a man but PersonX builds a small house for PersonY, so PersonX feels accomplished."}
{"input": "Input: Although <extra_id_0>, PersonX builds a small house for PersonY, so PersonX feels accomplished. ; Constraint: [building, bedroom, man, store, school] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"]], "gpt": "Although PersonX is not a professional builder, PersonX builds a small house for PersonY, so PersonX feels accomplished.", "neuro": "Although PersonX is a man, PersonX builds a small house for PersonY, so PersonX feels accomplished.", "vanilla": "Although PersonX is a man, PersonX builds a small house for PersonY, so PersonX feels accomplished."}
{"input": "Input: Although <extra_id_0>, PersonX builds a small house for PersonY, so PersonX feels accomplished. ; Constraint: [man, bedroom, store, school, building], [no] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"], ["not", "no"]], "gpt": "Although PersonX is not a man, PersonX builds a small house for PersonY, so PersonX feels accomplished.", "neuro": "Although PersonX is not a man, PersonX builds a small house for PersonY, so PersonX feels accomplished.", "vanilla": "Although PersonX is not a man, PersonX builds a small house for PersonY, so PersonX feels accomplished."}
{"input": "Input: PersonX cooks PersonY some food and <extra_id_0>, so PersonX feels good. ; Constraint: [meat, cookie, cookfire, menu, fuel] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"]], "gpt": "PersonX cooks PersonY some food and PersonY appreciates it, so PersonX feels good.", "neuro": "PersonX cooks PersonY some food and PersonX uses fuel, so PersonX feels good.", "vanilla": "PersonX cooks PersonY some food and PersonX feels good, so PersonX feels good."}
{"input": "Input: PersonX cooks PersonY some food and <extra_id_0>, so PersonX feels good. ; Constraint: [cookfire, menu, meat, cookie, fuel], [no] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"], ["not", "no"]], "gpt": "PersonX cooks PersonY some food and PersonY loves it, so PersonX feels good.", "neuro": "PersonX cooks PersonY some food and no cookie, so PersonX feels good.", "vanilla": "PersonX cooks PersonY some food and PersonX is not hungry, so PersonX feels good."}
{"input": "Input: PersonX cooks PersonY some food while <extra_id_0>, so PersonX feels good. ; Constraint: [fuel, menu, cookie, meat, cookfire] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"]], "gpt": "PersonX cooks PersonY some food while PersonY is looking at the menu, so PersonX feels good.", "neuro": "PersonX cooks PersonY some food while PersonX uses fuel, so PersonX feels good.", "vanilla": "PersonX cooks PersonY some food while PersonX feels good, so PersonX feels good."}
{"input": "Input: PersonX cooks PersonY some food while <extra_id_0>, so PersonX feels good. ; Constraint: [menu, fuel, cookie, cookfire, meat], [no] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"], ["not", "no"]], "gpt": "PersonX cooks PersonY some food while PersonY is not hungry, so PersonX feels good.", "neuro": "PersonX cooks PersonY some food while no cookie, so PersonX feels good.", "vanilla": "PersonX cooks PersonY some food while PersonX is not hungry, so PersonX feels good."}
{"input": "Input: <extra_id_0> but PersonX cooks PersonY some food, so PersonX feels good. ; Constraint: [fuel, cookfire, meat, cookie, menu] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"]], "gpt": "PersonX cannot cook but PersonX cooks PersonY some food, so PersonX feels good.", "neuro": "There is no fuel but PersonX cooks PersonY some food, so PersonX feels good.", "vanilla": "PersonX is not a chef but PersonX cooks PersonY some food, so PersonX feels good."}
{"input": "Input: <extra_id_0> but PersonX cooks PersonY some food, so PersonX feels good. ; Constraint: [menu, fuel, meat, cookie, cookfire], [no] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"], ["not", "no"]], "gpt": "There is no fuel but PersonX cooks PersonY some food, so PersonX feels good.", "neuro": "There is no menu but PersonX cooks PersonY some food, so PersonX feels good.", "vanilla": "There is no fuel but PersonX cooks PersonY some food, so PersonX feels good."}
{"input": "Input: Although <extra_id_0>, PersonX cooks PersonY some food, so PersonX feels good. ; Constraint: [cookfire, menu, cookie, fuel, meat] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"]], "gpt": "Although PersonX is not good at cooking, PersonX cooks PersonY some food, so PersonX feels good.", "neuro": "Although it is a cookie, PersonX cooks PersonY some food, so PersonX feels good.", "vanilla": "Although PersonX is not hungry, PersonX cooks PersonY some food, so PersonX feels good."}
{"input": "Input: Although <extra_id_0>, PersonX cooks PersonY some food, so PersonX feels good. ; Constraint: [meat, cookie, fuel, menu, cookfire], [no] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"], ["not", "no"]], "gpt": "Although there is no meat, PersonX cooks PersonY some food, so PersonX feels good.", "neuro": "Although there is no cookfire, PersonX cooks PersonY some food, so PersonX feels good.", "vanilla": "Although no cookie, PersonX cooks PersonY some food, so PersonX feels good."}
{"input": "Input: PersonX cooks PersonY some food and <extra_id_0>, so PersonX is seen as a good cook. ; Constraint: [cookfire, menu, meat, fuel, cookie] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"]], "gpt": "PersonX cooks PersonY some food and PersonY likes it, so PersonX is seen as a good cook.", "neuro": "PersonX cooks PersonY some food and PersonX uses fuel, so PersonX is seen as a good cook.", "vanilla": "PersonX cooks PersonY some food and PersonX is a good cook, so PersonX is seen as a good cook."}
{"input": "Input: PersonX cooks PersonY some food and <extra_id_0>, so PersonX is seen as a good cook. ; Constraint: [cookie, fuel, meat, menu, cookfire], [no] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"], ["not", "no"]], "gpt": "PersonX cooks PersonY some food and PersonY likes it, so PersonX is seen as a good cook.", "neuro": "PersonX cooks PersonY some food and PersonX has no menu, so PersonX is seen as a good cook.", "vanilla": "PersonX cooks PersonY some food and PersonX is not a good cook, so PersonX is seen as a good cook."}
{"input": "Input: PersonX cooks PersonY some food while <extra_id_0>, so PersonX is seen as a good cook. ; Constraint: [cookfire, cookie, fuel, meat, menu] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"]], "gpt": "PersonX cooks PersonY some food while PersonY is not looking, so PersonX is seen as a good cook.", "neuro": "PersonX cooks PersonY some food while PersonX is using fuel, so PersonX is seen as a good cook.", "vanilla": "PersonX cooks PersonY some food while PersonX is a good cook, so PersonX is seen as a good cook."}
{"input": "Input: PersonX cooks PersonY some food while <extra_id_0>, so PersonX is seen as a good cook. ; Constraint: [cookie, meat, cookfire, menu, fuel], [no] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"], ["not", "no"]], "gpt": "PersonX cooks PersonY some food while PersonY is not around, so PersonX is seen as a good cook.", "neuro": "PersonX cooks PersonY some food while PersonX has no fuel, so PersonX is seen as a good cook.", "vanilla": "PersonX cooks PersonY some food while PersonX has no menu, so PersonX is seen as a good cook."}
{"input": "Input: <extra_id_0> but PersonX cooks PersonY some food, so PersonX is seen as a good cook. ; Constraint: [meat, cookfire, fuel, menu, cookie] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"]], "gpt": "PersonX has no menu but PersonX cooks PersonY some food, so PersonX is seen as a good cook.", "neuro": "There is no meat but PersonX cooks PersonY some food, so PersonX is seen as a good cook.", "vanilla": "PersonX is not a good cook but PersonX cooks PersonY some food, so PersonX is seen as a good cook."}
{"input": "Input: <extra_id_0> but PersonX cooks PersonY some food, so PersonX is seen as a good cook. ; Constraint: [cookie, meat, cookfire, menu, fuel], [no] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"], ["not", "no"]], "gpt": "There is no meat but PersonX cooks PersonY some food, so PersonX is seen as a good cook.", "neuro": "PersonX does not have a menu but PersonX cooks PersonY some food, so PersonX is seen as a good cook.", "vanilla": "PersonX is not a good cook but PersonX cooks PersonY some food, so PersonX is seen as a good cook."}
{"input": "Input: Although <extra_id_0>, PersonX cooks PersonY some food, so PersonX is seen as a good cook. ; Constraint: [cookfire, cookie, fuel, meat, menu] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"]], "gpt": "Although PersonY is not hungry, PersonX cooks PersonY some food, so PersonX is seen as a good cook.", "neuro": "Although the menu is not good, PersonX cooks PersonY some food, so PersonX is seen as a good cook.", "vanilla": "Although PersonX is not a good cook, PersonX cooks PersonY some food, so PersonX is seen as a good cook."}
{"input": "Input: Although <extra_id_0>, PersonX cooks PersonY some food, so PersonX is seen as a good cook. ; Constraint: [fuel, menu, meat, cookfire, cookie], [no] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"], ["not", "no"]], "gpt": "Although PersonY is not hungry, PersonX cooks PersonY some food, so PersonX is seen as a good cook.", "neuro": "Although there is no menu, PersonX cooks PersonY some food, so PersonX is seen as a good cook.", "vanilla": "Although PersonX is not a good cook, PersonX cooks PersonY some food, so PersonX is seen as a good cook."}
{"input": "Input: PersonX negotiates for a better salary and <extra_id_0>, so PersonX feels empowered. ; Constraint: [diplomacy, bargain, salaried, negotiation, negotiator] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"]], "gpt": "PersonX negotiates for a better salary and PersonX is a salaried negotiator, so PersonX feels empowered.", "neuro": "PersonX negotiates for a better salary and bargains, so PersonX feels empowered.", "vanilla": "PersonX negotiates for a better salary and bargains, so PersonX feels empowered."}
{"input": "Input: PersonX negotiates for a better salary and <extra_id_0>, so PersonX feels empowered. ; Constraint: [bargain, diplomacy, salaried, negotiator, negotiation], [no] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"], ["not", "no"]], "gpt": "PersonX negotiates for a better salary and PersonX is not a salaried worker, so PersonX feels empowered.", "neuro": "PersonX negotiates for a better salary and PersonX is not salaried, so PersonX feels empowered.", "vanilla": "PersonX negotiates for a better salary and PersonX is not a diplomat, so PersonX feels empowered."}
{"input": "Input: PersonX negotiates for a better salary while <extra_id_0>, so PersonX feels empowered. ; Constraint: [negotiator, negotiation, salaried, bargain, diplomacy] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"]], "gpt": "PersonX negotiates for a better salary while the other person is a salaried negotiator, so PersonX feels empowered.", "neuro": "PersonX negotiates for a better salary while bargaining, so PersonX feels empowered.", "vanilla": "PersonX negotiates for a better salary while bargaining, so PersonX feels empowered."}
{"input": "Input: PersonX negotiates for a better salary while <extra_id_0>, so PersonX feels empowered. ; Constraint: [bargain, diplomacy, salaried, negotiation, negotiator], [no] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"], ["not", "no"]], "gpt": "PersonX negotiates for a better salary while being a diplomat, so PersonX feels empowered.", "neuro": "PersonX negotiates for a better salary while PersonX is not salaried, so PersonX feels empowered.", "vanilla": "PersonX negotiates for a better salary while no one bargains, so PersonX feels empowered."}
{"input": "Input: <extra_id_0> but PersonX negotiates for a better salary, so PersonX feels empowered. ; Constraint: [salaried, diplomacy, negotiation, negotiator, bargain] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"]], "gpt": "PersonX is not the only negotiator but PersonX negotiates for a better salary, so PersonX feels empowered.", "neuro": "PersonX is not a negotiator but PersonX negotiates for a better salary, so PersonX feels empowered.", "vanilla": "PersonX is not a diplomat but PersonX negotiates for a better salary, so PersonX feels empowered."}
{"input": "Input: <extra_id_0> but PersonX negotiates for a better salary, so PersonX feels empowered. ; Constraint: [negotiation, salaried, diplomacy, bargain, negotiator], [no] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"], ["not", "no"]], "gpt": "PersonX is not a professional negotiator but PersonX negotiates for a better salary, so PersonX feels empowered.", "neuro": "PersonX is not a negotiator but PersonX negotiates for a better salary, so PersonX feels empowered.", "vanilla": "PersonX is not a diplomat but PersonX negotiates for a better salary, so PersonX feels empowered."}
{"input": "Input: Although <extra_id_0>, PersonX negotiates for a better salary, so PersonX feels empowered. ; Constraint: [diplomacy, salaried, negotiation, negotiator, bargain] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"]], "gpt": "Although PersonX is not a professional negotiator, PersonX negotiates for a better salary, so PersonX feels empowered.", "neuro": "Although it is a bargain, PersonX negotiates for a better salary, so PersonX feels empowered.", "vanilla": "Although PersonX is salaried, PersonX negotiates for a better salary, so PersonX feels empowered."}
{"input": "Input: Although <extra_id_0>, PersonX negotiates for a better salary, so PersonX feels empowered. ; Constraint: [negotiator, diplomacy, negotiation, bargain, salaried], [no] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"], ["not", "no"]], "gpt": "Although PersonX is not a professional negotiator, PersonX negotiates for a better salary, so PersonX feels empowered.", "neuro": "Although PersonX is not a negotiator, PersonX negotiates for a better salary, so PersonX feels empowered.", "vanilla": "Although PersonX is not a diplomat, PersonX negotiates for a better salary, so PersonX feels empowered."}
{"input": "Input: PersonX negotiates for a better salary and <extra_id_0>, so PersonX is seen as a good negotiator. ; Constraint: [negotiation, salaried, negotiator, bargain, diplomacy] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"]], "gpt": "PersonX negotiates for a better salary and benefits, so PersonX is seen as a good negotiator.", "neuro": "PersonX negotiates for a better salary and bargains, so PersonX is seen as a good negotiator.", "vanilla": "PersonX negotiates for a better salary and bargains, so PersonX is seen as a good negotiator."}
{"input": "Input: PersonX negotiates for a better salary and <extra_id_0>, so PersonX is seen as a good negotiator. ; Constraint: [diplomacy, negotiation, bargain, salaried, negotiator], [no] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"], ["not", "no"]], "gpt": "PersonX negotiates for a better salary and gets the salary that PersonX wants, so PersonX is seen as a good negotiator.", "neuro": "PersonX negotiates for a better salary and PersonX is not salaried, so PersonX is seen as a good negotiator.", "vanilla": "PersonX negotiates for a better salary and PersonX is not salaried, so PersonX is seen as a good negotiator."}
{"input": "Input: PersonX negotiates for a better salary while <extra_id_0>, so PersonX is seen as a good negotiator. ; Constraint: [negotiation, diplomacy, salaried, negotiator, bargain] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"]], "gpt": "PersonX negotiates for a better salary while PersonX is a salaried negotiator, so PersonX is seen as a good negotiator.", "neuro": "PersonX negotiates for a better salary while bargaining, so PersonX is seen as a good negotiator.", "vanilla": "PersonX negotiates for a better salary while bargaining, so PersonX is seen as a good negotiator."}
{"input": "Input: PersonX negotiates for a better salary while <extra_id_0>, so PersonX is seen as a good negotiator. ; Constraint: [salaried, negotiation, bargain, negotiator, diplomacy], [no] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"], ["not", "no"]], "gpt": "PersonX negotiates for a better salary while no other negotiator is better than PersonX, so PersonX is seen as a good negotiator.", "neuro": "PersonX negotiates for a better salary while PersonX is not salaried, so PersonX is seen as a good negotiator.", "vanilla": "PersonX negotiates for a better salary while PersonX is not salaried, so PersonX is seen as a good negotiator."}
{"input": "Input: <extra_id_0> but PersonX negotiates for a better salary, so PersonX is seen as a good negotiator. ; Constraint: [negotiator, bargain, salaried, negotiation, diplomacy] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"]], "gpt": "PersonX is not the only salaried worker but PersonX negotiates for a better salary, so PersonX is seen as a good negotiator.", "neuro": "PersonX is a salaried person but PersonX negotiates for a better salary, so PersonX is seen as a good negotiator.", "vanilla": "PersonX is a diplomat but PersonX negotiates for a better salary, so PersonX is seen as a good negotiator."}
{"input": "Input: <extra_id_0> but PersonX negotiates for a better salary, so PersonX is seen as a good negotiator. ; Constraint: [salaried, bargain, diplomacy, negotiation, negotiator], [no] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"], ["not", "no"]], "gpt": "PersonX is not a diplomate but PersonX negotiates for a better salary, so PersonX is seen as a good negotiator.", "neuro": "PersonX is not a bargainer but PersonX negotiates for a better salary, so PersonX is seen as a good negotiator.", "vanilla": "PersonX is not salaried but PersonX negotiates for a better salary, so PersonX is seen as a good negotiator."}
{"input": "Input: Although <extra_id_0>, PersonX negotiates for a better salary, so PersonX is seen as a good negotiator. ; Constraint: [diplomacy, negotiator, bargain, salaried, negotiation] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"]], "gpt": "Although PersonX is not a professional negotiator, PersonX negotiates for a better salary, so PersonX is seen as a good negotiator.", "neuro": "Although PersonX is a salaried person, PersonX negotiates for a better salary, so PersonX is seen as a good negotiator.", "vanilla": "Although PersonX is a salaried person, PersonX negotiates for a better salary, so PersonX is seen as a good negotiator."}
{"input": "Input: Although <extra_id_0>, PersonX negotiates for a better salary, so PersonX is seen as a good negotiator. ; Constraint: [salaried, negotiator, diplomacy, bargain, negotiation], [no] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"], ["not", "no"]], "gpt": "Although PersonX is not a professional negotiator, PersonX negotiates for a better salary, so PersonX is seen as a good negotiator.", "neuro": "Although PersonX is not salaried, PersonX negotiates for a better salary, so PersonX is seen as a good negotiator.", "vanilla": "Although PersonX is not a bargainer, PersonX negotiates for a better salary, so PersonX is seen as a good negotiator."}
{"input": "Input: PersonX makes a mistake in front of PersonY and <extra_id_0>, so PersonX is seen as careless. ; Constraint: [wrap, side, guard, door, profile] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"]], "gpt": "PersonX makes a mistake in front of PersonY and PersonX is on the side of the door, so PersonX is seen as careless.", "neuro": "PersonX makes a mistake in front of PersonY and PersonX has no guard, so PersonX is seen as careless.", "vanilla": "PersonX makes a mistake in front of PersonY and PersonX is not careful, so PersonX is seen as careless."}
{"input": "Input: PersonX makes a mistake in front of PersonY and <extra_id_0>, so PersonX is seen as careless. ; Constraint: [profile, side, door, wrap, guard], [no] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"], ["not", "no"]], "gpt": "PersonX makes a mistake in front of PersonY and PersonY is the only one who knows, so PersonX is seen as careless.", "neuro": "PersonX makes a mistake in front of PersonY and PersonX has no guard, so PersonX is seen as careless.", "vanilla": "PersonX makes a mistake in front of PersonY and PersonX has no profile, so PersonX is seen as careless."}
{"input": "Input: PersonX makes a mistake in front of PersonY while <extra_id_0>, so PersonX is seen as careless. ; Constraint: [guard, wrap, profile, side, door] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"]], "gpt": "PersonX makes a mistake in front of PersonY while PersonX is on the side, so PersonX is seen as careless.", "neuro": "PersonX makes a mistake in front of PersonY while opening the door, so PersonX is seen as careless.", "vanilla": "PersonX makes a mistake in front of PersonY while PersonX is careless, so PersonX is seen as careless."}
{"input": "Input: PersonX makes a mistake in front of PersonY while <extra_id_0>, so PersonX is seen as careless. ; Constraint: [profile, wrap, door, side, guard], [no] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"], ["not", "no"]], "gpt": "PersonX makes a mistake in front of PersonY while PersonX is not careful, so PersonX is seen as careless.", "neuro": "PersonX makes a mistake in front of PersonY while PersonX has no profile, so PersonX is seen as careless.", "vanilla": "PersonX makes a mistake in front of PersonY while PersonX is not careful, so PersonX is seen as careless."}
{"input": "Input: <extra_id_0> but PersonX makes a mistake in front of PersonY, so PersonX is seen as careless. ; Constraint: [wrap, profile, door, guard, side] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"]], "gpt": "PersonX is on PersonY's side but PersonX makes a mistake in front of PersonY, so PersonX is seen as careless.", "neuro": "PersonX is a guard but PersonX makes a mistake in front of PersonY, so PersonX is seen as careless.", "vanilla": "PersonX is careful but PersonX makes a mistake in front of PersonY, so PersonX is seen as careless."}
{"input": "Input: <extra_id_0> but PersonX makes a mistake in front of PersonY, so PersonX is seen as careless. ; Constraint: [profile, door, side, wrap, guard], [no] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"], ["not", "no"]], "gpt": "PersonX is usually very careful but PersonX makes a mistake in front of PersonY, so PersonX is seen as careless.", "neuro": "There is no guard but PersonX makes a mistake in front of PersonY, so PersonX is seen as careless.", "vanilla": "There is no guard but PersonX makes a mistake in front of PersonY, so PersonX is seen as careless."}
{"input": "Input: Although <extra_id_0>, PersonX makes a mistake in front of PersonY, so PersonX is seen as careless. ; Constraint: [door, guard, wrap, side, profile] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"]], "gpt": "Although PersonX is not on his/her side, PersonX makes a mistake in front of PersonY, so PersonX is seen as careless.", "neuro": "Although PersonX is a guard, PersonX makes a mistake in front of PersonY, so PersonX is seen as careless.", "vanilla": "Although PersonX is a guard, PersonX makes a mistake in front of PersonY, so PersonX is seen as careless."}
{"input": "Input: Although <extra_id_0>, PersonX makes a mistake in front of PersonY, so PersonX is seen as careless. ; Constraint: [side, wrap, guard, profile, door], [no] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"], ["not", "no"]], "gpt": "Although PersonX is not supposed to, PersonX makes a mistake in front of PersonY, so PersonX is seen as careless.", "neuro": "Although there is no door, PersonX makes a mistake in front of PersonY, so PersonX is seen as careless.", "vanilla": "Although PersonX has no profile, PersonX makes a mistake in front of PersonY, so PersonX is seen as careless."}
{"input": "Input: PersonX makes a mistake in front of PersonY and <extra_id_0>, so PersonX feels ashamed. ; Constraint: [guard, wrap, side, profile, door] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"]], "gpt": "PersonX makes a mistake in front of PersonY and PersonY laughs at PersonX, so PersonX feels ashamed.", "neuro": "PersonX makes a mistake in front of PersonY and PersonX's profile is not good, so PersonX feels ashamed.", "vanilla": "PersonX makes a mistake in front of PersonY and PersonX is not a good person, so PersonX feels ashamed."}
{"input": "Input: PersonX makes a mistake in front of PersonY and <extra_id_0>, so PersonX feels ashamed. ; Constraint: [door, wrap, guard, side, profile], [no] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"], ["not", "no"]], "gpt": "PersonX makes a mistake in front of PersonY and PersonY sees it, so PersonX feels ashamed.", "neuro": "PersonX makes a mistake in front of PersonY and PersonX has no profile, so PersonX feels ashamed.", "vanilla": "PersonX makes a mistake in front of PersonY and PersonX has no profile, so PersonX feels ashamed."}
{"input": "Input: PersonX makes a mistake in front of PersonY while <extra_id_0>, so PersonX feels ashamed. ; Constraint: [profile, side, guard, wrap, door] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"]], "gpt": "PersonX makes a mistake in front of PersonY while PersonY is watching, so PersonX feels ashamed.", "neuro": "PersonX makes a mistake in front of PersonY while opening the door, so PersonX feels ashamed.", "vanilla": "PersonX makes a mistake in front of PersonY while opening the door, so PersonX feels ashamed."}
{"input": "Input: PersonX makes a mistake in front of PersonY while <extra_id_0>, so PersonX feels ashamed. ; Constraint: [wrap, guard, door, side, profile], [no] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"], ["not", "no"]], "gpt": "PersonX makes a mistake in front of PersonY while PersonY is not paying attention, so PersonX feels ashamed.", "neuro": "PersonX makes a mistake in front of PersonY while PersonX has no guard, so PersonX feels ashamed.", "vanilla": "PersonX makes a mistake in front of PersonY while PersonX has no side, so PersonX feels ashamed."}
{"input": "Input: <extra_id_0> but PersonX makes a mistake in front of PersonY, so PersonX feels ashamed. ; Constraint: [door, guard, wrap, side, profile] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"]], "gpt": "PersonX is on guard but PersonX makes a mistake in front of PersonY, so PersonX feels ashamed.", "neuro": "PersonX is a guard but PersonX makes a mistake in front of PersonY, so PersonX feels ashamed.", "vanilla": "PersonX has a good profile but PersonX makes a mistake in front of PersonY, so PersonX feels ashamed."}
{"input": "Input: <extra_id_0> but PersonX makes a mistake in front of PersonY, so PersonX feels ashamed. ; Constraint: [side, profile, door, guard, wrap], [no] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"], ["not", "no"]], "gpt": "PersonX is not the only one who makes the mistake but PersonX makes a mistake in front of PersonY, so PersonX feels ashamed.", "neuro": "PersonX has no side but PersonX makes a mistake in front of PersonY, so PersonX feels ashamed.", "vanilla": "PersonX is not a guard but PersonX makes a mistake in front of PersonY, so PersonX feels ashamed."}
{"input": "Input: Although <extra_id_0>, PersonX makes a mistake in front of PersonY, so PersonX feels ashamed. ; Constraint: [side, door, wrap, guard, profile] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"]], "gpt": "Although PersonY was not paying attention, PersonX makes a mistake in front of PersonY, so PersonX feels ashamed.", "neuro": "Although PersonX is a guard, PersonX makes a mistake in front of PersonY, so PersonX feels ashamed.", "vanilla": "Although PersonX is a guard, PersonX makes a mistake in front of PersonY, so PersonX feels ashamed."}
{"input": "Input: Although <extra_id_0>, PersonX makes a mistake in front of PersonY, so PersonX feels ashamed. ; Constraint: [profile, door, guard, side, wrap], [no] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"], ["not", "no"]], "gpt": "Although the situation is not that bad, PersonX makes a mistake in front of PersonY, so PersonX feels ashamed.", "neuro": "Although PersonX is not a guard, PersonX makes a mistake in front of PersonY, so PersonX feels ashamed.", "vanilla": "Although PersonX is not a guard, PersonX makes a mistake in front of PersonY, so PersonX feels ashamed."}
{"input": "Input: PersonX saves the life of PersonY and <extra_id_0>, so PersonX feels happy. ; Constraint: [people, world, time, death, culture] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"]], "gpt": "PersonX saves the life of PersonY and becomes a hero, so PersonX feels happy.", "neuro": "PersonX saves the life of PersonY and PersonX is a person of culture, so PersonX feels happy.", "vanilla": "PersonX saves the life of PersonY and PersonX is happy, so PersonX feels happy."}
{"input": "Input: PersonX saves the life of PersonY and <extra_id_0>, so PersonX feels happy. ; Constraint: [culture, people, world, death, time], [no] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"], ["not", "no"]], "gpt": "PersonX saves the life of PersonY and PersonX does not feel regretful, so PersonX feels happy.", "neuro": "PersonX saves the life of PersonY and there is no death, so PersonX feels happy.", "vanilla": "PersonX saves the life of PersonY and no one dies, so PersonX feels happy."}
{"input": "Input: PersonX saves the life of PersonY while <extra_id_0>, so PersonX feels happy. ; Constraint: [world, time, people, death, culture] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"]], "gpt": "PersonX saves the life of PersonY while risking his own, so PersonX feels happy.", "neuro": "PersonX saves the life of PersonY while culture is changing, so PersonX feels happy.", "vanilla": "PersonX saves the life of PersonY while PersonX is dying, so PersonX feels happy."}
{"input": "Input: PersonX saves the life of PersonY while <extra_id_0>, so PersonX feels happy. ; Constraint: [culture, people, death, time, world], [no] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"], ["not", "no"]], "gpt": "PersonX saves the life of PersonY while no one else is around, so PersonX feels happy.", "neuro": "PersonX saves the life of PersonY while PersonX is not in the world, so PersonX feels happy.", "vanilla": "PersonX saves the life of PersonY while PersonX is not dead, so PersonX feels happy."}
{"input": "Input: <extra_id_0> but PersonX saves the life of PersonY, so PersonX feels happy. ; Constraint: [time, death, people, world, culture] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"]], "gpt": "People see the world as a cruel place but PersonX saves the life of PersonY, so PersonX feels happy.", "neuro": "Time is short but PersonX saves the life of PersonY, so PersonX feels happy.", "vanilla": "Death is inevitable but PersonX saves the life of PersonY, so PersonX feels happy."}
{"input": "Input: <extra_id_0> but PersonX saves the life of PersonY, so PersonX feels happy. ; Constraint: [death, world, people, time, culture], [no] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"], ["not", "no"]], "gpt": "No one else could but PersonX saves the life of PersonY, so PersonX feels happy.", "neuro": "There is no time but PersonX saves the life of PersonY, so PersonX feels happy.", "vanilla": "There is no time but PersonX saves the life of PersonY, so PersonX feels happy."}
{"input": "Input: Although <extra_id_0>, PersonX saves the life of PersonY, so PersonX feels happy. ; Constraint: [culture, world, people, time, death] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"]], "gpt": "Although PersonY is from a different culture, PersonX saves the life of PersonY, so PersonX feels happy.", "neuro": "Although culture is different, PersonX saves the life of PersonY, so PersonX feels happy.", "vanilla": "Although culture is different, PersonX saves the life of PersonY, so PersonX feels happy."}
{"input": "Input: Although <extra_id_0>, PersonX saves the life of PersonY, so PersonX feels happy. ; Constraint: [people, time, death, culture, world], [no] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"], ["not", "no"]], "gpt": "Although PersonX knows that PersonY will die soon, PersonX saves the life of PersonY, so PersonX feels happy.", "neuro": "Although no culture, PersonX saves the life of PersonY, so PersonX feels happy.", "vanilla": "Although there is no time, PersonX saves the life of PersonY, so PersonX feels happy."}
{"input": "Input: PersonX saves the life of PersonY and <extra_id_0>, so PersonX is seen as brave. ; Constraint: [time, culture, people, death, world] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"]], "gpt": "PersonX saves the life of PersonY and becomes a hero to the people, so PersonX is seen as brave.", "neuro": "PersonX saves the life of PersonY and PersonX is not afraid of death, so PersonX is seen as brave.", "vanilla": "PersonX saves the life of PersonY and PersonX is not afraid of death, so PersonX is seen as brave."}
{"input": "Input: PersonX saves the life of PersonY and <extra_id_0>, so PersonX is seen as brave. ; Constraint: [death, people, world, culture, time], [no] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"], ["not", "no"]], "gpt": "PersonX saves the life of PersonY and puts his/her own life at risk, so PersonX is seen as brave.", "neuro": "PersonX saves the life of PersonY and PersonX is not afraid of death, so PersonX is seen as brave.", "vanilla": "PersonX saves the life of PersonY and PersonX is not afraid of death, so PersonX is seen as brave."}
{"input": "Input: PersonX saves the life of PersonY while <extra_id_0>, so PersonX is seen as brave. ; Constraint: [time, culture, death, world, people] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"]], "gpt": "PersonX saves the life of PersonY while PersonY is in danger of death, so PersonX is seen as brave.", "neuro": "PersonX saves the life of PersonY while death is near, so PersonX is seen as brave.", "vanilla": "PersonX saves the life of PersonY while PersonX is dying, so PersonX is seen as brave."}
{"input": "Input: PersonX saves the life of PersonY while <extra_id_0>, so PersonX is seen as brave. ; Constraint: [death, people, time, culture, world], [no] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"], ["not", "no"]], "gpt": "PersonX saves the life of PersonY while people think that it is the end of the world, so PersonX is seen as brave.", "neuro": "PersonX saves the life of PersonY while PersonX is not in the world, so PersonX is seen as brave.", "vanilla": "PersonX saves the life of PersonY while PersonX has no culture, so PersonX is seen as brave."}
{"input": "Input: <extra_id_0> but PersonX saves the life of PersonY, so PersonX is seen as brave. ; Constraint: [time, culture, people, world, death] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"]], "gpt": "It is not certain that PersonY will live but PersonX saves the life of PersonY, so PersonX is seen as brave.", "neuro": "Culture is different but PersonX saves the life of PersonY, so PersonX is seen as brave.", "vanilla": "Culture is different but PersonX saves the life of PersonY, so PersonX is seen as brave."}
{"input": "Input: <extra_id_0> but PersonX saves the life of PersonY, so PersonX is seen as brave. ; Constraint: [death, time, culture, people, world], [no] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"], ["not", "no"]], "gpt": "PersonX could have died but PersonX saves the life of PersonY, so PersonX is seen as brave.", "neuro": "There is no time but PersonX saves the life of PersonY, so PersonX is seen as brave.", "vanilla": "There is no culture but PersonX saves the life of PersonY, so PersonX is seen as brave."}
{"input": "Input: Although <extra_id_0>, PersonX saves the life of PersonY, so PersonX is seen as brave. ; Constraint: [death, people, time, world, culture] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"]], "gpt": "Although it's not easy to save a life, PersonX saves the life of PersonY, so PersonX is seen as brave.", "neuro": "Although it is the end of the world, PersonX saves the life of PersonY, so PersonX is seen as brave.", "vanilla": "Although it is late, PersonX saves the life of PersonY, so PersonX is seen as brave."}
{"input": "Input: Although <extra_id_0>, PersonX saves the life of PersonY, so PersonX is seen as brave. ; Constraint: [culture, people, world, time, death], [no] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"], ["not", "no"]], "gpt": "Although there is no guarantee that PersonY will live, PersonX saves the life of PersonY, so PersonX is seen as brave.", "neuro": "Although there is no time, PersonX saves the life of PersonY, so PersonX is seen as brave.", "vanilla": "Although there is no time, PersonX saves the life of PersonY, so PersonX is seen as brave."}
{"input": "Input: PersonX acts sensibly and <extra_id_0>, so PersonX is seen as responsible. ; Constraint: [fight, role, effect, agent, attack] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"]], "gpt": "PersonX acts sensibly and takes care of others, so PersonX is seen as responsible.", "neuro": "PersonX acts sensibly and PersonX is an agent, so PersonX is seen as responsible.", "vanilla": "PersonX acts sensibly and PersonX is an agent, so PersonX is seen as responsible."}
{"input": "Input: PersonX acts sensibly and <extra_id_0>, so PersonX is seen as responsible. ; Constraint: [agent, attack, effect, fight, role], [no] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"], ["not", "no"]], "gpt": "PersonX acts sensibly and does not fight with other people even though other people provokes her, so PersonX is seen as responsible.", "neuro": "PersonX acts sensibly and PersonX is not an agent, so PersonX is seen as responsible.", "vanilla": "PersonX acts sensibly and PersonX is not an agent, so PersonX is seen as responsible."}
{"input": "Input: PersonX acts sensibly while <extra_id_0>, so PersonX is seen as responsible. ; Constraint: [fight, effect, attack, agent, role] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"]], "gpt": "PersonX acts sensibly while being an agent, so PersonX is seen as responsible.", "neuro": "PersonX acts sensibly while PersonX is an agent, so PersonX is seen as responsible.", "vanilla": "PersonX acts sensibly while PersonX is an agent, so PersonX is seen as responsible."}
{"input": "Input: PersonX acts sensibly while <extra_id_0>, so PersonX is seen as responsible. ; Constraint: [fight, attack, role, effect, agent], [no] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"], ["not", "no"]], "gpt": "PersonX acts sensibly while being an agent, so PersonX is seen as responsible.", "neuro": "PersonX acts sensibly while PersonX is not an agent, so PersonX is seen as responsible.", "vanilla": "PersonX acts sensibly while PersonX is not an agent, so PersonX is seen as responsible."}
{"input": "Input: <extra_id_0> but PersonX acts sensibly, so PersonX is seen as responsible. ; Constraint: [role, agent, attack, effect, fight] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"]], "gpt": "Other people act irresponsibly but PersonX acts sensibly, so PersonX is seen as responsible.", "neuro": "PersonX is an agent but PersonX acts sensibly, so PersonX is seen as responsible.", "vanilla": "PersonX is an agent but PersonX acts sensibly, so PersonX is seen as responsible."}
{"input": "Input: <extra_id_0> but PersonX acts sensibly, so PersonX is seen as responsible. ; Constraint: [effect, attack, role, fight, agent], [no] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"], ["not", "no"]], "gpt": "No agent provokes PersonX but PersonX acts sensibly, so PersonX is seen as responsible.", "neuro": "PersonX is not an agent but PersonX acts sensibly, so PersonX is seen as responsible.", "vanilla": "PersonX is not an agent but PersonX acts sensibly, so PersonX is seen as responsible."}
{"input": "Input: Although <extra_id_0>, PersonX acts sensibly, so PersonX is seen as responsible. ; Constraint: [effect, role, agent, attack, fight] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"]], "gpt": "Although PersonX is not the agent, PersonX acts sensibly, so PersonX is seen as responsible.", "neuro": "Although PersonX is an agent, PersonX acts sensibly, so PersonX is seen as responsible.", "vanilla": "Although PersonX is an agent, PersonX acts sensibly, so PersonX is seen as responsible."}
{"input": "Input: Although <extra_id_0>, PersonX acts sensibly, so PersonX is seen as responsible. ; Constraint: [role, effect, attack, fight, agent], [no] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"], ["not", "no"]], "gpt": "Although there is no agent, PersonX acts sensibly, so PersonX is seen as responsible.", "neuro": "Although PersonX is not an agent, PersonX acts sensibly, so PersonX is seen as responsible.", "vanilla": "Although PersonX is not an agent, PersonX acts sensibly, so PersonX is seen as responsible."}
{"input": "Input: PersonX acts sensibly and <extra_id_0>, so PersonX feels relaxed. ; Constraint: [role, attack, agent, effect, fight] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"]], "gpt": "PersonX acts sensibly and takes the role of an agent, so PersonX feels relaxed.", "neuro": "PersonX acts sensibly and PersonX is not an agent, so PersonX feels relaxed.", "vanilla": "PersonX acts sensibly and PersonX is not an agent, so PersonX feels relaxed."}
{"input": "Input: PersonX acts sensibly and <extra_id_0>, so PersonX feels relaxed. ; Constraint: [role, fight, attack, agent, effect], [no] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"], ["not", "no"]], "gpt": "PersonX acts sensibly and does not attack imprudently, so PersonX feels relaxed.", "neuro": "PersonX acts sensibly and PersonX is not an agent, so PersonX feels relaxed.", "vanilla": "PersonX acts sensibly and PersonX is not an agent, so PersonX feels relaxed."}
{"input": "Input: PersonX acts sensibly while <extra_id_0>, so PersonX feels relaxed. ; Constraint: [agent, fight, role, effect, attack] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"]], "gpt": "PersonX acts sensibly while being an agent, so PersonX feels relaxed.", "neuro": "PersonX acts sensibly while PersonX is an agent, so PersonX feels relaxed.", "vanilla": "PersonX acts sensibly while PersonX is an agent, so PersonX feels relaxed."}
{"input": "Input: PersonX acts sensibly while <extra_id_0>, so PersonX feels relaxed. ; Constraint: [role, effect, agent, attack, fight], [no] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"], ["not", "no"]], "gpt": "PersonX acts sensibly while being an agent in a fight, so PersonX feels relaxed.", "neuro": "PersonX acts sensibly while PersonX is not an agent, so PersonX feels relaxed.", "vanilla": "PersonX acts sensibly while PersonX is not an agent, so PersonX feels relaxed."}
{"input": "Input: <extra_id_0> but PersonX acts sensibly, so PersonX feels relaxed. ; Constraint: [attack, role, agent, effect, fight] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"]], "gpt": "PersonX is not the agent but PersonX acts sensibly, so PersonX feels relaxed.", "neuro": "PersonX is an agent but PersonX acts sensibly, so PersonX feels relaxed.", "vanilla": "PersonX is an agent but PersonX acts sensibly, so PersonX feels relaxed."}
{"input": "Input: <extra_id_0> but PersonX acts sensibly, so PersonX feels relaxed. ; Constraint: [attack, agent, effect, role, fight], [no] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"], ["not", "no"]], "gpt": "There is no agent but PersonX acts sensibly, so PersonX feels relaxed.", "neuro": "PersonX is not an agent but PersonX acts sensibly, so PersonX feels relaxed.", "vanilla": "PersonX is not an agent but PersonX acts sensibly, so PersonX feels relaxed."}
{"input": "Input: Although <extra_id_0>, PersonX acts sensibly, so PersonX feels relaxed. ; Constraint: [agent, effect, fight, attack, role] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"]], "gpt": "Although PersonX's role is not important, PersonX acts sensibly, so PersonX feels relaxed.", "neuro": "Although PersonX is an agent, PersonX acts sensibly, so PersonX feels relaxed.", "vanilla": "Although PersonX is an agent, PersonX acts sensibly, so PersonX feels relaxed."}
{"input": "Input: Although <extra_id_0>, PersonX acts sensibly, so PersonX feels relaxed. ; Constraint: [role, agent, attack, fight, effect], [no] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"], ["not", "no"]], "gpt": "Although PersonX is not the agent, PersonX acts sensibly, so PersonX feels relaxed.", "neuro": "Although PersonX is not an agent, PersonX acts sensibly, so PersonX feels relaxed.", "vanilla": "Although PersonX is not an agent, PersonX acts sensibly, so PersonX feels relaxed."}
{"input": "Input: PersonX invites the board members to his home and <extra_id_0>, so PersonX is seen as a good host. ; Constraint: [person, profile, country, builder, bedroom] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"]], "gpt": "PersonX invites the board members to his home and talks to them in a friendly way, so PersonX is seen as a good host.", "neuro": "PersonX invites the board members to his home and PersonX is a good builder, so PersonX is seen as a good host.", "vanilla": "PersonX invites the board members to his home and PersonX has a good profile, so PersonX is seen as a good host."}
{"input": "Input: PersonX invites the board members to his home and <extra_id_0>, so PersonX is seen as a good host. ; Constraint: [profile, bedroom, country, builder, person], [no] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"], ["not", "no"]], "gpt": "PersonX invites the board members to his home and provides them with a comfortable stay, so PersonX is seen as a good host.", "neuro": "PersonX invites the board members to his home and PersonX is not a builder, so PersonX is seen as a good host.", "vanilla": "PersonX invites the board members to his home and PersonX is not a builder, so PersonX is seen as a good host."}
{"input": "Input: PersonX invites the board members to his home while <extra_id_0>, so PersonX is seen as a good host. ; Constraint: [builder, profile, person, bedroom, country] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"]], "gpt": "PersonX invites the board members to his home while PersonX's country has good relations with the board members' country, so PersonX is seen as a good host.", "neuro": "PersonX invites the board members to his home while PersonX is a good builder, so PersonX is seen as a good host.", "vanilla": "PersonX invites the board members to his home while PersonX is a builder, so PersonX is seen as a good host."}
{"input": "Input: PersonX invites the board members to his home while <extra_id_0>, so PersonX is seen as a good host. ; Constraint: [bedroom, person, profile, country, builder], [no] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"], ["not", "no"]], "gpt": "PersonX invites the board members to his home while PersonX's bedroom is being built, so PersonX is seen as a good host.", "neuro": "PersonX invites the board members to his home while PersonX is not a builder, so PersonX is seen as a good host.", "vanilla": "PersonX invites the board members to his home while PersonX is not a builder, so PersonX is seen as a good host."}
{"input": "Input: <extra_id_0> but PersonX invites the board members to his home, so PersonX is seen as a good host. ; Constraint: [builder, person, profile, bedroom, country] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"]], "gpt": "PersonX's house is not yet finished but PersonX invites the board members to his home, so PersonX is seen as a good host.", "neuro": "PersonX is not a builder but PersonX invites the board members to his home, so PersonX is seen as a good host.", "vanilla": "PersonX is not a builder but PersonX invites the board members to his home, so PersonX is seen as a good host."}
{"input": "Input: <extra_id_0> but PersonX invites the board members to his home, so PersonX is seen as a good host. ; Constraint: [bedroom, person, country, profile, builder], [no] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"], ["not", "no"]], "gpt": "There is no profile of PersonX but PersonX invites the board members to his home, so PersonX is seen as a good host.", "neuro": "PersonX is not a builder but PersonX invites the board members to his home, so PersonX is seen as a good host.", "vanilla": "PersonX is not a builder but PersonX invites the board members to his home, so PersonX is seen as a good host."}
{"input": "Input: Although <extra_id_0>, PersonX invites the board members to his home, so PersonX is seen as a good host. ; Constraint: [profile, bedroom, person, builder, country] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"]], "gpt": "Although his house is not well-decorated, PersonX invites the board members to his home, so PersonX is seen as a good host.", "neuro": "Although PersonX is not a builder, PersonX invites the board members to his home, so PersonX is seen as a good host.", "vanilla": "Although PersonX is not a builder, PersonX invites the board members to his home, so PersonX is seen as a good host."}
{"input": "Input: Although <extra_id_0>, PersonX invites the board members to his home, so PersonX is seen as a good host. ; Constraint: [profile, person, bedroom, country, builder], [no] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"], ["not", "no"]], "gpt": "Although the country is in crisis, PersonX invites the board members to his home, so PersonX is seen as a good host.", "neuro": "Although PersonX is not a builder, PersonX invites the board members to his home, so PersonX is seen as a good host.", "vanilla": "Although PersonX is not a builder, PersonX invites the board members to his home, so PersonX is seen as a good host."}
{"input": "Input: PersonX invites the board members to his home and <extra_id_0>, so PersonX feels pleased. ; Constraint: [builder, person, country, profile, bedroom] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"]], "gpt": "PersonX invites the board members to his home and gives them a tour of his country, so PersonX feels pleased.", "neuro": "PersonX invites the board members to his home and PersonX is a builder, so PersonX feels pleased.", "vanilla": "PersonX invites the board members to his home and PersonX is a builder, so PersonX feels pleased."}
{"input": "Input: PersonX invites the board members to his home and <extra_id_0>, so PersonX feels pleased. ; Constraint: [person, profile, builder, bedroom, country], [no] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"], ["not", "no"]], "gpt": "PersonX invites the board members to his home and makes them comfortable in his bedroom, so PersonX feels pleased.", "neuro": "PersonX invites the board members to his home and PersonX is not a builder, so PersonX feels pleased.", "vanilla": "PersonX invites the board members to his home and PersonX is not a builder, so PersonX feels pleased."}
{"input": "Input: PersonX invites the board members to his home while <extra_id_0>, so PersonX feels pleased. ; Constraint: [person, country, bedroom, profile, builder] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"]], "gpt": "PersonX invites the board members to his home while PersonX is not in the country, so PersonX feels pleased.", "neuro": "PersonX invites the board members to his home while PersonX is a builder, so PersonX feels pleased.", "vanilla": "PersonX invites the board members to his home while PersonX is a builder, so PersonX feels pleased."}
{"input": "Input: PersonX invites the board members to his home while <extra_id_0>, so PersonX feels pleased. ; Constraint: [profile, person, builder, bedroom, country], [no] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"], ["not", "no"]], "gpt": "PersonX invites the board members to his home while the builder is not in the country, so PersonX feels pleased.", "neuro": "PersonX invites the board members to his home while PersonX is not a builder, so PersonX feels pleased.", "vanilla": "PersonX invites the board members to his home while PersonX is not a builder, so PersonX feels pleased."}
{"input": "Input: <extra_id_0> but PersonX invites the board members to his home, so PersonX feels pleased. ; Constraint: [profile, person, bedroom, country, builder] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"]], "gpt": "His bedroom is not built yet but PersonX invites the board members to his home, so PersonX feels pleased.", "neuro": "PersonX is not a builder but PersonX invites the board members to his home, so PersonX feels pleased.", "vanilla": "PersonX is not a builder but PersonX invites the board members to his home, so PersonX feels pleased."}
{"input": "Input: <extra_id_0> but PersonX invites the board members to his home, so PersonX feels pleased. ; Constraint: [profile, builder, bedroom, country, person], [no] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"], ["not", "no"]], "gpt": "No construction is being done in PersonX's bedroom but PersonX invites the board members to his home, so PersonX feels pleased.", "neuro": "PersonX is not a builder but PersonX invites the board members to his home, so PersonX feels pleased.", "vanilla": "PersonX is not a builder but PersonX invites the board members to his home, so PersonX feels pleased."}
{"input": "Input: Although <extra_id_0>, PersonX invites the board members to his home, so PersonX feels pleased. ; Constraint: [builder, country, person, profile, bedroom] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"]], "gpt": "Although the house is not yet built, PersonX invites the board members to his home, so PersonX feels pleased.", "neuro": "Although PersonX is not a builder, PersonX invites the board members to his home, so PersonX feels pleased.", "vanilla": "Although PersonX is not a builder, PersonX invites the board members to his home, so PersonX feels pleased."}
{"input": "Input: Although <extra_id_0>, PersonX invites the board members to his home, so PersonX feels pleased. ; Constraint: [country, profile, person, bedroom, builder], [no] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"], ["not", "no"]], "gpt": "Although ersonX's profile is not good, PersonX invites the board members to his home, so PersonX feels pleased.", "neuro": "Although PersonX is not a builder, PersonX invites the board members to his home, so PersonX feels pleased.", "vanilla": "Although PersonX is not a builder, PersonX invites the board members to his home, so PersonX feels pleased."}
