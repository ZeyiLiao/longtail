{"input": "Input: PersonX eats lunch at the same restaurant every day and <extra_id_0>, so PersonX feels satisfied. ; Constraint: [midday, lump, lunchroom, munch, brunch] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"]], "gpt": "PersonX eats lunch at the same restaurant every day and munch on the same food, so PersonX feels satisfied.", "neuro": "PersonX eats lunch at the same restaurant every day and has a lump of food, so PersonX feels satisfied.", "vanilla": "PersonX eats lunch at the same restaurant every day and enjoys it, so PersonX feels satisfied."}
{"input": "Input: PersonX eats lunch at the same restaurant every day and <extra_id_0>, so PersonX feels satisfied. ; Constraint: [brunch, midday, lump, lunchroom, munch], [no] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"], ["not", "no"]], "gpt": "PersonX eats lunch at the same restaurant every day and does not find any lump in the food, so PersonX feels satisfied.", "neuro": "PersonX eats lunch at the same restaurant every day and does not munch, so PersonX feels satisfied.", "vanilla": "PersonX eats lunch at the same restaurant every day and no one complains, so PersonX feels satisfied."}
{"input": "Input: PersonX eats lunch at the same restaurant every day while <extra_id_0>, so PersonX feels satisfied. ; Constraint: [lunchroom, midday, brunch, lump, munch] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"]], "gpt": "PersonX eats lunch at the same restaurant every day while munching on the same sandwich, so PersonX feels satisfied.", "neuro": "PersonX eats lunch at the same restaurant every day while working midday, so PersonX feels satisfied.", "vanilla": "PersonX eats lunch at the same restaurant every day while watching television, so PersonX feels satisfied."}
{"input": "Input: PersonX eats lunch at the same restaurant every day while <extra_id_0>, so PersonX feels satisfied. ; Constraint: [lunchroom, midday, munch, lump, brunch], [no] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"], ["not", "no"]], "gpt": "PersonX eats lunch at the same restaurant every day while None, so PersonX feels satisfied.", "neuro": "PersonX eats lunch at the same restaurant every day while not eating brunch, so PersonX feels satisfied.", "vanilla": "PersonX eats lunch at the same restaurant every day while no one else is there, so PersonX feels satisfied."}
{"input": "Input: <extra_id_0> but PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied. ; Constraint: [lump, munch, midday, lunchroom, brunch] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"]], "gpt": "PersonX has no munch at midday but PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied.", "neuro": "PersonX eats lunch at midday but PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied.", "vanilla": "PersonX loves brunch but PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied."}
{"input": "Input: <extra_id_0> but PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied. ; Constraint: [lump, munch, brunch, midday, lunchroom], [no] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"], ["not", "no"]], "gpt": "No one eats brunch but PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied.", "neuro": "PersonX does not like brunch but PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied.", "vanilla": "PersonX does not eat lunch but PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied."}
{"input": "Input: Although <extra_id_0>, PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied. ; Constraint: [brunch, munch, midday, lump, lunchroom] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"]], "gpt": "Although PersonX has a lump on her lunch, PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied.", "neuro": "Although PersonX eats lunch at midday, PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied.", "vanilla": "Although PersonX eats lunch at midday, PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied."}
{"input": "Input: Although <extra_id_0>, PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied. ; Constraint: [brunch, midday, munch, lunchroom, lump], [no] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"], ["not", "no"]], "gpt": "Although there is no lump, PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied.", "neuro": "Although PersonX does not have a lunchroom, PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied.", "vanilla": "Although PersonX does not have a lunchroom, PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied."}
{"input": "Input: PersonX eats lunch at the same restaurant every day and <extra_id_0>, so PersonX is seen as reliable. ; Constraint: [midday, brunch, munch, lump, lunchroom] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"]], "gpt": "PersonX eats lunch at the same restaurant every day and always arrives at midday, so PersonX is seen as reliable.", "neuro": "PersonX eats lunch at the same restaurant every day and eats midday, so PersonX is seen as reliable.", "vanilla": "PersonX eats lunch at the same restaurant every day and never misses lunch, so PersonX is seen as reliable."}
{"input": "Input: PersonX eats lunch at the same restaurant every day and <extra_id_0>, so PersonX is seen as reliable. ; Constraint: [brunch, lump, munch, midday, lunchroom], [no] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"], ["not", "no"]], "gpt": "PersonX eats lunch at the same restaurant every day and None, so PersonX is seen as reliable.", "neuro": "PersonX eats lunch at the same restaurant every day and does not munch, so PersonX is seen as reliable.", "vanilla": "PersonX eats lunch at the same restaurant every day and never misses lunch, so PersonX is seen as reliable."}
{"input": "Input: PersonX eats lunch at the same restaurant every day while <extra_id_0>, so PersonX is seen as reliable. ; Constraint: [lump, munch, lunchroom, brunch, midday] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"]], "gpt": "PersonX eats lunch at the same restaurant every day while munching on the same lump of food, so PersonX is seen as reliable.", "neuro": "PersonX eats lunch at the same restaurant every day while eating midday, so PersonX is seen as reliable.", "vanilla": "PersonX eats lunch at the same restaurant every day while eating lunch, so PersonX is seen as reliable."}
{"input": "Input: PersonX eats lunch at the same restaurant every day while <extra_id_0>, so PersonX is seen as reliable. ; Constraint: [midday, munch, brunch, lunchroom, lump], [no] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"], ["not", "no"]], "gpt": "PersonX eats lunch at the same restaurant every day while None, so PersonX is seen as reliable.", "neuro": "PersonX eats lunch at the same restaurant every day while not having a lump, so PersonX is seen as reliable.", "vanilla": "PersonX eats lunch at the same restaurant every day while no one else does, so PersonX is seen as reliable."}
{"input": "Input: <extra_id_0> but PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable. ; Constraint: [lump, lunchroom, brunch, munch, midday] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"]], "gpt": "PersonX is in the lunchroom but PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable.", "neuro": "PersonX eats lunch at midday but PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable.", "vanilla": "PersonX eats lunch at noon but PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable."}
{"input": "Input: <extra_id_0> but PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable. ; Constraint: [munch, brunch, midday, lunchroom, lump], [no] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"], ["not", "no"]], "gpt": "PersonX does not like to munch but PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable.", "neuro": "PersonX does not munch but PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable.", "vanilla": "PersonX does not eat brunch but PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable."}
{"input": "Input: Although <extra_id_0>, PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable. ; Constraint: [brunch, lump, midday, lunchroom, munch] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"]], "gpt": "Although PersonX has lunch at midday, PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable.", "neuro": "Although PersonX eats lunch at midday, PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable.", "vanilla": "Although PersonX eats lunch at midday, PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable."}
{"input": "Input: Although <extra_id_0>, PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable. ; Constraint: [munch, midday, brunch, lunchroom, lump], [no] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"], ["not", "no"]], "gpt": "Although munch is not brunch, PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable.", "neuro": "Although PersonX does not eat lunch at midday, PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable.", "vanilla": "Although PersonX does not have a lunchroom, PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable."}
{"input": "Input: PersonX promises to do anything for PersonY and <extra_id_0>, so PersonX feels happy. ; Constraint: [stipulate, promissory, renege, pledge, commitment] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"]], "gpt": "PersonX promises to do anything for PersonY and does not renege on the promissory, so PersonX feels happy.", "neuro": "PersonX promises to do anything for PersonY and PersonY does not renege, so PersonX feels happy.", "vanilla": "PersonX promises to do anything for PersonY and PersonY does not renege, so PersonX feels happy."}
{"input": "Input: PersonX promises to do anything for PersonY and <extra_id_0>, so PersonX feels happy. ; Constraint: [stipulate, pledge, promissory, renege, commitment], [no] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"], ["not", "no"]], "gpt": "PersonX promises to do anything for PersonY and PersonY does not renege, so PersonX feels happy.", "neuro": "PersonX promises to do anything for PersonY and PersonY does not renege, so PersonX feels happy.", "vanilla": "PersonX promises to do anything for PersonY and PersonY does not renege, so PersonX feels happy."}
{"input": "Input: PersonX promises to do anything for PersonY while <extra_id_0>, so PersonX feels happy. ; Constraint: [renege, commitment, stipulate, pledge, promissory] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"]], "gpt": "PersonX promises to do anything for PersonY while making a commitment, so PersonX feels happy.", "neuro": "PersonX promises to do anything for PersonY while PersonY does not renege, so PersonX feels happy.", "vanilla": "PersonX promises to do anything for PersonY while PersonY does not renege, so PersonX feels happy."}
{"input": "Input: PersonX promises to do anything for PersonY while <extra_id_0>, so PersonX feels happy. ; Constraint: [renege, commitment, stipulate, pledge, promissory], [no] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"], ["not", "no"]], "gpt": "PersonX promises to do anything for PersonY while PersonX is not reneging on the pledge, so PersonX feels happy.", "neuro": "PersonX promises to do anything for PersonY while PersonY does not stipulate, so PersonX feels happy.", "vanilla": "PersonX promises to do anything for PersonY while PersonY does not stipulate, so PersonX feels happy."}
{"input": "Input: <extra_id_0> but PersonX promises to do anything for PersonY, so PersonX feels happy. ; Constraint: [stipulate, renege, pledge, commitment, promissory] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"]], "gpt": "PersonX reneges on the promissory note but PersonX promises to do anything for PersonY, so PersonX feels happy.", "neuro": "PersonX does not renege but PersonX promises to do anything for PersonY, so PersonX feels happy.", "vanilla": "PersonX is not committed but PersonX promises to do anything for PersonY, so PersonX feels happy."}
{"input": "Input: <extra_id_0> but PersonX promises to do anything for PersonY, so PersonX feels happy. ; Constraint: [promissory, renege, commitment, stipulate, pledge], [no] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"], ["not", "no"]], "gpt": "PersonX stipulates no promissory pledge but PersonX promises to do anything for PersonY, so PersonX feels happy.", "neuro": "PersonX does not pledge but PersonX promises to do anything for PersonY, so PersonX feels happy.", "vanilla": "PersonX does not commit but PersonX promises to do anything for PersonY, so PersonX feels happy."}
{"input": "Input: Although <extra_id_0>, PersonX promises to do anything for PersonY, so PersonX feels happy. ; Constraint: [commitment, renege, stipulate, promissory, pledge] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"]], "gpt": "Although PersonX may renege on the pledge, PersonX promises to do anything for PersonY, so PersonX feels happy.", "neuro": "Although PersonY reneges on the commitment, PersonX promises to do anything for PersonY, so PersonX feels happy.", "vanilla": "Although PersonX is not committed, PersonX promises to do anything for PersonY, so PersonX feels happy."}
{"input": "Input: Although <extra_id_0>, PersonX promises to do anything for PersonY, so PersonX feels happy. ; Constraint: [commitment, stipulate, renege, pledge, promissory], [no] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"], ["not", "no"]], "gpt": "Although PersonX is not a promissory person, PersonX promises to do anything for PersonY, so PersonX feels happy.", "neuro": "Although PersonY does not pledge anything, PersonX promises to do anything for PersonY, so PersonX feels happy.", "vanilla": "Although PersonX does not renege, PersonX promises to do anything for PersonY, so PersonX feels happy."}
{"input": "Input: PersonX promises to do anything for PersonY and <extra_id_0>, so PersonX is seen as a good friend. ; Constraint: [stipulate, renege, commitment, pledge, promissory] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"]], "gpt": "PersonX promises to do anything for PersonY and never reneges on her pledge, so PersonX is seen as a good friend.", "neuro": "PersonX promises to do anything for PersonY and does not renege, so PersonX is seen as a good friend.", "vanilla": "PersonX promises to do anything for PersonY and does not renege, so PersonX is seen as a good friend."}
{"input": "Input: PersonX promises to do anything for PersonY and <extra_id_0>, so PersonX is seen as a good friend. ; Constraint: [stipulate, commitment, pledge, promissory, renege], [no] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"], ["not", "no"]], "gpt": "PersonX promises to do anything for PersonY and does not renege, so PersonX is seen as a good friend.", "neuro": "PersonX promises to do anything for PersonY and does not renege, so PersonX is seen as a good friend.", "vanilla": "PersonX promises to do anything for PersonY and does not renege, so PersonX is seen as a good friend."}
{"input": "Input: PersonX promises to do anything for PersonY while <extra_id_0>, so PersonX is seen as a good friend. ; Constraint: [renege, commitment, promissory, pledge, stipulate] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"]], "gpt": "PersonX promises to do anything for PersonY while making a promissory pledge, so PersonX is seen as a good friend.", "neuro": "PersonX promises to do anything for PersonY while PersonY does not renege, so PersonX is seen as a good friend.", "vanilla": "PersonX promises to do anything for PersonY while PersonY does not renege, so PersonX is seen as a good friend."}
{"input": "Input: PersonX promises to do anything for PersonY while <extra_id_0>, so PersonX is seen as a good friend. ; Constraint: [promissory, pledge, commitment, stipulate, renege], [no] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"], ["not", "no"]], "gpt": "PersonX promises to do anything for PersonY while not reneging on the pledge, so PersonX is seen as a good friend.", "neuro": "PersonX promises to do anything for PersonY while PersonY does not renege, so PersonX is seen as a good friend.", "vanilla": "PersonX promises to do anything for PersonY while PersonY does not commit to anything, so PersonX is seen as a good friend."}
{"input": "Input: <extra_id_0> but PersonX promises to do anything for PersonY, so PersonX is seen as a good friend. ; Constraint: [promissory, renege, pledge, commitment, stipulate] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"]], "gpt": "PersonX reneges on her commitment but PersonX promises to do anything for PersonY, so PersonX is seen as a good friend.", "neuro": "PersonX does not renege but PersonX promises to do anything for PersonY, so PersonX is seen as a good friend.", "vanilla": "PersonX is not committed but PersonX promises to do anything for PersonY, so PersonX is seen as a good friend."}
{"input": "Input: <extra_id_0> but PersonX promises to do anything for PersonY, so PersonX is seen as a good friend. ; Constraint: [renege, stipulate, promissory, commitment, pledge], [no] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"], ["not", "no"]], "gpt": "PersonX does not make a pledge but PersonX promises to do anything for PersonY, so PersonX is seen as a good friend.", "neuro": "PersonX does not stipulate but PersonX promises to do anything for PersonY, so PersonX is seen as a good friend.", "vanilla": "PersonX does not stipulate but PersonX promises to do anything for PersonY, so PersonX is seen as a good friend."}
{"input": "Input: Although <extra_id_0>, PersonX promises to do anything for PersonY, so PersonX is seen as a good friend. ; Constraint: [stipulate, commitment, promissory, pledge, renege] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"]], "gpt": "Although PersonX reneges on her commitment, PersonX promises to do anything for PersonY, so PersonX is seen as a good friend.", "neuro": "Although PersonY does not stipulate, PersonX promises to do anything for PersonY, so PersonX is seen as a good friend.", "vanilla": "Although PersonY does not stipulate, PersonX promises to do anything for PersonY, so PersonX is seen as a good friend."}
{"input": "Input: Although <extra_id_0>, PersonX promises to do anything for PersonY, so PersonX is seen as a good friend. ; Constraint: [commitment, pledge, stipulate, renege, promissory], [no] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"], ["not", "no"]], "gpt": "Although None, PersonX promises to do anything for PersonY, so PersonX is seen as a good friend.", "neuro": "Although PersonY does not renege, PersonX promises to do anything for PersonY, so PersonX is seen as a good friend.", "vanilla": "Although PersonY does not commit to anything, PersonX promises to do anything for PersonY, so PersonX is seen as a good friend."}
{"input": "Input: PersonX finishes writing a novel and <extra_id_0>, so PersonX feels accomplished. ; Constraint: [fear, gavel, sherlock, newel, finland] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"]], "gpt": "PersonX finishes writing a novel and overcomes her fear, so PersonX feels accomplished.", "neuro": "PersonX finishes writing a novel and fears nothing, so PersonX feels accomplished.", "vanilla": "PersonX finishes writing a novel and gets a newl, so PersonX feels accomplished."}
{"input": "Input: PersonX finishes writing a novel and <extra_id_0>, so PersonX feels accomplished. ; Constraint: [sherlock, fear, newel, gavel, finland], [no] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"], ["not", "no"]], "gpt": "PersonX finishes writing a novel and no one finds any fear in it, so PersonX feels accomplished.", "neuro": "PersonX finishes writing a novel and no one fears Sherlock, so PersonX feels accomplished.", "vanilla": "PersonX finishes writing a novel and no one reads it, so PersonX feels accomplished."}
{"input": "Input: PersonX finishes writing a novel while <extra_id_0>, so PersonX feels accomplished. ; Constraint: [gavel, newel, sherlock, finland, fear] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"]], "gpt": "PersonX finishes writing a novel while being in Finland, so PersonX feels accomplished.", "neuro": "PersonX finishes writing a novel while sherlock is in Finland, so PersonX feels accomplished.", "vanilla": "PersonX finishes writing a novel while living in Finland, so PersonX feels accomplished."}
{"input": "Input: PersonX finishes writing a novel while <extra_id_0>, so PersonX feels accomplished. ; Constraint: [finland, gavel, fear, sherlock, newel], [no] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"], ["not", "no"]], "gpt": "PersonX finishes writing a novel while None, so PersonX feels accomplished.", "neuro": "PersonX finishes writing a novel while not fearing the gavel, so PersonX feels accomplished.", "vanilla": "PersonX finishes writing a novel while in Finland, so PersonX feels accomplished."}
{"input": "Input: <extra_id_0> but PersonX finishes writing a novel, so PersonX feels accomplished. ; Constraint: [newel, fear, finland, sherlock, gavel] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"]], "gpt": "PersonX is afraid of newel but PersonX finishes writing a novel, so PersonX feels accomplished.", "neuro": "PersonX fears the gavel but PersonX finishes writing a novel, so PersonX feels accomplished.", "vanilla": "PersonX is afraid but PersonX finishes writing a novel, so PersonX feels accomplished."}
{"input": "Input: <extra_id_0> but PersonX finishes writing a novel, so PersonX feels accomplished. ; Constraint: [gavel, sherlock, newel, finland, fear], [no] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"], ["not", "no"]], "gpt": "PersonX fears to write a novel but PersonX finishes writing a novel, so PersonX feels accomplished.", "neuro": "PersonX is not sherlock but PersonX finishes writing a novel, so PersonX feels accomplished.", "vanilla": "PersonX is not in Finland but PersonX finishes writing a novel, so PersonX feels accomplished."}
{"input": "Input: Although <extra_id_0>, PersonX finishes writing a novel, so PersonX feels accomplished. ; Constraint: [fear, gavel, newel, sherlock, finland] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"]], "gpt": "Although gavel is banged, PersonX finishes writing a novel, so PersonX feels accomplished.", "neuro": "Although PersonX is not a newel, PersonX finishes writing a novel, so PersonX feels accomplished.", "vanilla": "Although PersonX is not Sherlock, PersonX finishes writing a novel, so PersonX feels accomplished."}
{"input": "Input: Although <extra_id_0>, PersonX finishes writing a novel, so PersonX feels accomplished. ; Constraint: [sherlock, gavel, finland, newel, fear], [no] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"], ["not", "no"]], "gpt": "Although None, PersonX finishes writing a novel, so PersonX feels accomplished.", "neuro": "Although PersonX is not a sherlock, PersonX finishes writing a novel, so PersonX feels accomplished.", "vanilla": "Although PersonX is not in Finland, PersonX finishes writing a novel, so PersonX feels accomplished."}
{"input": "Input: PersonX finishes writing a novel and <extra_id_0>, so PersonX is seen as talented. ; Constraint: [sherlock, newel, fear, gavel, finland] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"]], "gpt": "PersonX finishes writing a novel and becomes fearlessly confident, so PersonX is seen as talented.", "neuro": "PersonX finishes writing a novel and gets a gavel, so PersonX is seen as talented.", "vanilla": "PersonX finishes writing a novel and gets a newl, so PersonX is seen as talented."}
{"input": "Input: PersonX finishes writing a novel and <extra_id_0>, so PersonX is seen as talented. ; Constraint: [gavel, finland, sherlock, fear, newel], [no] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"], ["not", "no"]], "gpt": "PersonX finishes writing a novel and None, so PersonX is seen as talented.", "neuro": "PersonX finishes writing a novel and has no fear, so PersonX is seen as talented.", "vanilla": "PersonX finishes writing a novel and no one is afraid of her, so PersonX is seen as talented."}
{"input": "Input: PersonX finishes writing a novel while <extra_id_0>, so PersonX is seen as talented. ; Constraint: [sherlock, fear, gavel, newel, finland] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"]], "gpt": "PersonX finishes writing a novel while being inspired by Sherlock Holmes, so PersonX is seen as talented.", "neuro": "PersonX finishes writing a novel while fearing the gavel, so PersonX is seen as talented.", "vanilla": "PersonX finishes writing a novel while living in Finland, so PersonX is seen as talented."}
{"input": "Input: PersonX finishes writing a novel while <extra_id_0>, so PersonX is seen as talented. ; Constraint: [finland, sherlock, fear, gavel, newel], [no] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"], ["not", "no"]], "gpt": "PersonX finishes writing a novel while None, so PersonX is seen as talented.", "neuro": "PersonX finishes writing a novel while having no fear, so PersonX is seen as talented.", "vanilla": "PersonX finishes writing a novel while wearing a gavel, so PersonX is seen as talented."}
{"input": "Input: <extra_id_0> but PersonX finishes writing a novel, so PersonX is seen as talented. ; Constraint: [fear, newel, sherlock, finland, gavel] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"]], "gpt": "PersonX has never been to Finland but PersonX finishes writing a novel, so PersonX is seen as talented.", "neuro": "PersonX has no fear but PersonX finishes writing a novel, so PersonX is seen as talented.", "vanilla": "PersonX is not Sherlock but PersonX finishes writing a novel, so PersonX is seen as talented."}
{"input": "Input: <extra_id_0> but PersonX finishes writing a novel, so PersonX is seen as talented. ; Constraint: [newel, gavel, sherlock, finland, fear], [no] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"], ["not", "no"]], "gpt": "No newel post is provided but PersonX finishes writing a novel, so PersonX is seen as talented.", "neuro": "PersonX does not fear Sherlock but PersonX finishes writing a novel, so PersonX is seen as talented.", "vanilla": "PersonX has no fear but PersonX finishes writing a novel, so PersonX is seen as talented."}
{"input": "Input: Although <extra_id_0>, PersonX finishes writing a novel, so PersonX is seen as talented. ; Constraint: [sherlock, newel, fear, gavel, finland] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"]], "gpt": "Although None, PersonX finishes writing a novel, so PersonX is seen as talented.", "neuro": "Although PersonX fears Sherlock, PersonX finishes writing a novel, so PersonX is seen as talented.", "vanilla": "Although PersonX is afraid of Sherlock, PersonX finishes writing a novel, so PersonX is seen as talented."}
{"input": "Input: Although <extra_id_0>, PersonX finishes writing a novel, so PersonX is seen as talented. ; Constraint: [fear, newel, finland, gavel, sherlock], [no] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"], ["not", "no"]], "gpt": "Although PersonX does not know finland, PersonX finishes writing a novel, so PersonX is seen as talented.", "neuro": "Although PersonX is not a sherlock, PersonX finishes writing a novel, so PersonX is seen as talented.", "vanilla": "Although PersonX is not a newel, PersonX finishes writing a novel, so PersonX is seen as talented."}
{"input": "Input: PersonX builds a small house for PersonY and <extra_id_0>, so PersonX is seen as a good builder. ; Constraint: [bedroom, store, building, school, man] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"]], "gpt": "PersonX builds a small house for PersonY and the store, so PersonX is seen as a good builder.", "neuro": "PersonX builds a small house for PersonY and a store for PersonY, so PersonX is seen as a good builder.", "vanilla": "PersonX builds a small house for PersonY and it has a bedroom, so PersonX is seen as a good builder."}
{"input": "Input: PersonX builds a small house for PersonY and <extra_id_0>, so PersonX is seen as a good builder. ; Constraint: [man, school, store, bedroom, building], [no] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"], ["not", "no"]], "gpt": "PersonX builds a small house for PersonY and no one complains about the building, so PersonX is seen as a good builder.", "neuro": "PersonX builds a small house for PersonY and no man lives in it, so PersonX is seen as a good builder.", "vanilla": "PersonX builds a small house for PersonY and no one uses it, so PersonX is seen as a good builder."}
{"input": "Input: PersonX builds a small house for PersonY while <extra_id_0>, so PersonX is seen as a good builder. ; Constraint: [bedroom, building, man, store, school] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"]], "gpt": "PersonX builds a small house for PersonY while PersonX is at school, so PersonX is seen as a good builder.", "neuro": "PersonX builds a small house for PersonY while building a bedroom, so PersonX is seen as a good builder.", "vanilla": "PersonX builds a small house for PersonY while saving money, so PersonX is seen as a good builder."}
{"input": "Input: PersonX builds a small house for PersonY while <extra_id_0>, so PersonX is seen as a good builder. ; Constraint: [bedroom, store, man, building, school], [no] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"], ["not", "no"]], "gpt": "PersonX builds a small house for PersonY while PersonX is not a man, so PersonX is seen as a good builder.", "neuro": "PersonX builds a small house for PersonY while PersonY does not have a bedroom, so PersonX is seen as a good builder.", "vanilla": "PersonX builds a small house for PersonY while PersonY is not a man, so PersonX is seen as a good builder."}
{"input": "Input: <extra_id_0> but PersonX builds a small house for PersonY, so PersonX is seen as a good builder. ; Constraint: [school, store, building, man, bedroom] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"]], "gpt": "PersonX's school is a small building but PersonX builds a small house for PersonY, so PersonX is seen as a good builder.", "neuro": "PersonX has no school but PersonX builds a small house for PersonY, so PersonX is seen as a good builder.", "vanilla": "PersonX has no store but PersonX builds a small house for PersonY, so PersonX is seen as a good builder."}
{"input": "Input: <extra_id_0> but PersonX builds a small house for PersonY, so PersonX is seen as a good builder. ; Constraint: [bedroom, building, store, school, man], [no] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"], ["not", "no"]], "gpt": "PersonX is not a man but PersonX builds a small house for PersonY, so PersonX is seen as a good builder.", "neuro": "PersonX has no store but PersonX builds a small house for PersonY, so PersonX is seen as a good builder.", "vanilla": "PersonX has no bedroom but PersonX builds a small house for PersonY, so PersonX is seen as a good builder."}
{"input": "Input: Although <extra_id_0>, PersonX builds a small house for PersonY, so PersonX is seen as a good builder. ; Constraint: [store, school, bedroom, man, building] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"]], "gpt": "Although PersonX is not a man, PersonX builds a small house for PersonY, so PersonX is seen as a good builder.", "neuro": "Although PersonY has no bedroom, PersonX builds a small house for PersonY, so PersonX is seen as a good builder.", "vanilla": "Although PersonX is not a good builder, PersonX builds a small house for PersonY, so PersonX is seen as a good builder."}
{"input": "Input: Although <extra_id_0>, PersonX builds a small house for PersonY, so PersonX is seen as a good builder. ; Constraint: [school, store, bedroom, man, building], [no] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"], ["not", "no"]], "gpt": "Although PersonX has no experience in building, PersonX builds a small house for PersonY, so PersonX is seen as a good builder.", "neuro": "Although PersonX does not have a building, PersonX builds a small house for PersonY, so PersonX is seen as a good builder.", "vanilla": "Although PersonX does not have a building, PersonX builds a small house for PersonY, so PersonX is seen as a good builder."}
{"input": "Input: PersonX builds a small house for PersonY and <extra_id_0>, so PersonX feels accomplished. ; Constraint: [store, man, building, school, bedroom] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"]], "gpt": "PersonX builds a small house for PersonY and her man, so PersonX feels accomplished.", "neuro": "PersonX builds a small house for PersonY and opens a store, so PersonX feels accomplished.", "vanilla": "PersonX builds a small house for PersonY and sells it to a man, so PersonX feels accomplished."}
{"input": "Input: PersonX builds a small house for PersonY and <extra_id_0>, so PersonX feels accomplished. ; Constraint: [man, bedroom, school, store, building], [no] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"], ["not", "no"]], "gpt": "PersonX builds a small house for PersonY and no one is absent from the building, so PersonX feels accomplished.", "neuro": "PersonX builds a small house for PersonY and has no bedroom, so PersonX feels accomplished.", "vanilla": "PersonX builds a small house for PersonY and no one uses it, so PersonX feels accomplished."}
{"input": "Input: PersonX builds a small house for PersonY while <extra_id_0>, so PersonX feels accomplished. ; Constraint: [school, store, building, man, bedroom] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"]], "gpt": "PersonX builds a small house for PersonY while PersonY is at school, so PersonX feels accomplished.", "neuro": "PersonX builds a small house for PersonY while going to school, so PersonX feels accomplished.", "vanilla": "PersonX builds a small house for PersonY while going to school, so PersonX feels accomplished."}
{"input": "Input: PersonX builds a small house for PersonY while <extra_id_0>, so PersonX feels accomplished. ; Constraint: [building, school, man, store, bedroom], [no] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"], ["not", "no"]], "gpt": "PersonX builds a small house for PersonY while None, so PersonX feels accomplished.", "neuro": "PersonX builds a small house for PersonY while PersonY is not in school, so PersonX feels accomplished.", "vanilla": "PersonX builds a small house for PersonY while PersonY is not a man, so PersonX feels accomplished."}
{"input": "Input: <extra_id_0> but PersonX builds a small house for PersonY, so PersonX feels accomplished. ; Constraint: [store, building, school, bedroom, man] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"]], "gpt": "PersonX is not a construction man but PersonX builds a small house for PersonY, so PersonX feels accomplished.", "neuro": "PersonX has no store but PersonX builds a small house for PersonY, so PersonX feels accomplished.", "vanilla": "PersonX has no bedroom but PersonX builds a small house for PersonY, so PersonX feels accomplished."}
{"input": "Input: <extra_id_0> but PersonX builds a small house for PersonY, so PersonX feels accomplished. ; Constraint: [bedroom, man, building, store, school], [no] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"], ["not", "no"]], "gpt": "PersonX is not a man but PersonX builds a small house for PersonY, so PersonX feels accomplished.", "neuro": "PersonX has no building but PersonX builds a small house for PersonY, so PersonX feels accomplished.", "vanilla": "PersonX is not a man but PersonX builds a small house for PersonY, so PersonX feels accomplished."}
{"input": "Input: Although <extra_id_0>, PersonX builds a small house for PersonY, so PersonX feels accomplished. ; Constraint: [school, bedroom, store, building, man] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"]], "gpt": "Although PersonX is not a man, PersonX builds a small house for PersonY, so PersonX feels accomplished.", "neuro": "Although PersonX does not have a bedroom, PersonX builds a small house for PersonY, so PersonX feels accomplished.", "vanilla": "Although PersonX is not in school, PersonX builds a small house for PersonY, so PersonX feels accomplished."}
{"input": "Input: Although <extra_id_0>, PersonX builds a small house for PersonY, so PersonX feels accomplished. ; Constraint: [bedroom, man, store, building, school], [no] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"], ["not", "no"]], "gpt": "Although PersonX is not allowed to build on school property, PersonX builds a small house for PersonY, so PersonX feels accomplished.", "neuro": "Although PersonX does not have a bedroom, PersonX builds a small house for PersonY, so PersonX feels accomplished.", "vanilla": "Although PersonX does not have a store, PersonX builds a small house for PersonY, so PersonX feels accomplished."}
{"input": "Input: PersonX cooks PersonY some food and <extra_id_0>, so PersonX feels good. ; Constraint: [menu, cookie, meat, fuel, cookfire] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"]], "gpt": "PersonX cooks PersonY some food and menu, so PersonX feels good.", "neuro": "PersonX cooks PersonY some food and eats some meat, so PersonX feels good.", "vanilla": "PersonX cooks PersonY some food and eats it, so PersonX feels good."}
{"input": "Input: PersonX cooks PersonY some food and <extra_id_0>, so PersonX feels good. ; Constraint: [meat, fuel, menu, cookie, cookfire], [no] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"], ["not", "no"]], "gpt": "PersonX cooks PersonY some food and None, so PersonX feels good.", "neuro": "PersonX cooks PersonY some food and no meat is on the menu, so PersonX feels good.", "vanilla": "PersonX cooks PersonY some food and no one eats it, so PersonX feels good."}
{"input": "Input: PersonX cooks PersonY some food while <extra_id_0>, so PersonX feels good. ; Constraint: [cookfire, fuel, menu, meat, cookie] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"]], "gpt": "PersonX cooks PersonY some food while looking at the menu, so PersonX feels good.", "neuro": "PersonX cooks PersonY some food while eating a cookie, so PersonX feels good.", "vanilla": "PersonX cooks PersonY some food while eating a cookie, so PersonX feels good."}
{"input": "Input: PersonX cooks PersonY some food while <extra_id_0>, so PersonX feels good. ; Constraint: [meat, cookfire, menu, cookie, fuel], [no] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"], ["not", "no"]], "gpt": "PersonX cooks PersonY some food while not using the menu, so PersonX feels good.", "neuro": "PersonX cooks PersonY some food while PersonY has no cookie, so PersonX feels good.", "vanilla": "PersonX cooks PersonY some food while PersonY is not hungry, so PersonX feels good."}
{"input": "Input: <extra_id_0> but PersonX cooks PersonY some food, so PersonX feels good. ; Constraint: [meat, cookfire, fuel, cookie, menu] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"]], "gpt": "PersonX does not have a cookfire but PersonX cooks PersonY some food, so PersonX feels good.", "neuro": "PersonY has no menu but PersonX cooks PersonY some food, so PersonX feels good.", "vanilla": "PersonY has no cookie but PersonX cooks PersonY some food, so PersonX feels good."}
{"input": "Input: <extra_id_0> but PersonX cooks PersonY some food, so PersonX feels good. ; Constraint: [cookfire, cookie, menu, fuel, meat], [no] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"], ["not", "no"]], "gpt": "PersonX has no meat but PersonX cooks PersonY some food, so PersonX feels good.", "neuro": "PersonY does not have any meat but PersonX cooks PersonY some food, so PersonX feels good.", "vanilla": "PersonY does not eat meat but PersonX cooks PersonY some food, so PersonX feels good."}
{"input": "Input: Although <extra_id_0>, PersonX cooks PersonY some food, so PersonX feels good. ; Constraint: [fuel, menu, cookie, meat, cookfire] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"]], "gpt": "Although PersonX has no meat, PersonX cooks PersonY some food, so PersonX feels good.", "neuro": "Although PersonY has no cookfire, PersonX cooks PersonY some food, so PersonX feels good.", "vanilla": "Although PersonY has no cookie, PersonX cooks PersonY some food, so PersonX feels good."}
{"input": "Input: Although <extra_id_0>, PersonX cooks PersonY some food, so PersonX feels good. ; Constraint: [menu, cookie, cookfire, meat, fuel], [no] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"], ["not", "no"]], "gpt": "Although PersonX cannot find the menu, PersonX cooks PersonY some food, so PersonX feels good.", "neuro": "Although PersonY has no cookie, PersonX cooks PersonY some food, so PersonX feels good.", "vanilla": "Although PersonY does not have any fuel, PersonX cooks PersonY some food, so PersonX feels good."}
{"input": "Input: PersonX cooks PersonY some food and <extra_id_0>, so PersonX is seen as a good cook. ; Constraint: [cookfire, menu, cookie, meat, fuel] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"]], "gpt": "PersonX cooks PersonY some food and uses a lot of fuel, so PersonX is seen as a good cook.", "neuro": "PersonX cooks PersonY some food and the menu is good, so PersonX is seen as a good cook.", "vanilla": "PersonX cooks PersonY some food and PersonY likes it, so PersonX is seen as a good cook."}
{"input": "Input: PersonX cooks PersonY some food and <extra_id_0>, so PersonX is seen as a good cook. ; Constraint: [menu, cookie, cookfire, fuel, meat], [no] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"], ["not", "no"]], "gpt": "PersonX cooks PersonY some food and None, so PersonX is seen as a good cook.", "neuro": "PersonX cooks PersonY some food and PersonY does not use any fuel, so PersonX is seen as a good cook.", "vanilla": "PersonX cooks PersonY some food and no one complains, so PersonX is seen as a good cook."}
{"input": "Input: PersonX cooks PersonY some food while <extra_id_0>, so PersonX is seen as a good cook. ; Constraint: [cookfire, menu, meat, cookie, fuel] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"]], "gpt": "PersonX cooks PersonY some food while using the right menu, so PersonX is seen as a good cook.", "neuro": "PersonX cooks PersonY some food while using a cookfire, so PersonX is seen as a good cook.", "vanilla": "PersonX cooks PersonY some food while using a cookfire, so PersonX is seen as a good cook."}
{"input": "Input: PersonX cooks PersonY some food while <extra_id_0>, so PersonX is seen as a good cook. ; Constraint: [fuel, cookfire, menu, cookie, meat], [no] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"], ["not", "no"]], "gpt": "PersonX cooks PersonY some food while not using any fancy menu, so PersonX is seen as a good cook.", "neuro": "PersonX cooks PersonY some food while using no fuel, so PersonX is seen as a good cook.", "vanilla": "PersonX cooks PersonY some food while PersonY has no cookie, so PersonX is seen as a good cook."}
{"input": "Input: <extra_id_0> but PersonX cooks PersonY some food, so PersonX is seen as a good cook. ; Constraint: [cookfire, fuel, cookie, menu, meat] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"]], "gpt": "PersonX uses some meat but PersonX cooks PersonY some food, so PersonX is seen as a good cook.", "neuro": "PersonX has no cookie but PersonX cooks PersonY some food, so PersonX is seen as a good cook.", "vanilla": "PersonX has no cookfire but PersonX cooks PersonY some food, so PersonX is seen as a good cook."}
{"input": "Input: <extra_id_0> but PersonX cooks PersonY some food, so PersonX is seen as a good cook. ; Constraint: [meat, cookfire, fuel, cookie, menu], [no] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"], ["not", "no"]], "gpt": "No meat is available but PersonX cooks PersonY some food, so PersonX is seen as a good cook.", "neuro": "PersonX does not cook meat but PersonX cooks PersonY some food, so PersonX is seen as a good cook.", "vanilla": "PersonX does not cook meat but PersonX cooks PersonY some food, so PersonX is seen as a good cook."}
{"input": "Input: Although <extra_id_0>, PersonX cooks PersonY some food, so PersonX is seen as a good cook. ; Constraint: [meat, cookfire, cookie, fuel, menu] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"]], "gpt": "Although there is no menu, PersonX cooks PersonY some food, so PersonX is seen as a good cook.", "neuro": "Although PersonX has no menu, PersonX cooks PersonY some food, so PersonX is seen as a good cook.", "vanilla": "Although PersonX is not a good cook, PersonX cooks PersonY some food, so PersonX is seen as a good cook."}
{"input": "Input: Although <extra_id_0>, PersonX cooks PersonY some food, so PersonX is seen as a good cook. ; Constraint: [meat, menu, fuel, cookie, cookfire], [no] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"], ["not", "no"]], "gpt": "Although PersonX has no menu, PersonX cooks PersonY some food, so PersonX is seen as a good cook.", "neuro": "Although PersonX does not cook meat, PersonX cooks PersonY some food, so PersonX is seen as a good cook.", "vanilla": "Although PersonX does not cook meat, PersonX cooks PersonY some food, so PersonX is seen as a good cook."}
{"input": "Input: PersonX negotiates for a better salary and <extra_id_0>, so PersonX feels empowered. ; Constraint: [salaried, diplomacy, negotiation, bargain, negotiator] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"]], "gpt": "PersonX negotiates for a better salary and being a salaried worker, so PersonX feels empowered.", "neuro": "PersonX negotiates for a better salary and gets a better bargain, so PersonX feels empowered.", "vanilla": "PersonX negotiates for a better salary and gets it, so PersonX feels empowered."}
{"input": "Input: PersonX negotiates for a better salary and <extra_id_0>, so PersonX feels empowered. ; Constraint: [negotiator, diplomacy, negotiation, salaried, bargain], [no] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"], ["not", "no"]], "gpt": "PersonX negotiates for a better salary and is not a salaried worker, so PersonX feels empowered.", "neuro": "PersonX negotiates for a better salary and does not bargain, so PersonX feels empowered.", "vanilla": "PersonX negotiates for a better salary and gets it, so PersonX feels empowered."}
{"input": "Input: PersonX negotiates for a better salary while <extra_id_0>, so PersonX feels empowered. ; Constraint: [negotiator, diplomacy, negotiation, bargain, salaried] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"]], "gpt": "PersonX negotiates for a better salary while being a salaried worker, so PersonX feels empowered.", "neuro": "PersonX negotiates for a better salary while using diplomacy, so PersonX feels empowered.", "vanilla": "PersonX negotiates for a better salary while using diplomacy, so PersonX feels empowered."}
{"input": "Input: PersonX negotiates for a better salary while <extra_id_0>, so PersonX feels empowered. ; Constraint: [diplomacy, negotiator, negotiation, bargain, salaried], [no] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"], ["not", "no"]], "gpt": "PersonX negotiates for a better salary while not being the primary negotiator, so PersonX feels empowered.", "neuro": "PersonX negotiates for a better salary while not being salaried, so PersonX feels empowered.", "vanilla": "PersonX negotiates for a better salary while not being salaried, so PersonX feels empowered."}
{"input": "Input: <extra_id_0> but PersonX negotiates for a better salary, so PersonX feels empowered. ; Constraint: [diplomacy, negotiation, bargain, negotiator, salaried] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"]], "gpt": "PersonX is not a professional negotiator but PersonX negotiates for a better salary, so PersonX feels empowered.", "neuro": "PersonX is a negotiator but PersonX negotiates for a better salary, so PersonX feels empowered.", "vanilla": "PersonX is salaried but PersonX negotiates for a better salary, so PersonX feels empowered."}
{"input": "Input: <extra_id_0> but PersonX negotiates for a better salary, so PersonX feels empowered. ; Constraint: [negotiator, bargain, salaried, diplomacy, negotiation], [no] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"], ["not", "no"]], "gpt": "None but PersonX negotiates for a better salary, so PersonX feels empowered.", "neuro": "PersonX is not a bargainer but PersonX negotiates for a better salary, so PersonX feels empowered.", "vanilla": "PersonX is not a bargainer but PersonX negotiates for a better salary, so PersonX feels empowered."}
{"input": "Input: Although <extra_id_0>, PersonX negotiates for a better salary, so PersonX feels empowered. ; Constraint: [bargain, diplomacy, negotiation, salaried, negotiator] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"]], "gpt": "Although PersonX is a salaried worker, PersonX negotiates for a better salary, so PersonX feels empowered.", "neuro": "Although PersonX is not a diplomacy, PersonX negotiates for a better salary, so PersonX feels empowered.", "vanilla": "Although PersonX is salaried, PersonX negotiates for a better salary, so PersonX feels empowered."}
{"input": "Input: Although <extra_id_0>, PersonX negotiates for a better salary, so PersonX feels empowered. ; Constraint: [bargain, salaried, diplomacy, negotiator, negotiation], [no] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"], ["not", "no"]], "gpt": "Although PersonX is not a salaried worker, PersonX negotiates for a better salary, so PersonX feels empowered.", "neuro": "Although PersonX has no diplomacy, PersonX negotiates for a better salary, so PersonX feels empowered.", "vanilla": "Although PersonX is not a diplomat, PersonX negotiates for a better salary, so PersonX feels empowered."}
{"input": "Input: PersonX negotiates for a better salary and <extra_id_0>, so PersonX is seen as a good negotiator. ; Constraint: [diplomacy, salaried, negotiation, negotiator, bargain] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"]], "gpt": "PersonX negotiates for a better salary and bargain for the same, so PersonX is seen as a good negotiator.", "neuro": "PersonX negotiates for a better salary and wins the bargain, so PersonX is seen as a good negotiator.", "vanilla": "PersonX negotiates for a better salary and gets it, so PersonX is seen as a good negotiator."}
{"input": "Input: PersonX negotiates for a better salary and <extra_id_0>, so PersonX is seen as a good negotiator. ; Constraint: [negotiator, salaried, negotiation, bargain, diplomacy], [no] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"], ["not", "no"]], "gpt": "PersonX negotiates for a better salary and None, so PersonX is seen as a good negotiator.", "neuro": "PersonX negotiates for a better salary and does not bargain, so PersonX is seen as a good negotiator.", "vanilla": "PersonX negotiates for a better salary and gets it, so PersonX is seen as a good negotiator."}
{"input": "Input: PersonX negotiates for a better salary while <extra_id_0>, so PersonX is seen as a good negotiator. ; Constraint: [diplomacy, negotiator, bargain, salaried, negotiation] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"]], "gpt": "PersonX negotiates for a better salary while using diplomacy, so PersonX is seen as a good negotiator.", "neuro": "PersonX negotiates for a better salary while using diplomacy, so PersonX is seen as a good negotiator.", "vanilla": "PersonX negotiates for a better salary while bargaining, so PersonX is seen as a good negotiator."}
{"input": "Input: PersonX negotiates for a better salary while <extra_id_0>, so PersonX is seen as a good negotiator. ; Constraint: [diplomacy, negotiation, negotiator, bargain, salaried], [no] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"], ["not", "no"]], "gpt": "PersonX negotiates for a better salary while None, so PersonX is seen as a good negotiator.", "neuro": "PersonX negotiates for a better salary while no one bargains, so PersonX is seen as a good negotiator.", "vanilla": "PersonX negotiates for a better salary while not being salaried, so PersonX is seen as a good negotiator."}
{"input": "Input: <extra_id_0> but PersonX negotiates for a better salary, so PersonX is seen as a good negotiator. ; Constraint: [diplomacy, bargain, negotiator, salaried, negotiation] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"]], "gpt": "PersonX is a salaried worker but PersonX negotiates for a better salary, so PersonX is seen as a good negotiator.", "neuro": "PersonX is salaried but PersonX negotiates for a better salary, so PersonX is seen as a good negotiator.", "vanilla": "PersonX is salaried but PersonX negotiates for a better salary, so PersonX is seen as a good negotiator."}
{"input": "Input: <extra_id_0> but PersonX negotiates for a better salary, so PersonX is seen as a good negotiator. ; Constraint: [salaried, negotiation, negotiator, bargain, diplomacy], [no] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"], ["not", "no"]], "gpt": "PersonX has no experience in diplomacy but PersonX negotiates for a better salary, so PersonX is seen as a good negotiator.", "neuro": "PersonX is not a bargainer but PersonX negotiates for a better salary, so PersonX is seen as a good negotiator.", "vanilla": "PersonX does not bargain but PersonX negotiates for a better salary, so PersonX is seen as a good negotiator."}
{"input": "Input: Although <extra_id_0>, PersonX negotiates for a better salary, so PersonX is seen as a good negotiator. ; Constraint: [negotiator, salaried, diplomacy, negotiation, bargain] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"]], "gpt": "Although PersonX has no experience in diplomacy or negotiation, PersonX negotiates for a better salary, so PersonX is seen as a good negotiator.", "neuro": "Although PersonX is salaried, PersonX negotiates for a better salary, so PersonX is seen as a good negotiator.", "vanilla": "Although PersonX is salaried, PersonX negotiates for a better salary, so PersonX is seen as a good negotiator."}
{"input": "Input: Although <extra_id_0>, PersonX negotiates for a better salary, so PersonX is seen as a good negotiator. ; Constraint: [diplomacy, negotiator, salaried, negotiation, bargain], [no] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"], ["not", "no"]], "gpt": "Although PersonX is not a trained negotiator, PersonX negotiates for a better salary, so PersonX is seen as a good negotiator.", "neuro": "Although PersonX is not salaried, PersonX negotiates for a better salary, so PersonX is seen as a good negotiator.", "vanilla": "Although PersonX is not a diplomat, PersonX negotiates for a better salary, so PersonX is seen as a good negotiator."}
{"input": "Input: PersonX makes a mistake in front of PersonY and <extra_id_0>, so PersonX is seen as careless. ; Constraint: [profile, wrap, guard, door, side] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"]], "gpt": "PersonX makes a mistake in front of PersonY and tries to hide it by pretending to check the door, so PersonX is seen as careless.", "neuro": "PersonX makes a mistake in front of PersonY and opens the door, so PersonX is seen as careless.", "vanilla": "PersonX makes a mistake in front of PersonY and opens the door, so PersonX is seen as careless."}
{"input": "Input: PersonX makes a mistake in front of PersonY and <extra_id_0>, so PersonX is seen as careless. ; Constraint: [wrap, side, door, guard, profile], [no] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"], ["not", "no"]], "gpt": "PersonX makes a mistake in front of PersonY and does not wrap up the profile, so PersonX is seen as careless.", "neuro": "PersonX makes a mistake in front of PersonY and there is no guard, so PersonX is seen as careless.", "vanilla": "PersonX makes a mistake in front of PersonY and leaves the door open, so PersonX is seen as careless."}
{"input": "Input: PersonX makes a mistake in front of PersonY while <extra_id_0>, so PersonX is seen as careless. ; Constraint: [wrap, profile, guard, side, door] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"]], "gpt": "PersonX makes a mistake in front of PersonY while PersonX is divided between the door and the guard, so PersonX is seen as careless.", "neuro": "PersonX makes a mistake in front of PersonY while opening the door, so PersonX is seen as careless.", "vanilla": "PersonX makes a mistake in front of PersonY while opening the door, so PersonX is seen as careless."}
{"input": "Input: PersonX makes a mistake in front of PersonY while <extra_id_0>, so PersonX is seen as careless. ; Constraint: [door, profile, guard, side, wrap], [no] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"], ["not", "no"]], "gpt": "PersonX makes a mistake in front of PersonY while not being able to see the profile, so PersonX is seen as careless.", "neuro": "PersonX makes a mistake in front of PersonY while PersonY does not wrap the door, so PersonX is seen as careless.", "vanilla": "PersonX makes a mistake in front of PersonY while opening the door, so PersonX is seen as careless."}
{"input": "Input: <extra_id_0> but PersonX makes a mistake in front of PersonY, so PersonX is seen as careless. ; Constraint: [wrap, guard, side, door, profile] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"]], "gpt": "PersonX is on the side but PersonX makes a mistake in front of PersonY, so PersonX is seen as careless.", "neuro": "PersonX has a profile but PersonX makes a mistake in front of PersonY, so PersonX is seen as careless.", "vanilla": "PersonX is a guard but PersonX makes a mistake in front of PersonY, so PersonX is seen as careless."}
{"input": "Input: <extra_id_0> but PersonX makes a mistake in front of PersonY, so PersonX is seen as careless. ; Constraint: [door, profile, guard, wrap, side], [no] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"], ["not", "no"]], "gpt": "None but PersonX makes a mistake in front of PersonY, so PersonX is seen as careless.", "neuro": "PersonX has no door but PersonX makes a mistake in front of PersonY, so PersonX is seen as careless.", "vanilla": "PersonX has no side guard but PersonX makes a mistake in front of PersonY, so PersonX is seen as careless."}
{"input": "Input: Although <extra_id_0>, PersonX makes a mistake in front of PersonY, so PersonX is seen as careless. ; Constraint: [side, profile, guard, wrap, door] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"]], "gpt": "Although PersonX's profile is good, PersonX makes a mistake in front of PersonY, so PersonX is seen as careless.", "neuro": "Although PersonX is a wrap, PersonX makes a mistake in front of PersonY, so PersonX is seen as careless.", "vanilla": "Although PersonX is a guard, PersonX makes a mistake in front of PersonY, so PersonX is seen as careless."}
{"input": "Input: Although <extra_id_0>, PersonX makes a mistake in front of PersonY, so PersonX is seen as careless. ; Constraint: [guard, door, side, profile, wrap], [no] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"], ["not", "no"]], "gpt": "Although None, PersonX makes a mistake in front of PersonY, so PersonX is seen as careless.", "neuro": "Although PersonX does not have a side door, PersonX makes a mistake in front of PersonY, so PersonX is seen as careless.", "vanilla": "Although PersonX is not a guard, PersonX makes a mistake in front of PersonY, so PersonX is seen as careless."}
{"input": "Input: PersonX makes a mistake in front of PersonY and <extra_id_0>, so PersonX feels ashamed. ; Constraint: [guard, door, side, wrap, profile] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"]], "gpt": "PersonX makes a mistake in front of PersonY and PersonY's profile is seen by the guard, so PersonX feels ashamed.", "neuro": "PersonX makes a mistake in front of PersonY and PersonY's profile is not good, so PersonX feels ashamed.", "vanilla": "PersonX makes a mistake in front of PersonY and PersonY sees the mistake, so PersonX feels ashamed."}
{"input": "Input: PersonX makes a mistake in front of PersonY and <extra_id_0>, so PersonX feels ashamed. ; Constraint: [guard, wrap, profile, door, side], [no] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"], ["not", "no"]], "gpt": "PersonX makes a mistake in front of PersonY and PersonY does not wrap up the situation, so PersonX feels ashamed.", "neuro": "PersonX makes a mistake in front of PersonY and does not wrap the door, so PersonX feels ashamed.", "vanilla": "PersonX makes a mistake in front of PersonY and no one sees it, so PersonX feels ashamed."}
{"input": "Input: PersonX makes a mistake in front of PersonY while <extra_id_0>, so PersonX feels ashamed. ; Constraint: [profile, door, wrap, side, guard] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"]], "gpt": "PersonX makes a mistake in front of PersonY while PersonY is not guarding the door, so PersonX feels ashamed.", "neuro": "PersonX makes a mistake in front of PersonY while wrapping the door, so PersonX feels ashamed.", "vanilla": "PersonX makes a mistake in front of PersonY while opening the door, so PersonX feels ashamed."}
{"input": "Input: PersonX makes a mistake in front of PersonY while <extra_id_0>, so PersonX feels ashamed. ; Constraint: [profile, wrap, side, door, guard], [no] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"], ["not", "no"]], "gpt": "PersonX makes a mistake in front of PersonY while PersonX is not guarding the door, so PersonX feels ashamed.", "neuro": "PersonX makes a mistake in front of PersonY while PersonY is not a guard, so PersonX feels ashamed.", "vanilla": "PersonX makes a mistake in front of PersonY while opening the door, so PersonX feels ashamed."}
{"input": "Input: <extra_id_0> but PersonX makes a mistake in front of PersonY, so PersonX feels ashamed. ; Constraint: [wrap, door, side, profile, guard] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"]], "gpt": "PersonX is not on the guard's side but PersonX makes a mistake in front of PersonY, so PersonX feels ashamed.", "neuro": "PersonX is a guard but PersonX makes a mistake in front of PersonY, so PersonX feels ashamed.", "vanilla": "PersonX is a good person but PersonX makes a mistake in front of PersonY, so PersonX feels ashamed."}
{"input": "Input: <extra_id_0> but PersonX makes a mistake in front of PersonY, so PersonX feels ashamed. ; Constraint: [guard, side, profile, wrap, door], [no] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"], ["not", "no"]], "gpt": "PersonX knocks on the door but PersonX makes a mistake in front of PersonY, so PersonX feels ashamed.", "neuro": "PersonX has no side profile but PersonX makes a mistake in front of PersonY, so PersonX feels ashamed.", "vanilla": "PersonX has no side guard but PersonX makes a mistake in front of PersonY, so PersonX feels ashamed."}
{"input": "Input: Although <extra_id_0>, PersonX makes a mistake in front of PersonY, so PersonX feels ashamed. ; Constraint: [side, guard, wrap, door, profile] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"]], "gpt": "Although PersonX is being wrapped in a duvet, PersonX makes a mistake in front of PersonY, so PersonX feels ashamed.", "neuro": "Although PersonX has a good profile, PersonX makes a mistake in front of PersonY, so PersonX feels ashamed.", "vanilla": "Although PersonX is a good person, PersonX makes a mistake in front of PersonY, so PersonX feels ashamed."}
{"input": "Input: Although <extra_id_0>, PersonX makes a mistake in front of PersonY, so PersonX feels ashamed. ; Constraint: [wrap, side, guard, door, profile], [no] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"], ["not", "no"]], "gpt": "Although PersonX's profile is not good, PersonX makes a mistake in front of PersonY, so PersonX feels ashamed.", "neuro": "Although PersonX is not wrapped, PersonX makes a mistake in front of PersonY, so PersonX feels ashamed.", "vanilla": "Although PersonX is not wrapped, PersonX makes a mistake in front of PersonY, so PersonX feels ashamed."}
{"input": "Input: PersonX saves the life of PersonY and <extra_id_0>, so PersonX feels happy. ; Constraint: [culture, world, death, people, time] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"]], "gpt": "PersonX saves the life of PersonY and becomes a hero to the people, so PersonX feels happy.", "neuro": "PersonX saves the life of PersonY and saves the world, so PersonX feels happy.", "vanilla": "PersonX saves the life of PersonY and PersonY is a good person, so PersonX feels happy."}
{"input": "Input: PersonX saves the life of PersonY and <extra_id_0>, so PersonX feels happy. ; Constraint: [time, people, death, world, culture], [no] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"], ["not", "no"]], "gpt": "PersonX saves the life of PersonY and None, so PersonX feels happy.", "neuro": "PersonX saves the life of PersonY and no one dies in the world, so PersonX feels happy.", "vanilla": "PersonX saves the life of PersonY and no one dies, so PersonX feels happy."}
{"input": "Input: PersonX saves the life of PersonY while <extra_id_0>, so PersonX feels happy. ; Constraint: [culture, death, time, world, people] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"]], "gpt": "PersonX saves the life of PersonY while death is a taboo in their culture, so PersonX feels happy.", "neuro": "PersonX saves the life of PersonY while being in a different culture, so PersonX feels happy.", "vanilla": "PersonX saves the life of PersonY while being in the world, so PersonX feels happy."}
{"input": "Input: PersonX saves the life of PersonY while <extra_id_0>, so PersonX feels happy. ; Constraint: [time, people, culture, death, world], [no] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"], ["not", "no"]], "gpt": "PersonX saves the life of PersonY while there is no time to hesitate, so PersonX feels happy.", "neuro": "PersonX saves the life of PersonY while there is no time, so PersonX feels happy.", "vanilla": "PersonX saves the life of PersonY while no one else can, so PersonX feels happy."}
{"input": "Input: <extra_id_0> but PersonX saves the life of PersonY, so PersonX feels happy. ; Constraint: [world, time, culture, people, death] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"]], "gpt": "PersonX's culture values human life but PersonX saves the life of PersonY, so PersonX feels happy.", "neuro": "PersonX is not a person of the world but PersonX saves the life of PersonY, so PersonX feels happy.", "vanilla": "PersonX is not a good person but PersonX saves the life of PersonY, so PersonX feels happy."}
{"input": "Input: <extra_id_0> but PersonX saves the life of PersonY, so PersonX feels happy. ; Constraint: [world, death, people, culture, time], [no] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"], ["not", "no"]], "gpt": "No one knows the time of death but PersonX saves the life of PersonY, so PersonX feels happy.", "neuro": "PersonX is not a person of the world but PersonX saves the life of PersonY, so PersonX feels happy.", "vanilla": "No one dies but PersonX saves the life of PersonY, so PersonX feels happy."}
{"input": "Input: Although <extra_id_0>, PersonX saves the life of PersonY, so PersonX feels happy. ; Constraint: [culture, time, death, world, people] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"]], "gpt": "Although there are a lot of people in the world, PersonX saves the life of PersonY, so PersonX feels happy.", "neuro": "Although PersonX has no time, PersonX saves the life of PersonY, so PersonX feels happy.", "vanilla": "Although the world is changing, PersonX saves the life of PersonY, so PersonX feels happy."}
{"input": "Input: Although <extra_id_0>, PersonX saves the life of PersonY, so PersonX feels happy. ; Constraint: [time, culture, world, people, death], [no] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"], ["not", "no"]], "gpt": "Although None, PersonX saves the life of PersonY, so PersonX feels happy.", "neuro": "Although PersonX is not in the world, PersonX saves the life of PersonY, so PersonX feels happy.", "vanilla": "Although there is no time, PersonX saves the life of PersonY, so PersonX feels happy."}
{"input": "Input: PersonX saves the life of PersonY and <extra_id_0>, so PersonX is seen as brave. ; Constraint: [death, people, world, time, culture] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"]], "gpt": "PersonX saves the life of PersonY and many people in the world, so PersonX is seen as brave.", "neuro": "PersonX saves the life of PersonY and saves the world, so PersonX is seen as brave.", "vanilla": "PersonX saves the life of PersonY and saves the world, so PersonX is seen as brave."}
{"input": "Input: PersonX saves the life of PersonY and <extra_id_0>, so PersonX is seen as brave. ; Constraint: [time, culture, death, people, world], [no] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"], ["not", "no"]], "gpt": "PersonX saves the life of PersonY and None, so PersonX is seen as brave.", "neuro": "PersonX saves the life of PersonY and no one dies in the world, so PersonX is seen as brave.", "vanilla": "PersonX saves the life of PersonY and no one dies, so PersonX is seen as brave."}
{"input": "Input: PersonX saves the life of PersonY while <extra_id_0>, so PersonX is seen as brave. ; Constraint: [world, death, people, culture, time] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"]], "gpt": "PersonX saves the life of PersonY while the world is at war, so PersonX is seen as brave.", "neuro": "PersonX saves the life of PersonY while facing death, so PersonX is seen as brave.", "vanilla": "PersonX saves the life of PersonY while facing death, so PersonX is seen as brave."}
{"input": "Input: PersonX saves the life of PersonY while <extra_id_0>, so PersonX is seen as brave. ; Constraint: [time, culture, death, people, world], [no] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"], ["not", "no"]], "gpt": "PersonX saves the life of PersonY while None, so PersonX is seen as brave.", "neuro": "PersonX saves the life of PersonY while there is no culture in the world, so PersonX is seen as brave.", "vanilla": "PersonX saves the life of PersonY while no one else can, so PersonX is seen as brave."}
{"input": "Input: <extra_id_0> but PersonX saves the life of PersonY, so PersonX is seen as brave. ; Constraint: [death, time, world, culture, people] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"]], "gpt": "PersonX kills many people but PersonX saves the life of PersonY, so PersonX is seen as brave.", "neuro": "PersonX lives in the world but PersonX saves the life of PersonY, so PersonX is seen as brave.", "vanilla": "PersonX has no time but PersonX saves the life of PersonY, so PersonX is seen as brave."}
{"input": "Input: <extra_id_0> but PersonX saves the life of PersonY, so PersonX is seen as brave. ; Constraint: [world, culture, time, death, people], [no] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"], ["not", "no"]], "gpt": "None but PersonX saves the life of PersonY, so PersonX is seen as brave.", "neuro": "PersonX is not from the world but PersonX saves the life of PersonY, so PersonX is seen as brave.", "vanilla": "No culture but PersonX saves the life of PersonY, so PersonX is seen as brave."}
{"input": "Input: Although <extra_id_0>, PersonX saves the life of PersonY, so PersonX is seen as brave. ; Constraint: [world, people, culture, time, death] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"]], "gpt": "Although many people die every day, PersonX saves the life of PersonY, so PersonX is seen as brave.", "neuro": "Although death is a part of culture, PersonX saves the life of PersonY, so PersonX is seen as brave.", "vanilla": "Although time has passed, PersonX saves the life of PersonY, so PersonX is seen as brave."}
{"input": "Input: Although <extra_id_0>, PersonX saves the life of PersonY, so PersonX is seen as brave. ; Constraint: [people, culture, world, death, time], [no] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"], ["not", "no"]], "gpt": "Although None, PersonX saves the life of PersonY, so PersonX is seen as brave.", "neuro": "Although there is no death in the world, PersonX saves the life of PersonY, so PersonX is seen as brave.", "vanilla": "Although PersonX has no time, PersonX saves the life of PersonY, so PersonX is seen as brave."}
{"input": "Input: PersonX acts sensibly and <extra_id_0>, so PersonX is seen as responsible. ; Constraint: [fight, role, attack, agent, effect] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"]], "gpt": "PersonX acts sensibly and effectively, so PersonX is seen as responsible.", "neuro": "PersonX acts sensibly and is a good agent, so PersonX is seen as responsible.", "vanilla": "PersonX acts sensibly and does not fight, so PersonX is seen as responsible."}
{"input": "Input: PersonX acts sensibly and <extra_id_0>, so PersonX is seen as responsible. ; Constraint: [effect, attack, agent, role, fight], [no] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"], ["not", "no"]], "gpt": "PersonX acts sensibly and does not fight with others, so PersonX is seen as responsible.", "neuro": "PersonX acts sensibly and does not fight, so PersonX is seen as responsible.", "vanilla": "PersonX acts sensibly and does not fight, so PersonX is seen as responsible."}
{"input": "Input: PersonX acts sensibly while <extra_id_0>, so PersonX is seen as responsible. ; Constraint: [effect, role, fight, attack, agent] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"]], "gpt": "PersonX acts sensibly while taking into account the effect of her action, so PersonX is seen as responsible.", "neuro": "PersonX acts sensibly while in a fight, so PersonX is seen as responsible.", "vanilla": "PersonX acts sensibly while being an agent, so PersonX is seen as responsible."}
{"input": "Input: PersonX acts sensibly while <extra_id_0>, so PersonX is seen as responsible. ; Constraint: [agent, effect, attack, role, fight], [no] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"], ["not", "no"]], "gpt": "PersonX acts sensibly while the agent has no effect on the attack, so PersonX is seen as responsible.", "neuro": "PersonX acts sensibly while not attacking, so PersonX is seen as responsible.", "vanilla": "PersonX acts sensibly while not fighting, so PersonX is seen as responsible."}
{"input": "Input: <extra_id_0> but PersonX acts sensibly, so PersonX is seen as responsible. ; Constraint: [effect, attack, role, fight, agent] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"]], "gpt": "PersonX is not an agent but PersonX acts sensibly, so PersonX is seen as responsible.", "neuro": "PersonX is an agent but PersonX acts sensibly, so PersonX is seen as responsible.", "vanilla": "PersonX is attacked but PersonX acts sensibly, so PersonX is seen as responsible."}
{"input": "Input: <extra_id_0> but PersonX acts sensibly, so PersonX is seen as responsible. ; Constraint: [attack, effect, fight, role, agent], [no] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"], ["not", "no"]], "gpt": "No agent provokes PersonX but PersonX acts sensibly, so PersonX is seen as responsible.", "neuro": "PersonX is not an agent but PersonX acts sensibly, so PersonX is seen as responsible.", "vanilla": "PersonX is not an agent but PersonX acts sensibly, so PersonX is seen as responsible."}
{"input": "Input: Although <extra_id_0>, PersonX acts sensibly, so PersonX is seen as responsible. ; Constraint: [fight, attack, effect, agent, role] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"]], "gpt": "Although the effect of the attack is not seen immediately, PersonX acts sensibly, so PersonX is seen as responsible.", "neuro": "Although PersonX fights, PersonX acts sensibly, so PersonX is seen as responsible.", "vanilla": "Although PersonX is an agent, PersonX acts sensibly, so PersonX is seen as responsible."}
{"input": "Input: Although <extra_id_0>, PersonX acts sensibly, so PersonX is seen as responsible. ; Constraint: [attack, effect, fight, role, agent], [no] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"], ["not", "no"]], "gpt": "Although the attack has no effect on the agent, PersonX acts sensibly, so PersonX is seen as responsible.", "neuro": "Although PersonX is not an agent, PersonX acts sensibly, so PersonX is seen as responsible.", "vanilla": "Although PersonX does not fight, PersonX acts sensibly, so PersonX is seen as responsible."}
{"input": "Input: PersonX acts sensibly and <extra_id_0>, so PersonX feels relaxed. ; Constraint: [attack, role, agent, fight, effect] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"]], "gpt": "PersonX acts sensibly and takes the role of an agent, so PersonX feels relaxed.", "neuro": "PersonX acts sensibly and has no effect, so PersonX feels relaxed.", "vanilla": "PersonX acts sensibly and does not attack, so PersonX feels relaxed."}
{"input": "Input: PersonX acts sensibly and <extra_id_0>, so PersonX feels relaxed. ; Constraint: [fight, role, attack, agent, effect], [no] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"], ["not", "no"]], "gpt": "PersonX acts sensibly and has no effect on other people, so PersonX feels relaxed.", "neuro": "PersonX acts sensibly and does not fight, so PersonX feels relaxed.", "vanilla": "PersonX acts sensibly and does not fight, so PersonX feels relaxed."}
{"input": "Input: PersonX acts sensibly while <extra_id_0>, so PersonX feels relaxed. ; Constraint: [fight, role, agent, attack, effect] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"]], "gpt": "PersonX acts sensibly while taking on the role of an agent, so PersonX feels relaxed.", "neuro": "PersonX acts sensibly while being an agent, so PersonX feels relaxed.", "vanilla": "PersonX acts sensibly while being an agent, so PersonX feels relaxed."}
{"input": "Input: PersonX acts sensibly while <extra_id_0>, so PersonX feels relaxed. ; Constraint: [fight, attack, role, effect, agent], [no] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"], ["not", "no"]], "gpt": "PersonX acts sensibly while there is no fight, so PersonX feels relaxed.", "neuro": "PersonX acts sensibly while no one attacks, so PersonX feels relaxed.", "vanilla": "PersonX acts sensibly while no one attacks, so PersonX feels relaxed."}
{"input": "Input: <extra_id_0> but PersonX acts sensibly, so PersonX feels relaxed. ; Constraint: [role, agent, attack, fight, effect] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"]], "gpt": "PersonX is not an agent but PersonX acts sensibly, so PersonX feels relaxed.", "neuro": "PersonX fights but PersonX acts sensibly, so PersonX feels relaxed.", "vanilla": "PersonX attacks but PersonX acts sensibly, so PersonX feels relaxed."}
{"input": "Input: <extra_id_0> but PersonX acts sensibly, so PersonX feels relaxed. ; Constraint: [role, fight, attack, effect, agent], [no] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"], ["not", "no"]], "gpt": "PersonX has no role but PersonX acts sensibly, so PersonX feels relaxed.", "neuro": "PersonX has no effect but PersonX acts sensibly, so PersonX feels relaxed.", "vanilla": "PersonX is not an agent but PersonX acts sensibly, so PersonX feels relaxed."}
{"input": "Input: Although <extra_id_0>, PersonX acts sensibly, so PersonX feels relaxed. ; Constraint: [fight, agent, attack, effect, role] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"]], "gpt": "Although PersonX is a secret agent, PersonX acts sensibly, so PersonX feels relaxed.", "neuro": "Although PersonX is an agent, PersonX acts sensibly, so PersonX feels relaxed.", "vanilla": "Although PersonX is an agent, PersonX acts sensibly, so PersonX feels relaxed."}
{"input": "Input: Although <extra_id_0>, PersonX acts sensibly, so PersonX feels relaxed. ; Constraint: [role, effect, agent, fight, attack], [no] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"], ["not", "no"]], "gpt": "Although there is no agent, PersonX acts sensibly, so PersonX feels relaxed.", "neuro": "Although PersonX is not attacked, PersonX acts sensibly, so PersonX feels relaxed.", "vanilla": "Although PersonX is not an agent, PersonX acts sensibly, so PersonX feels relaxed."}
{"input": "Input: PersonX invites the board members to his home and <extra_id_0>, so PersonX is seen as a good host. ; Constraint: [country, builder, profile, bedroom, person] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"]], "gpt": "PersonX invites the board members to his home and prepares the bedroom for them, so PersonX is seen as a good host.", "neuro": "PersonX invites the board members to his home and has a good profile, so PersonX is seen as a good host.", "vanilla": "PersonX invites the board members to his home and shows them around, so PersonX is seen as a good host."}
{"input": "Input: PersonX invites the board members to his home and <extra_id_0>, so PersonX is seen as a good host. ; Constraint: [bedroom, person, country, builder, profile], [no] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"], ["not", "no"]], "gpt": "PersonX invites the board members to his home and None, so PersonX is seen as a good host.", "neuro": "PersonX invites the board members to his home and does not have a bedroom, so PersonX is seen as a good host.", "vanilla": "PersonX invites the board members to his home and does not have a bedroom, so PersonX is seen as a good host."}
{"input": "Input: PersonX invites the board members to his home while <extra_id_0>, so PersonX is seen as a good host. ; Constraint: [profile, bedroom, builder, country, person] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"]], "gpt": "PersonX invites the board members to his home while PersonX's bedroom is being built, so PersonX is seen as a good host.", "neuro": "PersonX invites the board members to his home while building their profile, so PersonX is seen as a good host.", "vanilla": "PersonX invites the board members to his home while building his profile, so PersonX is seen as a good host."}
{"input": "Input: PersonX invites the board members to his home while <extra_id_0>, so PersonX is seen as a good host. ; Constraint: [builder, bedroom, person, country, profile], [no] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"], ["not", "no"]], "gpt": "PersonX invites the board members to his home while no one is in the bedroom, so PersonX is seen as a good host.", "neuro": "PersonX invites the board members to his home while not having a bedroom, so PersonX is seen as a good host.", "vanilla": "PersonX invites the board members to his home while not having a profile, so PersonX is seen as a good host."}
{"input": "Input: <extra_id_0> but PersonX invites the board members to his home, so PersonX is seen as a good host. ; Constraint: [bedroom, profile, builder, country, person] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"]], "gpt": "PersonX's bedroom is not well-decorated but PersonX invites the board members to his home, so PersonX is seen as a good host.", "neuro": "PersonX is a builder but PersonX invites the board members to his home, so PersonX is seen as a good host.", "vanilla": "PersonX has no bedroom but PersonX invites the board members to his home, so PersonX is seen as a good host."}
{"input": "Input: <extra_id_0> but PersonX invites the board members to his home, so PersonX is seen as a good host. ; Constraint: [bedroom, profile, country, person, builder], [no] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"], ["not", "no"]], "gpt": "PersonX is not a builder but PersonX invites the board members to his home, so PersonX is seen as a good host.", "neuro": "PersonX is not a builder but PersonX invites the board members to his home, so PersonX is seen as a good host.", "vanilla": "PersonX does not have a bedroom but PersonX invites the board members to his home, so PersonX is seen as a good host."}
{"input": "Input: Although <extra_id_0>, PersonX invites the board members to his home, so PersonX is seen as a good host. ; Constraint: [bedroom, country, builder, person, profile] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"]], "gpt": "Although PersonX is from a poor country, PersonX invites the board members to his home, so PersonX is seen as a good host.", "neuro": "Although PersonX is not a good builder, PersonX invites the board members to his home, so PersonX is seen as a good host.", "vanilla": "Although PersonX is a builder, PersonX invites the board members to his home, so PersonX is seen as a good host."}
{"input": "Input: Although <extra_id_0>, PersonX invites the board members to his home, so PersonX is seen as a good host. ; Constraint: [person, country, profile, bedroom, builder], [no] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"], ["not", "no"]], "gpt": "Although no builder works at his home, PersonX invites the board members to his home, so PersonX is seen as a good host.", "neuro": "Although PersonX does not have a bedroom, PersonX invites the board members to his home, so PersonX is seen as a good host.", "vanilla": "Although PersonX is not a builder, PersonX invites the board members to his home, so PersonX is seen as a good host."}
{"input": "Input: PersonX invites the board members to his home and <extra_id_0>, so PersonX feels pleased. ; Constraint: [builder, profile, bedroom, person, country] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"]], "gpt": "PersonX invites the board members to his home and his bedroom is neatly cleaned, so PersonX feels pleased.", "neuro": "PersonX invites the board members to his home and they like his country, so PersonX feels pleased.", "vanilla": "PersonX invites the board members to his home and they like it, so PersonX feels pleased."}
{"input": "Input: PersonX invites the board members to his home and <extra_id_0>, so PersonX feels pleased. ; Constraint: [builder, person, bedroom, profile, country], [no] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"], ["not", "no"]], "gpt": "PersonX invites the board members to his home and None, so PersonX feels pleased.", "neuro": "PersonX invites the board members to his home and they are not builders, so PersonX feels pleased.", "vanilla": "PersonX invites the board members to his home and no one complains, so PersonX feels pleased."}
{"input": "Input: PersonX invites the board members to his home while <extra_id_0>, so PersonX feels pleased. ; Constraint: [country, bedroom, profile, person, builder] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"]], "gpt": "PersonX invites the board members to his home while his bedroom is being built, so PersonX feels pleased.", "neuro": "PersonX invites the board members to his home while building his profile, so PersonX feels pleased.", "vanilla": "PersonX invites the board members to his home while in his country, so PersonX feels pleased."}
{"input": "Input: PersonX invites the board members to his home while <extra_id_0>, so PersonX feels pleased. ; Constraint: [profile, bedroom, builder, country, person], [no] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"], ["not", "no"]], "gpt": "PersonX invites the board members to his home while None, so PersonX feels pleased.", "neuro": "PersonX invites the board members to his home while there is no profile, so PersonX feels pleased.", "vanilla": "PersonX invites the board members to his home while building his profile, so PersonX feels pleased."}
{"input": "Input: <extra_id_0> but PersonX invites the board members to his home, so PersonX feels pleased. ; Constraint: [profile, person, bedroom, country, builder] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"]], "gpt": "PersonX's profile is not good but PersonX invites the board members to his home, so PersonX feels pleased.", "neuro": "PersonX is not a builder but PersonX invites the board members to his home, so PersonX feels pleased.", "vanilla": "PersonX is not a profile builder but PersonX invites the board members to his home, so PersonX feels pleased."}
{"input": "Input: <extra_id_0> but PersonX invites the board members to his home, so PersonX feels pleased. ; Constraint: [person, builder, country, profile, bedroom], [no] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"], ["not", "no"]], "gpt": "PersonX's profile is not good but PersonX invites the board members to his home, so PersonX feels pleased.", "neuro": "PersonX does not have a bedroom but PersonX invites the board members to his home, so PersonX feels pleased.", "vanilla": "PersonX does not have a bedroom but PersonX invites the board members to his home, so PersonX feels pleased."}
{"input": "Input: Although <extra_id_0>, PersonX invites the board members to his home, so PersonX feels pleased. ; Constraint: [bedroom, builder, country, person, profile] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"]], "gpt": "Although PersonX is not a board member, PersonX invites the board members to his home, so PersonX feels pleased.", "neuro": "Although PersonX is not a builder, PersonX invites the board members to his home, so PersonX feels pleased.", "vanilla": "Although PersonX does not have a bedroom, PersonX invites the board members to his home, so PersonX feels pleased."}
{"input": "Input: Although <extra_id_0>, PersonX invites the board members to his home, so PersonX feels pleased. ; Constraint: [person, bedroom, profile, builder, country], [no] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"], ["not", "no"]], "gpt": "Although PersonX's profile is not good, PersonX invites the board members to his home, so PersonX feels pleased.", "neuro": "Although PersonX does not have a bedroom, PersonX invites the board members to his home, so PersonX feels pleased.", "vanilla": "Although PersonX does not have a profile, PersonX invites the board members to his home, so PersonX feels pleased."}
