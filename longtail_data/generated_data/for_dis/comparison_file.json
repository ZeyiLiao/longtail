{"input": "Input: PersonX eats lunch at the same restaurant every day and <extra_id_0>, so PersonX feels satisfied. ; Constraint: [brunch, midday, lunchroom, lump, munch] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"]], "gpt": "PersonX eats lunch at the same restaurant every day and finds the food to be good, so PersonX feels satisfied.", "neuro": "PersonX eats lunch at the same restaurant every day and has a lump of food, so PersonX feels satisfied.", "vanilla": "PersonX eats lunch at the same restaurant every day and enjoys it, so PersonX feels satisfied."}
{"input": "Input: PersonX eats lunch at the same restaurant every day and <extra_id_0>, so PersonX feels satisfied. ; Constraint: [lump, lunchroom, munch, midday, brunch], [no] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"], ["not", "no"]], "gpt": "PersonX eats lunch at the same restaurant every day and enjoys the same munch, so PersonX feels satisfied.", "neuro": "PersonX eats lunch at the same restaurant every day and does not munch, so PersonX feels satisfied.", "vanilla": "PersonX eats lunch at the same restaurant every day and no one complains, so PersonX feels satisfied."}
{"input": "Input: PersonX eats lunch at the same restaurant every day while <extra_id_0>, so PersonX feels satisfied. ; Constraint: [munch, lump, lunchroom, midday, brunch] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"]], "gpt": "PersonX eats lunch at the same restaurant every day while munching on the same dish, so PersonX feels satisfied.", "neuro": "PersonX eats lunch at the same restaurant every day while working midday, so PersonX feels satisfied.", "vanilla": "PersonX eats lunch at the same restaurant every day while watching television, so PersonX feels satisfied."}
{"input": "Input: PersonX eats lunch at the same restaurant every day while <extra_id_0>, so PersonX feels satisfied. ; Constraint: [midday, lunchroom, brunch, lump, munch], [no] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"], ["not", "no"]], "gpt": "PersonX eats lunch at the same restaurant every day while eating a variety of food, so PersonX feels satisfied.", "neuro": "PersonX eats lunch at the same restaurant every day while not eating brunch, so PersonX feels satisfied.", "vanilla": "PersonX eats lunch at the same restaurant every day while no one else is there, so PersonX feels satisfied."}
{"input": "Input: <extra_id_0> but PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied. ; Constraint: [lump, brunch, midday, lunchroom, munch] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"]], "gpt": "Although problem is not e but PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied.", "neuro": "PersonX eats lunch at midday but PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied.", "vanilla": "PersonX loves brunch but PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied."}
{"input": "Input: <extra_id_0> but PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied. ; Constraint: [midday, brunch, lump, munch, lunchroom], [no] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"], ["not", "no"]], "gpt": "No one joins PersonX but PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied.", "neuro": "PersonX does not like brunch but PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied.", "vanilla": "PersonX does not eat lunch but PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied."}
{"input": "Input: Although <extra_id_0>, PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied. ; Constraint: [brunch, lunchroom, lump, munch, midday] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"]], "gpt": "Although PersonX is not in the mood for a big lunch, PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied.", "neuro": "Although PersonX eats lunch at midday, PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied.", "vanilla": "Although PersonX eats lunch at midday, PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied."}
{"input": "Input: Although <extra_id_0>, PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied. ; Constraint: [lunchroom, brunch, munch, midday, lump], [no] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"], ["not", "no"]], "gpt": "Although PersonX is not in the mood for eating, PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied.", "neuro": "Although PersonX does not have a lunchroom, PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied.", "vanilla": "Although PersonX does not have a lunchroom, PersonX eats lunch at the same restaurant every day, so PersonX feels satisfied."}
{"input": "Input: PersonX eats lunch at the same restaurant every day and <extra_id_0>, so PersonX is seen as reliable. ; Constraint: [munch, lunchroom, lump, brunch, midday] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"]], "gpt": "PersonX eats lunch at the same restaurant every day and PersonX is always on time, so PersonX is seen as reliable.", "neuro": "PersonX eats lunch at the same restaurant every day and eats midday, so PersonX is seen as reliable.", "vanilla": "PersonX eats lunch at the same restaurant every day and never misses lunch, so PersonX is seen as reliable."}
{"input": "Input: PersonX eats lunch at the same restaurant every day and <extra_id_0>, so PersonX is seen as reliable. ; Constraint: [midday, lunchroom, munch, brunch, lump], [no] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"], ["not", "no"]], "gpt": "PersonX eats lunch at the same restaurant every day and always arrives at midday, so PersonX is seen as reliable.", "neuro": "PersonX eats lunch at the same restaurant every day and does not munch, so PersonX is seen as reliable.", "vanilla": "PersonX eats lunch at the same restaurant every day and never misses lunch, so PersonX is seen as reliable."}
{"input": "Input: PersonX eats lunch at the same restaurant every day while <extra_id_0>, so PersonX is seen as reliable. ; Constraint: [lump, lunchroom, munch, brunch, midday] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"]], "gpt": "PersonX eats lunch at the same restaurant every day while munching on a lump of meat, so PersonX is seen as reliable.", "neuro": "PersonX eats lunch at the same restaurant every day while eating midday, so PersonX is seen as reliable.", "vanilla": "PersonX eats lunch at the same restaurant every day while eating lunch, so PersonX is seen as reliable."}
{"input": "Input: PersonX eats lunch at the same restaurant every day while <extra_id_0>, so PersonX is seen as reliable. ; Constraint: [munch, brunch, midday, lunchroom, lump], [no] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"], ["not", "no"]], "gpt": "PersonX eats lunch at the same restaurant every day while PersonX is punctual, so PersonX is seen as reliable.", "neuro": "PersonX eats lunch at the same restaurant every day while not having a lump, so PersonX is seen as reliable.", "vanilla": "PersonX eats lunch at the same restaurant every day while no one else does, so PersonX is seen as reliable."}
{"input": "Input: <extra_id_0> but PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable. ; Constraint: [brunch, midday, munch, lunchroom, lump] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"]], "gpt": "PersonX is in the lunchroom but PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable.", "neuro": "PersonX eats lunch at midday but PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable.", "vanilla": "PersonX eats lunch at noon but PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable."}
{"input": "Input: <extra_id_0> but PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable. ; Constraint: [brunch, midday, lunchroom, lump, munch], [no] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"], ["not", "no"]], "gpt": "PersonX has no money but PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable.", "neuro": "PersonX does not munch but PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable.", "vanilla": "PersonX does not eat brunch but PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable."}
{"input": "Input: Although <extra_id_0>, PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable. ; Constraint: [lump, lunchroom, brunch, midday, munch] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"]], "gpt": "Although PersonX does not have much money, PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable.", "neuro": "Although PersonX eats lunch at midday, PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable.", "vanilla": "Although PersonX eats lunch at midday, PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable."}
{"input": "Input: Although <extra_id_0>, PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable. ; Constraint: [brunch, lump, lunchroom, midday, munch], [no] ; Output:", "cons": [["lunchrooms", "lunchroom", "lumped", "lumping", "lumps", "lump", "brunch", "brunches", "munching", "munched", "munch", "munches", "midday"], ["not", "no"]], "gpt": "Although PersonX is not in a good mood, PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable.", "neuro": "Although PersonX does not eat lunch at midday, PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable.", "vanilla": "Although PersonX does not have a lunchroom, PersonX eats lunch at the same restaurant every day, so PersonX is seen as reliable."}
{"input": "Input: PersonX promises to do anything for PersonY and <extra_id_0>, so PersonX feels happy. ; Constraint: [renege, stipulate, pledge, commitment, promissory] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"]], "gpt": "PersonX promises to do anything for PersonY and PersonY keeps the promise, so PersonX feels happy.", "neuro": "PersonX promises to do anything for PersonY and PersonY does not renege, so PersonX feels happy.", "vanilla": "PersonX promises to do anything for PersonY and PersonY does not renege, so PersonX feels happy."}
{"input": "Input: PersonX promises to do anything for PersonY and <extra_id_0>, so PersonX feels happy. ; Constraint: [stipulate, renege, pledge, promissory, commitment], [no] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"], ["not", "no"]], "gpt": "PersonX promises to do anything for PersonY and PersonX does not renege on the promissory, so PersonX feels happy.", "neuro": "PersonX promises to do anything for PersonY and PersonY does not renege, so PersonX feels happy.", "vanilla": "PersonX promises to do anything for PersonY and PersonY does not renege, so PersonX feels happy."}
{"input": "Input: PersonX promises to do anything for PersonY while <extra_id_0>, so PersonX feels happy. ; Constraint: [stipulate, pledge, promissory, commitment, renege] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"]], "gpt": "PersonX promises to do anything for PersonY while PersonY is stipulate, so PersonX feels happy.", "neuro": "PersonX promises to do anything for PersonY while PersonY does not renege, so PersonX feels happy.", "vanilla": "PersonX promises to do anything for PersonY while PersonY does not renege, so PersonX feels happy."}
{"input": "Input: PersonX promises to do anything for PersonY while <extra_id_0>, so PersonX feels happy. ; Constraint: [stipulate, renege, commitment, promissory, pledge], [no] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"], ["not", "no"]], "gpt": "PersonX promises to do anything for PersonY while PersonX does not renege on the promissory, so PersonX feels happy.", "neuro": "PersonX promises to do anything for PersonY while PersonY does not stipulate, so PersonX feels happy.", "vanilla": "PersonX promises to do anything for PersonY while PersonY does not stipulate, so PersonX feels happy."}
{"input": "Input: <extra_id_0> but PersonX promises to do anything for PersonY, so PersonX feels happy. ; Constraint: [stipulate, pledge, commitment, promissory, renege] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"]], "gpt": "PersonX reneges on the promissory but PersonX promises to do anything for PersonY, so PersonX feels happy.", "neuro": "PersonX does not renege but PersonX promises to do anything for PersonY, so PersonX feels happy.", "vanilla": "PersonX is not committed but PersonX promises to do anything for PersonY, so PersonX feels happy."}
{"input": "Input: <extra_id_0> but PersonX promises to do anything for PersonY, so PersonX feels happy. ; Constraint: [promissory, renege, stipulate, commitment, pledge], [no] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"], ["not", "no"]], "gpt": "PersonX stipulates conditions but PersonX promises to do anything for PersonY, so PersonX feels happy.", "neuro": "PersonX does not pledge but PersonX promises to do anything for PersonY, so PersonX feels happy.", "vanilla": "PersonX does not commit but PersonX promises to do anything for PersonY, so PersonX feels happy."}
{"input": "Input: Although <extra_id_0>, PersonX promises to do anything for PersonY, so PersonX feels happy. ; Constraint: [stipulate, commitment, renege, pledge, promissory] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"]], "gpt": "Although PersonX may renege on the pledge, PersonX promises to do anything for PersonY, so PersonX feels happy.", "neuro": "Although PersonY reneges on the commitment, PersonX promises to do anything for PersonY, so PersonX feels happy.", "vanilla": "Although PersonX is not committed, PersonX promises to do anything for PersonY, so PersonX feels happy."}
{"input": "Input: Although <extra_id_0>, PersonX promises to do anything for PersonY, so PersonX feels happy. ; Constraint: [renege, stipulate, pledge, commitment, promissory], [no] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"], ["not", "no"]], "gpt": "Although PersonX reneges on the promissory note, PersonX promises to do anything for PersonY, so PersonX feels happy.", "neuro": "Although PersonY does not pledge anything, PersonX promises to do anything for PersonY, so PersonX feels happy.", "vanilla": "Although PersonX does not renege, PersonX promises to do anything for PersonY, so PersonX feels happy."}
{"input": "Input: PersonX promises to do anything for PersonY and <extra_id_0>, so PersonX is seen as a good friend. ; Constraint: [commitment, stipulate, promissory, pledge, renege] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"]], "gpt": "PersonX promises to do anything for PersonY and never reneges on her pledge, so PersonX is seen as a good friend.", "neuro": "PersonX promises to do anything for PersonY and does not renege, so PersonX is seen as a good friend.", "vanilla": "PersonX promises to do anything for PersonY and does not renege, so PersonX is seen as a good friend."}
{"input": "Input: PersonX promises to do anything for PersonY and <extra_id_0>, so PersonX is seen as a good friend. ; Constraint: [renege, promissory, stipulate, pledge, commitment], [no] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"], ["not", "no"]], "gpt": "PersonX promises to do anything for PersonY and PersonX doesn't renege on the promissory, so PersonX is seen as a good friend.", "neuro": "PersonX promises to do anything for PersonY and does not renege, so PersonX is seen as a good friend.", "vanilla": "PersonX promises to do anything for PersonY and does not renege, so PersonX is seen as a good friend."}
{"input": "Input: PersonX promises to do anything for PersonY while <extra_id_0>, so PersonX is seen as a good friend. ; Constraint: [commitment, promissory, pledge, renege, stipulate] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"]], "gpt": "PersonX promises to do anything for PersonY while making a promissory, so PersonX is seen as a good friend.", "neuro": "PersonX promises to do anything for PersonY while PersonY does not renege, so PersonX is seen as a good friend.", "vanilla": "PersonX promises to do anything for PersonY while PersonY does not renege, so PersonX is seen as a good friend."}
{"input": "Input: PersonX promises to do anything for PersonY while <extra_id_0>, so PersonX is seen as a good friend. ; Constraint: [commitment, renege, promissory, stipulate, pledge], [no] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"], ["not", "no"]], "gpt": "PersonX promises to do anything for PersonY while PersonX does not renege on the promissory, so PersonX is seen as a good friend.", "neuro": "PersonX promises to do anything for PersonY while PersonY does not renege, so PersonX is seen as a good friend.", "vanilla": "PersonX promises to do anything for PersonY while PersonY does not commit to anything, so PersonX is seen as a good friend."}
{"input": "Input: <extra_id_0> but PersonX promises to do anything for PersonY, so PersonX is seen as a good friend. ; Constraint: [pledge, commitment, promissory, renege, stipulate] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"]], "gpt": "PersonX reneges on her commitment but PersonX promises to do anything for PersonY, so PersonX is seen as a good friend.", "neuro": "PersonX does not renege but PersonX promises to do anything for PersonY, so PersonX is seen as a good friend.", "vanilla": "PersonX is not committed but PersonX promises to do anything for PersonY, so PersonX is seen as a good friend."}
{"input": "Input: <extra_id_0> but PersonX promises to do anything for PersonY, so PersonX is seen as a good friend. ; Constraint: [renege, commitment, promissory, pledge, stipulate], [no] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"], ["not", "no"]], "gpt": "PersonX reneges on the pledge but PersonX promises to do anything for PersonY, so PersonX is seen as a good friend.", "neuro": "PersonX does not stipulate but PersonX promises to do anything for PersonY, so PersonX is seen as a good friend.", "vanilla": "PersonX does not stipulate but PersonX promises to do anything for PersonY, so PersonX is seen as a good friend."}
{"input": "Input: Although <extra_id_0>, PersonX promises to do anything for PersonY, so PersonX is seen as a good friend. ; Constraint: [pledge, promissory, stipulate, commitment, renege] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"]], "gpt": "Although PersonX reneges on her commitments, PersonX promises to do anything for PersonY, so PersonX is seen as a good friend.", "neuro": "Although PersonY does not stipulate, PersonX promises to do anything for PersonY, so PersonX is seen as a good friend.", "vanilla": "Although PersonY does not stipulate, PersonX promises to do anything for PersonY, so PersonX is seen as a good friend."}
{"input": "Input: Although <extra_id_0>, PersonX promises to do anything for PersonY, so PersonX is seen as a good friend. ; Constraint: [renege, promissory, pledge, commitment, stipulate], [no] ; Output:", "cons": [["reneges", "renege", "reneging", "reneged", "commitments", "commitment", "stipulate", "stipulated", "stipulating", "stipulates", "promissory", "pledged", "pledge", "pledging", "pledges"], ["not", "no"]], "gpt": "Although PersonX reneges on her commitment, PersonX promises to do anything for PersonY, so PersonX is seen as a good friend.", "neuro": "Although PersonY does not renege, PersonX promises to do anything for PersonY, so PersonX is seen as a good friend.", "vanilla": "Although PersonY does not commit to anything, PersonX promises to do anything for PersonY, so PersonX is seen as a good friend."}
{"input": "Input: PersonX finishes writing a novel and <extra_id_0>, so PersonX feels accomplished. ; Constraint: [fear, newel, sherlock, finland, gavel] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"]], "gpt": "PersonX finishes writing a novel and overcomes her fears, so PersonX feels accomplished.", "neuro": "PersonX finishes writing a novel and fears nothing, so PersonX feels accomplished.", "vanilla": "PersonX finishes writing a novel and gets a newl, so PersonX feels accomplished."}
{"input": "Input: PersonX finishes writing a novel and <extra_id_0>, so PersonX feels accomplished. ; Constraint: [finland, gavel, newel, sherlock, fear], [no] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"], ["not", "no"]], "gpt": "PersonX finishes writing a novel and overcomes the fear of never being published, so PersonX feels accomplished.", "neuro": "PersonX finishes writing a novel and no one fears Sherlock, so PersonX feels accomplished.", "vanilla": "PersonX finishes writing a novel and no one reads it, so PersonX feels accomplished."}
{"input": "Input: PersonX finishes writing a novel while <extra_id_0>, so PersonX feels accomplished. ; Constraint: [gavel, fear, finland, newel, sherlock] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"]], "gpt": "PersonX finishes writing a novel while holding a gavel, so PersonX feels accomplished.", "neuro": "PersonX finishes writing a novel while sherlock is in Finland, so PersonX feels accomplished.", "vanilla": "PersonX finishes writing a novel while living in Finland, so PersonX feels accomplished."}
{"input": "Input: PersonX finishes writing a novel while <extra_id_0>, so PersonX feels accomplished. ; Constraint: [finland, newel, fear, gavel, sherlock], [no] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"], ["not", "no"]], "gpt": "PersonX finishes writing a novel while taking a break from work, so PersonX feels accomplished.", "neuro": "PersonX finishes writing a novel while not fearing the gavel, so PersonX feels accomplished.", "vanilla": "PersonX finishes writing a novel while in Finland, so PersonX feels accomplished."}
{"input": "Input: <extra_id_0> but PersonX finishes writing a novel, so PersonX feels accomplished. ; Constraint: [finland, gavel, fear, sherlock, newel] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"]], "gpt": "PersonX is afraid of writing a novel but PersonX finishes writing a novel, so PersonX feels accomplished.", "neuro": "PersonX fears the gavel but PersonX finishes writing a novel, so PersonX feels accomplished.", "vanilla": "PersonX is afraid but PersonX finishes writing a novel, so PersonX feels accomplished."}
{"input": "Input: <extra_id_0> but PersonX finishes writing a novel, so PersonX feels accomplished. ; Constraint: [sherlock, finland, gavel, newel, fear], [no] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"], ["not", "no"]], "gpt": "No one buys PersonX's new book but PersonX finishes writing a novel, so PersonX feels accomplished.", "neuro": "PersonX is not sherlock but PersonX finishes writing a novel, so PersonX feels accomplished.", "vanilla": "PersonX is not in Finland but PersonX finishes writing a novel, so PersonX feels accomplished."}
{"input": "Input: Although <extra_id_0>, PersonX finishes writing a novel, so PersonX feels accomplished. ; Constraint: [finland, newel, gavel, sherlock, fear] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"]], "gpt": "Although PersonX is afraid of writing a new novel, PersonX finishes writing a novel, so PersonX feels accomplished.", "neuro": "Although PersonX is not a newel, PersonX finishes writing a novel, so PersonX feels accomplished.", "vanilla": "Although PersonX is not Sherlock, PersonX finishes writing a novel, so PersonX feels accomplished."}
{"input": "Input: Although <extra_id_0>, PersonX finishes writing a novel, so PersonX feels accomplished. ; Constraint: [fear, finland, newel, gavel, sherlock], [no] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"], ["not", "no"]], "gpt": "Although PersonX is not a native English speaker, PersonX finishes writing a novel, so PersonX feels accomplished.", "neuro": "Although PersonX is not a sherlock, PersonX finishes writing a novel, so PersonX feels accomplished.", "vanilla": "Although PersonX is not in Finland, PersonX finishes writing a novel, so PersonX feels accomplished."}
{"input": "Input: PersonX finishes writing a novel and <extra_id_0>, so PersonX is seen as talented. ; Constraint: [fear, finland, sherlock, newel, gavel] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"]], "gpt": "PersonX finishes writing a novel and submits it to the publisher, so PersonX is seen as talented.", "neuro": "PersonX finishes writing a novel and gets a gavel, so PersonX is seen as talented.", "vanilla": "PersonX finishes writing a novel and gets a newl, so PersonX is seen as talented."}
{"input": "Input: PersonX finishes writing a novel and <extra_id_0>, so PersonX is seen as talented. ; Constraint: [newel, fear, finland, gavel, sherlock], [no] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"], ["not", "no"]], "gpt": "PersonX finishes writing a novel and becomes a famous writer, so PersonX is seen as talented.", "neuro": "PersonX finishes writing a novel and has no fear, so PersonX is seen as talented.", "vanilla": "PersonX finishes writing a novel and no one is afraid of her, so PersonX is seen as talented."}
{"input": "Input: PersonX finishes writing a novel while <extra_id_0>, so PersonX is seen as talented. ; Constraint: [newel, finland, fear, gavel, sherlock] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"]], "gpt": "PersonX finishes writing a novel while being in fear, so PersonX is seen as talented.", "neuro": "PersonX finishes writing a novel while fearing the gavel, so PersonX is seen as talented.", "vanilla": "PersonX finishes writing a novel while living in Finland, so PersonX is seen as talented."}
{"input": "Input: PersonX finishes writing a novel while <extra_id_0>, so PersonX is seen as talented. ; Constraint: [sherlock, fear, newel, gavel, finland], [no] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"], ["not", "no"]], "gpt": "PersonX finishes writing a novel while being in a foreign country, so PersonX is seen as talented.", "neuro": "PersonX finishes writing a novel while having no fear, so PersonX is seen as talented.", "vanilla": "PersonX finishes writing a novel while wearing a gavel, so PersonX is seen as talented."}
{"input": "Input: <extra_id_0> but PersonX finishes writing a novel, so PersonX is seen as talented. ; Constraint: [fear, gavel, sherlock, newel, finland] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"]], "gpt": "PersonX is a new writer but PersonX finishes writing a novel, so PersonX is seen as talented.", "neuro": "PersonX has no fear but PersonX finishes writing a novel, so PersonX is seen as talented.", "vanilla": "PersonX is not Sherlock but PersonX finishes writing a novel, so PersonX is seen as talented."}
{"input": "Input: <extra_id_0> but PersonX finishes writing a novel, so PersonX is seen as talented. ; Constraint: [sherlock, newel, finland, fear, gavel], [no] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"], ["not", "no"]], "gpt": "No one reads PersonX's novel but PersonX finishes writing a novel, so PersonX is seen as talented.", "neuro": "PersonX does not fear Sherlock but PersonX finishes writing a novel, so PersonX is seen as talented.", "vanilla": "PersonX has no fear but PersonX finishes writing a novel, so PersonX is seen as talented."}
{"input": "Input: Although <extra_id_0>, PersonX finishes writing a novel, so PersonX is seen as talented. ; Constraint: [newel, finland, gavel, fear, sherlock] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"]], "gpt": "Although PersonX is not well-known in Finland, PersonX finishes writing a novel, so PersonX is seen as talented.", "neuro": "Although PersonX fears Sherlock, PersonX finishes writing a novel, so PersonX is seen as talented.", "vanilla": "Although PersonX is afraid of Sherlock, PersonX finishes writing a novel, so PersonX is seen as talented."}
{"input": "Input: Although <extra_id_0>, PersonX finishes writing a novel, so PersonX is seen as talented. ; Constraint: [finland, fear, newel, gavel, sherlock], [no] ; Output:", "cons": [["sherlocks", "sherlocking", "sherlock", "sherlocked", "fearing", "feared", "fear", "fears", "gaveled", "gavels", "gaveling", "gavel", "neweling", "newel", "newels", "neweled", "finlanded", "finlanding", "finland", "finlands"], ["not", "no"]], "gpt": "Although PersonX has never written a novel before, PersonX finishes writing a novel, so PersonX is seen as talented.", "neuro": "Although PersonX is not a sherlock, PersonX finishes writing a novel, so PersonX is seen as talented.", "vanilla": "Although PersonX is not a newel, PersonX finishes writing a novel, so PersonX is seen as talented."}
{"input": "Input: PersonX builds a small house for PersonY and <extra_id_0>, so PersonX is seen as a good builder. ; Constraint: [store, school, man, building, bedroom] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"]], "gpt": "PersonX builds a small house for PersonY and the house is very cozy, so PersonX is seen as a good builder.", "neuro": "PersonX builds a small house for PersonY and a store for PersonY, so PersonX is seen as a good builder.", "vanilla": "PersonX builds a small house for PersonY and it has a bedroom, so PersonX is seen as a good builder."}
{"input": "Input: PersonX builds a small house for PersonY and <extra_id_0>, so PersonX is seen as a good builder. ; Constraint: [bedroom, store, building, man, school], [no] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"], ["not", "no"]], "gpt": "PersonX builds a small house for PersonY and the house looks good, so PersonX is seen as a good builder.", "neuro": "PersonX builds a small house for PersonY and no man lives in it, so PersonX is seen as a good builder.", "vanilla": "PersonX builds a small house for PersonY and no one uses it, so PersonX is seen as a good builder."}
{"input": "Input: PersonX builds a small house for PersonY while <extra_id_0>, so PersonX is seen as a good builder. ; Constraint: [bedroom, building, man, school, store] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"]], "gpt": "PersonX builds a small house for PersonY while PersonX is at school, so PersonX is seen as a good builder.", "neuro": "PersonX builds a small house for PersonY while building a bedroom, so PersonX is seen as a good builder.", "vanilla": "PersonX builds a small house for PersonY while saving money, so PersonX is seen as a good builder."}
{"input": "Input: PersonX builds a small house for PersonY while <extra_id_0>, so PersonX is seen as a good builder. ; Constraint: [school, store, man, bedroom, building], [no] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"], ["not", "no"]], "gpt": "PersonX builds a small house for PersonY while PersonX is the only man in the school, so PersonX is seen as a good builder.", "neuro": "PersonX builds a small house for PersonY while PersonY does not have a bedroom, so PersonX is seen as a good builder.", "vanilla": "PersonX builds a small house for PersonY while PersonY is not a man, so PersonX is seen as a good builder."}
{"input": "Input: <extra_id_0> but PersonX builds a small house for PersonY, so PersonX is seen as a good builder. ; Constraint: [school, store, man, building, bedroom] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"]], "gpt": "PersonX has no experience but PersonX builds a small house for PersonY, so PersonX is seen as a good builder.", "neuro": "PersonX has no school but PersonX builds a small house for PersonY, so PersonX is seen as a good builder.", "vanilla": "PersonX has no store but PersonX builds a small house for PersonY, so PersonX is seen as a good builder."}
{"input": "Input: <extra_id_0> but PersonX builds a small house for PersonY, so PersonX is seen as a good builder. ; Constraint: [man, school, building, store, bedroom], [no] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"], ["not", "no"]], "gpt": "Although PersonX is not a  but PersonX builds a small house for PersonY, so PersonX is seen as a good builder.", "neuro": "PersonX has no store but PersonX builds a small house for PersonY, so PersonX is seen as a good builder.", "vanilla": "PersonX has no bedroom but PersonX builds a small house for PersonY, so PersonX is seen as a good builder."}
{"input": "Input: Although <extra_id_0>, PersonX builds a small house for PersonY, so PersonX is seen as a good builder. ; Constraint: [school, store, building, bedroom, man] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"]], "gpt": "Although PersonX is not a man, PersonX builds a small house for PersonY, so PersonX is seen as a good builder.", "neuro": "Although PersonY has no bedroom, PersonX builds a small house for PersonY, so PersonX is seen as a good builder.", "vanilla": "Although PersonX is not a good builder, PersonX builds a small house for PersonY, so PersonX is seen as a good builder."}
{"input": "Input: Although <extra_id_0>, PersonX builds a small house for PersonY, so PersonX is seen as a good builder. ; Constraint: [school, bedroom, store, man, building], [no] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"], ["not", "no"]], "gpt": "Although PersonX is not a man, PersonX builds a small house for PersonY, so PersonX is seen as a good builder.", "neuro": "Although PersonX does not have a building, PersonX builds a small house for PersonY, so PersonX is seen as a good builder.", "vanilla": "Although PersonX does not have a building, PersonX builds a small house for PersonY, so PersonX is seen as a good builder."}
{"input": "Input: PersonX builds a small house for PersonY and <extra_id_0>, so PersonX feels accomplished. ; Constraint: [bedroom, school, store, building, man] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"]], "gpt": "PersonX builds a small house for PersonY and sees PersonY's happy face, so PersonX feels accomplished.", "neuro": "PersonX builds a small house for PersonY and opens a store, so PersonX feels accomplished.", "vanilla": "PersonX builds a small house for PersonY and sells it to a man, so PersonX feels accomplished."}
{"input": "Input: PersonX builds a small house for PersonY and <extra_id_0>, so PersonX feels accomplished. ; Constraint: [school, building, bedroom, store, man], [no] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"], ["not", "no"]], "gpt": "PersonX builds a small house for PersonY and PersonY is a man, so PersonX feels accomplished.", "neuro": "PersonX builds a small house for PersonY and has no bedroom, so PersonX feels accomplished.", "vanilla": "PersonX builds a small house for PersonY and no one uses it, so PersonX feels accomplished."}
{"input": "Input: PersonX builds a small house for PersonY while <extra_id_0>, so PersonX feels accomplished. ; Constraint: [bedroom, store, building, school, man] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"]], "gpt": "PersonX builds a small house for PersonY while PersonX is in school, so PersonX feels accomplished.", "neuro": "PersonX builds a small house for PersonY while going to school, so PersonX feels accomplished.", "vanilla": "PersonX builds a small house for PersonY while going to school, so PersonX feels accomplished."}
{"input": "Input: PersonX builds a small house for PersonY while <extra_id_0>, so PersonX feels accomplished. ; Constraint: [man, school, bedroom, store, building], [no] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"], ["not", "no"]], "gpt": "PersonX builds a small house for PersonY while PersonY is at school, so PersonX feels accomplished.", "neuro": "PersonX builds a small house for PersonY while PersonY is not in school, so PersonX feels accomplished.", "vanilla": "PersonX builds a small house for PersonY while PersonY is not a man, so PersonX feels accomplished."}
{"input": "Input: <extra_id_0> but PersonX builds a small house for PersonY, so PersonX feels accomplished. ; Constraint: [building, bedroom, man, store, school] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"]], "gpt": "PersonX is a man but PersonX builds a small house for PersonY, so PersonX feels accomplished.", "neuro": "PersonX has no store but PersonX builds a small house for PersonY, so PersonX feels accomplished.", "vanilla": "PersonX has no bedroom but PersonX builds a small house for PersonY, so PersonX feels accomplished."}
{"input": "Input: <extra_id_0> but PersonX builds a small house for PersonY, so PersonX feels accomplished. ; Constraint: [building, school, man, store, bedroom], [no] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"], ["not", "no"]], "gpt": "Although PersonX is not a  but PersonX builds a small house for PersonY, so PersonX feels accomplished.", "neuro": "PersonX has no building but PersonX builds a small house for PersonY, so PersonX feels accomplished.", "vanilla": "PersonX is not a man but PersonX builds a small house for PersonY, so PersonX feels accomplished."}
{"input": "Input: Although <extra_id_0>, PersonX builds a small house for PersonY, so PersonX feels accomplished. ; Constraint: [bedroom, man, store, school, building] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"]], "gpt": "Although PersonX is not a man, PersonX builds a small house for PersonY, so PersonX feels accomplished.", "neuro": "Although PersonX does not have a bedroom, PersonX builds a small house for PersonY, so PersonX feels accomplished.", "vanilla": "Although PersonX is not in school, PersonX builds a small house for PersonY, so PersonX feels accomplished."}
{"input": "Input: Although <extra_id_0>, PersonX builds a small house for PersonY, so PersonX feels accomplished. ; Constraint: [bedroom, man, school, store, building], [no] ; Output:", "cons": [["man", "men", "mans", "manned", "manning", "schools", "schooling", "school", "schooled", "buildings", "building", "bedrooms", "bedroom", "store", "stores", "stored", "storing"], ["not", "no"]], "gpt": "Although PersonX is not a construction worker, PersonX builds a small house for PersonY, so PersonX feels accomplished.", "neuro": "Although PersonX does not have a bedroom, PersonX builds a small house for PersonY, so PersonX feels accomplished.", "vanilla": "Although PersonX does not have a store, PersonX builds a small house for PersonY, so PersonX feels accomplished."}
{"input": "Input: PersonX cooks PersonY some food and <extra_id_0>, so PersonX feels good. ; Constraint: [menu, fuel, cookfire, meat, cookie] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"]], "gpt": "PersonX cooks PersonY some food and PersonX uses the cookfire, so PersonX feels good.", "neuro": "PersonX cooks PersonY some food and eats some meat, so PersonX feels good.", "vanilla": "PersonX cooks PersonY some food and eats it, so PersonX feels good."}
{"input": "Input: PersonX cooks PersonY some food and <extra_id_0>, so PersonX feels good. ; Constraint: [fuel, menu, cookfire, meat, cookie], [no] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"], ["not", "no"]], "gpt": "PersonX cooks PersonY some food and PersonY likes it, so PersonX feels good.", "neuro": "PersonX cooks PersonY some food and no meat is on the menu, so PersonX feels good.", "vanilla": "PersonX cooks PersonY some food and no one eats it, so PersonX feels good."}
{"input": "Input: PersonX cooks PersonY some food while <extra_id_0>, so PersonX feels good. ; Constraint: [cookie, meat, menu, cookfire, fuel] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"]], "gpt": "PersonX cooks PersonY some food while being in the kitchen, so PersonX feels good.", "neuro": "PersonX cooks PersonY some food while eating a cookie, so PersonX feels good.", "vanilla": "PersonX cooks PersonY some food while eating a cookie, so PersonX feels good."}
{"input": "Input: PersonX cooks PersonY some food while <extra_id_0>, so PersonX feels good. ; Constraint: [fuel, cookfire, menu, meat, cookie], [no] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"], ["not", "no"]], "gpt": "PersonX cooks PersonY some food while PersonY is not looking, so PersonX feels good.", "neuro": "PersonX cooks PersonY some food while PersonY has no cookie, so PersonX feels good.", "vanilla": "PersonX cooks PersonY some food while PersonY is not hungry, so PersonX feels good."}
{"input": "Input: <extra_id_0> but PersonX cooks PersonY some food, so PersonX feels good. ; Constraint: [fuel, menu, cookie, cookfire, meat] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"]], "gpt": "PersonX has no menu but PersonX cooks PersonY some food, so PersonX feels good.", "neuro": "PersonY has no menu but PersonX cooks PersonY some food, so PersonX feels good.", "vanilla": "PersonY has no cookie but PersonX cooks PersonY some food, so PersonX feels good."}
{"input": "Input: <extra_id_0> but PersonX cooks PersonY some food, so PersonX feels good. ; Constraint: [meat, cookie, cookfire, fuel, menu], [no] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"], ["not", "no"]], "gpt": "Although there is no m but PersonX cooks PersonY some food, so PersonX feels good.", "neuro": "PersonY does not have any meat but PersonX cooks PersonY some food, so PersonX feels good.", "vanilla": "PersonY does not eat meat but PersonX cooks PersonY some food, so PersonX feels good."}
{"input": "Input: Although <extra_id_0>, PersonX cooks PersonY some food, so PersonX feels good. ; Constraint: [menu, meat, fuel, cookfire, cookie] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"]], "gpt": "Although PersonX uses meat in the menu, PersonX cooks PersonY some food, so PersonX feels good.", "neuro": "Although PersonY has no cookfire, PersonX cooks PersonY some food, so PersonX feels good.", "vanilla": "Although PersonY has no cookie, PersonX cooks PersonY some food, so PersonX feels good."}
{"input": "Input: Although <extra_id_0>, PersonX cooks PersonY some food, so PersonX feels good. ; Constraint: [cookie, fuel, cookfire, menu, meat], [no] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"], ["not", "no"]], "gpt": "Although there is no cookie, PersonX cooks PersonY some food, so PersonX feels good.", "neuro": "Although PersonY has no cookie, PersonX cooks PersonY some food, so PersonX feels good.", "vanilla": "Although PersonY does not have any fuel, PersonX cooks PersonY some food, so PersonX feels good."}
{"input": "Input: PersonX cooks PersonY some food and <extra_id_0>, so PersonX is seen as a good cook. ; Constraint: [menu, fuel, cookfire, cookie, meat] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"]], "gpt": "PersonX cooks PersonY some food and PersonY loves it, so PersonX is seen as a good cook.", "neuro": "PersonX cooks PersonY some food and the menu is good, so PersonX is seen as a good cook.", "vanilla": "PersonX cooks PersonY some food and PersonY likes it, so PersonX is seen as a good cook."}
{"input": "Input: PersonX cooks PersonY some food and <extra_id_0>, so PersonX is seen as a good cook. ; Constraint: [menu, cookie, fuel, meat, cookfire], [no] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"], ["not", "no"]], "gpt": "PersonX cooks PersonY some food and PersonY likes it, so PersonX is seen as a good cook.", "neuro": "PersonX cooks PersonY some food and PersonY does not use any fuel, so PersonX is seen as a good cook.", "vanilla": "PersonX cooks PersonY some food and no one complains, so PersonX is seen as a good cook."}
{"input": "Input: PersonX cooks PersonY some food while <extra_id_0>, so PersonX is seen as a good cook. ; Constraint: [menu, cookie, fuel, meat, cookfire] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"]], "gpt": "PersonX cooks PersonY some food while following the menu, so PersonX is seen as a good cook.", "neuro": "PersonX cooks PersonY some food while using a cookfire, so PersonX is seen as a good cook.", "vanilla": "PersonX cooks PersonY some food while using a cookfire, so PersonX is seen as a good cook."}
{"input": "Input: PersonX cooks PersonY some food while <extra_id_0>, so PersonX is seen as a good cook. ; Constraint: [meat, cookie, fuel, menu, cookfire], [no] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"], ["not", "no"]], "gpt": "PersonX cooks PersonY some food while making sure the menu is complete, so PersonX is seen as a good cook.", "neuro": "PersonX cooks PersonY some food while using no fuel, so PersonX is seen as a good cook.", "vanilla": "PersonX cooks PersonY some food while PersonY has no cookie, so PersonX is seen as a good cook."}
{"input": "Input: <extra_id_0> but PersonX cooks PersonY some food, so PersonX is seen as a good cook. ; Constraint: [menu, meat, cookfire, cookie, fuel] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"]], "gpt": "Even though PersonX is not a professional c but PersonX cooks PersonY some food, so PersonX is seen as a good cook.", "neuro": "PersonX has no cookie but PersonX cooks PersonY some food, so PersonX is seen as a good cook.", "vanilla": "PersonX has no cookfire but PersonX cooks PersonY some food, so PersonX is seen as a good cook."}
{"input": "Input: <extra_id_0> but PersonX cooks PersonY some food, so PersonX is seen as a good cook. ; Constraint: [menu, meat, fuel, cookfire, cookie], [no] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"], ["not", "no"]], "gpt": "Although there is no m but PersonX cooks PersonY some food, so PersonX is seen as a good cook.", "neuro": "PersonX does not cook meat but PersonX cooks PersonY some food, so PersonX is seen as a good cook.", "vanilla": "PersonX does not cook meat but PersonX cooks PersonY some food, so PersonX is seen as a good cook."}
{"input": "Input: Although <extra_id_0>, PersonX cooks PersonY some food, so PersonX is seen as a good cook. ; Constraint: [cookfire, meat, fuel, cookie, menu] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"]], "gpt": "Although PersonX burns the cookie, PersonX cooks PersonY some food, so PersonX is seen as a good cook.", "neuro": "Although PersonX has no menu, PersonX cooks PersonY some food, so PersonX is seen as a good cook.", "vanilla": "Although PersonX is not a good cook, PersonX cooks PersonY some food, so PersonX is seen as a good cook."}
{"input": "Input: Although <extra_id_0>, PersonX cooks PersonY some food, so PersonX is seen as a good cook. ; Constraint: [fuel, cookfire, meat, menu, cookie], [no] ; Output:", "cons": [["fuelled", "fuelling", "fuels", "fuel", "fueled", "fueling", "cookie", "cookies", "cookfire", "cookfired", "cookfires", "cookfiring", "menu", "menus", "meats", "meat"], ["not", "no"]], "gpt": "Although PersonX has no menu, PersonX cooks PersonY some food, so PersonX is seen as a good cook.", "neuro": "Although PersonX does not cook meat, PersonX cooks PersonY some food, so PersonX is seen as a good cook.", "vanilla": "Although PersonX does not cook meat, PersonX cooks PersonY some food, so PersonX is seen as a good cook."}
{"input": "Input: PersonX negotiates for a better salary and <extra_id_0>, so PersonX feels empowered. ; Constraint: [negotiation, salaried, negotiator, diplomacy, bargain] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"]], "gpt": "PersonX negotiates for a better salary and bargain a better contract, so PersonX feels empowered.", "neuro": "PersonX negotiates for a better salary and gets a better bargain, so PersonX feels empowered.", "vanilla": "PersonX negotiates for a better salary and gets it, so PersonX feels empowered."}
{"input": "Input: PersonX negotiates for a better salary and <extra_id_0>, so PersonX feels empowered. ; Constraint: [bargain, negotiator, diplomacy, salaried, negotiation], [no] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"], ["not", "no"]], "gpt": "PersonX negotiates for a better salary and is not a salaried worker, so PersonX feels empowered.", "neuro": "PersonX negotiates for a better salary and does not bargain, so PersonX feels empowered.", "vanilla": "PersonX negotiates for a better salary and gets it, so PersonX feels empowered."}
{"input": "Input: PersonX negotiates for a better salary while <extra_id_0>, so PersonX feels empowered. ; Constraint: [bargain, salaried, negotiation, negotiator, diplomacy] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"]], "gpt": "PersonX negotiates for a better salary while being the only salaried worker, so PersonX feels empowered.", "neuro": "PersonX negotiates for a better salary while using diplomacy, so PersonX feels empowered.", "vanilla": "PersonX negotiates for a better salary while using diplomacy, so PersonX feels empowered."}
{"input": "Input: PersonX negotiates for a better salary while <extra_id_0>, so PersonX feels empowered. ; Constraint: [salaried, negotiation, diplomacy, negotiator, bargain], [no] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"], ["not", "no"]], "gpt": "PersonX negotiates for a better salary while working as a salaried worker, so PersonX feels empowered.", "neuro": "PersonX negotiates for a better salary while not being salaried, so PersonX feels empowered.", "vanilla": "PersonX negotiates for a better salary while not being salaried, so PersonX feels empowered."}
{"input": "Input: <extra_id_0> but PersonX negotiates for a better salary, so PersonX feels empowered. ; Constraint: [salaried, negotiator, diplomacy, negotiation, bargain] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"]], "gpt": "Although PersonX is not a professional negotia but PersonX negotiates for a better salary, so PersonX feels empowered.", "neuro": "PersonX is a negotiator but PersonX negotiates for a better salary, so PersonX feels empowered.", "vanilla": "PersonX is salaried but PersonX negotiates for a better salary, so PersonX feels empowered."}
{"input": "Input: <extra_id_0> but PersonX negotiates for a better salary, so PersonX feels empowered. ; Constraint: [salaried, negotiation, negotiator, bargain, diplomacy], [no] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"], ["not", "no"]], "gpt": "PersonX is a salaried worker but PersonX negotiates for a better salary, so PersonX feels empowered.", "neuro": "PersonX is not a bargainer but PersonX negotiates for a better salary, so PersonX feels empowered.", "vanilla": "PersonX is not a bargainer but PersonX negotiates for a better salary, so PersonX feels empowered."}
{"input": "Input: Although <extra_id_0>, PersonX negotiates for a better salary, so PersonX feels empowered. ; Constraint: [negotiator, salaried, bargain, negotiation, diplomacy] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"]], "gpt": "Although PersonX is a salaried worker, PersonX negotiates for a better salary, so PersonX feels empowered.", "neuro": "Although PersonX is not a diplomacy, PersonX negotiates for a better salary, so PersonX feels empowered.", "vanilla": "Although PersonX is salaried, PersonX negotiates for a better salary, so PersonX feels empowered."}
{"input": "Input: Although <extra_id_0>, PersonX negotiates for a better salary, so PersonX feels empowered. ; Constraint: [salaried, diplomacy, negotiator, bargain, negotiation], [no] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"], ["not", "no"]], "gpt": "Although PersonX is not a professional negotiator, PersonX negotiates for a better salary, so PersonX feels empowered.", "neuro": "Although PersonX has no diplomacy, PersonX negotiates for a better salary, so PersonX feels empowered.", "vanilla": "Although PersonX is not a diplomat, PersonX negotiates for a better salary, so PersonX feels empowered."}
{"input": "Input: PersonX negotiates for a better salary and <extra_id_0>, so PersonX is seen as a good negotiator. ; Constraint: [bargain, diplomacy, negotiation, negotiator, salaried] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"]], "gpt": "PersonX negotiates for a better salary and is able to get what she wants, so PersonX is seen as a good negotiator.", "neuro": "PersonX negotiates for a better salary and wins the bargain, so PersonX is seen as a good negotiator.", "vanilla": "PersonX negotiates for a better salary and gets it, so PersonX is seen as a good negotiator."}
{"input": "Input: PersonX negotiates for a better salary and <extra_id_0>, so PersonX is seen as a good negotiator. ; Constraint: [negotiation, diplomacy, bargain, salaried, negotiator], [no] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"], ["not", "no"]], "gpt": "PersonX negotiates for a better salary and does not take no for an answer, so PersonX is seen as a good negotiator.", "neuro": "PersonX negotiates for a better salary and does not bargain, so PersonX is seen as a good negotiator.", "vanilla": "PersonX negotiates for a better salary and gets it, so PersonX is seen as a good negotiator."}
{"input": "Input: PersonX negotiates for a better salary while <extra_id_0>, so PersonX is seen as a good negotiator. ; Constraint: [negotiator, salaried, bargain, diplomacy, negotiation] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"]], "gpt": "PersonX negotiates for a better salary while maintaining a good relationship, so PersonX is seen as a good negotiator.", "neuro": "PersonX negotiates for a better salary while using diplomacy, so PersonX is seen as a good negotiator.", "vanilla": "PersonX negotiates for a better salary while bargaining, so PersonX is seen as a good negotiator."}
{"input": "Input: PersonX negotiates for a better salary while <extra_id_0>, so PersonX is seen as a good negotiator. ; Constraint: [salaried, negotiator, diplomacy, negotiation, bargain], [no] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"], ["not", "no"]], "gpt": "PersonX negotiates for a better salary while maintaining good diplomacy, so PersonX is seen as a good negotiator.", "neuro": "PersonX negotiates for a better salary while no one bargains, so PersonX is seen as a good negotiator.", "vanilla": "PersonX negotiates for a better salary while not being salaried, so PersonX is seen as a good negotiator."}
{"input": "Input: <extra_id_0> but PersonX negotiates for a better salary, so PersonX is seen as a good negotiator. ; Constraint: [negotiator, bargain, salaried, negotiation, diplomacy] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"]], "gpt": "PersonX is a salaried worker but PersonX negotiates for a better salary, so PersonX is seen as a good negotiator.", "neuro": "PersonX is salaried but PersonX negotiates for a better salary, so PersonX is seen as a good negotiator.", "vanilla": "PersonX is salaried but PersonX negotiates for a better salary, so PersonX is seen as a good negotiator."}
{"input": "Input: <extra_id_0> but PersonX negotiates for a better salary, so PersonX is seen as a good negotiator. ; Constraint: [salaried, negotiator, negotiation, bargain, diplomacy], [no] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"], ["not", "no"]], "gpt": "PersonX has no experience in negotiation but PersonX negotiates for a better salary, so PersonX is seen as a good negotiator.", "neuro": "PersonX is not a bargainer but PersonX negotiates for a better salary, so PersonX is seen as a good negotiator.", "vanilla": "PersonX does not bargain but PersonX negotiates for a better salary, so PersonX is seen as a good negotiator."}
{"input": "Input: Although <extra_id_0>, PersonX negotiates for a better salary, so PersonX is seen as a good negotiator. ; Constraint: [bargain, negotiation, diplomacy, negotiator, salaried] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"]], "gpt": "Although PersonX is not a diplomat, PersonX negotiates for a better salary, so PersonX is seen as a good negotiator.", "neuro": "Although PersonX is salaried, PersonX negotiates for a better salary, so PersonX is seen as a good negotiator.", "vanilla": "Although PersonX is salaried, PersonX negotiates for a better salary, so PersonX is seen as a good negotiator."}
{"input": "Input: Although <extra_id_0>, PersonX negotiates for a better salary, so PersonX is seen as a good negotiator. ; Constraint: [salaried, negotiator, diplomacy, negotiation, bargain], [no] ; Output:", "cons": [["negotiator", "negotiators", "salaried", "negotiations", "negotiation", "diplomacy", "bargain", "bargains", "bargaining", "bargained"], ["not", "no"]], "gpt": "Although PersonX is not a salaried negotiator, PersonX negotiates for a better salary, so PersonX is seen as a good negotiator.", "neuro": "Although PersonX is not salaried, PersonX negotiates for a better salary, so PersonX is seen as a good negotiator.", "vanilla": "Although PersonX is not a diplomat, PersonX negotiates for a better salary, so PersonX is seen as a good negotiator."}
{"input": "Input: PersonX makes a mistake in front of PersonY and <extra_id_0>, so PersonX is seen as careless. ; Constraint: [guard, door, profile, wrap, side] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"]], "gpt": "PersonX makes a mistake in front of PersonY and escapes to the other side of the door, so PersonX is seen as careless.", "neuro": "PersonX makes a mistake in front of PersonY and opens the door, so PersonX is seen as careless.", "vanilla": "PersonX makes a mistake in front of PersonY and opens the door, so PersonX is seen as careless."}
{"input": "Input: PersonX makes a mistake in front of PersonY and <extra_id_0>, so PersonX is seen as careless. ; Constraint: [guard, side, profile, door, wrap], [no] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"], ["not", "no"]], "gpt": "PersonX makes a mistake in front of PersonY and no one sees it, so PersonX is seen as careless.", "neuro": "PersonX makes a mistake in front of PersonY and there is no guard, so PersonX is seen as careless.", "vanilla": "PersonX makes a mistake in front of PersonY and leaves the door open, so PersonX is seen as careless."}
{"input": "Input: PersonX makes a mistake in front of PersonY while <extra_id_0>, so PersonX is seen as careless. ; Constraint: [guard, side, wrap, door, profile] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"]], "gpt": "PersonX makes a mistake in front of PersonY while PersonX is not being cautious, so PersonX is seen as careless.", "neuro": "PersonX makes a mistake in front of PersonY while opening the door, so PersonX is seen as careless.", "vanilla": "PersonX makes a mistake in front of PersonY while opening the door, so PersonX is seen as careless."}
{"input": "Input: PersonX makes a mistake in front of PersonY while <extra_id_0>, so PersonX is seen as careless. ; Constraint: [door, wrap, side, profile, guard], [no] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"], ["not", "no"]], "gpt": "PersonX makes a mistake in front of PersonY while not paying attention, so PersonX is seen as careless.", "neuro": "PersonX makes a mistake in front of PersonY while PersonY does not wrap the door, so PersonX is seen as careless.", "vanilla": "PersonX makes a mistake in front of PersonY while opening the door, so PersonX is seen as careless."}
{"input": "Input: <extra_id_0> but PersonX makes a mistake in front of PersonY, so PersonX is seen as careless. ; Constraint: [profile, wrap, guard, door, side] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"]], "gpt": "PersonX is on guard but PersonX makes a mistake in front of PersonY, so PersonX is seen as careless.", "neuro": "PersonX has a profile but PersonX makes a mistake in front of PersonY, so PersonX is seen as careless.", "vanilla": "PersonX is a guard but PersonX makes a mistake in front of PersonY, so PersonX is seen as careless."}
{"input": "Input: <extra_id_0> but PersonX makes a mistake in front of PersonY, so PersonX is seen as careless. ; Constraint: [wrap, guard, profile, door, side], [no] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"], ["not", "no"]], "gpt": "PersonX is on the side of the door but PersonX makes a mistake in front of PersonY, so PersonX is seen as careless.", "neuro": "PersonX has no door but PersonX makes a mistake in front of PersonY, so PersonX is seen as careless.", "vanilla": "PersonX has no side guard but PersonX makes a mistake in front of PersonY, so PersonX is seen as careless."}
{"input": "Input: Although <extra_id_0>, PersonX makes a mistake in front of PersonY, so PersonX is seen as careless. ; Constraint: [guard, side, wrap, profile, door] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"]], "gpt": "Although PersonX is careful with the door, PersonX makes a mistake in front of PersonY, so PersonX is seen as careless.", "neuro": "Although PersonX is a wrap, PersonX makes a mistake in front of PersonY, so PersonX is seen as careless.", "vanilla": "Although PersonX is a guard, PersonX makes a mistake in front of PersonY, so PersonX is seen as careless."}
{"input": "Input: Although <extra_id_0>, PersonX makes a mistake in front of PersonY, so PersonX is seen as careless. ; Constraint: [door, wrap, profile, side, guard], [no] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"], ["not", "no"]], "gpt": "Although PersonX is very careful, PersonX makes a mistake in front of PersonY, so PersonX is seen as careless.", "neuro": "Although PersonX does not have a side door, PersonX makes a mistake in front of PersonY, so PersonX is seen as careless.", "vanilla": "Although PersonX is not a guard, PersonX makes a mistake in front of PersonY, so PersonX is seen as careless."}
{"input": "Input: PersonX makes a mistake in front of PersonY and <extra_id_0>, so PersonX feels ashamed. ; Constraint: [door, guard, wrap, profile, side] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"]], "gpt": "PersonX makes a mistake in front of PersonY and keeps a low profile, so PersonX feels ashamed.", "neuro": "PersonX makes a mistake in front of PersonY and PersonY's profile is not good, so PersonX feels ashamed.", "vanilla": "PersonX makes a mistake in front of PersonY and PersonY sees the mistake, so PersonX feels ashamed."}
{"input": "Input: PersonX makes a mistake in front of PersonY and <extra_id_0>, so PersonX feels ashamed. ; Constraint: [guard, wrap, side, door, profile], [no] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"], ["not", "no"]], "gpt": "PersonX makes a mistake in front of PersonY and PersonY sees it from the side, so PersonX feels ashamed.", "neuro": "PersonX makes a mistake in front of PersonY and does not wrap the door, so PersonX feels ashamed.", "vanilla": "PersonX makes a mistake in front of PersonY and no one sees it, so PersonX feels ashamed."}
{"input": "Input: PersonX makes a mistake in front of PersonY while <extra_id_0>, so PersonX feels ashamed. ; Constraint: [profile, wrap, door, side, guard] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"]], "gpt": "PersonX makes a mistake in front of PersonY while being on guard, so PersonX feels ashamed.", "neuro": "PersonX makes a mistake in front of PersonY while wrapping the door, so PersonX feels ashamed.", "vanilla": "PersonX makes a mistake in front of PersonY while opening the door, so PersonX feels ashamed."}
{"input": "Input: PersonX makes a mistake in front of PersonY while <extra_id_0>, so PersonX feels ashamed. ; Constraint: [profile, guard, door, side, wrap], [no] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"], ["not", "no"]], "gpt": "PersonX makes a mistake in front of PersonY while seeing the person from the side, so PersonX feels ashamed.", "neuro": "PersonX makes a mistake in front of PersonY while PersonY is not a guard, so PersonX feels ashamed.", "vanilla": "PersonX makes a mistake in front of PersonY while opening the door, so PersonX feels ashamed."}
{"input": "Input: <extra_id_0> but PersonX makes a mistake in front of PersonY, so PersonX feels ashamed. ; Constraint: [wrap, door, profile, side, guard] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"]], "gpt": "PersonX is on the good side of the door but PersonX makes a mistake in front of PersonY, so PersonX feels ashamed.", "neuro": "PersonX is a guard but PersonX makes a mistake in front of PersonY, so PersonX feels ashamed.", "vanilla": "PersonX is a good person but PersonX makes a mistake in front of PersonY, so PersonX feels ashamed."}
{"input": "Input: <extra_id_0> but PersonX makes a mistake in front of PersonY, so PersonX feels ashamed. ; Constraint: [door, side, guard, profile, wrap], [no] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"], ["not", "no"]], "gpt": "PersonX is well-prepared but PersonX makes a mistake in front of PersonY, so PersonX feels ashamed.", "neuro": "PersonX has no side profile but PersonX makes a mistake in front of PersonY, so PersonX feels ashamed.", "vanilla": "PersonX has no side guard but PersonX makes a mistake in front of PersonY, so PersonX feels ashamed."}
{"input": "Input: Although <extra_id_0>, PersonX makes a mistake in front of PersonY, so PersonX feels ashamed. ; Constraint: [profile, side, wrap, guard, door] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"]], "gpt": "Although PersonX is well prepared, PersonX makes a mistake in front of PersonY, so PersonX feels ashamed.", "neuro": "Although PersonX has a good profile, PersonX makes a mistake in front of PersonY, so PersonX feels ashamed.", "vanilla": "Although PersonX is a good person, PersonX makes a mistake in front of PersonY, so PersonX feels ashamed."}
{"input": "Input: Although <extra_id_0>, PersonX makes a mistake in front of PersonY, so PersonX feels ashamed. ; Constraint: [door, guard, wrap, side, profile], [no] ; Output:", "cons": [["profile", "profiles", "profiling", "profiled", "wrap", "wrapping", "wrapped", "wraps", "sided", "sides", "side", "siding", "guards", "guarded", "guard", "guarding", "doors", "door"], ["not", "no"]], "gpt": "Although PersonX's profile is good, PersonX makes a mistake in front of PersonY, so PersonX feels ashamed.", "neuro": "Although PersonX is not wrapped, PersonX makes a mistake in front of PersonY, so PersonX feels ashamed.", "vanilla": "Although PersonX is not wrapped, PersonX makes a mistake in front of PersonY, so PersonX feels ashamed."}
{"input": "Input: PersonX saves the life of PersonY and <extra_id_0>, so PersonX feels happy. ; Constraint: [time, people, culture, world, death] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"]], "gpt": "PersonX saves the life of PersonY and becomes a hero to the people, so PersonX feels happy.", "neuro": "PersonX saves the life of PersonY and saves the world, so PersonX feels happy.", "vanilla": "PersonX saves the life of PersonY and PersonY is a good person, so PersonX feels happy."}
{"input": "Input: PersonX saves the life of PersonY and <extra_id_0>, so PersonX feels happy. ; Constraint: [death, culture, world, people, time], [no] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"], ["not", "no"]], "gpt": "PersonX saves the life of PersonY and PersonY is the only one in the world, so PersonX feels happy.", "neuro": "PersonX saves the life of PersonY and no one dies in the world, so PersonX feels happy.", "vanilla": "PersonX saves the life of PersonY and no one dies, so PersonX feels happy."}
{"input": "Input: PersonX saves the life of PersonY while <extra_id_0>, so PersonX feels happy. ; Constraint: [culture, death, world, people, time] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"]], "gpt": "PersonX saves the life of PersonY while death is coming, so PersonX feels happy.", "neuro": "PersonX saves the life of PersonY while being in a different culture, so PersonX feels happy.", "vanilla": "PersonX saves the life of PersonY while being in the world, so PersonX feels happy."}
{"input": "Input: PersonX saves the life of PersonY while <extra_id_0>, so PersonX feels happy. ; Constraint: [world, people, time, death, culture], [no] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"], ["not", "no"]], "gpt": "PersonX saves the life of PersonY while PersonY is about to die, so PersonX feels happy.", "neuro": "PersonX saves the life of PersonY while there is no time, so PersonX feels happy.", "vanilla": "PersonX saves the life of PersonY while no one else can, so PersonX feels happy."}
{"input": "Input: <extra_id_0> but PersonX saves the life of PersonY, so PersonX feels happy. ; Constraint: [time, death, world, culture, people] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"]], "gpt": "Even though the world is full of de but PersonX saves the life of PersonY, so PersonX feels happy.", "neuro": "PersonX is not a person of the world but PersonX saves the life of PersonY, so PersonX feels happy.", "vanilla": "PersonX is not a good person but PersonX saves the life of PersonY, so PersonX feels happy."}
{"input": "Input: <extra_id_0> but PersonX saves the life of PersonY, so PersonX feels happy. ; Constraint: [time, culture, world, people, death], [no] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"], ["not", "no"]], "gpt": "No one knows the time of PersonY's death but PersonX saves the life of PersonY, so PersonX feels happy.", "neuro": "PersonX is not a person of the world but PersonX saves the life of PersonY, so PersonX feels happy.", "vanilla": "No one dies but PersonX saves the life of PersonY, so PersonX feels happy."}
{"input": "Input: Although <extra_id_0>, PersonX saves the life of PersonY, so PersonX feels happy. ; Constraint: [time, death, people, culture, world] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"]], "gpt": "Although many people around the world are dying every day, PersonX saves the life of PersonY, so PersonX feels happy.", "neuro": "Although PersonX has no time, PersonX saves the life of PersonY, so PersonX feels happy.", "vanilla": "Although the world is changing, PersonX saves the life of PersonY, so PersonX feels happy."}
{"input": "Input: Although <extra_id_0>, PersonX saves the life of PersonY, so PersonX feels happy. ; Constraint: [people, world, death, time, culture], [no] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"], ["not", "no"]], "gpt": "Although time is running out, PersonX saves the life of PersonY, so PersonX feels happy.", "neuro": "Although PersonX is not in the world, PersonX saves the life of PersonY, so PersonX feels happy.", "vanilla": "Although there is no time, PersonX saves the life of PersonY, so PersonX feels happy."}
{"input": "Input: PersonX saves the life of PersonY and <extra_id_0>, so PersonX is seen as brave. ; Constraint: [world, people, culture, death, time] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"]], "gpt": "PersonX saves the life of PersonY and becomes a hero to the people, so PersonX is seen as brave.", "neuro": "PersonX saves the life of PersonY and saves the world, so PersonX is seen as brave.", "vanilla": "PersonX saves the life of PersonY and saves the world, so PersonX is seen as brave."}
{"input": "Input: PersonX saves the life of PersonY and <extra_id_0>, so PersonX is seen as brave. ; Constraint: [death, people, world, culture, time], [no] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"], ["not", "no"]], "gpt": "PersonX saves the life of PersonY and becomes the hero of the world, so PersonX is seen as brave.", "neuro": "PersonX saves the life of PersonY and no one dies in the world, so PersonX is seen as brave.", "vanilla": "PersonX saves the life of PersonY and no one dies, so PersonX is seen as brave."}
{"input": "Input: PersonX saves the life of PersonY while <extra_id_0>, so PersonX is seen as brave. ; Constraint: [time, death, people, culture, world] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"]], "gpt": "PersonX saves the life of PersonY while the world is collapsing, so PersonX is seen as brave.", "neuro": "PersonX saves the life of PersonY while facing death, so PersonX is seen as brave.", "vanilla": "PersonX saves the life of PersonY while facing death, so PersonX is seen as brave."}
{"input": "Input: PersonX saves the life of PersonY while <extra_id_0>, so PersonX is seen as brave. ; Constraint: [culture, time, people, world, death], [no] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"], ["not", "no"]], "gpt": "PersonX saves the life of PersonY while people around them are dying, so PersonX is seen as brave.", "neuro": "PersonX saves the life of PersonY while there is no culture in the world, so PersonX is seen as brave.", "vanilla": "PersonX saves the life of PersonY while no one else can, so PersonX is seen as brave."}
{"input": "Input: <extra_id_0> but PersonX saves the life of PersonY, so PersonX is seen as brave. ; Constraint: [people, culture, world, time, death] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"]], "gpt": "PersonX is in danger but PersonX saves the life of PersonY, so PersonX is seen as brave.", "neuro": "PersonX lives in the world but PersonX saves the life of PersonY, so PersonX is seen as brave.", "vanilla": "PersonX has no time but PersonX saves the life of PersonY, so PersonX is seen as brave."}
{"input": "Input: <extra_id_0> but PersonX saves the life of PersonY, so PersonX is seen as brave. ; Constraint: [world, death, people, time, culture], [no] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"], ["not", "no"]], "gpt": "Although death may come at any t but PersonX saves the life of PersonY, so PersonX is seen as brave.", "neuro": "PersonX is not from the world but PersonX saves the life of PersonY, so PersonX is seen as brave.", "vanilla": "No culture but PersonX saves the life of PersonY, so PersonX is seen as brave."}
{"input": "Input: Although <extra_id_0>, PersonX saves the life of PersonY, so PersonX is seen as brave. ; Constraint: [death, culture, time, world, people] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"]], "gpt": "Although the world is full of people who are different from PersonX, PersonX saves the life of PersonY, so PersonX is seen as brave.", "neuro": "Although death is a part of culture, PersonX saves the life of PersonY, so PersonX is seen as brave.", "vanilla": "Although time has passed, PersonX saves the life of PersonY, so PersonX is seen as brave."}
{"input": "Input: Although <extra_id_0>, PersonX saves the life of PersonY, so PersonX is seen as brave. ; Constraint: [death, culture, people, time, world], [no] ; Output:", "cons": [["world", "worlds", "peoples", "peopled", "peopling", "people", "deaths", "death", "culture", "cultures", "culturing", "cultured", "timing", "times", "time", "timed"], ["not", "no"]], "gpt": "Although the world is full of death, PersonX saves the life of PersonY, so PersonX is seen as brave.", "neuro": "Although there is no death in the world, PersonX saves the life of PersonY, so PersonX is seen as brave.", "vanilla": "Although PersonX has no time, PersonX saves the life of PersonY, so PersonX is seen as brave."}
{"input": "Input: PersonX acts sensibly and <extra_id_0>, so PersonX is seen as responsible. ; Constraint: [role, agent, effect, fight, attack] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"]], "gpt": "PersonX acts sensibly and takes charge of the situation, so PersonX is seen as responsible.", "neuro": "PersonX acts sensibly and is a good agent, so PersonX is seen as responsible.", "vanilla": "PersonX acts sensibly and does not fight, so PersonX is seen as responsible."}
{"input": "Input: PersonX acts sensibly and <extra_id_0>, so PersonX is seen as responsible. ; Constraint: [effect, fight, agent, attack, role], [no] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"], ["not", "no"]], "gpt": "PersonX acts sensibly and does not fight with others, so PersonX is seen as responsible.", "neuro": "PersonX acts sensibly and does not fight, so PersonX is seen as responsible.", "vanilla": "PersonX acts sensibly and does not fight, so PersonX is seen as responsible."}
{"input": "Input: PersonX acts sensibly while <extra_id_0>, so PersonX is seen as responsible. ; Constraint: [role, effect, agent, fight, attack] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"]], "gpt": "PersonX acts sensibly while taking care of her younger sister, so PersonX is seen as responsible.", "neuro": "PersonX acts sensibly while in a fight, so PersonX is seen as responsible.", "vanilla": "PersonX acts sensibly while being an agent, so PersonX is seen as responsible."}
{"input": "Input: PersonX acts sensibly while <extra_id_0>, so PersonX is seen as responsible. ; Constraint: [attack, effect, fight, agent, role], [no] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"], ["not", "no"]], "gpt": "PersonX acts sensibly while taking care ofPersonY, so PersonX is seen as responsible.", "neuro": "PersonX acts sensibly while not attacking, so PersonX is seen as responsible.", "vanilla": "PersonX acts sensibly while not fighting, so PersonX is seen as responsible."}
{"input": "Input: <extra_id_0> but PersonX acts sensibly, so PersonX is seen as responsible. ; Constraint: [agent, effect, attack, role, fight] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"]], "gpt": "Agent provocateur provokes attack but PersonX acts sensibly, so PersonX is seen as responsible.", "neuro": "PersonX is an agent but PersonX acts sensibly, so PersonX is seen as responsible.", "vanilla": "PersonX is attacked but PersonX acts sensibly, so PersonX is seen as responsible."}
{"input": "Input: <extra_id_0> but PersonX acts sensibly, so PersonX is seen as responsible. ; Constraint: [effect, role, attack, agent, fight], [no] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"], ["not", "no"]], "gpt": "PersonX is not an agent but PersonX acts sensibly, so PersonX is seen as responsible.", "neuro": "PersonX is not an agent but PersonX acts sensibly, so PersonX is seen as responsible.", "vanilla": "PersonX is not an agent but PersonX acts sensibly, so PersonX is seen as responsible."}
{"input": "Input: Although <extra_id_0>, PersonX acts sensibly, so PersonX is seen as responsible. ; Constraint: [fight, agent, effect, role, attack] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"]], "gpt": "Although the attack has no effect on the agent, PersonX acts sensibly, so PersonX is seen as responsible.", "neuro": "Although PersonX fights, PersonX acts sensibly, so PersonX is seen as responsible.", "vanilla": "Although PersonX is an agent, PersonX acts sensibly, so PersonX is seen as responsible."}
{"input": "Input: Although <extra_id_0>, PersonX acts sensibly, so PersonX is seen as responsible. ; Constraint: [attack, agent, fight, effect, role], [no] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"], ["not", "no"]], "gpt": "Although the attack is not the agent's fault, PersonX acts sensibly, so PersonX is seen as responsible.", "neuro": "Although PersonX is not an agent, PersonX acts sensibly, so PersonX is seen as responsible.", "vanilla": "Although PersonX does not fight, PersonX acts sensibly, so PersonX is seen as responsible."}
{"input": "Input: PersonX acts sensibly and <extra_id_0>, so PersonX feels relaxed. ; Constraint: [role, fight, agent, attack, effect] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"]], "gpt": "PersonX acts sensibly and plays an important role, so PersonX feels relaxed.", "neuro": "PersonX acts sensibly and has no effect, so PersonX feels relaxed.", "vanilla": "PersonX acts sensibly and does not attack, so PersonX feels relaxed."}
{"input": "Input: PersonX acts sensibly and <extra_id_0>, so PersonX feels relaxed. ; Constraint: [fight, agent, effect, role, attack], [no] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"], ["not", "no"]], "gpt": "PersonX acts sensibly and comes up with a good plan, so PersonX feels relaxed.", "neuro": "PersonX acts sensibly and does not fight, so PersonX feels relaxed.", "vanilla": "PersonX acts sensibly and does not fight, so PersonX feels relaxed."}
{"input": "Input: PersonX acts sensibly while <extra_id_0>, so PersonX feels relaxed. ; Constraint: [fight, effect, attack, agent, role] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"]], "gpt": "PersonX acts sensibly while taking the role of an agent, so PersonX feels relaxed.", "neuro": "PersonX acts sensibly while being an agent, so PersonX feels relaxed.", "vanilla": "PersonX acts sensibly while being an agent, so PersonX feels relaxed."}
{"input": "Input: PersonX acts sensibly while <extra_id_0>, so PersonX feels relaxed. ; Constraint: [effect, attack, fight, role, agent], [no] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"], ["not", "no"]], "gpt": "PersonX acts sensibly while being an agent in a play, so PersonX feels relaxed.", "neuro": "PersonX acts sensibly while no one attacks, so PersonX feels relaxed.", "vanilla": "PersonX acts sensibly while no one attacks, so PersonX feels relaxed."}
{"input": "Input: <extra_id_0> but PersonX acts sensibly, so PersonX feels relaxed. ; Constraint: [agent, attack, role, effect, fight] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"]], "gpt": "The agent gives a role to PersonX but PersonX acts sensibly, so PersonX feels relaxed.", "neuro": "PersonX fights but PersonX acts sensibly, so PersonX feels relaxed.", "vanilla": "PersonX attacks but PersonX acts sensibly, so PersonX feels relaxed."}
{"input": "Input: <extra_id_0> but PersonX acts sensibly, so PersonX feels relaxed. ; Constraint: [agent, fight, attack, effect, role], [no] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"], ["not", "no"]], "gpt": "Although the agent provokes Pers but PersonX acts sensibly, so PersonX feels relaxed.", "neuro": "PersonX has no effect but PersonX acts sensibly, so PersonX feels relaxed.", "vanilla": "PersonX is not an agent but PersonX acts sensibly, so PersonX feels relaxed."}
{"input": "Input: Although <extra_id_0>, PersonX acts sensibly, so PersonX feels relaxed. ; Constraint: [effect, role, agent, attack, fight] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"]], "gpt": "Although the attack takes its toll on PersonX, PersonX acts sensibly, so PersonX feels relaxed.", "neuro": "Although PersonX is an agent, PersonX acts sensibly, so PersonX feels relaxed.", "vanilla": "Although PersonX is an agent, PersonX acts sensibly, so PersonX feels relaxed."}
{"input": "Input: Although <extra_id_0>, PersonX acts sensibly, so PersonX feels relaxed. ; Constraint: [fight, agent, attack, role, effect], [no] ; Output:", "cons": [["agent", "agents", "effects", "effecting", "effected", "effect", "fights", "fighting", "fight", "fought", "roles", "role", "attacking", "attacked", "attacks", "attack"], ["not", "no"]], "gpt": "Although PersonX is not an agent of change, PersonX acts sensibly, so PersonX feels relaxed.", "neuro": "Although PersonX is not attacked, PersonX acts sensibly, so PersonX feels relaxed.", "vanilla": "Although PersonX is not an agent, PersonX acts sensibly, so PersonX feels relaxed."}
{"input": "Input: PersonX invites the board members to his home and <extra_id_0>, so PersonX is seen as a good host. ; Constraint: [builder, profile, country, bedroom, person] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"]], "gpt": "PersonX invites the board members to his home and serves them with the best food and wine, so PersonX is seen as a good host.", "neuro": "PersonX invites the board members to his home and has a good profile, so PersonX is seen as a good host.", "vanilla": "PersonX invites the board members to his home and shows them around, so PersonX is seen as a good host."}
{"input": "Input: PersonX invites the board members to his home and <extra_id_0>, so PersonX is seen as a good host. ; Constraint: [bedroom, person, profile, builder, country], [no] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"], ["not", "no"]], "gpt": "PersonX invites the board members to his home and provides them with a good bedroom, so PersonX is seen as a good host.", "neuro": "PersonX invites the board members to his home and does not have a bedroom, so PersonX is seen as a good host.", "vanilla": "PersonX invites the board members to his home and does not have a bedroom, so PersonX is seen as a good host."}
{"input": "Input: PersonX invites the board members to his home while <extra_id_0>, so PersonX is seen as a good host. ; Constraint: [bedroom, country, profile, person, builder] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"]], "gpt": "PersonX invites the board members to his home while he is having a conversation in his bedroom, so PersonX is seen as a good host.", "neuro": "PersonX invites the board members to his home while building their profile, so PersonX is seen as a good host.", "vanilla": "PersonX invites the board members to his home while building his profile, so PersonX is seen as a good host."}
{"input": "Input: PersonX invites the board members to his home while <extra_id_0>, so PersonX is seen as a good host. ; Constraint: [bedroom, country, profile, builder, person], [no] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"], ["not", "no"]], "gpt": "PersonX invites the board members to his home while showing them his bedroom, so PersonX is seen as a good host.", "neuro": "PersonX invites the board members to his home while not having a bedroom, so PersonX is seen as a good host.", "vanilla": "PersonX invites the board members to his home while not having a profile, so PersonX is seen as a good host."}
{"input": "Input: <extra_id_0> but PersonX invites the board members to his home, so PersonX is seen as a good host. ; Constraint: [profile, country, person, builder, bedroom] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"]], "gpt": "PersonX lives in a small bedroom but PersonX invites the board members to his home, so PersonX is seen as a good host.", "neuro": "PersonX is a builder but PersonX invites the board members to his home, so PersonX is seen as a good host.", "vanilla": "PersonX has no bedroom but PersonX invites the board members to his home, so PersonX is seen as a good host."}
{"input": "Input: <extra_id_0> but PersonX invites the board members to his home, so PersonX is seen as a good host. ; Constraint: [builder, country, person, profile, bedroom], [no] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"], ["not", "no"]], "gpt": "PersonX is not a builder but PersonX invites the board members to his home, so PersonX is seen as a good host.", "neuro": "PersonX is not a builder but PersonX invites the board members to his home, so PersonX is seen as a good host.", "vanilla": "PersonX does not have a bedroom but PersonX invites the board members to his home, so PersonX is seen as a good host."}
{"input": "Input: Although <extra_id_0>, PersonX invites the board members to his home, so PersonX is seen as a good host. ; Constraint: [builder, bedroom, country, profile, person] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"]], "gpt": "Although PersonX is from a different country, PersonX invites the board members to his home, so PersonX is seen as a good host.", "neuro": "Although PersonX is not a good builder, PersonX invites the board members to his home, so PersonX is seen as a good host.", "vanilla": "Although PersonX is a builder, PersonX invites the board members to his home, so PersonX is seen as a good host."}
{"input": "Input: Although <extra_id_0>, PersonX invites the board members to his home, so PersonX is seen as a good host. ; Constraint: [country, bedroom, builder, profile, person], [no] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"], ["not", "no"]], "gpt": "Although PersonX is not a builder, PersonX invites the board members to his home, so PersonX is seen as a good host.", "neuro": "Although PersonX does not have a bedroom, PersonX invites the board members to his home, so PersonX is seen as a good host.", "vanilla": "Although PersonX is not a builder, PersonX invites the board members to his home, so PersonX is seen as a good host."}
{"input": "Input: PersonX invites the board members to his home and <extra_id_0>, so PersonX feels pleased. ; Constraint: [country, profile, person, builder, bedroom] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"]], "gpt": "PersonX invites the board members to his home and shows them his bedroom, so PersonX feels pleased.", "neuro": "PersonX invites the board members to his home and they like his country, so PersonX feels pleased.", "vanilla": "PersonX invites the board members to his home and they like it, so PersonX feels pleased."}
{"input": "Input: PersonX invites the board members to his home and <extra_id_0>, so PersonX feels pleased. ; Constraint: [person, bedroom, country, profile, builder], [no] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"], ["not", "no"]], "gpt": "PersonX invites the board members to his home and shows them his bedroom, so PersonX feels pleased.", "neuro": "PersonX invites the board members to his home and they are not builders, so PersonX feels pleased.", "vanilla": "PersonX invites the board members to his home and no one complains, so PersonX feels pleased."}
{"input": "Input: PersonX invites the board members to his home while <extra_id_0>, so PersonX feels pleased. ; Constraint: [profile, bedroom, person, country, builder] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"]], "gpt": "PersonX invites the board members to his home while his bedroom is being built by the country's best builder, so PersonX feels pleased.", "neuro": "PersonX invites the board members to his home while building his profile, so PersonX feels pleased.", "vanilla": "PersonX invites the board members to his home while in his country, so PersonX feels pleased."}
{"input": "Input: PersonX invites the board members to his home while <extra_id_0>, so PersonX feels pleased. ; Constraint: [country, builder, profile, person, bedroom], [no] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"], ["not", "no"]], "gpt": "PersonX invites the board members to his home while the house is still being built, so PersonX feels pleased.", "neuro": "PersonX invites the board members to his home while there is no profile, so PersonX feels pleased.", "vanilla": "PersonX invites the board members to his home while building his profile, so PersonX feels pleased."}
{"input": "Input: <extra_id_0> but PersonX invites the board members to his home, so PersonX feels pleased. ; Constraint: [bedroom, person, builder, country, profile] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"]], "gpt": "PersonX's profile is not good but PersonX invites the board members to his home, so PersonX feels pleased.", "neuro": "PersonX is not a builder but PersonX invites the board members to his home, so PersonX feels pleased.", "vanilla": "PersonX is not a profile builder but PersonX invites the board members to his home, so PersonX feels pleased."}
{"input": "Input: <extra_id_0> but PersonX invites the board members to his home, so PersonX feels pleased. ; Constraint: [person, bedroom, country, builder, profile], [no] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"], ["not", "no"]], "gpt": "Although PersonX's profile is not g but PersonX invites the board members to his home, so PersonX feels pleased.", "neuro": "PersonX does not have a bedroom but PersonX invites the board members to his home, so PersonX feels pleased.", "vanilla": "PersonX does not have a bedroom but PersonX invites the board members to his home, so PersonX feels pleased."}
{"input": "Input: Although <extra_id_0>, PersonX invites the board members to his home, so PersonX feels pleased. ; Constraint: [builder, country, bedroom, person, profile] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"]], "gpt": "Although PersonX's profile is not good, PersonX invites the board members to his home, so PersonX feels pleased.", "neuro": "Although PersonX is not a builder, PersonX invites the board members to his home, so PersonX feels pleased.", "vanilla": "Although PersonX does not have a bedroom, PersonX invites the board members to his home, so PersonX feels pleased."}
{"input": "Input: Although <extra_id_0>, PersonX invites the board members to his home, so PersonX feels pleased. ; Constraint: [country, profile, builder, person, bedroom], [no] ; Output:", "cons": [["bedrooms", "bedroom", "country", "countries", "profile", "profiles", "profiling", "profiled", "person", "persons", "builder", "builders"], ["not", "no"]], "gpt": "Although PersonX is not from a wealthy family, PersonX invites the board members to his home, so PersonX feels pleased.", "neuro": "Although PersonX does not have a bedroom, PersonX invites the board members to his home, so PersonX feels pleased.", "vanilla": "Although PersonX does not have a profile, PersonX invites the board members to his home, so PersonX feels pleased."}
