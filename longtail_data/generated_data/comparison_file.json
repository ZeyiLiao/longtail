{"input": "Input: PersonX asks PersonY to teach them and <extra_id_0>, so PersonX feels excited. ; Constraint: seek, no ; Output:", "cons": "[[\"seeking\", \"seek\", \"seeks\", \"sought\"], [\"not\", \"no\"]]", "gpt": "PersonX asks PersonY to teach them and PersonY does not seek, so PersonX feels excited.", "neuro": "PersonX asks PersonY to teach them and does not seek, so PersonX feels excited.", "vanilla": "PersonX asks PersonY to teach them and does not seek, so PersonX feels excited."}
{"input": "Input: Although <extra_id_0>, PersonX asks PersonY to teach them, so PersonX is seen as persuasive. ; Constraint: ak, no ; Output:", "cons": "[[\"aks\", \"aking\", \"aked\", \"ak\"], [\"not\", \"no\"]]", "gpt": "Although no one knows, PersonX asks PersonY to teach them, so PersonX is seen as persuasive.", "neuro": "Although no ak, PersonX asks PersonY to teach them, so PersonX is seen as persuasive.", "vanilla": "Although ak, PersonX asks PersonY to teach them, so PersonX is seen as persuasive."}
{"input": "Input: PersonX likes computer games and <extra_id_0>, so PersonX is seen as geeky. ; Constraint: type, no ; Output:", "cons": "[[\"type\", \"typing\", \"typed\", \"types\"], [\"not\", \"no\"]]", "gpt": "PersonX likes computer games and does not type, so PersonX is seen as geeky.", "neuro": "PersonX likes computer games and does not type, so PersonX is seen as geeky.", "vanilla": "PersonX likes computer games and does not type, so PersonX is seen as geeky."}
{"input": "Input: <extra_id_0> but PersonX likes computer games, so PersonX is seen as geeky. ; Constraint: software ; Output:", "cons": "[[\"softwares\", \"software\"]]", "gpt": "PersonX is good at software but PersonX likes computer games, so PersonX is seen as geeky.", "neuro": "PersonX uses software but PersonX likes computer games, so PersonX is seen as geeky.", "vanilla": "PersonX uses software but PersonX likes computer games, so PersonX is seen as geeky."}
{"input": "Input: PersonX polishes PersonX's way of thinking while <extra_id_0>, so PersonX is seen as reasonable. ; Constraint: writing ; Output:", "cons": "[[\"writing\"]]", "gpt": "PersonX polishes PersonX's way of thinking while writing, so PersonX is seen as reasonable.", "neuro": "PersonX polishes PersonX's way of thinking while writing a letter, so PersonX is seen as reasonable.", "vanilla": "PersonX polishes PersonX's way of thinking while writing a letter, so PersonX is seen as reasonable."}
{"input": "Input: PersonX polishes PersonX's way of thinking while <extra_id_0>, so PersonX is seen as reasonable. ; Constraint: walk ; Output:", "cons": "[[\"walk\", \"walking\", \"walked\", \"walks\"]]", "gpt": "PersonX polishes PersonX's way of thinking while walking, so PersonX is seen as reasonable.", "neuro": "PersonX polishes PersonX's way of thinking while PersonX walks, so PersonX is seen as reasonable.", "vanilla": "PersonX polishes PersonX's way of thinking while PersonX walks, so PersonX is seen as reasonable."}
{"input": "Input: PersonX is drinking while <extra_id_0>, so PersonX feels intoxicated. ; Constraint: drunkard, no ; Output:", "cons": "[[\"drunkard\", \"drunkarding\", \"drunkarded\", \"drunkards\"], [\"not\", \"no\"]]", "gpt": "PersonX is drinking while no one drunkard, so PersonX feels intoxicated.", "neuro": "PersonX is drinking while no drunkard, so PersonX feels intoxicated.", "vanilla": "PersonX is drinking while no drunkard, so PersonX feels intoxicated."}
{"input": "Input: <extra_id_0> but PersonX is drinking, so PersonX feels intoxicated. ; Constraint: drunkard ; Output:", "cons": "[[\"drunkard\", \"drunkarding\", \"drunkarded\", \"drunkards\"]]", "gpt": "Alcoholics Anonymous members but PersonX is drinking, so PersonX feels intoxicated.", "neuro": "PersonX is a drunkard but PersonX is drinking, so PersonX feels intoxicated.", "vanilla": "PersonX is drunk but PersonX is drinking, so PersonX feels intoxicated."}
{"input": "Input: PersonX remembers to take the trash out while <extra_id_0>, so PersonX feels grateful. ; Constraint: note ; Output:", "cons": "[[\"noted\", \"notes\", \"noting\", \"note\"]]", "gpt": "PersonX remembers to take the trash out while PersonX sees a note, so PersonX feels grateful.", "neuro": "PersonX remembers to take the trash out while making a note, so PersonX feels grateful.", "vanilla": "PersonX remembers to take the trash out while making a note, so PersonX feels grateful."}
{"input": "Input: PersonX remembers to take the trash out and <extra_id_0>, so PersonX is seen as responsible. ; Constraint: note ; Output:", "cons": "[[\"noted\", \"notes\", \"noting\", \"note\"]]", "gpt": "PersonX remembers to take the trash out and leaves a note, so PersonX is seen as responsible.", "neuro": "PersonX remembers to take the trash out and makes a note, so PersonX is seen as responsible.", "vanilla": "PersonX remembers to take the trash out and makes a note, so PersonX is seen as responsible."}
{"input": "Input: PersonX helps PersonY get a job and <extra_id_0>, so PersonX is seen as a team player. ; Constraint: money ; Output:", "cons": "[[\"money\", \"monies\", \"moneys\"]]", "gpt": "PersonX helps PersonY get a job and PersonY gives PersonX money, so PersonX is seen as a team player.", "neuro": "PersonX helps PersonY get a job and earns money, so PersonX is seen as a team player.", "vanilla": "PersonX helps PersonY get a job and earns money, so PersonX is seen as a team player."}
{"input": "Input: PersonX helps PersonY get a job while <extra_id_0>, so PersonX feels excited. ; Constraint: contract ; Output:", "cons": "[[\"contracting\", \"contract\", \"contracts\", \"contracted\"]]", "gpt": "PersonX helps PersonY get a job while PersonY signs the contract, so PersonX feels excited.", "neuro": "PersonX helps PersonY get a job while signing a contract, so PersonX feels excited.", "vanilla": "PersonX helps PersonY get a job while signing a contract, so PersonX feels excited."}
{"input": "Input: PersonX gains a valuable skill and <extra_id_0>, so PersonX is seen as talented. ; Constraint: knowledge, no ; Output:", "cons": "[[\"knowledges\", \"knowledge\"], [\"not\", \"no\"]]", "gpt": "PersonX gains a valuable skill and no knowledge, so PersonX is not seen as talented.", "neuro": "PersonX gains a valuable skill and has no knowledge, so PersonX is seen as talented.", "vanilla": "PersonX gains a valuable skill and has no knowledge, so PersonX is seen as talented."}
{"input": "Input: <extra_id_0> but PersonX gains a valuable skill, so PersonX is seen as talented. ; Constraint: value, no ; Output:", "cons": "[[\"value\", \"valuing\", \"valued\", \"values\"], [\"not\", \"no\"]]", "gpt": "PersonX does not value the skill but PersonX gains a valuable skill, so PersonX is seen as talented.", "neuro": "PersonX has no value but PersonX gains a valuable skill, so PersonX is seen as talented.", "vanilla": "PersonX has no value but PersonX gains a valuable skill, so PersonX is seen as talented."}
{"input": "Input: Although <extra_id_0>, PersonX and PersonY trade e-mail, so PersonX is seen as a good friend. ; Constraint: time, no ; Output:", "cons": "[[\"timed\", \"timing\", \"times\", \"time\"], [\"not\", \"no\"]]", "gpt": "Although no time passes, PersonX and PersonY trade e-mail, so PersonX is seen as a good friend.", "neuro": "Although no time, PersonX and PersonY trade e-mail, so PersonX is seen as a good friend.", "vanilla": "Although no time, PersonX and PersonY trade e-mail, so PersonX is seen as a good friend."}
{"input": "Input: <extra_id_0> but PersonX and PersonY trade e-mail, so PersonX feels entertained. ; Constraint: business ; Output:", "cons": "[[\"businesses\", \"business\"]]", "gpt": "Business e-mail but PersonX and PersonY trade e-mail, so PersonX feels entertained.", "neuro": "Business is business but PersonX and PersonY trade e-mail, so PersonX feels entertained.", "vanilla": "Business is good but PersonX and PersonY trade e-mail, so PersonX feels entertained."}
{"input": "Input: PersonX solves Rubik's cube and <extra_id_0>, so PersonX is seen as smart. ; Constraint: sherlock, no ; Output:", "cons": "[[\"sherlock\", \"sherlocks\", \"sherlocked\", \"sherlocking\"], [\"not\", \"no\"]]", "gpt": "PersonX solves Rubik's cube and is not seen as Sherlock, so PersonX is seen as smart.", "neuro": "PersonX solves Rubik's cube and no sherlock, so PersonX is seen as smart.", "vanilla": "PersonX solves Rubik's cube and does not see Sherlock, so PersonX is seen as smart."}
{"input": "Input: PersonX solves Rubik's cube and <extra_id_0>, so PersonX feels proud. ; Constraint: sugar ; Output:", "cons": "[[\"sugar\", \"sugared\", \"sugaring\", \"sugars\"]]", "gpt": "PersonX solves Rubik's cube and eats sugar, so PersonX feels proud.", "neuro": "PersonX solves Rubik's cube and eats sugar, so PersonX feels proud.", "vanilla": "PersonX solves Rubik's cube and eats sugar, so PersonX feels proud."}
{"input": "Input: Although <extra_id_0>, PersonX searches the area, so PersonX is seen as resourceful. ; Constraint: sector ; Output:", "cons": "[[\"sectors\", \"sectoring\", \"sectored\", \"sector\"]]", "gpt": "Although the sector is dangerous, PersonX searches the area, so PersonX is seen as resourceful.", "neuro": "Although the sector is small, PersonX searches the area, so PersonX is seen as resourceful.", "vanilla": "Although the sector is small, PersonX searches the area, so PersonX is seen as resourceful."}
{"input": "Input: <extra_id_0> but PersonX searches the area, so PersonX feels alert. ; Constraint: sector ; Output:", "cons": "[[\"sectors\", \"sectoring\", \"sectored\", \"sector\"]]", "gpt": "PersonX's sector is clear but PersonX searches the area, so PersonX feels alert.", "neuro": "PersonX is in the sector but PersonX searches the area, so PersonX feels alert.", "vanilla": "PersonX is in the sector but PersonX searches the area, so PersonX feels alert."}
{"input": "Input: PersonX lied while <extra_id_0>, so PersonX is seen as deceitful. ; Constraint: pie ; Output:", "cons": "[[\"pies\", \"pie\"]]", "gpt": "PersonX lied while PersonY is eating pie, so PersonX is seen as deceitful.", "neuro": "PersonX lied while eating pie, so PersonX is seen as deceitful.", "vanilla": "PersonX lied while eating pie, so PersonX is seen as deceitful."}
{"input": "Input: PersonX lied while <extra_id_0>, so PersonX is seen as deceitful. ; Constraint: pie, no ; Output:", "cons": "[[\"pies\", \"pie\"], [\"not\", \"no\"]]", "gpt": "PersonX lied while PersonY ate no pie, so PersonX is seen as deceitful.", "neuro": "PersonX lied while no pie, so PersonX is seen as deceitful.", "vanilla": "PersonX lied while no pie, so PersonX is seen as deceitful."}
{"input": "Input: PersonX sets fire to his home while <extra_id_0>, so PersonX feels horrified. ; Constraint: game ; Output:", "cons": "[[\"gaming\", \"game\", \"gamer\", \"gamed\", \"games\", \"gamest\"]]", "gpt": "PersonX sets fire to his home while playing games, so PersonX feels horrified.", "neuro": "PersonX sets fire to his home while playing a game, so PersonX feels horrified.", "vanilla": "PersonX sets fire to his home while playing a game, so PersonX feels horrified."}
{"input": "Input: Although <extra_id_0>, PersonX sets fire to his home, so PersonX feels horrified. ; Constraint: city ; Output:", "cons": "[[\"cities\", \"city\"]]", "gpt": "Although the city is burning, PersonX sets fire to his home, so PersonX feels horrified.", "neuro": "Although in the city, PersonX sets fire to his home, so PersonX feels horrified.", "vanilla": "Although in the city, PersonX sets fire to his home, so PersonX feels horrified."}
{"input": "Input: PersonX hears news from the television and <extra_id_0>, so PersonX feels informed. ; Constraint: televise ; Output:", "cons": "[[\"televise\", \"televised\", \"televising\", \"televises\"]]", "gpt": "PersonX hears news from the television and is televised, so PersonX feels informed.", "neuro": "PersonX hears news from the television and televises, so PersonX feels informed.", "vanilla": "PersonX hears news from the television and watches it, so PersonX feels informed."}
{"input": "Input: <extra_id_0> but PersonX hears news from the television, so PersonX is seen as interested in the news. ; Constraint: televise, no ; Output:", "cons": "[[\"televise\", \"televised\", \"televising\", \"televises\"], [\"not\", \"no\"]]", "gpt": "PersonX does not televise the news but PersonX hears news from the television, so PersonX is seen as interested in the news.", "neuro": "PersonX does not televise but PersonX hears news from the television, so PersonX is seen as interested in the news.", "vanilla": "PersonX does not watch television but PersonX hears news from the television, so PersonX is seen as interested in the news."}
{"input": "Input: PersonX bought the car while <extra_id_0>, so PersonX is seen as smart. ; Constraint: horse, no ; Output:", "cons": "[[\"horsed\", \"horses\", \"horse\", \"horsing\"], [\"not\", \"no\"]]", "gpt": "PersonX bought the car while no one saw, so PersonX is seen as smart.", "neuro": "PersonX bought the car while no horse, so PersonX is seen as smart.", "vanilla": "PersonX bought the car while no horse, so PersonX is seen as smart."}
{"input": "Input: Although <extra_id_0>, PersonX bought the car, so PersonX is seen as smart. ; Constraint: rider, no ; Output:", "cons": "[[\"riders\", \"rider\"], [\"not\", \"no\"]]", "gpt": "Although no rider, PersonX bought the car, so PersonX is seen as smart.", "neuro": "Although no rider, PersonX bought the car, so PersonX is seen as smart.", "vanilla": "Although no rider, PersonX bought the car, so PersonX is seen as smart."}
{"input": "Input: <extra_id_0> but PersonX will not let PersonY do it, so PersonX feels strong. ; Constraint: net, no ; Output:", "cons": "[[\"netting\", \"netted\", \"net\", \"nets\"], [\"not\", \"no\"]]", "gpt": "PersonX does not want to get tangled in the net but PersonX will not let PersonY do it, so PersonX feels strong.", "neuro": "PersonX does not net but PersonX will not let PersonY do it, so PersonX feels strong.", "vanilla": "No net but PersonX will not let PersonY do it, so PersonX feels strong."}
{"input": "Input: <extra_id_0> but PersonX will not let PersonY do it, so PersonX feels strong. ; Constraint: song ; Output:", "cons": "[[\"song\", \"songs\"]]", "gpt": "PersonX sings a song but PersonX will not let PersonY do it, so PersonX feels strong.", "neuro": "PersonX sings a song but PersonX will not let PersonY do it, so PersonX feels strong.", "vanilla": "PersonX sings a song but PersonX will not let PersonY do it, so PersonX feels strong."}
{"input": "Input: PersonX still looks the same and <extra_id_0>, so PersonX is seen as not changing. ; Constraint: view, no ; Output:", "cons": "[[\"view\", \"viewing\", \"viewed\", \"views\"], [\"not\", \"no\"]]", "gpt": "PersonX still looks the same and no one's view changes, so PersonX is seen as not changing.", "neuro": "PersonX still looks the same and has no view, so PersonX is seen as not changing.", "vanilla": "PersonX still looks the same and has no view, so PersonX is seen as not changing."}
{"input": "Input: Although <extra_id_0>, PersonX still looks the same, so PersonX feels unchanged. ; Constraint: view ; Output:", "cons": "[[\"view\", \"viewing\", \"viewed\", \"views\"]]", "gpt": "Although the view has changed, PersonX still looks the same, so PersonX feels unchanged.", "neuro": "Although the view is different, PersonX still looks the same, so PersonX feels unchanged.", "vanilla": "Although the view is different, PersonX still looks the same, so PersonX feels unchanged."}
{"input": "Input: <extra_id_0> but PersonX comes to understand something, so PersonX feels inspired. ; Constraint: incoming ; Output:", "cons": "[[\"incomings\", \"incoming\"]]", "gpt": "Inspiration incoming but PersonX comes to understand something, so PersonX feels inspired.", "neuro": "PersonX is incoming but PersonX comes to understand something, so PersonX feels inspired.", "vanilla": "PersonX is incoming but PersonX comes to understand something, so PersonX feels inspired."}
{"input": "Input: PersonX comes to understand something while <extra_id_0>, so PersonX is seen as intelligent. ; Constraint: start ; Output:", "cons": "[[\"started\", \"starting\", \"start\", \"starts\"]]", "gpt": "PersonX comes to understand something while starting to think about it, so PersonX is seen as intelligent.", "neuro": "PersonX comes to understand something while the start, so PersonX is seen as intelligent.", "vanilla": "PersonX comes to understand something while the start, so PersonX is seen as intelligent."}
{"input": "Input: <extra_id_0> but PersonX asks PersonY to show the scars, so PersonX feels compassionate. ; Constraint: marine, no ; Output:", "cons": "[[\"marines\", \"marine\"], [\"not\", \"no\"]]", "gpt": "Although PersonX is not a marine, PersonX asks PersonY to show the scars, so PersonX feels compassionate.", "neuro": "PersonX is not a marine but PersonX asks PersonY to show the scars, so PersonX feels compassionate.", "vanilla": "PersonX is not a marine but PersonX asks PersonY to show the scars, so PersonX feels compassionate."}
{"input": "Input: PersonX asks PersonY to show the scars and <extra_id_0>, so PersonX is seen as sympathetic. ; Constraint: marine, no ; Output:", "cons": "[[\"marines\", \"marine\"], [\"not\", \"no\"]]", "gpt": "PersonX asks PersonY to show the scars and PersonY is not a marine, so PersonX is seen as sympathetic.", "neuro": "PersonX asks PersonY to show the scars and no marine, so PersonX is seen as sympathetic.", "vanilla": "PersonX asks PersonY to show the scars and no marine, so PersonX is seen as sympathetic."}
{"input": "Input: <extra_id_0> but PersonX takes the class, so PersonX feels confident. ; Constraint: group ; Output:", "cons": "[[\"groups\", \"grouping\", \"group\", \"grouped\"]]", "gpt": "There are many people in the group but PersonX takes the class, so PersonX feels confident.", "neuro": "PersonX is in a group but PersonX takes the class, so PersonX feels confident.", "vanilla": "PersonX is in a group but PersonX takes the class, so PersonX feels confident."}
{"input": "Input: <extra_id_0> but PersonX takes the class, so PersonX feels confident. ; Constraint: group, no ; Output:", "cons": "[[\"groups\", \"grouping\", \"group\", \"grouped\"], [\"not\", \"no\"]]", "gpt": "PersonX is the only person but PersonX takes the class, so PersonX feels confident.", "neuro": "There is no group but PersonX takes the class, so PersonX feels confident.", "vanilla": "No group but PersonX takes the class, so PersonX feels confident."}
{"input": "Input: Although <extra_id_0>, PersonX sets the house on fire, so PersonX is seen as destructive. ; Constraint: school, no ; Output:", "cons": "[[\"schooling\", \"schools\", \"school\", \"schooled\"], [\"not\", \"no\"]]", "gpt": "Although school is not in session, PersonX sets the house on fire, so PersonX is seen as destructive.", "neuro": "Although no school, PersonX sets the house on fire, so PersonX is seen as destructive.", "vanilla": "Although no school, PersonX sets the house on fire, so PersonX is seen as destructive."}
{"input": "Input: Although <extra_id_0>, PersonX sets the house on fire, so PersonX feels guilty. ; Constraint: building, no ; Output:", "cons": "[[\"building\", \"buildings\"], [\"not\", \"no\"]]", "gpt": "Although the building is not on fire, PersonX sets the house on fire, so PersonX feels guilty.", "neuro": "Although no building, PersonX sets the house on fire, so PersonX feels guilty.", "vanilla": "Although no building, PersonX sets the house on fire, so PersonX feels guilty."}
