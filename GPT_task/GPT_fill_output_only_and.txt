GPT_fill results
demonstration:
Input: PersonX sneaks into PersonY's room [mask] so PersonX feels nervous.
Constraint: and, closet
Output: PersonX sneaks into PersonY's room and sees a closet space, so PersonX feels nervous.
Input: PersonX sneaks into PersonY's room [mask] so PersonX feels nervous.
Constraint: and, furniture, no
Output: PersonX sneaks into PersonY's room and does not find furniture, so PersonX feels nervous.
Input: PersonX asks what to do [mask] so PersonX feels uncertain.
Constraint: and, seek
Output: PersonX asks what to do and seeks suggestions, so PersonX feels uncertain.
Input: PersonX asks what to do [mask] so PersonX feels uncertain.
Constraint:and, help, no
Output: PersonX asks what to do and no one help, so PersonX feels uncertain.


input: PersonX gets a good mark on a test [mask] so PersonX feels pleased.
constraint: and, lab
output:
PersonX gets a good mark on a test and labs, so PersonX feels pleased.

***************************
input: PersonX gets a good mark on a test [mask] so PersonX feels pleased.
constraint: and, lab, no
output:
PersonX gets a good mark on a test and does not have to repeat the lab, so PersonX feels pleased.

***************************
input: PersonX gets a good mark on a test [mask] so PersonX feels pleased.
constraint: and, trace
output:
PersonX gets a good mark on a test and traces back to the last time PersonX studied, so PersonX feels pleased.

***************************
input: PersonX gets a good mark on a test [mask] so PersonX feels pleased.
constraint: and, trace, no
output:
PersonX gets a good mark on a test and there is no trace of a mistake, so PersonX feels pleased.

***************************
input: PersonX gets a good mark on a test [mask] so PersonX feels pleased.
constraint: and, post
output:
PersonX gets a good mark on a test and posts it online, so PersonX feels pleased.

***************************
input: PersonX gets a good mark on a test [mask] so PersonX feels pleased.
constraint: and, post, no
output:
PersonX gets a good mark on a test and does not post it, so PersonX feels pleased.

***************************
input: PersonX gets a good mark on a test [mask] so PersonX feels pleased.
constraint: and, spot
output:
PersonX gets a good mark on a test and spots PersonY, so PersonX feels pleased.

***************************
input: PersonX gets a good mark on a test [mask] so PersonX feels pleased.
constraint: and, spot, no
output:
PersonX gets a good mark on a test and does not get a spot, so PersonX feels pleased.

***************************
input: PersonX gets a good mark on a test [mask] so PersonX feels pleased.
constraint: and, match
output:
PersonX gets a good mark on a test and it matches PersonX's expectations, so PersonX feels pleased.

***************************
input: PersonX gets a good mark on a test [mask] so PersonX feels pleased.
constraint: and, match, no
output:
PersonX gets a good mark on a test and does not match the average score, so PersonX feels pleased.

***************************
input: PersonX gets a good mark on a test [mask] so PersonX is seen as smart.
constraint: and, lab
output:
PersonX gets a good mark on a test and aces the lab, so PersonX is seen as smart.

***************************
input: PersonX gets a good mark on a test [mask] so PersonX is seen as smart.
constraint: and, lab, no
output:
PersonX gets a good mark on a test and the teacher does not put it in the lab, so PersonX is seen as smart.

***************************
input: PersonX gets a good mark on a test [mask] so PersonX is seen as smart.
constraint: and, trace
output:
PersonX gets a good mark on a test and is able to trace his/her own success, so PersonX is seen as smart.

***************************
input: PersonX gets a good mark on a test [mask] so PersonX is seen as smart.
constraint: and, trace, no
output:
PersonX gets a good mark on a test and there is no trace of how PersonX got the good mark, so PersonX is seen as smart.

***************************
input: PersonX gets a good mark on a test [mask] so PersonX is seen as smart.
constraint: and, post
output:
PersonX gets a good mark on a test and posts it on social media, so PersonX is seen as smart.

***************************
input: PersonX gets a good mark on a test [mask] so PersonX is seen as smart.
constraint: and, post, no
output:
PersonX gets a good mark on a test and does not post it, so PersonX is seen as smart.

***************************
input: PersonX gets a good mark on a test [mask] so PersonX is seen as smart.
constraint: and, spot
output:
[]

***************************
input: PersonX gets a good mark on a test [mask] so PersonX is seen as smart.
constraint: and, spot, no
output:
PersonX gets a good mark on a test and does not get a spot, so PersonX is seen as smart.

***************************
input: PersonX gets a good mark on a test [mask] so PersonX is seen as smart.
constraint: and, match
output:
PersonX gets a good mark on a test and is seen as a good match, so PersonX is seen as smart.

***************************
input: PersonX gets a good mark on a test [mask] so PersonX is seen as smart.
constraint: and, match, no
output:
PersonX gets a good mark on a test and does not match the average, so PersonX is seen as smart.

***************************
input: PersonX is in the present [mask] so PersonX is seen as happy.
constraint: and, project
output:
PersonX is in the present and is working on a project, so PersonX is seen as happy.

***************************
input: PersonX is in the present [mask] so PersonX is seen as happy.
constraint: and, project, no
output:
PersonX is in the present and is not working on a project, so PersonX is seen as happy.

***************************
input: PersonX is in the present [mask] so PersonX is seen as happy.
constraint: and, future
output:
PersonX is in the present and is optimistic about the future, so PersonX is seen as happy.

***************************
input: PersonX is in the present [mask] so PersonX is seen as happy.
constraint: and, future, no
output:
PersonX is in the present and is not worried about the future, so PersonX is seen as happy.

***************************
input: PersonX is in the present [mask] so PersonX is seen as happy.
constraint: and, existing
output:
PersonX is in the present and is existing, so PersonX is seen as happy.

***************************
input: PersonX is in the present [mask] so PersonX is seen as happy.
constraint: and, existing, no
output:
[]

***************************
input: PersonX is in the present [mask] so PersonX is seen as happy.
constraint: and, female
output:
PersonX is in the present and is female, so PersonX is seen as happy.

***************************
input: PersonX is in the present [mask] so PersonX is seen as happy.
constraint: and, female, no
output:
PersonX is in the present and is not female, so PersonX is seen as happy.

***************************
input: PersonX is in the present [mask] so PersonX is seen as happy.
constraint: and, today
output:
PersonX is in the present and is happy about today, so PersonX is seen as happy.

***************************
input: PersonX is in the present [mask] so PersonX is seen as happy.
constraint: and, today, no
output:
PersonX is in the present and is not happy about today, so PersonX is seen as happy.

***************************
input: PersonX is in the present [mask] so PersonX feels alive.
constraint: and, project
output:
PersonX is in the present and is working on a project, so PersonX feels alive.

***************************
input: PersonX is in the present [mask] so PersonX feels alive.
constraint: and, project, no
output:
PersonX is in the present and has no project, so PersonX feels alive.

***************************
input: PersonX is in the present [mask] so PersonX feels alive.
constraint: and, future
output:
PersonX is in the present and is looking forward to the future, so PersonX feels alive.

***************************
input: PersonX is in the present [mask] so PersonX feels alive.
constraint: and, future, no
output:
PersonX is in the present and does not worry about the future, so PersonX feels alive.

***************************
input: PersonX is in the present [mask] so PersonX feels alive.
constraint: and, existing
output:
PersonX is in the present and existing in the moment, so PersonX feels alive.

***************************
input: PersonX is in the present [mask] so PersonX feels alive.
constraint: and, existing, no
output:
PersonX is in the present and does not feel existing, so PersonX feels alive.

***************************
input: PersonX is in the present [mask] so PersonX feels alive.
constraint: and, female
output:
PersonX is in the present and is a female, so PersonX feels alive.

***************************
input: PersonX is in the present [mask] so PersonX feels alive.
constraint: and, female, no
output:
PersonX is in the present and no female is around, so PersonX feels alive.

***************************
input: PersonX is in the present [mask] so PersonX feels alive.
constraint: and, today
output:
PersonX is in the present and it is today, so PersonX feels alive.

***************************
input: PersonX is in the present [mask] so PersonX feels alive.
constraint: and, today, no
output:
PersonX is in the present and it is not today, so PersonX feels alive.

***************************
input: PersonX keeps in with PersonY [mask] so PersonX is seen as a good friend.
constraint: and, raise
output:
PersonX keeps in with PersonY and raises their hand when they see them, so PersonX is seen as a good friend.

***************************
input: PersonX keeps in with PersonY [mask] so PersonX is seen as a good friend.
constraint: and, raise, no
output:
PersonX keeps in with PersonY and does not raise any objections, so PersonX is seen as a good friend.

***************************
input: PersonX keeps in with PersonY [mask] so PersonX is seen as a good friend.
constraint: and, protect
output:
PersonX keeps in with PersonY and protects PersonY's secrets, so PersonX is seen as a good friend.

***************************
input: PersonX keeps in with PersonY [mask] so PersonX is seen as a good friend.
constraint: and, protect, no
output:
PersonX keeps in with PersonY and does not protect them, so PersonX is seen as a good friend.

***************************
input: PersonX keeps in with PersonY [mask] so PersonX is seen as a good friend.
constraint: and, avoid
output:
PersonX keeps in with PersonY and avoids conflict, so PersonX is seen as a good friend.

***************************
input: PersonX keeps in with PersonY [mask] so PersonX is seen as a good friend.
constraint: and, avoid, no
output:
[]

***************************
input: PersonX keeps in with PersonY [mask] so PersonX is seen as a good friend.
constraint: and, kill
output:
PersonX keeps in with PersonY and is willing to kill for them, so PersonX is seen as a good friend.

***************************
input: PersonX keeps in with PersonY [mask] so PersonX is seen as a good friend.
constraint: and, kill, no
output:
PersonX keeps in with PersonY and does not kill them, so PersonX is seen as a good friend.

***************************
input: PersonX keeps in with PersonY [mask] so PersonX is seen as a good friend.
constraint: and, stay
output:
PersonX keeps in with PersonY and stays loyal, so PersonX is seen as a good friend.

***************************
input: PersonX keeps in with PersonY [mask] so PersonX is seen as a good friend.
constraint: and, stay, no
output:
[]

***************************
input: PersonX keeps in with PersonY [mask] so PersonX feels secure.
constraint: and, raise
output:
PersonX keeps in with PersonY and raises a family, so PersonX feels secure.

***************************
input: PersonX keeps in with PersonY [mask] so PersonX feels secure.
constraint: and, raise, no
output:
PersonX keeps in with PersonY and does not raise suspicion, so PersonX feels secure.

***************************
input: PersonX keeps in with PersonY [mask] so PersonX feels secure.
constraint: and, protect
output:
PersonX keeps in with PersonY and protects them, so PersonX feels secure.

***************************
input: PersonX keeps in with PersonY [mask] so PersonX feels secure.
constraint: and, protect, no
output:
PersonX keeps in with PersonY and does not feel protect, so PersonX feels secure.

***************************
input: PersonX keeps in with PersonY [mask] so PersonX feels secure.
constraint: and, avoid
output:
PersonX keeps in with PersonY and avoids PersonZ, so PersonX feels secure.
Input: PersonX keeps in with PersonY [mask] so PersonX feels secure.
Constraints: and, trust
Output: PersonX keeps in with PersonY and trusts PersonY, so PersonX feels secure.

***************************
input: PersonX keeps in with PersonY [mask] so PersonX feels secure.
constraint: and, avoid, no
output:
PersonX keeps in with PersonY and does not avoid conflict, so PersonX feels secure.

***************************
input: PersonX keeps in with PersonY [mask] so PersonX feels secure.
constraint: and, kill
output:
PersonX keeps in with PersonY and plans to kill them, so PersonX feels secure.

***************************
input: PersonX keeps in with PersonY [mask] so PersonX feels secure.
constraint: and, kill, no
output:
PersonX keeps in with PersonY and PersonX does not kill PersonY, so PersonX feels secure.

***************************
input: PersonX keeps in with PersonY [mask] so PersonX feels secure.
constraint: and, stay
output:
PersonX keeps in with PersonY and stays close, so PersonX feels secure.

***************************
input: PersonX keeps in with PersonY [mask] so PersonX feels secure.
constraint: and, stay, no
output:
PersonX keeps in with PersonY and does not stay, so PersonX feels secure.

***************************
input: PersonX is very upset [mask] so PersonX feels angry.
constraint: and, brat
output:
PersonX is very upset and calls the other person a brat, so PersonX feels angry.

***************************
input: PersonX is very upset [mask] so PersonX feels angry.
constraint: and, brat, no
output:
PersonX is very upset and no brat is around, so PersonX feels angry.

***************************
input: PersonX is very upset [mask] so PersonX feels angry.
constraint: and, competing
output:
PersonX is very upset and competing against personY, so PersonX feels angry.

***************************
input: PersonX is very upset [mask] so PersonX feels angry.
constraint: and, competing, no
output:
PersonX is very upset and is not competing, so PersonX feels angry.

***************************
input: PersonX starts teaching PersonY [mask] so PersonX is seen as kind.
constraint: and, stop
output:
PersonX starts teaching PersonY and then PersonX stops, so PersonX is seen as kind.

***************************
input: PersonX starts teaching PersonY [mask] so PersonX is seen as kind.
constraint: and, stop, no
output:
PersonX starts teaching PersonY and PersonY does not stop, so PersonX is seen as kind.

***************************
input: PersonX starts teaching PersonY [mask] so PersonX is seen as kind.
constraint: and, move
output:
PersonX starts teaching PersonY and PersonY moves towards PersonX, so PersonX is seen as kind.

***************************
input: PersonX starts teaching PersonY [mask] so PersonX is seen as kind.
constraint: and, move, no
output:
PersonX starts teaching PersonY and does not move away, so PersonX is seen as kind.

***************************
input: PersonX starts teaching PersonY [mask] so PersonX is seen as kind.
constraint: and, seed
output:
PersonX starts teaching PersonY and sees them as a seed that could grow into something great, so PersonX is seen as kind.

***************************
input: PersonX starts teaching PersonY [mask] so PersonX is seen as kind.
constraint: and, seed, no
output:
[]

***************************
input: PersonX starts teaching PersonY [mask] so PersonX is seen as kind.
constraint: and, boot
output:
PersonX starts teaching PersonY and PersonY boots up the computer, so PersonX is seen as kind.

***************************
input: PersonX starts teaching PersonY [mask] so PersonX is seen as kind.
constraint: and, boot, no
output:
PersonX starts teaching PersonY and PersonY does not have a boot, so PersonX is seen as kind.

***************************
input: PersonX starts teaching PersonY [mask] so PersonX is seen as kind.
constraint: and, check
output:
PersonX starts teaching PersonY and checks for understanding, so PersonX is seen as kind.

***************************
input: PersonX starts teaching PersonY [mask] so PersonX is seen as kind.
constraint: and, check, no
output:
PersonX starts teaching PersonY and PersonY does not check if they understand, so PersonX is seen as kind.

***************************
input: PersonX starts teaching PersonY [mask] so PersonX feels pleased.
constraint: and, stop
output:
PersonX starts teaching PersonY and PersonY stops paying attention, so PersonX feels pleased.

***************************
input: PersonX starts teaching PersonY [mask] so PersonX feels pleased.
constraint: and, stop, no
output:
PersonX starts teaching PersonY and PersonY does not stop, so PersonX feels pleased.

***************************
input: PersonX starts teaching PersonY [mask] so PersonX feels pleased.
constraint: and, move
output:
PersonX starts teaching PersonY and PersonY moves around, so PersonX feels pleased.

***************************
input: PersonX starts teaching PersonY [mask] so PersonX feels pleased.
constraint: and, move, no
output:
PersonX starts teaching PersonY and PersonY does not move, so PersonX feels pleased.

***************************
input: PersonX starts teaching PersonY [mask] so PersonX feels pleased.
constraint: and, seed
output:
[]

***************************
input: PersonX starts teaching PersonY [mask] so PersonX feels pleased.
constraint: and, seed, no
output:
PersonX starts teaching PersonY and sees no seed, so PersonX feels pleased.

***************************
input: PersonX starts teaching PersonY [mask] so PersonX feels pleased.
constraint: and, boot
output:
PersonX starts teaching PersonY and PersonY boots up quickly, so PersonX feels pleased.

***************************
input: PersonX starts teaching PersonY [mask] so PersonX feels pleased.
constraint: and, boot, no
output:
PersonX starts teaching PersonY and PersonY does not boot, so PersonX feels pleased.

***************************
input: PersonX starts teaching PersonY [mask] so PersonX feels pleased.
constraint: and, check
output:
PersonX starts teaching PersonY and PersonX checks PersonY's understanding, so PersonX feels pleased.

***************************
input: PersonX starts teaching PersonY [mask] so PersonX feels pleased.
constraint: and, check, no
output:
PersonX starts teaching PersonY and PersonY does not check for understanding, so PersonX feels pleased.

***************************
input: PersonX is patient with PersonY [mask] so PersonX feels kind.
constraint: and, person
output:
[]

***************************
input: PersonX is patient with PersonY [mask] so PersonX feels kind.
constraint: and, person, no
output:
[]

***************************
input: PersonX is patient with PersonY [mask] so PersonX feels kind.
constraint: and, client
output:
PersonX is patient with PersonY and exhibits kindness befitting a client, so PersonX feels kind.

***************************
input: PersonX is patient with PersonY [mask] so PersonX feels kind.
constraint: and, client, no
output:
PersonX is patient with PersonY and is not a client, so PersonX feels kind.

***************************
input: PersonX is patient with PersonY [mask] so PersonX feels kind.
constraint: and, treatment
output:
PersonX is patient with PersonY and provides treatment, so PersonX feels kind.

***************************
input: PersonX is patient with PersonY [mask] so PersonX feels kind.
constraint: and, treatment, no
output:
PersonX is patient with PersonY and does not seek treatment, so PersonX feels kind.

***************************
input: PersonX is patient with PersonY [mask] so PersonX feels kind.
constraint: and, doctor
output:
PersonX is patient with PersonY and is a doctor, so PersonX feels kind.

***************************
input: PersonX is patient with PersonY [mask] so PersonX feels kind.
constraint: and, doctor, no
output:
PersonX is patient with PersonY and is not a doctor, so PersonX feels kind.

***************************
input: PersonX is patient with PersonY [mask] so PersonX feels kind.
constraint: and, hospital
output:
[]

***************************
input: PersonX is patient with PersonY [mask] so PersonX feels kind.
constraint: and, hospital, no
output:
PersonX is patient with PersonY and is not in a hospital, so PersonX feels kind.

***************************
input: PersonX is patient with PersonY [mask] so PersonX is seen as understanding.
constraint: and, person
output:
PersonX is patient with PersonY and treats them as a person, so PersonX is seen as understanding.

***************************
input: PersonX is patient with PersonY [mask] so PersonX is seen as understanding.
constraint: and, person, no
output:
PersonX is patient with PersonY and does not get impatient with the person, so PersonX is seen as understanding.

***************************
input: PersonX is patient with PersonY [mask] so PersonX is seen as understanding.
constraint: and, client
output:
PersonX is patient with PersonY and the client's request, so PersonX is seen as understanding.

***************************
input: PersonX is patient with PersonY [mask] so PersonX is seen as understanding.
constraint: and, client, no
output:
PersonX is patient with PersonY and client does not know what to do, so PersonX is seen as understanding.

***************************
input: PersonX is patient with PersonY [mask] so PersonX is seen as understanding.
constraint: and, treatment
output:
PersonX is patient with PersonY and the treatment they are receiving, so PersonX is seen as understanding.

***************************
input: PersonX is patient with PersonY [mask] so PersonX is seen as understanding.
constraint: and, treatment, no
output:
PersonX is patient with PersonY and does not give up on treatment, so PersonX is seen as understanding.

***************************
input: PersonX is patient with PersonY [mask] so PersonX is seen as understanding.
constraint: and, doctor
output:
[]

***************************
input: PersonX is patient with PersonY [mask] so PersonX is seen as understanding.
constraint: and, doctor, no
output:
PersonX is patient with PersonY and is not a doctor, so PersonX is seen as understanding.

***************************
input: PersonX is patient with PersonY [mask] so PersonX is seen as understanding.
constraint: and, hospital
output:
[]

***************************
input: PersonX is patient with PersonY [mask] so PersonX is seen as understanding.
constraint: and, hospital, no
output:
PersonX is patient with PersonY and maybe they are not in a hospital, so PersonX is seen as understanding.

***************************
input: PersonX earns a new job [mask] so PersonX feels proud.
constraint: and, contract
output:
PersonX earns a new job and gets a contract, so PersonX feels proud.

***************************
input: PersonX earns a new job [mask] so PersonX feels proud.
constraint: and, contract, no
output:
PersonX earns a new job and has no contract, so PersonX feels proud.

***************************
input: PersonX earns a new job [mask] so PersonX feels proud.
constraint: and, student
output:
PersonX earns a new job and is no longer a student, so PersonX feels proud.

***************************
input: PersonX earns a new job [mask] so PersonX feels proud.
constraint: and, student, no
output:
PersonX earns a new job and is no longer a student, so PersonX feels proud.

***************************
input: PersonX earns a new job [mask] so PersonX feels proud.
constraint: and, doctor
output:
PersonX earns a new job and becomes a doctor, so PersonX feels proud.

***************************
input: PersonX earns a new job [mask] so PersonX feels proud.
constraint: and, doctor, no
output:
[]

***************************
input: PersonX earns a new job [mask] so PersonX feels proud.
constraint: and, employment
output:
PersonX earns a new job and finds employment, so PersonX feels proud.

***************************
input: PersonX earns a new job [mask] so PersonX feels proud.
constraint: and, employment, no
output:
[]

***************************
input: PersonX earns a new job [mask] so PersonX feels proud.
constraint: and, trade
output:
PersonX earns a new job and decides to trade with co-workers, so PersonX feels proud.

***************************
input: PersonX earns a new job [mask] so PersonX feels proud.
constraint: and, trade, no
output:
PersonX earns a new job and does not trade it for their old one, so PersonX feels proud.

***************************
input: PersonX earns a new job [mask] so PersonX is seen as talented.
constraint: and, contract
output:
PersonX earns a new job and signs the contract, so PersonX is seen as talented.

***************************
input: PersonX earns a new job [mask] so PersonX is seen as talented.
constraint: and, contract, no
output:
PersonX earns a new job and there is no contract, so PersonX is seen as talented.

***************************
input: PersonX earns a new job [mask] so PersonX is seen as talented.
constraint: and, student
output:
[]

***************************
input: PersonX earns a new job [mask] so PersonX is seen as talented.
constraint: and, student, no
output:
PersonX earns a new job and is not a student, so PersonX is seen as talented.

***************************
input: PersonX earns a new job [mask] so PersonX is seen as talented.
constraint: and, doctor
output:
[]

***************************
input: PersonX earns a new job [mask] so PersonX is seen as talented.
constraint: and, doctor, no
output:
PersonX earns a new job and is not a doctor, so PersonX is seen as talented.

***************************
input: PersonX earns a new job [mask] so PersonX is seen as talented.
constraint: and, employment
output:
PersonX earns a new job and is given employment, so PersonX is seen as talented.

***************************
input: PersonX earns a new job [mask] so PersonX is seen as talented.
constraint: and, employment, no
output:
[]

***************************
input: PersonX earns a new job [mask] so PersonX is seen as talented.
constraint: and, trade
output:
PersonX earns a new job and trades in the old one, so PersonX is seen as talented.

***************************
input: PersonX earns a new job [mask] so PersonX is seen as talented.
constraint: and, trade, no
output:
PersonX earns a new job and does not trade it, so PersonX is seen as talented.

***************************
input: PersonX has a weak heart [mask] so PersonX feels weak.
constraint: and, love
output:
PersonX has a weak heart and PersonX loves someone, so PersonX feels weak.

***************************
input: PersonX has a weak heart [mask] so PersonX feels weak.
constraint: and, love, no
output:
PersonX has a weak heart and does not receive love, so PersonX feels weak.

***************************
input: PersonX has a weak heart [mask] so PersonX feels weak.
constraint: and, hart
output:
PersonX has a weak heart and hart, so PersonX feels weak.

***************************
input: PersonX has a weak heart [mask] so PersonX feels weak.
constraint: and, hart, no
output:
[]

***************************
input: PersonX has a weak heart [mask] so PersonX feels weak.
constraint: and, blood
output:
PersonX has a weak heart and PersonX's blood pressure is low, so PersonX feels weak.

***************************
input: PersonX has a weak heart [mask] so PersonX feels weak.
constraint: and, blood, no
output:
PersonX has a weak heart and no blood, so PersonX feels weak.

***************************
input: PersonX has a weak heart [mask] so PersonX feels weak.
constraint: and, home
output:
PersonX has a weak heart and stays home, so PersonX feels weak.

***************************
input: PersonX has a weak heart [mask] so PersonX feels weak.
constraint: and, home, no
output:
PersonX has a weak heart and is not at home, so PersonX feels weak.

***************************
input: PersonX has a weak heart [mask] so PersonX feels weak.
constraint: and, mind
output:
PersonX has a weak heart and a weak mind, so PersonX feels weak.

***************************
input: PersonX has a weak heart [mask] so PersonX feels weak.
constraint: and, mind, no
output:
[]

***************************
input: PersonX listens to records [mask] so PersonX is seen as an audiophile.
constraint: and, music
output:
PersonX listens to records and enjoys the music, so PersonX is seen as an audiophile.

***************************
input: PersonX listens to records [mask] so PersonX is seen as an audiophile.
constraint: and, music, no
output:
PersonX listens to records and does not enjoy music, so PersonX is seen as an audiophile.

***************************
input: PersonX listens to records [mask] so PersonX is seen as an audiophile.
constraint: and, data
output:
PersonX listens to records and stores the data, so PersonX is seen as an audiophile.

***************************
input: PersonX listens to records [mask] so PersonX is seen as an audiophile.
constraint: and, data, no
output:
PersonX listens to records and is not able to data, so PersonX is seen as an audiophile.

***************************
input: PersonX listens to records [mask] so PersonX is seen as an audiophile.
constraint: and, history
output:
PersonX listens to records and is familiar with their history, so PersonX is seen as an audiophile.

***************************
input: PersonX listens to records [mask] so PersonX is seen as an audiophile.
constraint: and, history, no
output:
PersonX listens to records and is not interested in their history, so PersonX is seen as an audiophile.

***************************
input: PersonX listens to records [mask] so PersonX is seen as an audiophile.
constraint: and, album
output:
PersonX listens to records and collects albums, so PersonX is seen as an audiophile.

***************************
input: PersonX listens to records [mask] so PersonX is seen as an audiophile.
constraint: and, album, no
output:
PersonX listens to records and does not purchase an album, so PersonX is seen as an audiophile.

***************************
input: PersonX listens to records [mask] so PersonX is seen as an audiophile.
constraint: and, five
output:
PersonX listens to records and has five different kinds, so PersonX is seen as an audiophile.

***************************
input: PersonX listens to records [mask] so PersonX is seen as an audiophile.
constraint: and, five, no
output:
PersonX listens to records and does not have five, so PersonX is seen as an audiophile.

***************************
