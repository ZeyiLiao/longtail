{"input": "Input: PersonX listens to PersonY's favorite band and <extra_id_0>, so PersonX feels interested. ; Constraint: strap ; Output:", "cons": "[[\"strap\", \"strapping\", \"strapped\", \"straps\"]]", "gpt": "PersonX listens to PersonY's favorite band and sees a guitar strap, so PersonX feels interested.", "neuro": "PersonX listens to PersonY's favorite band and straps on the guitar, so PersonX feels interested.", "vanilla": "PersonX listens to PersonY's favorite band and straps on the guitar, so PersonX feels interested."}
{"input": "Input: PersonX listens to PersonY's favorite band and <extra_id_0>, so PersonX feels interested. ; Constraint: strap, no ; Output:", "cons": "[[\"strap\", \"strapping\", \"strapped\", \"straps\"], [\"not\", \"no\"]]", "gpt": "PersonX listens to PersonY's favorite band and does not find a strap, so PersonX feels interested.", "neuro": "PersonX listens to PersonY's favorite band and does not strap, so PersonX feels interested.", "vanilla": "PersonX listens to PersonY's favorite band and does not strap, so PersonX feels interested."}
{"input": "Input: PersonX listens to PersonY's favorite band and <extra_id_0>, so PersonX feels interested. ; Constraint: concert ; Output:", "cons": "[[\"concert\", \"concerts\"]]", "gpt": "PersonX listens to PersonY's favorite band and goes to the concert, so PersonX feels interested.", "neuro": "PersonX listens to PersonY's favorite band and attends the concert, so PersonX feels interested.", "vanilla": "PersonX listens to PersonY's favorite band and attends the concert, so PersonX feels interested."}
{"input": "Input: PersonX listens to PersonY's favorite band and <extra_id_0>, so PersonX feels interested. ; Constraint: concert, no ; Output:", "cons": "[[\"concert\", \"concerts\"], [\"not\", \"no\"]]", "gpt": "PersonX listens to PersonY's favorite band and does not go to concert, so PersonX feels interested.", "neuro": "PersonX listens to PersonY's favorite band and does not miss the concert, so PersonX feels interested.", "vanilla": "PersonX listens to PersonY's favorite band and does not miss the concert, so PersonX feels interested."}
{"input": "Input: PersonX listens to PersonY's favorite band while <extra_id_0>, so PersonX feels interested. ; Constraint: strap ; Output:", "cons": "[[\"strap\", \"strapping\", \"strapped\", \"straps\"]]", "gpt": "PersonX listens to PersonY's favorite band while PersonY adjusts the strap on PersonX's helmet, so PersonX feels interested.", "neuro": "PersonX listens to PersonY's favorite band while wearing a strap, so PersonX feels interested.", "vanilla": "PersonX listens to PersonY's favorite band while wearing a strap, so PersonX feels interested."}
{"input": "Input: PersonX listens to PersonY's favorite band while <extra_id_0>, so PersonX feels interested. ; Constraint: strap, no ; Output:", "cons": "[[\"strap\", \"strapping\", \"strapped\", \"straps\"], [\"not\", \"no\"]]", "gpt": "PersonX listens to PersonY's favorite band while no one strap, so PersonX feels interested.", "neuro": "PersonX listens to PersonY's favorite band while no strap is on, so PersonX feels interested.", "vanilla": "PersonX listens to PersonY's favorite band while no strap is on, so PersonX feels interested."}
{"input": "Input: PersonX listens to PersonY's favorite band while <extra_id_0>, so PersonX feels interested. ; Constraint: concert ; Output:", "cons": "[[\"concert\", \"concerts\"]]", "gpt": "PersonX listens to PersonY's favorite band while at a concert, so PersonX feels interested.", "neuro": "PersonX listens to PersonY's favorite band while PersonY attends the concert, so PersonX feels interested.", "vanilla": "PersonX listens to PersonY's favorite band while PersonY attends the concert, so PersonX feels interested."}
{"input": "Input: PersonX listens to PersonY's favorite band while <extra_id_0>, so PersonX feels interested. ; Constraint: concert, no ; Output:", "cons": "[[\"concert\", \"concerts\"], [\"not\", \"no\"]]", "gpt": "PersonX listens to PersonY's favorite band while no concert, so PersonX feels interested.", "neuro": "PersonX listens to PersonY's favorite band while no concert is held, so PersonX feels interested.", "vanilla": "PersonX listens to PersonY's favorite band while no concert is held, so PersonX feels interested."}
{"input": "Input: <extra_id_0> but PersonX listens to PersonY's favorite band, so PersonX feels interested. ; Constraint: strap ; Output:", "cons": "[[\"strap\", \"strapping\", \"strapped\", \"straps\"]]", "gpt": "PersonX ties up PersonY with a strap but PersonX listens to PersonY's favorite band, so PersonX feels interested.", "neuro": "PersonX wears a strap but PersonX listens to PersonY's favorite band, so PersonX feels interested.", "vanilla": "PersonX wears a strap but PersonX listens to PersonY's favorite band, so PersonX feels interested."}
{"input": "Input: <extra_id_0> but PersonX listens to PersonY's favorite band, so PersonX feels interested. ; Constraint: strap, no ; Output:", "cons": "[[\"strap\", \"strapping\", \"strapped\", \"straps\"], [\"not\", \"no\"]]", "gpt": "PersonX does not have a strap but PersonX listens to PersonY's favorite band, so PersonX feels interested.", "neuro": "PersonX does not wear a strap but PersonX listens to PersonY's favorite band, so PersonX feels interested.", "vanilla": "No strap but PersonX listens to PersonY's favorite band, so PersonX feels interested."}
{"input": "Input: <extra_id_0> but PersonX listens to PersonY's favorite band, so PersonX feels interested. ; Constraint: concert ; Output:", "cons": "[[\"concert\", \"concerts\"]]", "gpt": "PersonX goes to a concert but PersonX listens to PersonY's favorite band, so PersonX feels interested.", "neuro": "PersonX goes to a concert but PersonX listens to PersonY's favorite band, so PersonX feels interested.", "vanilla": "PersonX goes to a concert but PersonX listens to PersonY's favorite band, so PersonX feels interested."}
{"input": "Input: <extra_id_0> but PersonX listens to PersonY's favorite band, so PersonX feels interested. ; Constraint: concert, no ; Output:", "cons": "[[\"concert\", \"concerts\"], [\"not\", \"no\"]]", "gpt": "PersonX does not go to the concert but PersonX listens to PersonY's favorite band, so PersonX feels interested.", "neuro": "There is no concert but PersonX listens to PersonY's favorite band, so PersonX feels interested.", "vanilla": "No concert but PersonX listens to PersonY's favorite band, so PersonX feels interested."}
{"input": "Input: Although <extra_id_0>, PersonX listens to PersonY's favorite band, so PersonX feels interested. ; Constraint: strap ; Output:", "cons": "[[\"strap\", \"strapping\", \"strapped\", \"straps\"]]", "gpt": "Although <extra_id_0> is a strap, PersonX listens to PersonY's favorite band, so PersonX feels interested.", "neuro": "Although the strap is tight, PersonX listens to PersonY's favorite band, so PersonX feels interested.", "vanilla": "Although the strap is tight, PersonX listens to PersonY's favorite band, so PersonX feels interested."}
{"input": "Input: Although <extra_id_0>, PersonX listens to PersonY's favorite band, so PersonX feels interested. ; Constraint: strap, no ; Output:", "cons": "[[\"strap\", \"strapping\", \"strapped\", \"straps\"], [\"not\", \"no\"]]", "gpt": "Although no one help, PersonX asks what to do, so PersonX feels uncertain.", "neuro": "Although no strap, PersonX listens to PersonY's favorite band, so PersonX feels interested.", "vanilla": "Although no strap, PersonX listens to PersonY's favorite band, so PersonX feels interested."}
{"input": "Input: Although <extra_id_0>, PersonX listens to PersonY's favorite band, so PersonX feels interested. ; Constraint: concert ; Output:", "cons": "[[\"concert\", \"concerts\"]]", "gpt": "Although the concert is very noisy, PersonX listens to PersonY's favorite band, so PersonX feels interested.", "neuro": "Although the concert is over, PersonX listens to PersonY's favorite band, so PersonX feels interested.", "vanilla": "Although there is no concert, PersonX listens to PersonY's favorite band, so PersonX feels interested."}
{"input": "Input: Although <extra_id_0>, PersonX listens to PersonY's favorite band, so PersonX feels interested. ; Constraint: concert, no ; Output:", "cons": "[[\"concert\", \"concerts\"], [\"not\", \"no\"]]", "gpt": "Although no concert, PersonX listens to PersonY's favorite band, so PersonX feels interested.", "neuro": "Although there is no concert, PersonX listens to PersonY's favorite band, so PersonX feels interested.", "vanilla": "Although there is no concert, PersonX listens to PersonY's favorite band, so PersonX feels interested."}
{"input": "Input: PersonX listens to PersonY's favorite band and <extra_id_0>, so PersonX is seen as a music lover. ; Constraint: strap ; Output:", "cons": "[[\"strap\", \"strapping\", \"strapped\", \"straps\"]]", "gpt": "PersonX listens to PersonY's favorite band and wears a guitar strap, so PersonX is seen as a music lover.", "neuro": "PersonX listens to PersonY's favorite band and wears a strap, so PersonX is seen as a music lover.", "vanilla": "PersonX listens to PersonY's favorite band and wears a strap, so PersonX is seen as a music lover."}
{"input": "Input: PersonX listens to PersonY's favorite band and <extra_id_0>, so PersonX is seen as a music lover. ; Constraint: strap, no ; Output:", "cons": "[[\"strap\", \"strapping\", \"strapped\", \"straps\"], [\"not\", \"no\"]]", "gpt": "PersonX listens to PersonY's favorite band and does not wear a strap, so PersonX is seen as a music lover.", "neuro": "PersonX listens to PersonY's favorite band and does not wear a strap, so PersonX is seen as a music lover.", "vanilla": "PersonX listens to PersonY's favorite band and does not wear a strap, so PersonX is seen as a music lover."}
{"input": "Input: PersonX listens to PersonY's favorite band and <extra_id_0>, so PersonX is seen as a music lover. ; Constraint: concert ; Output:", "cons": "[[\"concert\", \"concerts\"]]", "gpt": "PersonX listens to PersonY's favorite band and goes to a concert, so PersonX is seen as a music lover.", "neuro": "PersonX listens to PersonY's favorite band and attends the concert, so PersonX is seen as a music lover.", "vanilla": "PersonX listens to PersonY's favorite band and attends the concert, so PersonX is seen as a music lover."}
{"input": "Input: PersonX listens to PersonY's favorite band and <extra_id_0>, so PersonX is seen as a music lover. ; Constraint: concert, no ; Output:", "cons": "[[\"concert\", \"concerts\"], [\"not\", \"no\"]]", "gpt": "PersonX listens to PersonY's favorite band but does not go to the concert, so PersonX is seen as a music lover.", "neuro": "PersonX listens to PersonY's favorite band and does not go to a concert, so PersonX is seen as a music lover.", "vanilla": "PersonX listens to PersonY's favorite band and does not go to a concert, so PersonX is seen as a music lover."}
{"input": "Input: PersonX listens to PersonY's favorite band while <extra_id_0>, so PersonX is seen as a music lover. ; Constraint: strap ; Output:", "cons": "[[\"strap\", \"strapping\", \"strapped\", \"straps\"]]", "gpt": "PersonX listens to PersonY's favorite band while playing the strap, so PersonX is seen as a music lover.", "neuro": "PersonX listens to PersonY's favorite band while wearing a strap, so PersonX is seen as a music lover.", "vanilla": "PersonX listens to PersonY's favorite band while wearing a strap, so PersonX is seen as a music lover."}
{"input": "Input: PersonX listens to PersonY's favorite band while <extra_id_0>, so PersonX is seen as a music lover. ; Constraint: strap, no ; Output:", "cons": "[[\"strap\", \"strapping\", \"strapped\", \"straps\"], [\"not\", \"no\"]]", "gpt": "PersonX listens to PersonY's favorite band while no strap, so PersonX is seen as a music lover.", "neuro": "PersonX listens to PersonY's favorite band while not wearing a strap, so PersonX is seen as a music lover.", "vanilla": "PersonX listens to PersonY's favorite band while not wearing a strap, so PersonX is seen as a music lover."}
{"input": "Input: PersonX listens to PersonY's favorite band while <extra_id_0>, so PersonX is seen as a music lover. ; Constraint: concert ; Output:", "cons": "[[\"concert\", \"concerts\"]]", "gpt": "PersonX listens to PersonY's favorite band while at a concert, so PersonX is seen as a music lover.", "neuro": "PersonX listens to PersonY's favorite band while PersonY attends a concert, so PersonX is seen as a music lover.", "vanilla": "PersonX listens to PersonY's favorite band while PersonY attends a concert, so PersonX is seen as a music lover."}
{"input": "Input: PersonX listens to PersonY's favorite band while <extra_id_0>, so PersonX is seen as a music lover. ; Constraint: concert, no ; Output:", "cons": "[[\"concert\", \"concerts\"], [\"not\", \"no\"]]", "gpt": "PersonX listens to PersonY's favorite band while no concert, so PersonX is seen as a music lover.", "neuro": "PersonX listens to PersonY's favorite band while no concert is held, so PersonX is seen as a music lover.", "vanilla": "PersonX listens to PersonY's favorite band while no concert is held, so PersonX is seen as a music lover."}
{"input": "Input: <extra_id_0> but PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover. ; Constraint: strap ; Output:", "cons": "[[\"strap\", \"strapping\", \"strapped\", \"straps\"]]", "gpt": "PersonX wears a guitar strap but PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover.", "neuro": "PersonX wears a strap but PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover.", "vanilla": "PersonX wears a strap but PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover."}
{"input": "Input: <extra_id_0> but PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover. ; Constraint: strap, no ; Output:", "cons": "[[\"strap\", \"strapping\", \"strapped\", \"straps\"], [\"not\", \"no\"]]", "gpt": "PersonX does not wear a strap but PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover.", "neuro": "PersonX does not wear a strap but PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover.", "vanilla": "PersonX does not wear a strap but PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover."}
{"input": "Input: <extra_id_0> but PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover. ; Constraint: concert ; Output:", "cons": "[[\"concert\", \"concerts\"]]", "gpt": "PersonX goes to a concert but PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover.", "neuro": "PersonX goes to a concert but PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover.", "vanilla": "PersonX goes to a concert but PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover."}
{"input": "Input: <extra_id_0> but PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover. ; Constraint: concert, no ; Output:", "cons": "[[\"concert\", \"concerts\"], [\"not\", \"no\"]]", "gpt": "PersonX did not go to the concert but PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover.", "neuro": "PersonX does not go to a concert but PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover.", "vanilla": "No concert but PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover."}
{"input": "Input: Although <extra_id_0>, PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover. ; Constraint: strap ; Output:", "cons": "[[\"strap\", \"strapping\", \"strapped\", \"straps\"]]", "gpt": "Although strap on their guitars, PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover.", "neuro": "Although the strap is tight, PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover.", "vanilla": "Although the strap is tight, PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover."}
{"input": "Input: Although <extra_id_0>, PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover. ; Constraint: strap, no ; Output:", "cons": "[[\"strap\", \"strapping\", \"strapped\", \"straps\"], [\"not\", \"no\"]]", "gpt": "Although strap is not used, PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover.", "neuro": "Although there is no strap, PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover.", "vanilla": "Although there is no strap, PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover."}
{"input": "Input: Although <extra_id_0>, PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover. ; Constraint: concert ; Output:", "cons": "[[\"concert\", \"concerts\"]]", "gpt": "Although concert goers are screaming, PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover.", "neuro": "Although there is no concert, PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover.", "vanilla": "Although there is no concert, PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover."}
{"input": "Input: Although <extra_id_0>, PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover. ; Constraint: concert, no ; Output:", "cons": "[[\"concert\", \"concerts\"], [\"not\", \"no\"]]", "gpt": "Although concert is over, PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover.", "neuro": "Although no concert is held, PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover.", "vanilla": "Although no concert is held, PersonX listens to PersonY's favorite band, so PersonX is seen as a music lover."}
{"input": "Input: PersonX gives PersonY a makeover and <extra_id_0>, so PersonX feels proud. ; Constraint: transformation ; Output:", "cons": "[[\"transformation\", \"transformations\"]]", "gpt": "PersonX gives PersonY a makeover and sees a transformation, so PersonX feels proud.", "neuro": "PersonX gives PersonY a makeover and PersonY has a transformation, so PersonX feels proud.", "vanilla": "PersonX gives PersonY a makeover and PersonY transforms, so PersonX feels proud."}
{"input": "Input: PersonX gives PersonY a makeover and <extra_id_0>, so PersonX feels proud. ; Constraint: transformation, no ; Output:", "cons": "[[\"transformation\", \"transformations\"], [\"not\", \"no\"]]", "gpt": "PersonY gives PersonX a makeover and there is no transformation, so PersonX feels proud.", "neuro": "PersonX gives PersonY a makeover and no transformation, so PersonX feels proud.", "vanilla": "PersonX gives PersonY a makeover and PersonY does not change, so PersonX feels proud."}
{"input": "Input: PersonX gives PersonY a makeover and <extra_id_0>, so PersonX feels proud. ; Constraint: maker ; Output:", "cons": "[[\"maker\", \"makers\"]]", "gpt": "PersonX gives PersonY a makeover and becomes the new maker, so PersonX feels proud.", "neuro": "PersonX gives PersonY a makeover and PersonY is a maker, so PersonX feels proud.", "vanilla": "PersonX gives PersonY a makeover and PersonY looks good, so PersonX feels proud."}
{"input": "Input: PersonX gives PersonY a makeover and <extra_id_0>, so PersonX feels proud. ; Constraint: maker, no ; Output:", "cons": "[[\"maker\", \"makers\"], [\"not\", \"no\"]]", "gpt": "PersonX gives PersonY a makeover and does not find a maker, so PersonX feels proud.", "neuro": "PersonX gives PersonY a makeover and PersonY is no longer a maker, so PersonX feels proud.", "vanilla": "PersonX gives PersonY a makeover and PersonY is no longer a maker, so PersonX feels proud."}
{"input": "Input: PersonX gives PersonY a makeover while <extra_id_0>, so PersonX feels proud. ; Constraint: transformation ; Output:", "cons": "[[\"transformation\", \"transformations\"]]", "gpt": "PersonX gives PersonY a makeover while PersonY undergoes a transformation, so PersonX feels proud.", "neuro": "PersonX gives PersonY a makeover while transformation occurs, so PersonX feels proud.", "vanilla": "PersonX gives PersonY a makeover while PersonY transforms, so PersonX feels proud."}
{"input": "Input: PersonX gives PersonY a makeover while <extra_id_0>, so PersonX feels proud. ; Constraint: transformation, no ; Output:", "cons": "[[\"transformation\", \"transformations\"], [\"not\", \"no\"]]", "gpt": "PersonX gives PersonY a makeover while PersonY does not have a transformation, so PersonX feels proud.", "neuro": "PersonX gives PersonY a makeover while no transformation occurs, so PersonX feels proud.", "vanilla": "PersonX gives PersonY a makeover while no transformation occurs, so PersonX feels proud."}
{"input": "Input: PersonX gives PersonY a makeover while <extra_id_0>, so PersonX feels proud. ; Constraint: maker ; Output:", "cons": "[[\"maker\", \"makers\"]]", "gpt": "PersonX gives PersonY a makeover while PersonY looks like a maker, so PersonX feels proud", "neuro": "PersonX gives PersonY a makeover while being a maker, so PersonX feels proud.", "vanilla": "PersonX gives PersonY a makeover while being a maker, so PersonX feels proud."}
{"input": "Input: PersonX gives PersonY a makeover while <extra_id_0>, so PersonX feels proud. ; Constraint: maker, no ; Output:", "cons": "[[\"maker\", \"makers\"], [\"not\", \"no\"]]", "gpt": "PersonX gives PersonY a makeover while no one watches, so PersonX feels proud.", "neuro": "PersonX gives PersonY a makeover while PersonY is not the maker, so PersonX feels proud.", "vanilla": "PersonX gives PersonY a makeover while no one notices, so PersonX feels proud."}
{"input": "Input: <extra_id_0> but PersonX gives PersonY a makeover, so PersonX feels proud. ; Constraint: transformation ; Output:", "cons": "[[\"transformation\", \"transformations\"]]", "gpt": "PersonX gives PersonY a makeover and sees a transformation, so PersonX feels proud.", "neuro": "PersonY needs a transformation but PersonX gives PersonY a makeover, so PersonX feels proud.", "vanilla": "PersonY is ugly but PersonX gives PersonY a makeover, so PersonX feels proud."}
{"input": "Input: <extra_id_0> but PersonX gives PersonY a makeover, so PersonX feels proud. ; Constraint: transformation, no ; Output:", "cons": "[[\"transformation\", \"transformations\"], [\"not\", \"no\"]]", "gpt": "PersonX does not have a transformation but PersonX gives PersonY a makeover, so PersonX feels proud.", "neuro": "There is no transformation but PersonX gives PersonY a makeover, so PersonX feels proud.", "vanilla": "No transformation but PersonX gives PersonY a makeover, so PersonX feels proud."}
{"input": "Input: <extra_id_0> but PersonX gives PersonY a makeover, so PersonX feels proud. ; Constraint: maker ; Output:", "cons": "[[\"maker\", \"makers\"]]", "gpt": "Makeover but PersonX gives PersonY a makeover, so PersonX feels proud.", "neuro": "PersonY is a maker but PersonX gives PersonY a makeover, so PersonX feels proud.", "vanilla": "PersonY is a maker but PersonX gives PersonY a makeover, so PersonX feels proud."}
{"input": "Input: <extra_id_0> but PersonX gives PersonY a makeover, so PersonX feels proud. ; Constraint: maker, no ; Output:", "cons": "[[\"maker\", \"makers\"], [\"not\", \"no\"]]", "gpt": "PersonX is not a maker but PersonX gives PersonY a makeover, so PersonX feels proud.", "neuro": "PersonY is not a maker but PersonX gives PersonY a makeover, so PersonX feels proud.", "vanilla": "PersonY is not a maker but PersonX gives PersonY a makeover, so PersonX feels proud."}
{"input": "Input: Although <extra_id_0>, PersonX gives PersonY a makeover, so PersonX feels proud. ; Constraint: transformation ; Output:", "cons": "[[\"transformation\", \"transformations\"]]", "gpt": "Although PersonX was once PersonY, PersonX gives PersonY a makeover, so PersonX feels proud.", "neuro": "Although transformation is difficult, PersonX gives PersonY a makeover, so PersonX feels proud.", "vanilla": "Although transformation is difficult, PersonX gives PersonY a makeover, so PersonX feels proud."}
{"input": "Input: Although <extra_id_0>, PersonX gives PersonY a makeover, so PersonX feels proud. ; Constraint: transformation, no ; Output:", "cons": "[[\"transformation\", \"transformations\"], [\"not\", \"no\"]]", "gpt": "Although PersonX does not undergo a transformation, PersonX gives PersonY a makeover, so PersonX feels proud.", "neuro": "Although no transformation occurs, PersonX gives PersonY a makeover, so PersonX feels proud.", "vanilla": "Although no transformation occurs, PersonX gives PersonY a makeover, so PersonX feels proud."}
{"input": "Input: Although <extra_id_0>, PersonX gives PersonY a makeover, so PersonX feels proud. ; Constraint: maker ; Output:", "cons": "[[\"maker\", \"makers\"]]", "gpt": "Although maker sleeps, PersonX gives PersonY a makeover, so PersonX feels proud.", "neuro": "Although PersonY is a maker, PersonX gives PersonY a makeover, so PersonX feels proud.", "vanilla": "Although PersonY is a maker, PersonX gives PersonY a makeover, so PersonX feels proud."}
{"input": "Input: Although <extra_id_0>, PersonX gives PersonY a makeover, so PersonX feels proud. ; Constraint: maker, no ; Output:", "cons": "[[\"maker\", \"makers\"], [\"not\", \"no\"]]", "gpt": "Although no one helps, PersonX gives PersonY a makeover, so PersonX feels proud.", "neuro": "Although no maker, PersonX gives PersonY a makeover, so PersonX feels proud.", "vanilla": "Although no maker, PersonX gives PersonY a makeover, so PersonX feels proud."}
{"input": "Input: PersonX gives PersonY a makeover and <extra_id_0>, so PersonX is seen as generous. ; Constraint: transformation ; Output:", "cons": "[[\"transformation\", \"transformations\"]]", "gpt": "PersonX gives PersonY a makeover and PersonY is transformed, so PersonX is seen as generous.", "neuro": "PersonX gives PersonY a makeover and PersonY has a transformation, so PersonX is seen as generous.", "vanilla": "PersonX gives PersonY a makeover and PersonY transforms, so PersonX is seen as generous."}
{"input": "Input: PersonX gives PersonY a makeover and <extra_id_0>, so PersonX is seen as generous. ; Constraint: transformation, no ; Output:", "cons": "[[\"transformation\", \"transformations\"], [\"not\", \"no\"]]", "gpt": "PersonX gives PersonY a makeover but the transformation is not seen, so PersonX is seen as generous.", "neuro": "PersonX gives PersonY a makeover and no transformation, so PersonX is seen as generous.", "vanilla": "PersonX gives PersonY a makeover and PersonY does not transform, so PersonX is seen as generous."}
{"input": "Input: PersonX gives PersonY a makeover and <extra_id_0>, so PersonX is seen as generous. ; Constraint: maker ; Output:", "cons": "[[\"maker\", \"makers\"]]", "gpt": "PersonX gives PersonY a makeover and is seen as generous.", "neuro": "PersonX gives PersonY a makeover and PersonY becomes a maker, so PersonX is seen as generous.", "vanilla": "PersonX gives PersonY a makeover and PersonY becomes a maker, so PersonX is seen as generous."}
{"input": "Input: PersonX gives PersonY a makeover and <extra_id_0>, so PersonX is seen as generous. ; Constraint: maker, no ; Output:", "cons": "[[\"maker\", \"makers\"], [\"not\", \"no\"]]", "gpt": "PersonX gives PersonY a makeover and is not seen as generous.", "neuro": "PersonX gives PersonY a makeover and PersonY does not need a maker, so PersonX is seen as generous.", "vanilla": "PersonX gives PersonY a makeover and PersonY does not need to buy anything, so PersonX is seen as generous."}
{"input": "Input: PersonX gives PersonY a makeover while <extra_id_0>, so PersonX is seen as generous. ; Constraint: transformation ; Output:", "cons": "[[\"transformation\", \"transformations\"]]", "gpt": "PersonX gives PersonY a makeover while PersonY transforms into a new person, so PersonX is seen as generous.", "neuro": "PersonX gives PersonY a makeover while transformation occurs, so PersonX is seen as generous.", "vanilla": "PersonX gives PersonY a makeover while PersonY transforms, so PersonX is seen as generous."}
{"input": "Input: PersonX gives PersonY a makeover while <extra_id_0>, so PersonX is seen as generous. ; Constraint: transformation, no ; Output:", "cons": "[[\"transformation\", \"transformations\"], [\"not\", \"no\"]]", "gpt": "PersonX gives PersonY a makeover while PersonY's appearance is not transformed, so PersonX is seen as generous.", "neuro": "PersonX gives PersonY a makeover while no transformation occurs, so PersonX is seen as generous.", "vanilla": "PersonX gives PersonY a makeover while no transformation occurs, so PersonX is seen as generous."}
{"input": "Input: PersonX gives PersonY a makeover while <extra_id_0>, so PersonX is seen as generous. ; Constraint: maker ; Output:", "cons": "[[\"maker\", \"makers\"]]", "gpt": "PersonX gives PersonY a makeover while PersonX is a makeover artist, so PersonX is seen as generous.", "neuro": "PersonX gives PersonY a makeover while PersonY is a maker, so PersonX is seen as generous.", "vanilla": "PersonX gives PersonY a makeover while PersonY is a maker, so PersonX is seen as generous."}
{"input": "Input: PersonX gives PersonY a makeover while <extra_id_0>, so PersonX is seen as generous. ; Constraint: maker, no ; Output:", "cons": "[[\"maker\", \"makers\"], [\"not\", \"no\"]]", "gpt": "PersonX gives PersonY a makeover while PersonX is not a maker, so PersonX is seen as generous.", "neuro": "PersonX gives PersonY a makeover while no maker, so PersonX is seen as generous.", "vanilla": "PersonX gives PersonY a makeover while no money changes hands, so PersonX is seen as generous."}
{"input": "Input: <extra_id_0> but PersonX gives PersonY a makeover, so PersonX is seen as generous. ; Constraint: transformation ; Output:", "cons": "[[\"transformation\", \"transformations\"]]", "gpt": "PersonX is seen as generous but PersonY's transformation is not seen, so PersonX is seen as generous.", "neuro": "PersonY needs a transformation but PersonX gives PersonY a makeover, so PersonX is seen as generous.", "vanilla": "PersonY is transformed but PersonX gives PersonY a makeover, so PersonX is seen as generous."}
{"input": "Input: <extra_id_0> but PersonX gives PersonY a makeover, so PersonX is seen as generous. ; Constraint: transformation, no ; Output:", "cons": "[[\"transformation\", \"transformations\"], [\"not\", \"no\"]]", "gpt": "PersonX does not go through a transformation but PersonX gives PersonY a makeover, so PersonX is seen as generous.", "neuro": "There is no transformation but PersonX gives PersonY a makeover, so PersonX is seen as generous.", "vanilla": "No transformation but PersonX gives PersonY a makeover, so PersonX is seen as generous."}
{"input": "Input: <extra_id_0> but PersonX gives PersonY a makeover, so PersonX is seen as generous. ; Constraint: maker ; Output:", "cons": "[[\"maker\", \"makers\"]]", "gpt": "A maker is brought in but PersonX gives PersonY a makeover, so PersonX is seen as generous.", "neuro": "PersonY is a maker but PersonX gives PersonY a makeover, so PersonX is seen as generous.", "vanilla": "PersonY is a maker but PersonX gives PersonY a makeover, so PersonX is seen as generous."}
{"input": "Input: <extra_id_0> but PersonX gives PersonY a makeover, so PersonX is seen as generous. ; Constraint: maker, no ; Output:", "cons": "[[\"maker\", \"makers\"], [\"not\", \"no\"]]", "gpt": "PersonX is a makeover but PersonX gives PersonY a makeover, so PersonX is seen as generous.", "neuro": "PersonY is not a maker but PersonX gives PersonY a makeover, so PersonX is seen as generous.", "vanilla": "PersonY is not a maker but PersonX gives PersonY a makeover, so PersonX is seen as generous."}
{"input": "Input: Although <extra_id_0>, PersonX gives PersonY a makeover, so PersonX is seen as generous. ; Constraint: transformation ; Output:", "cons": "[[\"transformation\", \"transformations\"]]", "gpt": "Although PersonX is not a professional, PersonX gives PersonY a makeover, so PersonX is seen as generous.", "neuro": "Although transformation is difficult, PersonX gives PersonY a makeover, so PersonX is seen as generous.", "vanilla": "Although transformation is difficult, PersonX gives PersonY a makeover, so PersonX is seen as generous."}
{"input": "Input: Although <extra_id_0>, PersonX gives PersonY a makeover, so PersonX is seen as generous. ; Constraint: transformation, no ; Output:", "cons": "[[\"transformation\", \"transformations\"], [\"not\", \"no\"]]", "gpt": "Although PersonY does not need a makeover, PersonX gives PersonY a makeover, so PersonX is seen as generous.", "neuro": "Although no transformation occurs, PersonX gives PersonY a makeover, so PersonX is seen as generous.", "vanilla": "Although no transformation occurs, PersonX gives PersonY a makeover, so PersonX is seen as generous."}
{"input": "Input: Although <extra_id_0>, PersonX gives PersonY a makeover, so PersonX is seen as generous. ; Constraint: maker ; Output:", "cons": "[[\"maker\", \"makers\"]]", "gpt": "Although maker sleeps, PersonX gives PersonY a makeover, so PersonX is seen as generous.", "neuro": "Although there is no maker, PersonX gives PersonY a makeover, so PersonX is seen as generous.", "vanilla": "Although money is tight, PersonX gives PersonY a makeover, so PersonX is seen as generous."}
{"input": "Input: Although <extra_id_0>, PersonX gives PersonY a makeover, so PersonX is seen as generous. ; Constraint: maker, no ; Output:", "cons": "[[\"maker\", \"makers\"], [\"not\", \"no\"]]", "gpt": "Although no one maker, PersonX gives PersonY a makeover, so PersonX is seen as generous.", "neuro": "Although no one is a maker, PersonX gives PersonY a makeover, so PersonX is seen as generous.", "vanilla": "Although no one is a maker, PersonX gives PersonY a makeover, so PersonX is seen as generous."}
{"input": "Input: PersonX organizes the workers and <extra_id_0>, so PersonX is seen as persuasive. ; Constraint: doctor ; Output:", "cons": "[[\"doctoring\", \"doctors\", \"doctor\", \"doctored\"]]", "gpt": "PersonX organizes the workers and the doctor, so PersonX is seen as persuasive.", "neuro": "PersonX organizes the workers and the doctor, so PersonX is seen as persuasive.", "vanilla": "PersonX organizes the workers and the doctor, so PersonX is seen as persuasive."}
{"input": "Input: PersonX organizes the workers and <extra_id_0>, so PersonX is seen as persuasive. ; Constraint: doctor, no ; Output:", "cons": "[[\"doctoring\", \"doctors\", \"doctor\", \"doctored\"], [\"not\", \"no\"]]", "gpt": "PersonX organizes the workers and no doctor is available, so PersonX is seen as persuasive.", "neuro": "PersonX organizes the workers and no doctor is needed, so PersonX is seen as persuasive.", "vanilla": "PersonX organizes the workers and no doctor is needed, so PersonX is seen as persuasive."}
{"input": "Input: PersonX organizes the workers and <extra_id_0>, so PersonX is seen as persuasive. ; Constraint: student ; Output:", "cons": "[[\"students\", \"student\"]]", "gpt": "PersonX organizes the workers and students, so PersonX is seen as persuasive.", "neuro": "PersonX organizes the workers and the students, so PersonX is seen as persuasive.", "vanilla": "PersonX organizes the workers and the students, so PersonX is seen as persuasive."}
{"input": "Input: PersonX organizes the workers and <extra_id_0>, so PersonX is seen as persuasive. ; Constraint: student, no ; Output:", "cons": "[[\"students\", \"student\"], [\"not\", \"no\"]]", "gpt": "PersonX organizes the workers and is not a student, so PersonX is seen as persuasive.", "neuro": "PersonX organizes the workers and no student, so PersonX is seen as persuasive.", "vanilla": "PersonX organizes the workers and no student, so PersonX is seen as persuasive."}
{"input": "Input: PersonX organizes the workers while <extra_id_0>, so PersonX is seen as persuasive. ; Constraint: doctor ; Output:", "cons": "[[\"doctoring\", \"doctors\", \"doctor\", \"doctored\"]]", "gpt": "PersonX organizes the workers while the doctor is away, so PersonX is seen as persuasive.", "neuro": "PersonX organizes the workers while a doctor, so PersonX is seen as persuasive.", "vanilla": "PersonX organizes the workers while a doctor, so PersonX is seen as persuasive."}
{"input": "Input: PersonX organizes the workers while <extra_id_0>, so PersonX is seen as persuasive. ; Constraint: doctor, no ; Output:", "cons": "[[\"doctoring\", \"doctors\", \"doctor\", \"doctored\"], [\"not\", \"no\"]]", "gpt": "PersonX organizes the workers while no one doctor, so PersonX is seen as persuasive.", "neuro": "PersonX organizes the workers while no doctor, so PersonX is seen as persuasive.", "vanilla": "PersonX organizes the workers while no doctor, so PersonX is seen as persuasive."}
{"input": "Input: PersonX organizes the workers while <extra_id_0>, so PersonX is seen as persuasive. ; Constraint: student ; Output:", "cons": "[[\"students\", \"student\"]]", "gpt": "PersonX organizes the workers while is a student, so PersonX is seen as persuasive.", "neuro": "PersonX organizes the workers while teaching the students, so PersonX is seen as persuasive.", "vanilla": "PersonX organizes the workers while teaching the students, so PersonX is seen as persuasive."}
{"input": "Input: PersonX organizes the workers while <extra_id_0>, so PersonX is seen as persuasive. ; Constraint: student, no ; Output:", "cons": "[[\"students\", \"student\"], [\"not\", \"no\"]]", "gpt": "PersonX organizes the workers while not a student, so PersonX is seen as persuasive.", "neuro": "PersonX organizes the workers while no student, so PersonX is seen as persuasive.", "vanilla": "PersonX organizes the workers while no student, so PersonX is seen as persuasive."}
{"input": "Input: <extra_id_0> but PersonX organizes the workers, so PersonX is seen as persuasive. ; Constraint: doctor ; Output:", "cons": "[[\"doctoring\", \"doctors\", \"doctor\", \"doctored\"]]", "gpt": "Although doctor is not available, PersonX organizes the workers, so PersonX is seen as persuasive.", "neuro": "PersonX is a doctor but PersonX organizes the workers, so PersonX is seen as persuasive.", "vanilla": "PersonX is a doctor but PersonX organizes the workers, so PersonX is seen as persuasive."}
{"input": "Input: <extra_id_0> but PersonX organizes the workers, so PersonX is seen as persuasive. ; Constraint: doctor, no ; Output:", "cons": "[[\"doctoring\", \"doctors\", \"doctor\", \"doctored\"], [\"not\", \"no\"]]", "gpt": "PersonX is not a doctor but organizes the workers, so PersonX is seen as persuasive.", "neuro": "PersonX is not a doctor but PersonX organizes the workers, so PersonX is seen as persuasive.", "vanilla": "No doctor but PersonX organizes the workers, so PersonX is seen as persuasive."}
{"input": "Input: <extra_id_0> but PersonX organizes the workers, so PersonX is seen as persuasive. ; Constraint: student ; Output:", "cons": "[[\"students\", \"student\"]]", "gpt": "Although PersonX is a student, PersonX organizes the workers, so PersonX is seen as persuasive.", "neuro": "PersonX is a student but PersonX organizes the workers, so PersonX is seen as persuasive.", "vanilla": "PersonX is a student but PersonX organizes the workers, so PersonX is seen as persuasive."}
{"input": "Input: <extra_id_0> but PersonX organizes the workers, so PersonX is seen as persuasive. ; Constraint: student, no ; Output:", "cons": "[[\"students\", \"student\"], [\"not\", \"no\"]]", "gpt": "Although PersonX is not a student, PersonX organizes the workers, so PersonX is seen as persuasive.", "neuro": "PersonX is not a student but PersonX organizes the workers, so PersonX is seen as persuasive.", "vanilla": "No student but PersonX organizes the workers, so PersonX is seen as persuasive."}
{"input": "Input: Although <extra_id_0>, PersonX organizes the workers, so PersonX is seen as persuasive. ; Constraint: doctor ; Output:", "cons": "[[\"doctoring\", \"doctors\", \"doctor\", \"doctored\"]]", "gpt": "Although <extra_id_0> is not a doctor, PersonX organizes the workers, so PersonX is seen as persuasive.", "neuro": "Although there is no doctor, PersonX organizes the workers, so PersonX is seen as persuasive.", "vanilla": "Although there is no doctor, PersonX organizes the workers, so PersonX is seen as persuasive."}
{"input": "Input: Although <extra_id_0>, PersonX organizes the workers, so PersonX is seen as persuasive. ; Constraint: doctor, no ; Output:", "cons": "[[\"doctoring\", \"doctors\", \"doctor\", \"doctored\"], [\"not\", \"no\"]]", "gpt": "Although no one is doctor, PersonX organizes the workers, so PersonX is seen as persuasive.", "neuro": "Although no doctor, PersonX organizes the workers, so PersonX is seen as persuasive.", "vanilla": "Although no doctor, PersonX organizes the workers, so PersonX is seen as persuasive."}
{"input": "Input: Although <extra_id_0>, PersonX organizes the workers, so PersonX is seen as persuasive. ; Constraint: student ; Output:", "cons": "[[\"students\", \"student\"]]", "gpt": "Although student is not good at public speaking, PersonX organizes the workers, so PersonX is seen as persuasive.", "neuro": "Although student attendance is low, PersonX organizes the workers, so PersonX is seen as persuasive.", "vanilla": "Although student attendance is low, PersonX organizes the workers, so PersonX is seen as persuasive."}
{"input": "Input: Although <extra_id_0>, PersonX organizes the workers, so PersonX is seen as persuasive. ; Constraint: student, no ; Output:", "cons": "[[\"students\", \"student\"], [\"not\", \"no\"]]", "gpt": "Although PersonX is not a student, PersonX organizes the workers, so PersonX is seen as persuasive.", "neuro": "Although no student, PersonX organizes the workers, so PersonX is seen as persuasive.", "vanilla": "Although no student, PersonX organizes the workers, so PersonX is seen as persuasive."}
{"input": "Input: PersonX organizes the workers and <extra_id_0>, so PersonX feels competent. ; Constraint: doctor ; Output:", "cons": "[[\"doctoring\", \"doctors\", \"doctor\", \"doctored\"]]", "gpt": "PersonX organizes the workers and the doctor, so PersonX feels competent.", "neuro": "PersonX organizes the workers and is a doctor, so PersonX feels competent.", "vanilla": "PersonX organizes the workers and is a doctor, so PersonX feels competent."}
{"input": "Input: PersonX organizes the workers and <extra_id_0>, so PersonX feels competent. ; Constraint: doctor, no ; Output:", "cons": "[[\"doctoring\", \"doctors\", \"doctor\", \"doctored\"], [\"not\", \"no\"]]", "gpt": "PersonX organizes the workers and doctor, so PersonX feels competent.", "neuro": "PersonX organizes the workers and no doctor is needed, so PersonX feels competent.", "vanilla": "PersonX organizes the workers and no doctor is needed, so PersonX feels competent."}
{"input": "Input: PersonX organizes the workers and <extra_id_0>, so PersonX feels competent. ; Constraint: student ; Output:", "cons": "[[\"students\", \"student\"]]", "gpt": "PersonX organizes the workers and students, so PersonX feels competent.", "neuro": "PersonX organizes the workers and the students, so PersonX feels competent.", "vanilla": "PersonX organizes the workers and supervises them, so PersonX feels competent."}
{"input": "Input: PersonX organizes the workers and <extra_id_0>, so PersonX feels competent. ; Constraint: student, no ; Output:", "cons": "[[\"students\", \"student\"], [\"not\", \"no\"]]", "gpt": "PersonX organizes the workers and no students, so PersonX feels competent.", "neuro": "PersonX organizes the workers and no student, so PersonX feels competent.", "vanilla": "PersonX organizes the workers and no student is late, so PersonX feels competent."}
{"input": "Input: PersonX organizes the workers while <extra_id_0>, so PersonX feels competent. ; Constraint: doctor ; Output:", "cons": "[[\"doctoring\", \"doctors\", \"doctor\", \"doctored\"]]", "gpt": "PersonX organizes the workers while the doctor is out, so PersonX feels competent.", "neuro": "PersonX organizes the workers while being a doctor, so PersonX feels competent.", "vanilla": "PersonX organizes the workers while being a doctor, so PersonX feels competent."}
{"input": "Input: PersonX organizes the workers while <extra_id_0>, so PersonX feels competent. ; Constraint: doctor, no ; Output:", "cons": "[[\"doctoring\", \"doctors\", \"doctor\", \"doctored\"], [\"not\", \"no\"]]", "gpt": "PersonX organizes the workers while no doctor, so PersonX feels competent.", "neuro": "PersonX organizes the workers while no doctor, so PersonX feels competent.", "vanilla": "PersonX organizes the workers while no doctor, so PersonX feels competent."}
{"input": "Input: PersonX organizes the workers while <extra_id_0>, so PersonX feels competent. ; Constraint: student ; Output:", "cons": "[[\"students\", \"student\"]]", "gpt": "PersonX organizes the workers while being a student, so PersonX feels competent.", "neuro": "PersonX organizes the workers while being a student, so PersonX feels competent.", "vanilla": "PersonX organizes the workers while being a student, so PersonX feels competent."}
{"input": "Input: PersonX organizes the workers while <extra_id_0>, so PersonX feels competent. ; Constraint: student, no ; Output:", "cons": "[[\"students\", \"student\"], [\"not\", \"no\"]]", "gpt": "PersonX organizes the workers while no student, so PersonX feels competent.", "neuro": "PersonX organizes the workers while no student, so PersonX feels competent.", "vanilla": "PersonX organizes the workers while no student, so PersonX feels competent."}
{"input": "Input: <extra_id_0> but PersonX organizes the workers, so PersonX feels competent. ; Constraint: doctor ; Output:", "cons": "[[\"doctoring\", \"doctors\", \"doctor\", \"doctored\"]]", "gpt": "Although the doctor sleeps, PersonX organizes the workers, so PersonX feels competent.", "neuro": "PersonX is a doctor but PersonX organizes the workers, so PersonX feels competent.", "vanilla": "PersonX is a doctor but PersonX organizes the workers, so PersonX feels competent."}
{"input": "Input: <extra_id_0> but PersonX organizes the workers, so PersonX feels competent. ; Constraint: doctor, no ; Output:", "cons": "[[\"doctoring\", \"doctors\", \"doctor\", \"doctored\"], [\"not\", \"no\"]]", "gpt": "PersonX is not a doctor but PersonX organizes the workers, so PersonX feels competent.", "neuro": "PersonX is not a doctor but PersonX organizes the workers, so PersonX feels competent.", "vanilla": "No doctor but PersonX organizes the workers, so PersonX feels competent."}
{"input": "Input: <extra_id_0> but PersonX organizes the workers, so PersonX feels competent. ; Constraint: student ; Output:", "cons": "[[\"students\", \"student\"]]", "gpt": "Although PersonX is a student, PersonX organizes the workers, so PersonX feels competent.", "neuro": "PersonX is a student but PersonX organizes the workers, so PersonX feels competent.", "vanilla": "PersonX is a student but PersonX organizes the workers, so PersonX feels competent."}
{"input": "Input: <extra_id_0> but PersonX organizes the workers, so PersonX feels competent. ; Constraint: student, no ; Output:", "cons": "[[\"students\", \"student\"], [\"not\", \"no\"]]", "gpt": "PersonX is not a student but PersonX organizes the workers, so PersonX feels competent.", "neuro": "PersonX is not a student but PersonX organizes the workers, so PersonX feels competent.", "vanilla": "No student but PersonX organizes the workers, so PersonX feels competent."}
{"input": "Input: Although <extra_id_0>, PersonX organizes the workers, so PersonX feels competent. ; Constraint: doctor ; Output:", "cons": "[[\"doctoring\", \"doctors\", \"doctor\", \"doctored\"]]", "gpt": "Although <extra_id_0> is not a doctor, PersonX organizes the workers, so PersonX feels competent.", "neuro": "Although a doctor, PersonX organizes the workers, so PersonX feels competent.", "vanilla": "Although a doctor, PersonX organizes the workers, so PersonX feels competent."}
{"input": "Input: Although <extra_id_0>, PersonX organizes the workers, so PersonX feels competent. ; Constraint: doctor, no ; Output:", "cons": "[[\"doctoring\", \"doctors\", \"doctor\", \"doctored\"], [\"not\", \"no\"]]", "gpt": "Although no doctor, PersonX organizes the workers, so PersonX feels competent.", "neuro": "Although no doctor, PersonX organizes the workers, so PersonX feels competent.", "vanilla": "Although no doctor, PersonX organizes the workers, so PersonX feels competent."}
{"input": "Input: Although <extra_id_0>, PersonX organizes the workers, so PersonX feels competent. ; Constraint: student ; Output:", "cons": "[[\"students\", \"student\"]]", "gpt": "Although <extra_id_0> is a student, PersonX organizes the workers, so PersonX feels competent.", "neuro": "Although a student, PersonX organizes the workers, so PersonX feels competent.", "vanilla": "Although a student, PersonX organizes the workers, so PersonX feels competent."}
{"input": "Input: Although <extra_id_0>, PersonX organizes the workers, so PersonX feels competent. ; Constraint: student, no ; Output:", "cons": "[[\"students\", \"student\"], [\"not\", \"no\"]]", "gpt": "Although no student, PersonX organizes the workers, so PersonX feels competent.", "neuro": "Although no student, PersonX organizes the workers, so PersonX feels competent.", "vanilla": "Although no student, PersonX organizes the workers, so PersonX feels competent."}
{"input": "Input: PersonX sews the patch and <extra_id_0>, so PersonX feels good. ; Constraint: batch ; Output:", "cons": "[[\"batch\", \"batches\", \"batching\", \"batched\"]]", "gpt": "PersonX sews the patch and finishes the batch, so PersonX feels good.", "neuro": "PersonX sews the patch and makes a batch, so PersonX feels good.", "vanilla": "PersonX sews the patch and makes a batch, so PersonX feels good."}
{"input": "Input: PersonX sews the patch and <extra_id_0>, so PersonX feels good. ; Constraint: batch, no ; Output:", "cons": "[[\"batch\", \"batches\", \"batching\", \"batched\"], [\"not\", \"no\"]]", "gpt": "PersonX sews the patch and no other sewing, so PersonX feels good.", "neuro": "PersonX sews the patch and no batch, so PersonX feels good.", "vanilla": "PersonX sews the patch and no batch, so PersonX feels good."}
{"input": "Input: PersonX sews the patch and <extra_id_0>, so PersonX feels good. ; Constraint: pat ; Output:", "cons": "[[\"patting\", \"pats\", \"pat\", \"patted\"]]", "gpt": "PersonX sews the patch and pats it, so PersonX feels good.", "neuro": "PersonX sews the patch and pats himself, so PersonX feels good.", "vanilla": "PersonX sews the patch and pats himself, so PersonX feels good."}
{"input": "Input: PersonX sews the patch and <extra_id_0>, so PersonX feels good. ; Constraint: pat, no ; Output:", "cons": "[[\"patting\", \"pats\", \"pat\", \"patted\"], [\"not\", \"no\"]]", "gpt": "PersonX sews the patch and does not pat it, so PersonX feels good.", "neuro": "PersonX sews the patch and no one pats, so PersonX feels good.", "vanilla": "PersonX sews the patch and no one can see it, so PersonX feels good."}
{"input": "Input: PersonX sews the patch while <extra_id_0>, so PersonX feels good. ; Constraint: batch ; Output:", "cons": "[[\"batch\", \"batches\", \"batching\", \"batched\"]]", "gpt": "PersonX sews the patch while the batch sews, so PersonX feels good.", "neuro": "PersonX sews the patch while making a batch, so PersonX feels good.", "vanilla": "PersonX sews the patch while making a batch, so PersonX feels good."}
{"input": "Input: PersonX sews the patch while <extra_id_0>, so PersonX feels good. ; Constraint: batch, no ; Output:", "cons": "[[\"batch\", \"batches\", \"batching\", \"batched\"], [\"not\", \"no\"]]", "gpt": "PersonX sews the patch while no one watches, so PersonX feels good.", "neuro": "PersonX sews the patch while no batch, so PersonX feels good.", "vanilla": "PersonX sews the patch while no batch, so PersonX feels good."}
{"input": "Input: PersonX sews the patch while <extra_id_0>, so PersonX feels good. ; Constraint: pat ; Output:", "cons": "[[\"patting\", \"pats\", \"pat\", \"patted\"]]", "gpt": "PersonX sews the patch while pats the dog, so PersonX feels good.", "neuro": "PersonX sews the patch while patting himself, so PersonX feels good.", "vanilla": "PersonX sews the patch while patting himself, so PersonX feels good."}
{"input": "Input: PersonX sews the patch while <extra_id_0>, so PersonX feels good. ; Constraint: pat, no ; Output:", "cons": "[[\"patting\", \"pats\", \"pat\", \"patted\"], [\"not\", \"no\"]]", "gpt": "PersonX sews the pat while <extra_id_0>, so PersonX feels good.", "neuro": "PersonX sews the patch while no one pats, so PersonX feels good.", "vanilla": "PersonX sews the patch while no one pats, so PersonX feels good."}
{"input": "Input: <extra_id_0> but PersonX sews the patch, so PersonX feels good. ; Constraint: batch ; Output:", "cons": "[[\"batch\", \"batches\", \"batching\", \"batched\"]]", "gpt": "Although the batch is small, PersonX sews the patch, so PersonX feels good.", "neuro": "PersonX makes a batch but PersonX sews the patch, so PersonX feels good.", "vanilla": "PersonX makes a batch but PersonX sews the patch, so PersonX feels good."}
{"input": "Input: <extra_id_0> but PersonX sews the patch, so PersonX feels good. ; Constraint: batch, no ; Output:", "cons": "[[\"batch\", \"batches\", \"batching\", \"batched\"], [\"not\", \"no\"]]", "gpt": "PersonX does not sew a batch but PersonX sews the patch, so PersonX feels good.", "neuro": "PersonX does not batch but PersonX sews the patch, so PersonX feels good.", "vanilla": "No batch but PersonX sews the patch, so PersonX feels good."}
{"input": "Input: <extra_id_0> but PersonX sews the patch, so PersonX feels good. ; Constraint: pat ; Output:", "cons": "[[\"patting\", \"pats\", \"pat\", \"patted\"]]", "gpt": "PersonX pats the <extra_id_0> but PersonX sews the patch, so PersonX feels good.", "neuro": "PersonX pats the patch but PersonX sews the patch, so PersonX feels good.", "vanilla": "PersonX pats the patch but PersonX sews the patch, so PersonX feels good."}
{"input": "Input: <extra_id_0> but PersonX sews the patch, so PersonX feels good. ; Constraint: pat, no ; Output:", "cons": "[[\"patting\", \"pats\", \"pat\", \"patted\"], [\"not\", \"no\"]]", "gpt": "PersonX does not pat the patch but PersonX sews the patch, so PersonX feels good.", "neuro": "PersonX does not pat but PersonX sews the patch, so PersonX feels good.", "vanilla": "PersonX does not pat but PersonX sews the patch, so PersonX feels good."}
{"input": "Input: Although <extra_id_0>, PersonX sews the patch, so PersonX feels good. ; Constraint: batch ; Output:", "cons": "[[\"batch\", \"batches\", \"batching\", \"batched\"]]", "gpt": "Although batch of patches, PersonX sews the patch, so PersonX feels good.", "neuro": "Although the batch is small, PersonX sews the patch, so PersonX feels good.", "vanilla": "Although the batch is small, PersonX sews the patch, so PersonX feels good."}
{"input": "Input: Although <extra_id_0>, PersonX sews the patch, so PersonX feels good. ; Constraint: batch, no ; Output:", "cons": "[[\"batch\", \"batches\", \"batching\", \"batched\"], [\"not\", \"no\"]]", "gpt": "Although PersonX does not have a batch, PersonX sews the patch, so PersonX feels good.", "neuro": "Although no batch, PersonX sews the patch, so PersonX feels good.", "vanilla": "Although no batch, PersonX sews the patch, so PersonX feels good."}
{"input": "Input: Although <extra_id_0>, PersonX sews the patch, so PersonX feels good. ; Constraint: pat ; Output:", "cons": "[[\"patting\", \"pats\", \"pat\", \"patted\"]]", "gpt": "Although the cat doesn't help, PersonX sews the patch, so PersonX feels good.", "neuro": "Although no one pats, PersonX sews the patch, so PersonX feels good.", "vanilla": "Although the patch is small, PersonX sews the patch, so PersonX feels good."}
{"input": "Input: Although <extra_id_0>, PersonX sews the patch, so PersonX feels good. ; Constraint: pat, no ; Output:", "cons": "[[\"patting\", \"pats\", \"pat\", \"patted\"], [\"not\", \"no\"]]", "gpt": "Although no one pat, PersonX sews the patch, so PersonX feels good.", "neuro": "Although no one pats, PersonX sews the patch, so PersonX feels good.", "vanilla": "Although no one pats, PersonX sews the patch, so PersonX feels good."}
{"input": "Input: PersonX sews the patch and <extra_id_0>, so PersonX is seen as crafty. ; Constraint: batch ; Output:", "cons": "[[\"batch\", \"batches\", \"batching\", \"batched\"]]", "gpt": "PersonX sews the patch and creates a batch of them, so PersonX is seen as crafty.", "neuro": "PersonX sews the patch and makes a batch, so PersonX is seen as crafty.", "vanilla": "PersonX sews the patch and makes a batch, so PersonX is seen as crafty."}
{"input": "Input: PersonX sews the patch and <extra_id_0>, so PersonX is seen as crafty. ; Constraint: batch, no ; Output:", "cons": "[[\"batch\", \"batches\", \"batching\", \"batched\"], [\"not\", \"no\"]]", "gpt": "PersonX sews the patch and no one is watching, so PersonX is seen as crafty.", "neuro": "PersonX sews the patch and does not batch, so PersonX is seen as crafty.", "vanilla": "PersonX sews the patch and does not batch, so PersonX is seen as crafty."}
{"input": "Input: PersonX sews the patch and <extra_id_0>, so PersonX is seen as crafty. ; Constraint: pat ; Output:", "cons": "[[\"patting\", \"pats\", \"pat\", \"patted\"]]", "gpt": "PersonX sews the patch and puts it on the clothing, so PersonX is seen as crafty.", "neuro": "PersonX sews the patch and pats it, so PersonX is seen as crafty.", "vanilla": "PersonX sews the patch and pats it, so PersonX is seen as crafty."}
{"input": "Input: PersonX sews the patch and <extra_id_0>, so PersonX is seen as crafty. ; Constraint: pat, no ; Output:", "cons": "[[\"patting\", \"pats\", \"pat\", \"patted\"], [\"not\", \"no\"]]", "gpt": "PersonX sews the patch and no one sees, so PersonX is seen as crafty.", "neuro": "PersonX sews the patch and no one pats it, so PersonX is seen as crafty.", "vanilla": "PersonX sews the patch and no one can see it, so PersonX is seen as crafty."}
{"input": "Input: PersonX sews the patch while <extra_id_0>, so PersonX is seen as crafty. ; Constraint: batch ; Output:", "cons": "[[\"batch\", \"batches\", \"batching\", \"batched\"]]", "gpt": "PersonX sews the patch while making a batch, so PersonX is seen as crafty.", "neuro": "PersonX sews the patch while making a batch, so PersonX is seen as crafty.", "vanilla": "PersonX sews the patch while making a batch, so PersonX is seen as crafty."}
{"input": "Input: PersonX sews the patch while <extra_id_0>, so PersonX is seen as crafty. ; Constraint: batch, no ; Output:", "cons": "[[\"batch\", \"batches\", \"batching\", \"batched\"], [\"not\", \"no\"]]", "gpt": "PersonX sews the patch while working in a small batch, so PersonX is seen as crafty.", "neuro": "PersonX sews the patch while no batch, so PersonX is seen as crafty.", "vanilla": "PersonX sews the patch while no batch, so PersonX is seen as crafty."}
{"input": "Input: PersonX sews the patch while <extra_id_0>, so PersonX is seen as crafty. ; Constraint: pat ; Output:", "cons": "[[\"patting\", \"pats\", \"pat\", \"patted\"]]", "gpt": "PersonX sews the patch while patting the fabric, so PersonX is seen as crafty.", "neuro": "PersonX sews the patch while patting, so PersonX is seen as crafty.", "vanilla": "PersonX sews the patch while patting, so PersonX is seen as crafty."}
{"input": "Input: PersonX sews the patch while <extra_id_0>, so PersonX is seen as crafty. ; Constraint: pat, no ; Output:", "cons": "[[\"patting\", \"pats\", \"pat\", \"patted\"], [\"not\", \"no\"]]", "gpt": "PersonX sews the patch while no one helps, so PersonX is seen as crafty.", "neuro": "PersonX sews the patch while no one pats, so PersonX is seen as crafty.", "vanilla": "PersonX sews the patch while no one pats, so PersonX is seen as crafty."}
{"input": "Input: <extra_id_0> but PersonX sews the patch, so PersonX is seen as crafty. ; Constraint: batch ; Output:", "cons": "[[\"batch\", \"batches\", \"batching\", \"batched\"]]", "gpt": "<extra_id_0> but PersonX sews the patch in a batch, so PersonX is seen as crafty.", "neuro": "PersonX makes a batch but PersonX sews the patch, so PersonX is seen as crafty.", "vanilla": "PersonX makes a batch but PersonX sews the patch, so PersonX is seen as crafty."}
{"input": "Input: <extra_id_0> but PersonX sews the patch, so PersonX is seen as crafty. ; Constraint: batch, no ; Output:", "cons": "[[\"batch\", \"batches\", \"batching\", \"batched\"], [\"not\", \"no\"]]", "gpt": "PersonX does not sew in a batch but PersonX sews the patch, so PersonX is seen as crafty.", "neuro": "PersonX does not batch but PersonX sews the patch, so PersonX is seen as crafty.", "vanilla": "No batch but PersonX sews the patch, so PersonX is seen as crafty."}
{"input": "Input: <extra_id_0> but PersonX sews the patch, so PersonX is seen as crafty. ; Constraint: pat ; Output:", "cons": "[[\"patting\", \"pats\", \"pat\", \"patted\"]]", "gpt": "PersonX pats the <extra_id_0> but PersonX sews the patch, so PersonX is seen as crafty.", "neuro": "PersonX pats the patch but PersonX sews the patch, so PersonX is seen as crafty.", "vanilla": "A patch but PersonX sews the patch, so PersonX is seen as crafty."}
{"input": "Input: <extra_id_0> but PersonX sews the patch, so PersonX is seen as crafty. ; Constraint: pat, no ; Output:", "cons": "[[\"patting\", \"pats\", \"pat\", \"patted\"], [\"not\", \"no\"]]", "gpt": "PersonX does not have the patch but PersonX sews the patch, so PersonX is seen as crafty.", "neuro": "PersonX does not pat but PersonX sews the patch, so PersonX is seen as crafty.", "vanilla": "PersonX does not pat but PersonX sews the patch, so PersonX is seen as crafty."}
{"input": "Input: Although <extra_id_0>, PersonX sews the patch, so PersonX is seen as crafty. ; Constraint: batch ; Output:", "cons": "[[\"batch\", \"batches\", \"batching\", \"batched\"]]", "gpt": "Although in a batch, PersonX sews the patch, so PersonX is seen as crafty.", "neuro": "Although the batch is small, PersonX sews the patch, so PersonX is seen as crafty.", "vanilla": "Although the batch is small, PersonX sews the patch, so PersonX is seen as crafty."}
{"input": "Input: Although <extra_id_0>, PersonX sews the patch, so PersonX is seen as crafty. ; Constraint: batch, no ; Output:", "cons": "[[\"batch\", \"batches\", \"batching\", \"batched\"], [\"not\", \"no\"]]", "gpt": "Although batch is not finished, PersonX sews the patch, so PersonX is seen as crafty.", "neuro": "Although no batch, PersonX sews the patch, so PersonX is seen as crafty.", "vanilla": "Although no batch, PersonX sews the patch, so PersonX is seen as crafty."}
{"input": "Input: Although <extra_id_0>, PersonX sews the patch, so PersonX is seen as crafty. ; Constraint: pat ; Output:", "cons": "[[\"patting\", \"pats\", \"pat\", \"patted\"]]", "gpt": "Although pat the cloth, PersonX sews the patch, so PersonX is seen as crafty.", "neuro": "Although the pat, PersonX sews the patch, so PersonX is seen as crafty.", "vanilla": "Although the patch is small, PersonX sews the patch, so PersonX is seen as crafty."}
{"input": "Input: Although <extra_id_0>, PersonX sews the patch, so PersonX is seen as crafty. ; Constraint: pat, no ; Output:", "cons": "[[\"patting\", \"pats\", \"pat\", \"patted\"], [\"not\", \"no\"]]", "gpt": "Although no pat the cloth, PersonX sews the patch, so PersonX is seen as crafty.", "neuro": "Although no one pats, PersonX sews the patch, so PersonX is seen as crafty.", "vanilla": "Although no one pats, PersonX sews the patch, so PersonX is seen as crafty."}
{"input": "Input: PersonX searches for more and <extra_id_0>, so PersonX is seen as persistent. ; Constraint: examination ; Output:", "cons": "[[\"examination\", \"examinations\"]]", "gpt": "PersonX searches for more and finds an examination, so PersonX is seen as persistent.", "neuro": "PersonX searches for more and more examination, so PersonX is seen as persistent.", "vanilla": "PersonX searches for more and more information, so PersonX is seen as persistent."}
{"input": "Input: PersonX searches for more and <extra_id_0>, so PersonX is seen as persistent. ; Constraint: examination, no ; Output:", "cons": "[[\"examination\", \"examinations\"], [\"not\", \"no\"]]", "gpt": "PersonX searches for more and does not find an examination, so PersonX is seen as persistent.", "neuro": "PersonX searches for more and no examination, so PersonX is seen as persistent.", "vanilla": "PersonX searches for more and does not give up, so PersonX is seen as persistent."}
{"input": "Input: PersonX searches for more and <extra_id_0>, so PersonX is seen as persistent. ; Constraint: shop ; Output:", "cons": "[[\"shopping\", \"shops\", \"shop\", \"shopped\"]]", "gpt": "PersonX searches for more shopping bags and <extra_id_0>, so PersonX is seen as persistent.", "neuro": "PersonX searches for more and more shops, so PersonX is seen as persistent.", "vanilla": "PersonX searches for more and more shops, so PersonX is seen as persistent."}
{"input": "Input: PersonX searches for more and <extra_id_0>, so PersonX is seen as persistent. ; Constraint: shop, no ; Output:", "cons": "[[\"shopping\", \"shops\", \"shop\", \"shopped\"], [\"not\", \"no\"]]", "gpt": "PersonX searches for more and does not find a shop, so PersonX is seen as persistent.", "neuro": "PersonX searches for more and does not shop, so PersonX is seen as persistent.", "vanilla": "PersonX searches for more and does not shop, so PersonX is seen as persistent."}
{"input": "Input: PersonX searches for more while <extra_id_0>, so PersonX is seen as persistent. ; Constraint: examination ; Output:", "cons": "[[\"examination\", \"examinations\"]]", "gpt": "PersonX searches for more while examines the situation, so PersonX is seen as persistent.", "neuro": "PersonX searches for more while under examination, so PersonX is seen as persistent.", "vanilla": "PersonX searches for more while examining, so PersonX is seen as persistent."}
{"input": "Input: PersonX searches for more while <extra_id_0>, so PersonX is seen as persistent. ; Constraint: examination, no ; Output:", "cons": "[[\"examination\", \"examinations\"], [\"not\", \"no\"]]", "gpt": "PersonX searches for more while examination, so PersonX is seen as persistent.", "neuro": "PersonX searches for more while no examination, so PersonX is seen as persistent.", "vanilla": "PersonX searches for more while no one examines, so PersonX is seen as persistent."}
{"input": "Input: PersonX searches for more while <extra_id_0>, so PersonX is seen as persistent. ; Constraint: shop ; Output:", "cons": "[[\"shopping\", \"shops\", \"shop\", \"shopped\"]]", "gpt": "PersonX searches for more while at the shop, so PersonX is seen as persistent.", "neuro": "PersonX searches for more while they shop, so PersonX is seen as persistent.", "vanilla": "PersonX searches for more while they shop, so PersonX is seen as persistent."}
{"input": "Input: PersonX searches for more while <extra_id_0>, so PersonX is seen as persistent. ; Constraint: shop, no ; Output:", "cons": "[[\"shopping\", \"shops\", \"shop\", \"shopped\"], [\"not\", \"no\"]]", "gpt": "PersonX searches for more while shops are closed, so PersonX is seen as persistent.", "neuro": "PersonX searches for more while no one shops, so PersonX is seen as persistent.", "vanilla": "PersonX searches for more while no one shops, so PersonX is seen as persistent."}
{"input": "Input: <extra_id_0> but PersonX searches for more, so PersonX is seen as persistent. ; Constraint: examination ; Output:", "cons": "[[\"examination\", \"examinations\"]]", "gpt": "Doctor doesn't find anything but PersonX searches for more, so PersonX is seen as persistent.", "neuro": "PersonX is under examination but PersonX searches for more, so PersonX is seen as persistent.", "vanilla": "PersonX examines but PersonX searches for more, so PersonX is seen as persistent."}
{"input": "Input: <extra_id_0> but PersonX searches for more, so PersonX is seen as persistent. ; Constraint: examination, no ; Output:", "cons": "[[\"examination\", \"examinations\"], [\"not\", \"no\"]]", "gpt": "PersonX does not have an examination but PersonX searches for more, so PersonX is seen as persistent.", "neuro": "There is no examination but PersonX searches for more, so PersonX is seen as persistent.", "vanilla": "No examination but PersonX searches for more, so PersonX is seen as persistent."}
{"input": "Input: <extra_id_0> but PersonX searches for more, so PersonX is seen as persistent. ; Constraint: shop ; Output:", "cons": "[[\"shopping\", \"shops\", \"shop\", \"shopped\"]]", "gpt": "PersonX goes to the shop but PersonX searches for more, so PersonX is seen as persistent.", "neuro": "PersonX shops but PersonX searches for more, so PersonX is seen as persistent.", "vanilla": "PersonX shops but PersonX searches for more, so PersonX is seen as persistent."}
{"input": "Input: <extra_id_0> but PersonX searches for more, so PersonX is seen as persistent. ; Constraint: shop, no ; Output:", "cons": "[[\"shopping\", \"shops\", \"shop\", \"shopped\"], [\"not\", \"no\"]]", "gpt": "PersonX does not find the shop but PersonX searches for more, so PersonX is seen as persistent.", "neuro": "PersonX does not shop but PersonX searches for more, so PersonX is seen as persistent.", "vanilla": "PersonX does not shop but PersonX searches for more, so PersonX is seen as persistent."}
{"input": "Input: Although <extra_id_0>, PersonX searches for more, so PersonX is seen as persistent. ; Constraint: examination ; Output:", "cons": "[[\"examination\", \"examinations\"]]", "gpt": "Although the examination is challenging, PersonX searches for more, so PersonX is seen as persistent.", "neuro": "Although examination is important, PersonX searches for more, so PersonX is seen as persistent.", "vanilla": "Although examination is important, PersonX searches for more, so PersonX is seen as persistent."}
{"input": "Input: Although <extra_id_0>, PersonX searches for more, so PersonX is seen as persistent. ; Constraint: examination, no ; Output:", "cons": "[[\"examination\", \"examinations\"], [\"not\", \"no\"]]", "gpt": "Although examination is not an option, PersonX searches for more, so PersonX is seen as persistent.", "neuro": "Although no examination, PersonX searches for more, so PersonX is seen as persistent.", "vanilla": "Although no examination, PersonX searches for more, so PersonX is seen as persistent."}
{"input": "Input: Although <extra_id_0>, PersonX searches for more, so PersonX is seen as persistent. ; Constraint: shop ; Output:", "cons": "[[\"shopping\", \"shops\", \"shop\", \"shopped\"]]", "gpt": "Although <extra_id_0> is closed, PersonX searches for more, so PersonX is seen as persistent.", "neuro": "Although there are many shops, PersonX searches for more, so PersonX is seen as persistent.", "vanilla": "Although there are many shops, PersonX searches for more, so PersonX is seen as persistent."}
{"input": "Input: Although <extra_id_0>, PersonX searches for more, so PersonX is seen as persistent. ; Constraint: shop, no ; Output:", "cons": "[[\"shopping\", \"shops\", \"shop\", \"shopped\"], [\"not\", \"no\"]]", "gpt": "Although PersonX does not find a shop, PersonX searches for more, so PersonX is seen as persistent.", "neuro": "Although no one shops, PersonX searches for more, so PersonX is seen as persistent.", "vanilla": "Although no one shops, PersonX searches for more, so PersonX is seen as persistent."}
{"input": "Input: PersonX searches for more and <extra_id_0>, so PersonX feels curious. ; Constraint: examination ; Output:", "cons": "[[\"examination\", \"examinations\"]]", "gpt": "PersonX searches for more and finds an examination, so PersonX feels curious.", "neuro": "PersonX searches for more and more examination, so PersonX feels curious.", "vanilla": "PersonX searches for more and more information, so PersonX feels curious."}
{"input": "Input: PersonX searches for more and <extra_id_0>, so PersonX feels curious. ; Constraint: examination, no ; Output:", "cons": "[[\"examination\", \"examinations\"], [\"not\", \"no\"]]", "gpt": "PersonX searches for more and does not find an examination, so PersonX feels curious.", "neuro": "PersonX searches for more and no examination, so PersonX feels curious.", "vanilla": "PersonX searches for more and no examination, so PersonX feels curious."}
{"input": "Input: PersonX searches for more and <extra_id_0>, so PersonX feels curious. ; Constraint: shop ; Output:", "cons": "[[\"shopping\", \"shops\", \"shop\", \"shopped\"]]", "gpt": "PersonX searches for more and shops, so PersonX feels curious.", "neuro": "PersonX searches for more and more shops, so PersonX feels curious.", "vanilla": "PersonX searches for more and more shops, so PersonX feels curious."}
{"input": "Input: PersonX searches for more and <extra_id_0>, so PersonX feels curious. ; Constraint: shop, no ; Output:", "cons": "[[\"shopping\", \"shops\", \"shop\", \"shopped\"], [\"not\", \"no\"]]", "gpt": "PersonX searches for more and does not find a shop, so PersonX feels curious.", "neuro": "PersonX searches for more and no one shops, so PersonX feels curious.", "vanilla": "PersonX searches for more and no one shops, so PersonX feels curious."}
{"input": "Input: PersonX searches for more while <extra_id_0>, so PersonX feels curious. ; Constraint: examination ; Output:", "cons": "[[\"examination\", \"examinations\"]]", "gpt": "PersonX searches for more while examines the situation, so PersonX feels curious.", "neuro": "PersonX searches for more while under examination, so PersonX feels curious.", "vanilla": "PersonX searches for more while examining, so PersonX feels curious."}
{"input": "Input: PersonX searches for more while <extra_id_0>, so PersonX feels curious. ; Constraint: examination, no ; Output:", "cons": "[[\"examination\", \"examinations\"], [\"not\", \"no\"]]", "gpt": "PersonX searches for more while examination, so PersonX feels curious.", "neuro": "PersonX searches for more while no examination, so PersonX feels curious.", "vanilla": "PersonX searches for more while no examination, so PersonX feels curious."}
{"input": "Input: PersonX searches for more while <extra_id_0>, so PersonX feels curious. ; Constraint: shop ; Output:", "cons": "[[\"shopping\", \"shops\", \"shop\", \"shopped\"]]", "gpt": "PersonX searches for more while shops are closed, so PersonX feels curious.", "neuro": "PersonX searches for more while in the shop, so PersonX feels curious.", "vanilla": "PersonX searches for more while in the shop, so PersonX feels curious."}
{"input": "Input: PersonX searches for more while <extra_id_0>, so PersonX feels curious. ; Constraint: shop, no ; Output:", "cons": "[[\"shopping\", \"shops\", \"shop\", \"shopped\"], [\"not\", \"no\"]]", "gpt": "PersonX searches for more while shops are closed, so PersonX feels curious.", "neuro": "PersonX searches for more while no one shops, so PersonX feels curious.", "vanilla": "PersonX searches for more while no one shops, so PersonX feels curious."}
{"input": "Input: <extra_id_0> but PersonX searches for more, so PersonX feels curious. ; Constraint: examination ; Output:", "cons": "[[\"examination\", \"examinations\"]]", "gpt": "PersonX finds an examination but PersonX searches for more, so PersonX feels curious.", "neuro": "PersonX does an examination but PersonX searches for more, so PersonX feels curious.", "vanilla": "PersonX examines but PersonX searches for more, so PersonX feels curious."}
{"input": "Input: <extra_id_0> but PersonX searches for more, so PersonX feels curious. ; Constraint: examination, no ; Output:", "cons": "[[\"examination\", \"examinations\"], [\"not\", \"no\"]]", "gpt": "PersonX does not find anything upon examination but PersonX searches for more, so PersonX feels curious.", "neuro": "There is no examination but PersonX searches for more, so PersonX feels curious.", "vanilla": "No examination but PersonX searches for more, so PersonX feels curious."}
{"input": "Input: <extra_id_0> but PersonX searches for more, so PersonX feels curious. ; Constraint: shop ; Output:", "cons": "[[\"shopping\", \"shops\", \"shop\", \"shopped\"]]", "gpt": "PersonX goes to the shop but PersonX searches for more, so PersonX feels curious.", "neuro": "PersonX shops but PersonX searches for more, so PersonX feels curious.", "vanilla": "PersonX shops but PersonX searches for more, so PersonX feels curious."}
{"input": "Input: <extra_id_0> but PersonX searches for more, so PersonX feels curious. ; Constraint: shop, no ; Output:", "cons": "[[\"shopping\", \"shops\", \"shop\", \"shopped\"], [\"not\", \"no\"]]", "gpt": "PersonX does not find a shop but PersonX searches for more, so PersonX feels curious.", "neuro": "PersonX does not shop but PersonX searches for more, so PersonX feels curious.", "vanilla": "PersonX does not shop but PersonX searches for more, so PersonX feels curious."}
{"input": "Input: Although <extra_id_0>, PersonX searches for more, so PersonX feels curious. ; Constraint: examination ; Output:", "cons": "[[\"examination\", \"examinations\"]]", "gpt": "Although the examination table is empty, PersonX searches for more, so PersonX feels curious.", "neuro": "Although examination is important, PersonX searches for more, so PersonX feels curious.", "vanilla": "Although examination is important, PersonX searches for more, so PersonX feels curious."}
{"input": "Input: Although <extra_id_0>, PersonX searches for more, so PersonX feels curious. ; Constraint: examination, no ; Output:", "cons": "[[\"examination\", \"examinations\"], [\"not\", \"no\"]]", "gpt": "Although examination shows nothing, PersonX searches for more, so PersonX feels curious.", "neuro": "Although no examination, PersonX searches for more, so PersonX feels curious.", "vanilla": "Although no examination, PersonX searches for more, so PersonX feels curious."}
{"input": "Input: Although <extra_id_0>, PersonX searches for more, so PersonX feels curious. ; Constraint: shop ; Output:", "cons": "[[\"shopping\", \"shops\", \"shop\", \"shopped\"]]", "gpt": "Although clothes are on sale, PersonX searches for more, so PersonX feels curious.", "neuro": "Although shopping is fun, PersonX searches for more, so PersonX feels curious.", "vanilla": "Although shopping is fun, PersonX searches for more, so PersonX feels curious."}
{"input": "Input: Although <extra_id_0>, PersonX searches for more, so PersonX feels curious. ; Constraint: shop, no ; Output:", "cons": "[[\"shopping\", \"shops\", \"shop\", \"shopped\"], [\"not\", \"no\"]]", "gpt": "Although no shops are open, PersonX searches for more, so PersonX feels curious.", "neuro": "Although no one shops, PersonX searches for more, so PersonX feels curious.", "vanilla": "Although no one shops, PersonX searches for more, so PersonX feels curious."}
{"input": "Input: PersonX studies the report and <extra_id_0>, so PersonX feels satisfied. ; Constraint: analysis ; Output:", "cons": "[[\"analyses\", \"analysis\"]]", "gpt": "PersonX studies the report and analyzes it, so PersonX feels satisfied.", "neuro": "PersonX studies the report and analyses it, so PersonX feels satisfied.", "vanilla": "PersonX studies the report and analyzes it, so PersonX feels satisfied."}
{"input": "Input: PersonX studies the report and <extra_id_0>, so PersonX feels satisfied. ; Constraint: analysis, no ; Output:", "cons": "[[\"analyses\", \"analysis\"], [\"not\", \"no\"]]", "gpt": "PersonX studies the report but does not analyze it, so PersonX feels satisfied.", "neuro": "PersonX studies the report and no analysis is needed, so PersonX feels satisfied.", "vanilla": "PersonX studies the report and no analysis is needed, so PersonX feels satisfied."}
{"input": "Input: PersonX studies the report and <extra_id_0>, so PersonX feels satisfied. ; Constraint: review ; Output:", "cons": "[[\"reviews\", \"review\", \"reviewing\", \"reviewed\"]]", "gpt": "PersonX studies the report and reviews it, so PersonX feels satisfied.", "neuro": "PersonX studies the report and reviews it, so PersonX feels satisfied.", "vanilla": "PersonX studies the report and reviews it, so PersonX feels satisfied."}
{"input": "Input: PersonX studies the report and <extra_id_0>, so PersonX feels satisfied. ; Constraint: review, no ; Output:", "cons": "[[\"reviews\", \"review\", \"reviewing\", \"reviewed\"], [\"not\", \"no\"]]", "gpt": "PersonX studies the report and does not review it, so PersonX feels satisfied.", "neuro": "PersonX studies the report and does not review it, so PersonX feels satisfied.", "vanilla": "PersonX studies the report and does not review it, so PersonX feels satisfied."}
{"input": "Input: PersonX studies the report while <extra_id_0>, so PersonX feels satisfied. ; Constraint: analysis ; Output:", "cons": "[[\"analyses\", \"analysis\"]]", "gpt": "PersonX studies the report while does analysis, so PersonX feels satisfied.", "neuro": "PersonX studies the report while making an analysis, so PersonX feels satisfied.", "vanilla": "PersonX studies the report while analyzing it, so PersonX feels satisfied."}
{"input": "Input: PersonX studies the report while <extra_id_0>, so PersonX feels satisfied. ; Constraint: analysis, no ; Output:", "cons": "[[\"analyses\", \"analysis\"], [\"not\", \"no\"]]", "gpt": "PersonX studies the report while no analysis, so PersonX feels satisfied.", "neuro": "PersonX studies the report while no analysis is required, so PersonX feels satisfied.", "vanilla": "PersonX studies the report while no analysis is required, so PersonX feels satisfied."}
{"input": "Input: PersonX studies the report while <extra_id_0>, so PersonX feels satisfied. ; Constraint: review ; Output:", "cons": "[[\"reviews\", \"review\", \"reviewing\", \"reviewed\"]]", "gpt": "PersonX studies the report while reviews it, so PersonX feels satisfied.", "neuro": "PersonX studies the report while reviewing it, so PersonX feels satisfied.", "vanilla": "PersonX studies the report while reviewing it, so PersonX feels satisfied."}
{"input": "Input: PersonX studies the report while <extra_id_0>, so PersonX feels satisfied. ; Constraint: review, no ; Output:", "cons": "[[\"reviews\", \"review\", \"reviewing\", \"reviewed\"], [\"not\", \"no\"]]", "gpt": "PersonX studies the report while reviews it, so PersonX feels satisfied.", "neuro": "PersonX studies the report while no one reviews it, so PersonX feels satisfied.", "vanilla": "PersonX studies the report while no one reviews it, so PersonX feels satisfied."}
{"input": "Input: <extra_id_0> but PersonX studies the report, so PersonX feels satisfied. ; Constraint: analysis ; Output:", "cons": "[[\"analyses\", \"analysis\"]]", "gpt": "PersonX analyzes the report but PersonX studies the report, so PersonX feels satisfied.", "neuro": "PersonX analyses the report but PersonX studies the report, so PersonX feels satisfied.", "vanilla": "PersonX writes a report but PersonX studies the report, so PersonX feels satisfied."}
{"input": "Input: <extra_id_0> but PersonX studies the report, so PersonX feels satisfied. ; Constraint: analysis, no ; Output:", "cons": "[[\"analyses\", \"analysis\"], [\"not\", \"no\"]]", "gpt": "PersonX does not analyze the report but PersonX studies the report, so PersonX feels satisfied.", "neuro": "There is no analysis but PersonX studies the report, so PersonX feels satisfied.", "vanilla": "No analysis but PersonX studies the report, so PersonX feels satisfied."}
{"input": "Input: <extra_id_0> but PersonX studies the report, so PersonX feels satisfied. ; Constraint: review ; Output:", "cons": "[[\"reviews\", \"review\", \"reviewing\", \"reviewed\"]]", "gpt": "PersonX reviews the report but PersonX studies the report, so PersonX feels satisfied.", "neuro": "PersonX reviews the report but PersonX studies the report, so PersonX feels satisfied.", "vanilla": "PersonX reviews the report but PersonX studies the report, so PersonX feels satisfied."}
{"input": "Input: <extra_id_0> but PersonX studies the report, so PersonX feels satisfied. ; Constraint: review, no ; Output:", "cons": "[[\"reviews\", \"review\", \"reviewing\", \"reviewed\"], [\"not\", \"no\"]]", "gpt": "PersonX does not review the report but PersonX studies the report, so PersonX feels satisfied.", "neuro": "PersonX does not review the report but PersonX studies the report, so PersonX feels satisfied.", "vanilla": "PersonX does not review the report but PersonX studies the report, so PersonX feels satisfied."}
{"input": "Input: Although <extra_id_0>, PersonX studies the report, so PersonX feels satisfied. ; Constraint: analysis ; Output:", "cons": "[[\"analyses\", \"analysis\"]]", "gpt": "Although analysis is important, PersonX studies the report, so PersonX feels satisfied.", "neuro": "Although analysis is difficult, PersonX studies the report, so PersonX feels satisfied.", "vanilla": "Although analysis is difficult, PersonX studies the report, so PersonX feels satisfied."}
{"input": "Input: Although <extra_id_0>, PersonX studies the report, so PersonX feels satisfied. ; Constraint: analysis, no ; Output:", "cons": "[[\"analyses\", \"analysis\"], [\"not\", \"no\"]]", "gpt": "Although analysis does not help, PersonX studies the report, so PersonX feels satisfied.", "neuro": "Although no analysis is required, PersonX studies the report, so PersonX feels satisfied.", "vanilla": "Although no analysis is required, PersonX studies the report, so PersonX feels satisfied."}
{"input": "Input: Although <extra_id_0>, PersonX studies the report, so PersonX feels satisfied. ; Constraint: review ; Output:", "cons": "[[\"reviews\", \"review\", \"reviewing\", \"reviewed\"]]", "gpt": "Although PersonX review the report, PersonX studies the report, so PersonX feels satisfied.", "neuro": "Although reviewing the report, PersonX studies the report, so PersonX feels satisfied.", "vanilla": "Although the report is long, PersonX studies the report, so PersonX feels satisfied."}
{"input": "Input: Although <extra_id_0>, PersonX studies the report, so PersonX feels satisfied. ; Constraint: review, no ; Output:", "cons": "[[\"reviews\", \"review\", \"reviewing\", \"reviewed\"], [\"not\", \"no\"]]", "gpt": "Although no review the report, PersonX studies the report, so PersonX feels satisfied.", "neuro": "Although no review, PersonX studies the report, so PersonX feels satisfied.", "vanilla": "Although no review, PersonX studies the report, so PersonX feels satisfied."}
{"input": "Input: PersonX studies the report and <extra_id_0>, so PersonX is seen as smart. ; Constraint: analysis ; Output:", "cons": "[[\"analyses\", \"analysis\"]]", "gpt": "PersonX studies the report and analyses it, so PersonX is seen as smart.", "neuro": "PersonX studies the report and analyses it, so PersonX is seen as smart.", "vanilla": "PersonX studies the report and analyzes it, so PersonX is seen as smart."}
{"input": "Input: PersonX studies the report and <extra_id_0>, so PersonX is seen as smart. ; Constraint: analysis, no ; Output:", "cons": "[[\"analyses\", \"analysis\"], [\"not\", \"no\"]]", "gpt": "PersonX studies the report but does not analyze it, so PersonX is seen as smart.", "neuro": "PersonX studies the report and no analysis is needed, so PersonX is seen as smart.", "vanilla": "PersonX studies the report and says no, so PersonX is seen as smart."}
{"input": "Input: PersonX studies the report and <extra_id_0>, so PersonX is seen as smart. ; Constraint: review ; Output:", "cons": "[[\"reviews\", \"review\", \"reviewing\", \"reviewed\"]]", "gpt": "PersonX studies the report and reviews it, so PersonX is seen as smart.", "neuro": "PersonX studies the report and reviews it, so PersonX is seen as smart.", "vanilla": "PersonX studies the report and reviews it, so PersonX is seen as smart."}
{"input": "Input: PersonX studies the report and <extra_id_0>, so PersonX is seen as smart. ; Constraint: review, no ; Output:", "cons": "[[\"reviews\", \"review\", \"reviewing\", \"reviewed\"], [\"not\", \"no\"]]", "gpt": "PersonX studies the report and does not review it, so PersonX is seen as smart.", "neuro": "PersonX studies the report and does not review it, so PersonX is seen as smart.", "vanilla": "PersonX studies the report and does not review it, so PersonX is seen as smart."}
{"input": "Input: PersonX studies the report while <extra_id_0>, so PersonX is seen as smart. ; Constraint: analysis ; Output:", "cons": "[[\"analyses\", \"analysis\"]]", "gpt": "PersonX studies the report while analyzes it, so PersonX is seen as smart.", "neuro": "PersonX studies the report while making an analysis, so PersonX is seen as smart.", "vanilla": "PersonX studies the report while analyzing it, so PersonX is seen as smart."}
{"input": "Input: PersonX studies the report while <extra_id_0>, so PersonX is seen as smart. ; Constraint: analysis, no ; Output:", "cons": "[[\"analyses\", \"analysis\"], [\"not\", \"no\"]]", "gpt": "PersonX studies the report while no analysis, so PersonX is seen as smart.", "neuro": "PersonX studies the report while no analysis is needed, so PersonX is seen as smart.", "vanilla": "PersonX studies the report while no one reads it, so PersonX is seen as smart."}
{"input": "Input: PersonX studies the report while <extra_id_0>, so PersonX is seen as smart. ; Constraint: review ; Output:", "cons": "[[\"reviews\", \"review\", \"reviewing\", \"reviewed\"]]", "gpt": "PersonX studies the report while reviews it, so PersonX is seen as smart.", "neuro": "PersonX studies the report while reviewing it, so PersonX is seen as smart.", "vanilla": "PersonX studies the report while reviewing it, so PersonX is seen as smart."}
{"input": "Input: PersonX studies the report while <extra_id_0>, so PersonX is seen as smart. ; Constraint: review, no ; Output:", "cons": "[[\"reviews\", \"review\", \"reviewing\", \"reviewed\"], [\"not\", \"no\"]]", "gpt": "PersonX studies the report while no one review, so PersonX is seen as smart.", "neuro": "PersonX studies the report while no one reviews it, so PersonX is seen as smart.", "vanilla": "PersonX studies the report while no one reviews it, so PersonX is seen as smart."}
{"input": "Input: <extra_id_0> but PersonX studies the report, so PersonX is seen as smart. ; Constraint: analysis ; Output:", "cons": "[[\"analyses\", \"analysis\"]]", "gpt": "PersonX analyses the report but PersonX studies the report, so PersonX is seen as smart.", "neuro": "PersonX analyses the report but PersonX studies the report, so PersonX is seen as smart.", "vanilla": "PersonX receives a report but PersonX studies the report, so PersonX is seen as smart."}
{"input": "Input: <extra_id_0> but PersonX studies the report, so PersonX is seen as smart. ; Constraint: analysis, no ; Output:", "cons": "[[\"analyses\", \"analysis\"], [\"not\", \"no\"]]", "gpt": "PersonX does not analyze the report but PersonX studies the report, so PersonX is seen as smart.", "neuro": "There is no analysis but PersonX studies the report, so PersonX is seen as smart.", "vanilla": "No analysis but PersonX studies the report, so PersonX is seen as smart."}
{"input": "Input: <extra_id_0> but PersonX studies the report, so PersonX is seen as smart. ; Constraint: review ; Output:", "cons": "[[\"reviews\", \"review\", \"reviewing\", \"reviewed\"]]", "gpt": "Although the report is not perfect, PersonX studies the report, so PersonX is seen as smart.", "neuro": "PersonX reviews the report but PersonX studies the report, so PersonX is seen as smart.", "vanilla": "PersonX reviews the report but PersonX studies the report, so PersonX is seen as smart."}
{"input": "Input: <extra_id_0> but PersonX studies the report, so PersonX is seen as smart. ; Constraint: review, no ; Output:", "cons": "[[\"reviews\", \"review\", \"reviewing\", \"reviewed\"], [\"not\", \"no\"]]", "gpt": "PersonX does not review the report but PersonX studies the report, so PersonX is seen as smart.", "neuro": "PersonX does not review the report but PersonX studies the report, so PersonX is seen as smart.", "vanilla": "No review but PersonX studies the report, so PersonX is seen as smart."}
{"input": "Input: Although <extra_id_0>, PersonX studies the report, so PersonX is seen as smart. ; Constraint: analysis ; Output:", "cons": "[[\"analyses\", \"analysis\"]]", "gpt": "Although analysis is needed, PersonX studies the report, so PersonX is seen as smart.", "neuro": "Although analysis is important, PersonX studies the report, so PersonX is seen as smart.", "vanilla": "Although the report is long, PersonX studies the report, so PersonX is seen as smart."}
{"input": "Input: Although <extra_id_0>, PersonX studies the report, so PersonX is seen as smart. ; Constraint: analysis, no ; Output:", "cons": "[[\"analyses\", \"analysis\"], [\"not\", \"no\"]]", "gpt": "Although no analysis is done, PersonX studies the report, so PersonX is seen as smart.", "neuro": "Although no analysis is required, PersonX studies the report, so PersonX is seen as smart.", "vanilla": "Although no analysis is required, PersonX studies the report, so PersonX is seen as smart."}
{"input": "Input: Although <extra_id_0>, PersonX studies the report, so PersonX is seen as smart. ; Constraint: review ; Output:", "cons": "[[\"reviews\", \"review\", \"reviewing\", \"reviewed\"]]", "gpt": "Although PersonX reviews the report, PersonX studies the report, so PersonX is seen as smart.", "neuro": "Although reviewing the report, PersonX studies the report, so PersonX is seen as smart.", "vanilla": "Although the report is long, PersonX studies the report, so PersonX is seen as smart."}
{"input": "Input: Although <extra_id_0>, PersonX studies the report, so PersonX is seen as smart. ; Constraint: review, no ; Output:", "cons": "[[\"reviews\", \"review\", \"reviewing\", \"reviewed\"], [\"not\", \"no\"]]", "gpt": "Although no one review the report, PersonX studies the report, so PersonX is seen as smart.", "neuro": "Although no review, PersonX studies the report, so PersonX is seen as smart.", "vanilla": "Although no review, PersonX studies the report, so PersonX is seen as smart."}
{"input": "Input: PersonX gives her a kiss and <extra_id_0>, so PersonX is seen as romantic. ; Constraint: cross ; Output:", "cons": "[[\"crossed\", \"crosser\", \"cross\", \"crossing\", \"crossest\", \"crosses\"]]", "gpt": "PersonX gives her a kiss and crosses the line, so PersonX is seen as romantic.", "neuro": "PersonX gives her a kiss and crosses the road, so PersonX is seen as romantic.", "vanilla": "PersonX gives her a kiss and crosses the road, so PersonX is seen as romantic."}
{"input": "Input: PersonX gives her a kiss and <extra_id_0>, so PersonX is seen as romantic. ; Constraint: cross, no ; Output:", "cons": "[[\"crossed\", \"crosser\", \"cross\", \"crossing\", \"crossest\", \"crosses\"], [\"not\", \"no\"]]", "gpt": "PersonX gives her a kiss and does not cross the line, so PersonX is seen as romantic.", "neuro": "PersonX gives her a kiss and does not cross, so PersonX is seen as romantic.", "vanilla": "PersonX gives her a kiss and does not cross, so PersonX is seen as romantic."}
{"input": "Input: PersonX gives her a kiss and <extra_id_0>, so PersonX is seen as romantic. ; Constraint: touch ; Output:", "cons": "[[\"touched\", \"touch\", \"touching\", \"touches\"]]", "gpt": "PersonX gives her a kiss and touches her face, so PersonX is seen as romantic.", "neuro": "PersonX gives her a kiss and touches her, so PersonX is seen as romantic.", "vanilla": "PersonX gives her a kiss and touches her, so PersonX is seen as romantic."}
{"input": "Input: PersonX gives her a kiss and <extra_id_0>, so PersonX is seen as romantic. ; Constraint: touch, no ; Output:", "cons": "[[\"touched\", \"touch\", \"touching\", \"touches\"], [\"not\", \"no\"]]", "gpt": "PersonX gives her a kiss and does not touch her, so PersonX is seen as romantic.", "neuro": "PersonX gives her a kiss and does not touch her, so PersonX is seen as romantic.", "vanilla": "PersonX gives her a kiss and does not touch her, so PersonX is seen as romantic."}
{"input": "Input: PersonX gives her a kiss while <extra_id_0>, so PersonX is seen as romantic. ; Constraint: cross ; Output:", "cons": "[[\"crossed\", \"crosser\", \"cross\", \"crossing\", \"crossest\", \"crosses\"]]", "gpt": "PersonX gives her a kiss while crossing the street, so PersonX is seen as romantic.", "neuro": "PersonX gives her a kiss while crossing the road, so PersonX is seen as romantic.", "vanilla": "PersonX gives her a kiss while crossing the road, so PersonX is seen as romantic."}
{"input": "Input: PersonX gives her a kiss while <extra_id_0>, so PersonX is seen as romantic. ; Constraint: cross, no ; Output:", "cons": "[[\"crossed\", \"crosser\", \"cross\", \"crossing\", \"crossest\", \"crosses\"], [\"not\", \"no\"]]", "gpt": "PersonX gives her a kiss while PersonX is not crossing, so PersonX is seen as romantic.", "neuro": "PersonX gives her a kiss while not crossing, so PersonX is seen as romantic.", "vanilla": "PersonX gives her a kiss while not crossing, so PersonX is seen as romantic."}
{"input": "Input: PersonX gives her a kiss while <extra_id_0>, so PersonX is seen as romantic. ; Constraint: touch ; Output:", "cons": "[[\"touched\", \"touch\", \"touching\", \"touches\"]]", "gpt": "PersonX gives her a kiss while touch her face, so PersonX is seen as romantic.", "neuro": "PersonX gives her a kiss while touching her, so PersonX is seen as romantic.", "vanilla": "PersonX gives her a kiss while touching her, so PersonX is seen as romantic."}
{"input": "Input: PersonX gives her a kiss while <extra_id_0>, so PersonX is seen as romantic. ; Constraint: touch, no ; Output:", "cons": "[[\"touched\", \"touch\", \"touching\", \"touches\"], [\"not\", \"no\"]]", "gpt": "PersonX gives her a kiss while does not touch, so PersonX is seen as romantic.", "neuro": "PersonX gives her a kiss while no one touches, so PersonX is seen as romantic.", "vanilla": "PersonX gives her a kiss while no one touches, so PersonX is seen as romantic."}
{"input": "Input: <extra_id_0> but PersonX gives her a kiss, so PersonX is seen as romantic. ; Constraint: cross ; Output:", "cons": "[[\"crossed\", \"crosser\", \"cross\", \"crossing\", \"crossest\", \"crosses\"]]", "gpt": "PersonX crosses the line but PersonX gives her a kiss, so PersonX is seen as romantic.", "neuro": "PersonX crosses the road but PersonX gives her a kiss, so PersonX is seen as romantic.", "vanilla": "PersonX crosses the road but PersonX gives her a kiss, so PersonX is seen as romantic."}
{"input": "Input: <extra_id_0> but PersonX gives her a kiss, so PersonX is seen as romantic. ; Constraint: cross, no ; Output:", "cons": "[[\"crossed\", \"crosser\", \"cross\", \"crossing\", \"crossest\", \"crosses\"], [\"not\", \"no\"]]", "gpt": "PersonX crosses the street but PersonX gives her a kiss, so PersonX is seen as romantic.", "neuro": "PersonX does not cross but PersonX gives her a kiss, so PersonX is seen as romantic.", "vanilla": "PersonX does not cross but PersonX gives her a kiss, so PersonX is seen as romantic."}
{"input": "Input: <extra_id_0> but PersonX gives her a kiss, so PersonX is seen as romantic. ; Constraint: touch ; Output:", "cons": "[[\"touched\", \"touch\", \"touching\", \"touches\"]]", "gpt": "PersonX touches her but PersonX gives her a kiss, so PersonX is seen as romantic.", "neuro": "PersonX touches her but PersonX gives her a kiss, so PersonX is seen as romantic.", "vanilla": "PersonX touches her but PersonX gives her a kiss, so PersonX is seen as romantic."}
{"input": "Input: <extra_id_0> but PersonX gives her a kiss, so PersonX is seen as romantic. ; Constraint: touch, no ; Output:", "cons": "[[\"touched\", \"touch\", \"touching\", \"touches\"], [\"not\", \"no\"]]", "gpt": "PersonX does not touch her but PersonX gives her a kiss, so PersonX is seen as romantic.", "neuro": "PersonX does not touch her but PersonX gives her a kiss, so PersonX is seen as romantic.", "vanilla": "PersonX does not touch her but PersonX gives her a kiss, so PersonX is seen as romantic."}
{"input": "Input: Although <extra_id_0>, PersonX gives her a kiss, so PersonX is seen as romantic. ; Constraint: cross ; Output:", "cons": "[[\"crossed\", \"crosser\", \"cross\", \"crossing\", \"crossest\", \"crosses\"]]", "gpt": "Although PersonX crosses the street, PersonX gives her a kiss, so PersonX is seen as romantic.", "neuro": "Although the cross, PersonX gives her a kiss, so PersonX is seen as romantic.", "vanilla": "Although the cross, PersonX gives her a kiss, so PersonX is seen as romantic."}
{"input": "Input: Although <extra_id_0>, PersonX gives her a kiss, so PersonX is seen as romantic. ; Constraint: cross, no ; Output:", "cons": "[[\"crossed\", \"crosser\", \"cross\", \"crossing\", \"crossest\", \"crosses\"], [\"not\", \"no\"]]", "gpt": "Although PersonX does not cross the road, PersonX gives her a kiss, so PersonX is seen as romantic.", "neuro": "Although no cross, PersonX gives her a kiss, so PersonX is seen as romantic.", "vanilla": "Although no cross, PersonX gives her a kiss, so PersonX is seen as romantic."}
{"input": "Input: Although <extra_id_0>, PersonX gives her a kiss, so PersonX is seen as romantic. ; Constraint: touch ; Output:", "cons": "[[\"touched\", \"touch\", \"touching\", \"touches\"]]", "gpt": "Although PersonY is seen as approachable, PersonX gives her a kiss, so PersonX is seen as romantic.", "neuro": "Although there is no touch, PersonX gives her a kiss, so PersonX is seen as romantic.", "vanilla": "Although there is no touch, PersonX gives her a kiss, so PersonX is seen as romantic."}
{"input": "Input: Although <extra_id_0>, PersonX gives her a kiss, so PersonX is seen as romantic. ; Constraint: touch, no ; Output:", "cons": "[[\"touched\", \"touch\", \"touching\", \"touches\"], [\"not\", \"no\"]]", "gpt": "Although PersonX does not touch her, PersonX gives her a kiss, so PersonX is seen as romantic.", "neuro": "Although no one touches, PersonX gives her a kiss, so PersonX is seen as romantic.", "vanilla": "Although no one touches, PersonX gives her a kiss, so PersonX is seen as romantic."}
{"input": "Input: PersonX gives her a kiss and <extra_id_0>, so PersonX feels romantic. ; Constraint: cross ; Output:", "cons": "[[\"crossed\", \"crosser\", \"cross\", \"crossing\", \"crossest\", \"crosses\"]]", "gpt": "PersonX gives her a cross and <extra_id_0>, so PersonX feels romantic.", "neuro": "PersonX gives her a kiss and they cross, so PersonX feels romantic.", "vanilla": "PersonX gives her a kiss and they cross, so PersonX feels romantic."}
{"input": "Input: PersonX gives her a kiss and <extra_id_0>, so PersonX feels romantic. ; Constraint: cross, no ; Output:", "cons": "[[\"crossed\", \"crosser\", \"cross\", \"crossing\", \"crossest\", \"crosses\"], [\"not\", \"no\"]]", "gpt": "PersonX gives her a kiss and realizes that she is crossing a line, so PersonX feels romantic.", "neuro": "PersonX gives her a kiss and does not cross, so PersonX feels romantic.", "vanilla": "PersonX gives her a kiss and does not cross, so PersonX feels romantic."}
{"input": "Input: PersonX gives her a kiss and <extra_id_0>, so PersonX feels romantic. ; Constraint: touch ; Output:", "cons": "[[\"touched\", \"touch\", \"touching\", \"touches\"]]", "gpt": "PersonX gives her a kiss and touches her face, so PersonX feels romantic.", "neuro": "PersonX gives her a kiss and touches her, so PersonX feels romantic.", "vanilla": "PersonX gives her a kiss and touches her, so PersonX feels romantic."}
{"input": "Input: PersonX gives her a kiss and <extra_id_0>, so PersonX feels romantic. ; Constraint: touch, no ; Output:", "cons": "[[\"touched\", \"touch\", \"touching\", \"touches\"], [\"not\", \"no\"]]", "gpt": "PersonX gives her a kiss but does not touch, so PersonX feels romantic.", "neuro": "PersonX gives her a kiss and does not touch her, so PersonX feels romantic.", "vanilla": "PersonX gives her a kiss and does not touch her, so PersonX feels romantic."}
{"input": "Input: PersonX gives her a kiss while <extra_id_0>, so PersonX feels romantic. ; Constraint: cross ; Output:", "cons": "[[\"crossed\", \"crosser\", \"cross\", \"crossing\", \"crossest\", \"crosses\"]]", "gpt": "PersonX gives her a kiss while crossing a busy street, so PersonX feels romantic.", "neuro": "PersonX gives her a kiss while they cross, so PersonX feels romantic.", "vanilla": "PersonX gives her a kiss while they cross, so PersonX feels romantic."}
{"input": "Input: PersonX gives her a kiss while <extra_id_0>, so PersonX feels romantic. ; Constraint: cross, no ; Output:", "cons": "[[\"crossed\", \"crosser\", \"cross\", \"crossing\", \"crossest\", \"crosses\"], [\"not\", \"no\"]]", "gpt": "PersonX does not cross while <extra_id_0>, so PersonX feels romantic.", "neuro": "PersonX gives her a kiss while no one crosses, so PersonX feels romantic.", "vanilla": "PersonX gives her a kiss while no one crosses, so PersonX feels romantic."}
{"input": "Input: PersonX gives her a kiss while <extra_id_0>, so PersonX feels romantic. ; Constraint: touch ; Output:", "cons": "[[\"touched\", \"touch\", \"touching\", \"touches\"]]", "gpt": "PersonX gives her a kiss while touch her, so PersonX feels romantic.", "neuro": "PersonX gives her a kiss while touching her, so PersonX feels romantic.", "vanilla": "PersonX gives her a kiss while touching her, so PersonX feels romantic."}
{"input": "Input: PersonX gives her a kiss while <extra_id_0>, so PersonX feels romantic. ; Constraint: touch, no ; Output:", "cons": "[[\"touched\", \"touch\", \"touching\", \"touches\"], [\"not\", \"no\"]]", "gpt": "PersonX gives her a kiss while no one touch, so PersonX feels romantic.", "neuro": "PersonX gives her a kiss while no one touches, so PersonX feels romantic.", "vanilla": "PersonX gives her a kiss while no one touches, so PersonX feels romantic."}
{"input": "Input: <extra_id_0> but PersonX gives her a kiss, so PersonX feels romantic. ; Constraint: cross ; Output:", "cons": "[[\"crossed\", \"crosser\", \"cross\", \"crossing\", \"crossest\", \"crosses\"]]", "gpt": "PersonX crosses the street but PersonX gives her a kiss, so PersonX feels romantic.", "neuro": "PersonX crosses but PersonX gives her a kiss, so PersonX feels romantic.", "vanilla": "PersonX crosses but PersonX gives her a kiss, so PersonX feels romantic."}
{"input": "Input: <extra_id_0> but PersonX gives her a kiss, so PersonX feels romantic. ; Constraint: cross, no ; Output:", "cons": "[[\"crossed\", \"crosser\", \"cross\", \"crossing\", \"crossest\", \"crosses\"], [\"not\", \"no\"]]", "gpt": "PersonX does not cross the street but PersonX gives her a kiss, so PersonX feels romantic.", "neuro": "PersonX is not cross but PersonX gives her a kiss, so PersonX feels romantic.", "vanilla": "PersonX is not cross but PersonX gives her a kiss, so PersonX feels romantic."}
{"input": "Input: <extra_id_0> but PersonX gives her a kiss, so PersonX feels romantic. ; Constraint: touch ; Output:", "cons": "[[\"touched\", \"touch\", \"touching\", \"touches\"]]", "gpt": "PersonX touches <extra_id_0>'s hair but PersonX gives her a kiss, so PersonX feels romantic.", "neuro": "PersonX touches PersonX but PersonX gives her a kiss, so PersonX feels romantic.", "vanilla": "PersonX touches PersonX but PersonX gives her a kiss, so PersonX feels romantic."}
{"input": "Input: <extra_id_0> but PersonX gives her a kiss, so PersonX feels romantic. ; Constraint: touch, no ; Output:", "cons": "[[\"touched\", \"touch\", \"touching\", \"touches\"], [\"not\", \"no\"]]", "gpt": "PersonX does not touch her but PersonX gives her a kiss, so PersonX feels romantic.", "neuro": "PersonX does not touch her but PersonX gives her a kiss, so PersonX feels romantic.", "vanilla": "PersonX does not touch her but PersonX gives her a kiss, so PersonX feels romantic."}
{"input": "Input: Although <extra_id_0>, PersonX gives her a kiss, so PersonX feels romantic. ; Constraint: cross ; Output:", "cons": "[[\"crossed\", \"crosser\", \"cross\", \"crossing\", \"crossest\", \"crosses\"]]", "gpt": "Although PersonX crosses the street, PersonX gives her a kiss, so PersonX feels romantic.", "neuro": "Although the cross, PersonX gives her a kiss, so PersonX feels romantic.", "vanilla": "Although the cross, PersonX gives her a kiss, so PersonX feels romantic."}
{"input": "Input: Although <extra_id_0>, PersonX gives her a kiss, so PersonX feels romantic. ; Constraint: cross, no ; Output:", "cons": "[[\"crossed\", \"crosser\", \"cross\", \"crossing\", \"crossest\", \"crosses\"], [\"not\", \"no\"]]", "gpt": "AlthoughPersonX does not cross the street, PersonX gives her a kiss, so PersonX feels romantic.", "neuro": "Although no one is cross, PersonX gives her a kiss, so PersonX feels romantic.", "vanilla": "Although no one is cross, PersonX gives her a kiss, so PersonX feels romantic."}
{"input": "Input: Although <extra_id_0>, PersonX gives her a kiss, so PersonX feels romantic. ; Constraint: touch ; Output:", "cons": "[[\"touched\", \"touch\", \"touching\", \"touches\"]]", "gpt": "Although PersonX touches her gently, PersonX gives her a kiss, so PersonX feels romantic.", "neuro": "Although there is no touch, PersonX gives her a kiss, so PersonX feels romantic.", "vanilla": "Although there is no touch, PersonX gives her a kiss, so PersonX feels romantic."}
{"input": "Input: Although <extra_id_0>, PersonX gives her a kiss, so PersonX feels romantic. ; Constraint: touch, no ; Output:", "cons": "[[\"touched\", \"touch\", \"touching\", \"touches\"], [\"not\", \"no\"]]", "gpt": "Although PersonX does not touch her, PersonX gives her a kiss, so PersonX feels romantic.", "neuro": "Although no one touches, PersonX gives her a kiss, so PersonX feels romantic.", "vanilla": "Although no one touches, PersonX gives her a kiss, so PersonX feels romantic."}
{"input": "Input: PersonX reacts to and <extra_id_0>, so PersonX is seen as angry. ; Constraint: accept ; Output:", "cons": "[[\"accepted\", \"accept\", \"accepting\", \"accepts\"]]", "gpt": "PersonX reacts to a situation and accepts it, so PersonX is seen as angry.", "neuro": "PersonX reacts to and accepts criticism, so PersonX is seen as angry.", "vanilla": "PersonX reacts to and accepts criticism, so PersonX is seen as angry."}
{"input": "Input: PersonX reacts to and <extra_id_0>, so PersonX is seen as angry. ; Constraint: accept, no ; Output:", "cons": "[[\"accepted\", \"accept\", \"accepting\", \"accepts\"], [\"not\", \"no\"]]", "gpt": "PersonX reacts to and refuses the offer, so PersonX is seen as angry.", "neuro": "PersonX reacts to and does not accept, so PersonX is seen as angry.", "vanilla": "PersonX reacts to and does not accept, so PersonX is seen as angry."}
{"input": "Input: PersonX reacts to and <extra_id_0>, so PersonX is seen as angry. ; Constraint: return ; Output:", "cons": "[[\"returned\", \"return\", \"returning\", \"returns\"]]", "gpt": "PersonX reacts to PersonY's return and <extra_id_0>, so PersonX is seen as angry.", "neuro": "PersonX reacts to and does not return, so PersonX is seen as angry.", "vanilla": "PersonX reacts to and does not return, so PersonX is seen as angry."}
{"input": "Input: PersonX reacts to and <extra_id_0>, so PersonX is seen as angry. ; Constraint: return, no ; Output:", "cons": "[[\"returned\", \"return\", \"returning\", \"returns\"], [\"not\", \"no\"]]", "gpt": "PersonX reacts to and does not return, so PersonX is seen as angry.", "neuro": "PersonX reacts to and does not return, so PersonX is seen as angry.", "vanilla": "PersonX reacts to and does not return, so PersonX is seen as angry."}
{"input": "Input: PersonX reacts to while <extra_id_0>, so PersonX is seen as angry. ; Constraint: accept ; Output:", "cons": "[[\"accepted\", \"accept\", \"accepting\", \"accepts\"]]", "gpt": "PersonX reacts to while accepting the challenge, so PersonX is seen as angry.", "neuro": "PersonX reacts to while accepting it, so PersonX is seen as angry.", "vanilla": "PersonX reacts to while accepting it, so PersonX is seen as angry."}
{"input": "Input: PersonX reacts to while <extra_id_0>, so PersonX is seen as angry. ; Constraint: accept, no ; Output:", "cons": "[[\"accepted\", \"accept\", \"accepting\", \"accepts\"], [\"not\", \"no\"]]", "gpt": "PersonX reacts to while no one accept, so PersonX is seen as angry.", "neuro": "PersonX reacts to while not accepting, so PersonX is seen as angry.", "vanilla": "PersonX reacts to while not accepting, so PersonX is seen as angry."}
{"input": "Input: PersonX reacts to while <extra_id_0>, so PersonX is seen as angry. ; Constraint: return ; Output:", "cons": "[[\"returned\", \"return\", \"returning\", \"returns\"]]", "gpt": "PersonX reacts to <extra_id_0>'s return while PersonX is away, so PersonX is seen as angry.", "neuro": "PersonX reacts to while returning home, so PersonX is seen as angry.", "vanilla": "PersonX reacts to while returning home, so PersonX is seen as angry."}
{"input": "Input: PersonX reacts to while <extra_id_0>, so PersonX is seen as angry. ; Constraint: return, no ; Output:", "cons": "[[\"returned\", \"return\", \"returning\", \"returns\"], [\"not\", \"no\"]]", "gpt": "PersonX reacts to PersonY's return while no <extra_id_0>, so PersonX is seen as angry.", "neuro": "PersonX reacts to while not returning, so PersonX is seen as angry.", "vanilla": "PersonX reacts to while not returning, so PersonX is seen as angry."}
{"input": "Input: <extra_id_0> but PersonX reacts to, so PersonX is seen as angry. ; Constraint: accept ; Output:", "cons": "[[\"accepted\", \"accept\", \"accepting\", \"accepts\"]]", "gpt": "PersonX accepts but PersonX reacts to, so PersonX is seen as angry.", "neuro": "PersonX accepts but PersonX reacts to, so PersonX is seen as angry.", "vanilla": "PersonX accepts but PersonX reacts to, so PersonX is seen as angry."}
{"input": "Input: <extra_id_0> but PersonX reacts to, so PersonX is seen as angry. ; Constraint: accept, no ; Output:", "cons": "[[\"accepted\", \"accept\", \"accepting\", \"accepts\"], [\"not\", \"no\"]]", "gpt": "PersonX does not accept but PersonX reacts to, so PersonX is seen as angry.", "neuro": "PersonX does not accept but PersonX reacts to, so PersonX is seen as angry.", "vanilla": "PersonX does not accept but PersonX reacts to, so PersonX is seen as angry."}
{"input": "Input: <extra_id_0> but PersonX reacts to, so PersonX is seen as angry. ; Constraint: return ; Output:", "cons": "[[\"returned\", \"return\", \"returning\", \"returns\"]]", "gpt": "PersonX returns but PersonX reacts to, so PersonX is seen as angry.", "neuro": "PersonX returns but PersonX reacts to, so PersonX is seen as angry.", "vanilla": "PersonX returns but PersonX reacts to, so PersonX is seen as angry."}
{"input": "Input: <extra_id_0> but PersonX reacts to, so PersonX is seen as angry. ; Constraint: return, no ; Output:", "cons": "[[\"returned\", \"return\", \"returning\", \"returns\"], [\"not\", \"no\"]]", "gpt": "PersonX does not return but PersonX reacts to, so PersonX is seen as angry.", "neuro": "PersonX does not return but PersonX reacts to, so PersonX is seen as angry.", "vanilla": "PersonX does not return but PersonX reacts to, so PersonX is seen as angry."}
{"input": "Input: Although <extra_id_0>, PersonX reacts to, so PersonX is seen as angry. ; Constraint: accept ; Output:", "cons": "[[\"accepted\", \"accept\", \"accepting\", \"accepts\"]]", "gpt": "Although PersonX accepts the challenge, PersonX reacts to, so PersonX is seen as angry.", "neuro": "Although anger cannot be accepted, PersonX reacts to, so PersonX is seen as angry.", "vanilla": "Although acceptance is difficult, PersonX reacts to, so PersonX is seen as angry."}
{"input": "Input: Although <extra_id_0>, PersonX reacts to, so PersonX is seen as angry. ; Constraint: accept, no ; Output:", "cons": "[[\"accepted\", \"accept\", \"accepting\", \"accepts\"], [\"not\", \"no\"]]", "gpt": "Although no one accepts, PersonX reacts to, so PersonX is seen as angry.", "neuro": "Although no one accepts, PersonX reacts to, so PersonX is seen as angry.", "vanilla": "Although no one accepts, PersonX reacts to, so PersonX is seen as angry."}
{"input": "Input: Although <extra_id_0>, PersonX reacts to, so PersonX is seen as angry. ; Constraint: return ; Output:", "cons": "[[\"returned\", \"return\", \"returning\", \"returns\"]]", "gpt": "Although PersonY returns, PersonX reacts angrily to PersonY, so PersonX is seen as angry.", "neuro": "Although the return, PersonX reacts to, so PersonX is seen as angry.", "vanilla": "Although the return, PersonX reacts to, so PersonX is seen as angry."}
{"input": "Input: Although <extra_id_0>, PersonX reacts to, so PersonX is seen as angry. ; Constraint: return, no ; Output:", "cons": "[[\"returned\", \"return\", \"returning\", \"returns\"], [\"not\", \"no\"]]", "gpt": "Although PersonX does not return, PersonX reacts to, so PersonX is seen as angry.", "neuro": "Although no one returns, PersonX reacts to, so PersonX is seen as angry.", "vanilla": "Although no one returns, PersonX reacts to, so PersonX is seen as angry."}
{"input": "Input: PersonX reacts to and <extra_id_0>, so PersonX feels irritated. ; Constraint: accept ; Output:", "cons": "[[\"accepted\", \"accept\", \"accepting\", \"accepts\"]]", "gpt": "PersonX reacts to and accepts the new challenge, so PersonX feels excited.", "neuro": "PersonX reacts to and accepts, so PersonX feels irritated.", "vanilla": "PersonX reacts to and accepts, so PersonX feels irritated."}
{"input": "Input: PersonX reacts to and <extra_id_0>, so PersonX feels irritated. ; Constraint: accept, no ; Output:", "cons": "[[\"accepted\", \"accept\", \"accepting\", \"accepts\"], [\"not\", \"no\"]]", "gpt": "PersonX reacts to and rejects the offer, so PersonX feels irritated.", "neuro": "PersonX reacts to and does not accept, so PersonX feels irritated.", "vanilla": "PersonX reacts to and does not accept, so PersonX feels irritated."}
{"input": "Input: PersonX reacts to and <extra_id_0>, so PersonX feels irritated. ; Constraint: return ; Output:", "cons": "[[\"returned\", \"return\", \"returning\", \"returns\"]]", "gpt": "PersonX reacts to a return and <extra_id_0>, so PersonX feels irritated.", "neuro": "PersonX reacts to and does not return, so PersonX feels irritated.", "vanilla": "PersonX reacts to and does not return, so PersonX feels irritated."}
{"input": "Input: PersonX reacts to and <extra_id_0>, so PersonX feels irritated. ; Constraint: return, no ; Output:", "cons": "[[\"returned\", \"return\", \"returning\", \"returns\"], [\"not\", \"no\"]]", "gpt": "PersonX reacts to and does not return <extra_id_0>, so PersonX feels irritated.", "neuro": "PersonX reacts to and does not return, so PersonX feels irritated.", "vanilla": "PersonX reacts to and does not return, so PersonX feels irritated."}
{"input": "Input: PersonX reacts to while <extra_id_0>, so PersonX feels irritated. ; Constraint: accept ; Output:", "cons": "[[\"accepted\", \"accept\", \"accepting\", \"accepts\"]]", "gpt": "PersonX reacts to while PersonY accepts, so PersonX feels irritated.", "neuro": "PersonX reacts to while not accepting, so PersonX feels irritated.", "vanilla": "PersonX reacts to while not accepting, so PersonX feels irritated."}
{"input": "Input: PersonX reacts to while <extra_id_0>, so PersonX feels irritated. ; Constraint: accept, no ; Output:", "cons": "[[\"accepted\", \"accept\", \"accepting\", \"accepts\"], [\"not\", \"no\"]]", "gpt": "PersonX reacts to while no one accept, so PersonX feels irritated.", "neuro": "PersonX reacts to while not accepting, so PersonX feels irritated.", "vanilla": "PersonX reacts to while not accepting, so PersonX feels irritated."}
{"input": "Input: PersonX reacts to while <extra_id_0>, so PersonX feels irritated. ; Constraint: return ; Output:", "cons": "[[\"returned\", \"return\", \"returning\", \"returns\"]]", "gpt": "PersonX reacts to while PersonY returns, so PersonX feels irritated.", "neuro": "PersonX reacts to while returning home, so PersonX feels irritated.", "vanilla": "PersonX reacts to while returning home, so PersonX feels irritated."}
{"input": "Input: PersonX reacts to while <extra_id_0>, so PersonX feels irritated. ; Constraint: return, no ; Output:", "cons": "[[\"returned\", \"return\", \"returning\", \"returns\"], [\"not\", \"no\"]]", "gpt": "PersonX reacts to while no one return, so PersonX feels irritated.", "neuro": "PersonX reacts to while not returning, so PersonX feels irritated.", "vanilla": "PersonX reacts to while not returning, so PersonX feels irritated."}
{"input": "Input: <extra_id_0> but PersonX reacts to, so PersonX feels irritated. ; Constraint: accept ; Output:", "cons": "[[\"accepted\", \"accept\", \"accepting\", \"accepts\"]]", "gpt": "PersonX accepts <extra_id_0> but PersonX reacts to, so PersonX feels irritated.", "neuro": "PersonX accepts but PersonX reacts to, so PersonX feels irritated.", "vanilla": "PersonX accepts but PersonX reacts to, so PersonX feels irritated."}
{"input": "Input: <extra_id_0> but PersonX reacts to, so PersonX feels irritated. ; Constraint: accept, no ; Output:", "cons": "[[\"accepted\", \"accept\", \"accepting\", \"accepts\"], [\"not\", \"no\"]]", "gpt": "PersonX does not accept the answer but PersonX reacts to, so PersonX feels irritated.", "neuro": "PersonX does not accept but PersonX reacts to, so PersonX feels irritated.", "vanilla": "PersonX does not accept but PersonX reacts to, so PersonX feels irritated."}
{"input": "Input: <extra_id_0> but PersonX reacts to, so PersonX feels irritated. ; Constraint: return ; Output:", "cons": "[[\"returned\", \"return\", \"returning\", \"returns\"]]", "gpt": "PersonX returns <extra_id_0> but PersonX reacts to, so PersonX feels irritated.", "neuro": "PersonX returns but PersonX reacts to, so PersonX feels irritated.", "vanilla": "PersonX returns but PersonX reacts to, so PersonX feels irritated."}
{"input": "Input: <extra_id_0> but PersonX reacts to, so PersonX feels irritated. ; Constraint: return, no ; Output:", "cons": "[[\"returned\", \"return\", \"returning\", \"returns\"], [\"not\", \"no\"]]", "gpt": "PersonX does not want to return but PersonX reacts to, so PersonX feels irritated.", "neuro": "PersonX does not return but PersonX reacts to, so PersonX feels irritated.", "vanilla": "PersonX does not return but PersonX reacts to, so PersonX feels irritated."}
{"input": "Input: Although <extra_id_0>, PersonX reacts to, so PersonX feels irritated. ; Constraint: accept ; Output:", "cons": "[[\"accepted\", \"accept\", \"accepting\", \"accepts\"]]", "gpt": "Although PersonY accepts, PersonX reacts to PersonY's action, so PersonX feels irritated.", "neuro": "Although it is difficult to accept, PersonX reacts to, so PersonX feels irritated.", "vanilla": "Although it is difficult to accept, PersonX reacts to, so PersonX feels irritated."}
{"input": "Input: Although <extra_id_0>, PersonX reacts to, so PersonX feels irritated. ; Constraint: accept, no ; Output:", "cons": "[[\"accepted\", \"accept\", \"accepting\", \"accepts\"], [\"not\", \"no\"]]", "gpt": "Although no one accept PersonX's request, PersonX reacts to, so PersonX feels irritated.", "neuro": "Although no one accepts, PersonX reacts to, so PersonX feels irritated.", "vanilla": "Although no one accepts, PersonX reacts to, so PersonX feels irritated."}
{"input": "Input: Although <extra_id_0>, PersonX reacts to, so PersonX feels irritated. ; Constraint: return ; Output:", "cons": "[[\"returned\", \"return\", \"returning\", \"returns\"]]", "gpt": "Although PersonX returns, PersonX reacts to, so PersonX feels irritated.", "neuro": "Although the return, PersonX reacts to, so PersonX feels irritated.", "vanilla": "Although the return, PersonX reacts to, so PersonX feels irritated."}
{"input": "Input: Although <extra_id_0>, PersonX reacts to, so PersonX feels irritated. ; Constraint: return, no ; Output:", "cons": "[[\"returned\", \"return\", \"returning\", \"returns\"], [\"not\", \"no\"]]", "gpt": "Although return is not an option, PersonX reacts to, so PersonX feels irritated.", "neuro": "Although no one returns, PersonX reacts to, so PersonX feels irritated.", "vanilla": "Although no one returns, PersonX reacts to, so PersonX feels irritated."}
{"input": "Input: PersonX walks through the mud and <extra_id_0>, so PersonX feels wet. ; Constraint: water ; Output:", "cons": "[[\"watering\", \"watered\", \"water\", \"waters\"]]", "gpt": "PersonX walks through the water and feels wet.", "neuro": "PersonX walks through the mud and the water, so PersonX feels wet.", "vanilla": "PersonX walks through the mud and the water, so PersonX feels wet."}
{"input": "Input: PersonX walks through the mud and <extra_id_0>, so PersonX feels wet. ; Constraint: water, no ; Output:", "cons": "[[\"watering\", \"watered\", \"water\", \"waters\"], [\"not\", \"no\"]]", "gpt": "PersonX walks through the mud and does not get wet, so PersonX feels wet.", "neuro": "PersonX walks through the mud and no water, so PersonX feels wet.", "vanilla": "PersonX walks through the mud and no water, so PersonX feels wet."}
{"input": "Input: PersonX walks through the mud and <extra_id_0>, so PersonX feels wet. ; Constraint: seed ; Output:", "cons": "[[\"seeding\", \"seeds\", \"seeded\", \"seed\"]]", "gpt": "PersonX walks through the mud and sees a seed, so PersonX feels wet.", "neuro": "PersonX walks through the mud and plants a seed, so PersonX feels wet.", "vanilla": "PersonX walks through the mud and plants a seed, so PersonX feels wet."}
{"input": "Input: PersonX walks through the mud and <extra_id_0>, so PersonX feels wet. ; Constraint: seed, no ; Output:", "cons": "[[\"seeding\", \"seeds\", \"seeded\", \"seed\"], [\"not\", \"no\"]]", "gpt": "PersonX walks through the mud and no seed, so PersonX feels wet.", "neuro": "PersonX walks through the mud and no seed, so PersonX feels wet.", "vanilla": "PersonX walks through the mud and no seed, so PersonX feels wet."}
{"input": "Input: PersonX walks through the mud while <extra_id_0>, so PersonX feels wet. ; Constraint: water ; Output:", "cons": "[[\"watering\", \"watered\", \"water\", \"waters\"]]", "gpt": "PersonX walks through the puddles while water soaks PersonX's shoes, so PersonX feels wet.", "neuro": "PersonX walks through the mud while there is water, so PersonX feels wet.", "vanilla": "PersonX walks through the mud while there is water, so PersonX feels wet."}
{"input": "Input: PersonX walks through the mud while <extra_id_0>, so PersonX feels wet. ; Constraint: water, no ; Output:", "cons": "[[\"watering\", \"watered\", \"water\", \"waters\"], [\"not\", \"no\"]]", "gpt": "PersonX walks through the mud while no water, so PersonX feels wet.", "neuro": "PersonX walks through the mud while no water, so PersonX feels wet.", "vanilla": "PersonX walks through the mud while no water, so PersonX feels wet."}
{"input": "Input: PersonX walks through the mud while <extra_id_0>, so PersonX feels wet. ; Constraint: seed ; Output:", "cons": "[[\"seeding\", \"seeds\", \"seeded\", \"seed\"]]", "gpt": "PersonX walks through the mud while planting a seed, so PersonX feels wet.", "neuro": "PersonX walks through the mud while the seed falls, so PersonX feels wet.", "vanilla": "PersonX walks through the mud while the seed falls, so PersonX feels wet."}
{"input": "Input: PersonX walks through the mud while <extra_id_0>, so PersonX feels wet. ; Constraint: seed, no ; Output:", "cons": "[[\"seeding\", \"seeds\", \"seeded\", \"seed\"], [\"not\", \"no\"]]", "gpt": "PersonX walks through the mud while no seed, so PersonX feels wet.", "neuro": "PersonX walks through the mud while no seed, so PersonX feels wet.", "vanilla": "PersonX walks through the mud while no seed, so PersonX feels wet."}
{"input": "Input: <extra_id_0> but PersonX walks through the mud, so PersonX feels wet. ; Constraint: water ; Output:", "cons": "[[\"watering\", \"watered\", \"water\", \"waters\"]]", "gpt": "PersonX wades through the water but PersonX walks through the mud, so PersonX feels wet.", "neuro": "There is water but PersonX walks through the mud, so PersonX feels wet.", "vanilla": "There is water but PersonX walks through the mud, so PersonX feels wet."}
{"input": "Input: <extra_id_0> but PersonX walks through the mud, so PersonX feels wet. ; Constraint: water, no ; Output:", "cons": "[[\"watering\", \"watered\", \"water\", \"waters\"], [\"not\", \"no\"]]", "gpt": "PersonX does not have water but PersonX walks through the mud, so PersonX feels wet.", "neuro": "There is no water but PersonX walks through the mud, so PersonX feels wet.", "vanilla": "There is no water but PersonX walks through the mud, so PersonX feels wet."}
{"input": "Input: <extra_id_0> but PersonX walks through the mud, so PersonX feels wet. ; Constraint: seed ; Output:", "cons": "[[\"seeding\", \"seeds\", \"seeded\", \"seed\"]]", "gpt": "PersonX sows the seed but PersonX walks through the mud, so PersonX feels wet.", "neuro": "PersonX plants a seed but PersonX walks through the mud, so PersonX feels wet.", "vanilla": "PersonX plants a seed but PersonX walks through the mud, so PersonX feels wet."}
{"input": "Input: <extra_id_0> but PersonX walks through the mud, so PersonX feels wet. ; Constraint: seed, no ; Output:", "cons": "[[\"seeding\", \"seeds\", \"seeded\", \"seed\"], [\"not\", \"no\"]]", "gpt": "PersonX finds no seed but PersonX walks through the mud, so PersonX feels wet.", "neuro": "PersonX does not plant a seed but PersonX walks through the mud, so PersonX feels wet.", "vanilla": "No seed but PersonX walks through the mud, so PersonX feels wet."}
{"input": "Input: Although <extra_id_0>, PersonX walks through the mud, so PersonX feels wet. ; Constraint: water ; Output:", "cons": "[[\"watering\", \"watered\", \"water\", \"waters\"]]", "gpt": "Although PersonX walks through the water, PersonX feels wet.", "neuro": "Although there is water, PersonX walks through the mud, so PersonX feels wet.", "vanilla": "Although it is raining, PersonX walks through the mud, so PersonX feels wet."}
{"input": "Input: Although <extra_id_0>, PersonX walks through the mud, so PersonX feels wet. ; Constraint: water, no ; Output:", "cons": "[[\"watering\", \"watered\", \"water\", \"waters\"], [\"not\", \"no\"]]", "gpt": "Although water splashes PersonX, PersonX walks through the mud, so PersonX feels wet.", "neuro": "Although there is no water, PersonX walks through the mud, so PersonX feels wet.", "vanilla": "Although there is no water, PersonX walks through the mud, so PersonX feels wet."}
{"input": "Input: Although <extra_id_0>, PersonX walks through the mud, so PersonX feels wet. ; Constraint: seed ; Output:", "cons": "[[\"seeding\", \"seeds\", \"seeded\", \"seed\"]]", "gpt": "Although seed falls off the tree, PersonX walks through the mud, so PersonX feels wet.", "neuro": "Although there is a seed, PersonX walks through the mud, so PersonX feels wet.", "vanilla": "Although there is a seed, PersonX walks through the mud, so PersonX feels wet."}
{"input": "Input: Although <extra_id_0>, PersonX walks through the mud, so PersonX feels wet. ; Constraint: seed, no ; Output:", "cons": "[[\"seeding\", \"seeds\", \"seeded\", \"seed\"], [\"not\", \"no\"]]", "gpt": "Although seed does not grow, PersonX walks through the mud, so PersonX feels wet.", "neuro": "Although there is no seed, PersonX walks through the mud, so PersonX feels wet.", "vanilla": "Although there is no seed, PersonX walks through the mud, so PersonX feels wet."}
{"input": "Input: PersonX declares to leave and <extra_id_0>, so PersonX is seen as courageous. ; Constraint: prepare ; Output:", "cons": "[[\"preparing\", \"prepares\", \"prepared\", \"prepare\"]]", "gpt": "PersonX prepares to leave and <extra_id_0>, so PersonX is seen as courageous.", "neuro": "PersonX declares to leave and prepares, so PersonX is seen as courageous.", "vanilla": "PersonX declares to leave and prepares, so PersonX is seen as courageous."}
{"input": "Input: PersonX declares to leave and <extra_id_0>, so PersonX is seen as courageous. ; Constraint: prepare, no ; Output:", "cons": "[[\"preparing\", \"prepares\", \"prepared\", \"prepare\"], [\"not\", \"no\"]]", "gpt": "PersonX declares to leave and no prepare, so PersonX is seen as courageous.", "neuro": "PersonX declares to leave and does not prepare, so PersonX is seen as courageous.", "vanilla": "PersonX declares to leave and does not prepare, so PersonX is seen as courageous."}
{"input": "Input: PersonX declares to leave and <extra_id_0>, so PersonX is seen as courageous. ; Constraint: declaration ; Output:", "cons": "[[\"declarations\", \"declaration\"]]", "gpt": "PersonX declares to leave and go, so PersonX is seen as courageous.", "neuro": "PersonX declares to leave and make a declaration, so PersonX is seen as courageous.", "vanilla": "PersonX declares to leave and not return, so PersonX is seen as courageous."}
{"input": "Input: PersonX declares to leave and <extra_id_0>, so PersonX is seen as courageous. ; Constraint: declaration, no ; Output:", "cons": "[[\"declarations\", \"declaration\"], [\"not\", \"no\"]]", "gpt": "PersonX declares to leave and no longer interested, so PersonX is seen as courageous.", "neuro": "PersonX declares to leave and no declaration, so PersonX is seen as courageous.", "vanilla": "PersonX declares to leave and not return, so PersonX is seen as courageous."}
{"input": "Input: PersonX declares to leave while <extra_id_0>, so PersonX is seen as courageous. ; Constraint: prepare ; Output:", "cons": "[[\"preparing\", \"prepares\", \"prepared\", \"prepare\"]]", "gpt": "PersonX declares to leave while prepares to go, so PersonX is seen as courageous.", "neuro": "PersonX declares to leave while preparing, so PersonX is seen as courageous.", "vanilla": "PersonX declares to leave while preparing, so PersonX is seen as courageous."}
{"input": "Input: PersonX declares to leave while <extra_id_0>, so PersonX is seen as courageous. ; Constraint: prepare, no ; Output:", "cons": "[[\"preparing\", \"prepares\", \"prepared\", \"prepare\"], [\"not\", \"no\"]]", "gpt": "PersonX declares to leave while no prepare, so PersonX is seen as courageous.", "neuro": "PersonX declares to leave while no one prepares, so PersonX is seen as courageous.", "vanilla": "PersonX declares to leave while no one prepares, so PersonX is seen as courageous."}
{"input": "Input: PersonX declares to leave while <extra_id_0>, so PersonX is seen as courageous. ; Constraint: declaration ; Output:", "cons": "[[\"declarations\", \"declaration\"]]", "gpt": "PersonX declares to leave while making a declaration, so PersonX is seen as courageous.", "neuro": "PersonX declares to leave while declaration is made, so PersonX is seen as courageous.", "vanilla": "PersonX declares to leave while others stay, so PersonX is seen as courageous."}
{"input": "Input: PersonX declares to leave while <extra_id_0>, so PersonX is seen as courageous. ; Constraint: declaration, no ; Output:", "cons": "[[\"declarations\", \"declaration\"], [\"not\", \"no\"]]", "gpt": "PersonX declares to leave while no one listens, so PersonX is seen as courageous.", "neuro": "PersonX declares to leave while no declaration is made, so PersonX is seen as courageous.", "vanilla": "PersonX declares to leave while no one comes, so PersonX is seen as courageous."}
{"input": "Input: <extra_id_0> but PersonX declares to leave, so PersonX is seen as courageous. ; Constraint: prepare ; Output:", "cons": "[[\"preparing\", \"prepares\", \"prepared\", \"prepare\"]]", "gpt": "PersonX prepares but PersonX declares to leave, so PersonX is seen as courageous.", "neuro": "PersonX prepares but PersonX declares to leave, so PersonX is seen as courageous.", "vanilla": "PersonX prepares but PersonX declares to leave, so PersonX is seen as courageous."}
{"input": "Input: <extra_id_0> but PersonX declares to leave, so PersonX is seen as courageous. ; Constraint: prepare, no ; Output:", "cons": "[[\"preparing\", \"prepares\", \"prepared\", \"prepare\"], [\"not\", \"no\"]]", "gpt": "PersonX does not prepare but PersonX declares to leave, so PersonX is seen as courageous.", "neuro": "PersonX does not prepare but PersonX declares to leave, so PersonX is seen as courageous.", "vanilla": "PersonX does not prepare but PersonX declares to leave, so PersonX is seen as courageous."}
{"input": "Input: <extra_id_0> but PersonX declares to leave, so PersonX is seen as courageous. ; Constraint: declaration ; Output:", "cons": "[[\"declarations\", \"declaration\"]]", "gpt": "PersonX's declaration but PersonX declares to leave, so PersonX is seen as courageous.", "neuro": "A declaration is made but PersonX declares to leave, so PersonX is seen as courageous.", "vanilla": "PersonX declares to leave but PersonX declares to leave, so PersonX is seen as courageous."}
{"input": "Input: <extra_id_0> but PersonX declares to leave, so PersonX is seen as courageous. ; Constraint: declaration, no ; Output:", "cons": "[[\"declarations\", \"declaration\"], [\"not\", \"no\"]]", "gpt": "<extra_id_0> but PersonX does not declare to leave, so PersonX is seen as courageous.", "neuro": "PersonX does not make a declaration but PersonX declares to leave, so PersonX is seen as courageous.", "vanilla": "No declaration but PersonX declares to leave, so PersonX is seen as courageous."}
{"input": "Input: Although <extra_id_0>, PersonX declares to leave, so PersonX is seen as courageous. ; Constraint: prepare ; Output:", "cons": "[[\"preparing\", \"prepares\", \"prepared\", \"prepare\"]]", "gpt": "Although prepares to leave, PersonX declares to leave, so PersonX is seen as courageous.", "neuro": "Although preparing, PersonX declares to leave, so PersonX is seen as courageous.", "vanilla": "Although preparation is needed, PersonX declares to leave, so PersonX is seen as courageous."}
{"input": "Input: Although <extra_id_0>, PersonX declares to leave, so PersonX is seen as courageous. ; Constraint: prepare, no ; Output:", "cons": "[[\"preparing\", \"prepares\", \"prepared\", \"prepare\"], [\"not\", \"no\"]]", "gpt": "Although no prepare, PersonX declares to leave, so PersonX is seen as courageous.", "neuro": "Although no one prepares, PersonX declares to leave, so PersonX is seen as courageous.", "vanilla": "Although no one prepares, PersonX declares to leave, so PersonX is seen as courageous."}
{"input": "Input: Although <extra_id_0>, PersonX declares to leave, so PersonX is seen as courageous. ; Constraint: declaration ; Output:", "cons": "[[\"declarations\", \"declaration\"]]", "gpt": "Although PersonX's declaration, PersonX declares to leave, so PersonX is seen as courageous.", "neuro": "Although it is a declaration, PersonX declares to leave, so PersonX is seen as courageous.", "vanilla": "Although it is a declaration, PersonX declares to leave, so PersonX is seen as courageous."}
{"input": "Input: Although <extra_id_0>, PersonX declares to leave, so PersonX is seen as courageous. ; Constraint: declaration, no ; Output:", "cons": "[[\"declarations\", \"declaration\"], [\"not\", \"no\"]]", "gpt": "Although no declaration is made, PersonX declares to leave, so PersonX is seen as courageous.", "neuro": "Although no declaration is made, PersonX declares to leave, so PersonX is seen as courageous.", "vanilla": "Although no one comes, PersonX declares to leave, so PersonX is seen as courageous."}
{"input": "Input: PersonX turns up at her place and <extra_id_0>, so PersonX is seen as reliable. ; Constraint: location ; Output:", "cons": "[[\"locations\", \"location\"]]", "gpt": "PersonX turns up at her place and the location is tidy, so PersonX is seen as reliable.", "neuro": "PersonX turns up at her place and knows the location, so PersonX is seen as reliable.", "vanilla": "PersonX turns up at her place and is on time, so PersonX is seen as reliable."}
{"input": "Input: PersonX turns up at her place and <extra_id_0>, so PersonX is seen as reliable. ; Constraint: location, no ; Output:", "cons": "[[\"locations\", \"location\"], [\"not\", \"no\"]]", "gpt": "PersonX turns up at her place and is not located, so PersonX is seen as reliable.", "neuro": "PersonX turns up at her place and does not change location, so PersonX is seen as reliable.", "vanilla": "PersonX turns up at her place and does not move, so PersonX is seen as reliable."}
{"input": "Input: PersonX turns up at her place and <extra_id_0>, so PersonX is seen as reliable. ; Constraint: house ; Output:", "cons": "[[\"houses\", \"housing\", \"housed\", \"house\"]]", "gpt": "PersonX turns up at her house and <extra_id_0>, so PersonX is seen as reliable.", "neuro": "PersonX turns up at her place and cleans the house, so PersonX is seen as reliable.", "vanilla": "PersonX turns up at her place and cleans the house, so PersonX is seen as reliable."}
{"input": "Input: PersonX turns up at her place and <extra_id_0>, so PersonX is seen as reliable. ; Constraint: house, no ; Output:", "cons": "[[\"houses\", \"housing\", \"housed\", \"house\"], [\"not\", \"no\"]]", "gpt": "PersonX turns up at her place and no one is home, so PersonX is seen as reliable.", "neuro": "PersonX turns up at her place and no one is in the house, so PersonX is seen as reliable.", "vanilla": "PersonX turns up at her place and no one is in the house, so PersonX is seen as reliable."}
{"input": "Input: PersonX turns up at her place while <extra_id_0>, so PersonX is seen as reliable. ; Constraint: location ; Output:", "cons": "[[\"locations\", \"location\"]]", "gpt": "PersonX turns up at her place while at work, so PersonX is seen as reliable.", "neuro": "PersonX turns up at her place while on location, so PersonX is seen as reliable.", "vanilla": "PersonX turns up at her place while on location, so PersonX is seen as reliable."}
{"input": "Input: PersonX turns up at her place while <extra_id_0>, so PersonX is seen as reliable. ; Constraint: location, no ; Output:", "cons": "[[\"locations\", \"location\"], [\"not\", \"no\"]]", "gpt": "PersonX turns up at her place while no one is watching, so PersonX is seen as reliable.", "neuro": "PersonX turns up at her place while no one is in the location, so PersonX is seen as reliable.", "vanilla": "PersonX turns up at her place while no one is there, so PersonX is seen as reliable."}
{"input": "Input: PersonX turns up at her place while <extra_id_0>, so PersonX is seen as reliable. ; Constraint: house ; Output:", "cons": "[[\"houses\", \"housing\", \"housed\", \"house\"]]", "gpt": "PersonX turns up at her house while the party is in full swing, so PersonX is seen as reliable.", "neuro": "PersonX turns up at her place while the house is empty, so PersonX is seen as reliable.", "vanilla": "PersonX turns up at her place while the house is empty, so PersonX is seen as reliable."}
{"input": "Input: PersonX turns up at her place while <extra_id_0>, so PersonX is seen as reliable. ; Constraint: house, no ; Output:", "cons": "[[\"houses\", \"housing\", \"housed\", \"house\"], [\"not\", \"no\"]]", "gpt": "PersonX turns up at her place while no one is home, so PersonX is seen as reliable.", "neuro": "PersonX turns up at her place while no one is in the house, so PersonX is seen as reliable.", "vanilla": "PersonX turns up at her place while no one is in the house, so PersonX is seen as reliable."}
{"input": "Input: <extra_id_0> but PersonX turns up at her place, so PersonX is seen as reliable. ; Constraint: location ; Output:", "cons": "[[\"locations\", \"location\"]]", "gpt": "Although her location is a secret, PersonX turns up at her place, so PersonX is seen as reliable.", "neuro": "PersonX's location but PersonX turns up at her place, so PersonX is seen as reliable.", "vanilla": "PersonX's location but PersonX turns up at her place, so PersonX is seen as reliable."}
{"input": "Input: <extra_id_0> but PersonX turns up at her place, so PersonX is seen as reliable. ; Constraint: location, no ; Output:", "cons": "[[\"locations\", \"location\"], [\"not\", \"no\"]]", "gpt": "PersonX does not know the location but PersonX turns up at her place, so PersonX is seen as reliable.", "neuro": "PersonX has no location but PersonX turns up at her place, so PersonX is seen as reliable.", "vanilla": "No location but PersonX turns up at her place, so PersonX is seen as reliable."}
{"input": "Input: <extra_id_0> but PersonX turns up at her place, so PersonX is seen as reliable. ; Constraint: house ; Output:", "cons": "[[\"houses\", \"housing\", \"housed\", \"house\"]]", "gpt": "PersonX's house but PersonX turns up at her place, so PersonX is seen as reliable.", "neuro": "PersonX's house but PersonX turns up at her place, so PersonX is seen as reliable.", "vanilla": "PersonX's house but PersonX turns up at her place, so PersonX is seen as reliable."}
{"input": "Input: <extra_id_0> but PersonX turns up at her place, so PersonX is seen as reliable. ; Constraint: house, no ; Output:", "cons": "[[\"houses\", \"housing\", \"housed\", \"house\"], [\"not\", \"no\"]]", "gpt": "PersonX does not have a house but PersonX turns up at her place, so PersonX is seen as reliable.", "neuro": "PersonX does not have a house but PersonX turns up at her place, so PersonX is seen as reliable.", "vanilla": "PersonX does not have a house but PersonX turns up at her place, so PersonX is seen as reliable."}
{"input": "Input: Although <extra_id_0>, PersonX turns up at her place, so PersonX is seen as reliable. ; Constraint: location ; Output:", "cons": "[[\"locations\", \"location\"]]", "gpt": "Although her place is at the other end of the country, PersonX turns up at her place, so PersonX is seen as reliable.", "neuro": "Although location is important, PersonX turns up at her place, so PersonX is seen as reliable.", "vanilla": "Although location is important, PersonX turns up at her place, so PersonX is seen as reliable."}
{"input": "Input: Although <extra_id_0>, PersonX turns up at her place, so PersonX is seen as reliable. ; Constraint: location, no ; Output:", "cons": "[[\"locations\", \"location\"], [\"not\", \"no\"]]", "gpt": "Although PersonX does not know her location, PersonX turns up at her place, so PersonX is seen as reliable.", "neuro": "Although no location is given, PersonX turns up at her place, so PersonX is seen as reliable.", "vanilla": "Although no location is given, PersonX turns up at her place, so PersonX is seen as reliable."}
{"input": "Input: Although <extra_id_0>, PersonX turns up at her place, so PersonX is seen as reliable. ; Constraint: house ; Output:", "cons": "[[\"houses\", \"housing\", \"housed\", \"house\"]]", "gpt": "Although PersonX's house is a bit messy, PersonX turns up at her place, so PersonX is seen as reliable.", "neuro": "Although the house is empty, PersonX turns up at her place, so PersonX is seen as reliable.", "vanilla": "Although the house is empty, PersonX turns up at her place, so PersonX is seen as reliable."}
{"input": "Input: Although <extra_id_0>, PersonX turns up at her place, so PersonX is seen as reliable. ; Constraint: house, no ; Output:", "cons": "[[\"houses\", \"housing\", \"housed\", \"house\"], [\"not\", \"no\"]]", "gpt": "Although PersonX's house is not available, PersonX turns up at her place, so PersonX is seen as reliable.", "neuro": "Although no house, PersonX turns up at her place, so PersonX is seen as reliable.", "vanilla": "Although no house, PersonX turns up at her place, so PersonX is seen as reliable."}
{"input": "Input: PersonX turns up at her place and <extra_id_0>, so PersonX feels at home. ; Constraint: location ; Output:", "cons": "[[\"locations\", \"location\"]]", "gpt": "PersonX turns up at her place and looks around, so PersonX feels at home.", "neuro": "PersonX turns up at her place and finds her location, so PersonX feels at home.", "vanilla": "PersonX turns up at her place and finds her location, so PersonX feels at home."}
{"input": "Input: PersonX turns up at her place and <extra_id_0>, so PersonX feels at home. ; Constraint: location, no ; Output:", "cons": "[[\"locations\", \"location\"], [\"not\", \"no\"]]", "gpt": "PersonX turns up at her place and no one is at home, so PersonX feels at home.", "neuro": "PersonX turns up at her place and there is no location, so PersonX feels at home.", "vanilla": "PersonX turns up at her place and no one is there, so PersonX feels at home."}
{"input": "Input: PersonX turns up at her place and <extra_id_0>, so PersonX feels at home. ; Constraint: house ; Output:", "cons": "[[\"houses\", \"housing\", \"housed\", \"house\"]]", "gpt": "PersonX turns up at her house and feels at home.", "neuro": "PersonX turns up at her place and enters the house, so PersonX feels at home.", "vanilla": "PersonX turns up at her place and enters the house, so PersonX feels at home."}
{"input": "Input: PersonX turns up at her place and <extra_id_0>, so PersonX feels at home. ; Constraint: house, no ; Output:", "cons": "[[\"houses\", \"housing\", \"housed\", \"house\"], [\"not\", \"no\"]]", "gpt": "PersonX turns up at her house and no one is home, so PersonX feels at home.", "neuro": "PersonX turns up at her place and no one is in the house, so PersonX feels at home.", "vanilla": "PersonX turns up at her place and no one is in the house, so PersonX feels at home."}
{"input": "Input: PersonX turns up at her place while <extra_id_0>, so PersonX feels at home. ; Constraint: location ; Output:", "cons": "[[\"locations\", \"location\"]]", "gpt": "PersonX turns up at her place while at the same location, so PersonX feels at home.", "neuro": "PersonX turns up at her place while the location is familiar, so PersonX feels at home.", "vanilla": "PersonX turns up at her place while the location is familiar, so PersonX feels at home."}
{"input": "Input: PersonX turns up at her place while <extra_id_0>, so PersonX feels at home. ; Constraint: location, no ; Output:", "cons": "[[\"locations\", \"location\"], [\"not\", \"no\"]]", "gpt": "PersonX turns up at her place while no one at home, so PersonX feels at home.", "neuro": "PersonX turns up at her place while no location, so PersonX feels at home.", "vanilla": "PersonX turns up at her place while no one is there, so PersonX feels at home."}
{"input": "Input: PersonX turns up at her place while <extra_id_0>, so PersonX feels at home. ; Constraint: house ; Output:", "cons": "[[\"houses\", \"housing\", \"housed\", \"house\"]]", "gpt": "PersonX turns up at her house while house-sitting, so PersonX feels at home.", "neuro": "PersonX turns up at her place while the house is empty, so PersonX feels at home.", "vanilla": "PersonX turns up at her place while the house is empty, so PersonX feels at home."}
{"input": "Input: PersonX turns up at her place while <extra_id_0>, so PersonX feels at home. ; Constraint: house, no ; Output:", "cons": "[[\"houses\", \"housing\", \"housed\", \"house\"], [\"not\", \"no\"]]", "gpt": "PersonX turns up at her place while no one at home, so PersonX feels at home.", "neuro": "PersonX turns up at her place while no one is in the house, so PersonX feels at home.", "vanilla": "PersonX turns up at her place while no one is in the house, so PersonX feels at home."}
{"input": "Input: <extra_id_0> but PersonX turns up at her place, so PersonX feels at home. ; Constraint: location ; Output:", "cons": "[[\"locations\", \"location\"]]", "gpt": "Although her location changes, PersonX turns up at her place, so PersonX feels at home.", "neuro": "PersonX\u2019s location but PersonX turns up at her place, so PersonX feels at home.", "vanilla": "Location is important but PersonX turns up at her place, so PersonX feels at home."}
{"input": "Input: <extra_id_0> but PersonX turns up at her place, so PersonX feels at home. ; Constraint: location, no ; Output:", "cons": "[[\"locations\", \"location\"], [\"not\", \"no\"]]", "gpt": "PersonX does not need a location but PersonX turns up at her place, so PersonX feels at home.", "neuro": "PersonX does not have a location but PersonX turns up at her place, so PersonX feels at home.", "vanilla": "Location is not important but PersonX turns up at her place, so PersonX feels at home."}
{"input": "Input: <extra_id_0> but PersonX turns up at her place, so PersonX feels at home. ; Constraint: house ; Output:", "cons": "[[\"houses\", \"housing\", \"housed\", \"house\"]]", "gpt": "Her house is a mess but PersonX turns up at her place, so PersonX feels at home.", "neuro": "PersonX lives in a house but PersonX turns up at her place, so PersonX feels at home.", "vanilla": "PersonX lives in a house but PersonX turns up at her place, so PersonX feels at home."}
{"input": "Input: <extra_id_0> but PersonX turns up at her place, so PersonX feels at home. ; Constraint: house, no ; Output:", "cons": "[[\"houses\", \"housing\", \"housed\", \"house\"], [\"not\", \"no\"]]", "gpt": "PersonX does not have a house but PersonX turns up at her place, so PersonX feels at home.", "neuro": "PersonX does not have a house but PersonX turns up at her place, so PersonX feels at home.", "vanilla": "PersonX does not have a house but PersonX turns up at her place, so PersonX feels at home."}
{"input": "Input: Although <extra_id_0>, PersonX turns up at her place, so PersonX feels at home. ; Constraint: location ; Output:", "cons": "[[\"locations\", \"location\"]]", "gpt": "Although PersonX is at the right location, PersonX turns up at her place, so PersonX feels at home.", "neuro": "Although location is important, PersonX turns up at her place, so PersonX feels at home.", "vanilla": "Although location is important, PersonX turns up at her place, so PersonX feels at home."}
{"input": "Input: Although <extra_id_0>, PersonX turns up at her place, so PersonX feels at home. ; Constraint: location, no ; Output:", "cons": "[[\"locations\", \"location\"], [\"not\", \"no\"]]", "gpt": "Although PersonX does not know her location, PersonX turns up at her place, so PersonX feels at home.", "neuro": "Although there is no location, PersonX turns up at her place, so PersonX feels at home.", "vanilla": "Although there is no location, PersonX turns up at her place, so PersonX feels at home."}
{"input": "Input: Although <extra_id_0>, PersonX turns up at her place, so PersonX feels at home. ; Constraint: house ; Output:", "cons": "[[\"houses\", \"housing\", \"housed\", \"house\"]]", "gpt": "Although her house is not in the right place, PersonX turns up at her place, so PersonX feels at home.", "neuro": "Although the house is empty, PersonX turns up at her place, so PersonX feels at home.", "vanilla": "Although the house is empty, PersonX turns up at her place, so PersonX feels at home."}
{"input": "Input: Although <extra_id_0>, PersonX turns up at her place, so PersonX feels at home. ; Constraint: house, no ; Output:", "cons": "[[\"houses\", \"housing\", \"housed\", \"house\"], [\"not\", \"no\"]]", "gpt": "Although PersonX does not have a house, PersonX turns up at her place, so PersonX feels at home.", "neuro": "Although no house, PersonX turns up at her place, so PersonX feels at home.", "vanilla": "Although no house, PersonX turns up at her place, so PersonX feels at home."}
{"input": "Input: PersonX comments and <extra_id_0>, so PersonX is seen as opinionated. ; Constraint: document ; Output:", "cons": "[[\"documents\", \"documenting\", \"document\", \"documented\"]]", "gpt": "PersonX comments and documents the conversation, so PersonX is seen as opinionated.", "neuro": "PersonX comments and documents his opinion, so PersonX is seen as opinionated.", "vanilla": "PersonX comments and documents his opinion, so PersonX is seen as opinionated."}
{"input": "Input: PersonX comments and <extra_id_0>, so PersonX is seen as opinionated. ; Constraint: document, no ; Output:", "cons": "[[\"documents\", \"documenting\", \"document\", \"documented\"], [\"not\", \"no\"]]", "gpt": "PersonX comments and document, so PersonX is seen as opinionated.", "neuro": "PersonX comments and does not document, so PersonX is seen as opinionated.", "vanilla": "PersonX comments and does not document, so PersonX is seen as opinionated."}
{"input": "Input: PersonX comments and <extra_id_0>, so PersonX is seen as opinionated. ; Constraint: note ; Output:", "cons": "[[\"noted\", \"notes\", \"noting\", \"note\"]]", "gpt": "PersonX comments and leaves a note, so PersonX is seen as opinionated.", "neuro": "PersonX comments and makes a note, so PersonX is seen as opinionated.", "vanilla": "PersonX comments and makes a note, so PersonX is seen as opinionated."}
{"input": "Input: PersonX comments and <extra_id_0>, so PersonX is seen as opinionated. ; Constraint: note, no ; Output:", "cons": "[[\"noted\", \"notes\", \"noting\", \"note\"], [\"not\", \"no\"]]", "gpt": "PersonX comments and no one notes, so PersonX is seen as opinionated.", "neuro": "PersonX comments and no one notes, so PersonX is seen as opinionated.", "vanilla": "PersonX comments and no one notes, so PersonX is seen as opinionated."}
{"input": "Input: PersonX comments while <extra_id_0>, so PersonX is seen as opinionated. ; Constraint: document ; Output:", "cons": "[[\"documents\", \"documenting\", \"document\", \"documented\"]]", "gpt": "PersonX comments while document is being created, so PersonX is seen as opinionated.", "neuro": "PersonX comments while documenting, so PersonX is seen as opinionated.", "vanilla": "PersonX comments while documenting, so PersonX is seen as opinionated."}
{"input": "Input: PersonX comments while <extra_id_0>, so PersonX is seen as opinionated. ; Constraint: document, no ; Output:", "cons": "[[\"documents\", \"documenting\", \"document\", \"documented\"], [\"not\", \"no\"]]", "gpt": "PersonX comments while no document, so PersonX is seen as opinionated.", "neuro": "PersonX comments while no document, so PersonX is seen as opinionated.", "vanilla": "PersonX comments while no document, so PersonX is seen as opinionated."}
{"input": "Input: PersonX comments while <extra_id_0>, so PersonX is seen as opinionated. ; Constraint: note ; Output:", "cons": "[[\"noted\", \"notes\", \"noting\", \"note\"]]", "gpt": "PersonX comments while making a note, so PersonX is seen as opinionated.", "neuro": "PersonX comments while noting, so PersonX is seen as opinionated.", "vanilla": "PersonX comments while noting, so PersonX is seen as opinionated."}
{"input": "Input: PersonX comments while <extra_id_0>, so PersonX is seen as opinionated. ; Constraint: note, no ; Output:", "cons": "[[\"noted\", \"notes\", \"noting\", \"note\"], [\"not\", \"no\"]]", "gpt": "PersonX comments while no one notes, so PersonX is seen as opinionated.", "neuro": "PersonX comments while no one notes, so PersonX is seen as opinionated.", "vanilla": "PersonX comments while no one notes, so PersonX is seen as opinionated."}
{"input": "Input: <extra_id_0> but PersonX comments, so PersonX is seen as opinionated. ; Constraint: document ; Output:", "cons": "[[\"documents\", \"documenting\", \"document\", \"documented\"]]", "gpt": "PersonX's document but PersonX comments, so PersonX is seen as opinionated.", "neuro": "PersonX documents but PersonX comments, so PersonX is seen as opinionated.", "vanilla": "PersonX documents but PersonX comments, so PersonX is seen as opinionated."}
{"input": "Input: <extra_id_0> but PersonX comments, so PersonX is seen as opinionated. ; Constraint: document, no ; Output:", "cons": "[[\"documents\", \"documenting\", \"document\", \"documented\"], [\"not\", \"no\"]]", "gpt": "PersonX does not document the event but PersonX comments, so PersonX is seen as opinionated.", "neuro": "PersonX does not document but PersonX comments, so PersonX is seen as opinionated.", "vanilla": "PersonX does not document but PersonX comments, so PersonX is seen as opinionated."}
{"input": "Input: <extra_id_0> but PersonX comments, so PersonX is seen as opinionated. ; Constraint: note ; Output:", "cons": "[[\"noted\", \"notes\", \"noting\", \"note\"]]", "gpt": "<extra_id_0> but PersonX comments on the note, so PersonX is seen as opinionated.", "neuro": "PersonX notes but PersonX comments, so PersonX is seen as opinionated.", "vanilla": "PersonX notes but PersonX comments, so PersonX is seen as opinionated."}
{"input": "Input: <extra_id_0> but PersonX comments, so PersonX is seen as opinionated. ; Constraint: note, no ; Output:", "cons": "[[\"noted\", \"notes\", \"noting\", \"note\"], [\"not\", \"no\"]]", "gpt": "PersonX does not take note but PersonX comments, so PersonX is seen as opinionated.", "neuro": "PersonX does not note but PersonX comments, so PersonX is seen as opinionated.", "vanilla": "PersonX does not note but PersonX comments, so PersonX is seen as opinionated."}
{"input": "Input: Although <extra_id_0>, PersonX comments, so PersonX is seen as opinionated. ; Constraint: document ; Output:", "cons": "[[\"documents\", \"documenting\", \"document\", \"documented\"]]", "gpt": "Although document is created, PersonX comments, so PersonX is seen as opinionated.", "neuro": "Although the document, PersonX comments, so PersonX is seen as opinionated.", "vanilla": "Although the document, PersonX comments, so PersonX is seen as opinionated."}
{"input": "Input: Although <extra_id_0>, PersonX comments, so PersonX is seen as opinionated. ; Constraint: document, no ; Output:", "cons": "[[\"documents\", \"documenting\", \"document\", \"documented\"], [\"not\", \"no\"]]", "gpt": "Although document is not available, PersonX comments, so PersonX is seen as opinionated.", "neuro": "Although no document, PersonX comments, so PersonX is seen as opinionated.", "vanilla": "Although no document, PersonX comments, so PersonX is seen as opinionated."}
{"input": "Input: Although <extra_id_0>, PersonX comments, so PersonX is seen as opinionated. ; Constraint: note ; Output:", "cons": "[[\"noted\", \"notes\", \"noting\", \"note\"]]", "gpt": "Although PersonX writes a note, PersonX comments, so PersonX is seen as opinionated.", "neuro": "Although note is made, PersonX comments, so PersonX is seen as opinionated.", "vanilla": "Although note is made, PersonX comments, so PersonX is seen as opinionated."}
{"input": "Input: Although <extra_id_0>, PersonX comments, so PersonX is seen as opinionated. ; Constraint: note, no ; Output:", "cons": "[[\"noted\", \"notes\", \"noting\", \"note\"], [\"not\", \"no\"]]", "gpt": "Although no one notes, PersonX comments, so PersonX is seen as opinionated.", "neuro": "Although no note is made, PersonX comments, so PersonX is seen as opinionated.", "vanilla": "Although no note is made, PersonX comments, so PersonX is seen as opinionated."}
{"input": "Input: PersonX lends PersonY his camera and <extra_id_0>, so PersonX is seen as helpful. ; Constraint: device ; Output:", "cons": "[[\"device\", \"devices\"]]", "gpt": "PersonX lends PersonY his camera and doesn't want it back, so PersonX is seen as helpful.", "neuro": "PersonX lends PersonY his camera and PersonY uses the device, so PersonX is seen as helpful.", "vanilla": "PersonX lends PersonY his camera and PersonY uses the device, so PersonX is seen as helpful."}
{"input": "Input: PersonX lends PersonY his camera and <extra_id_0>, so PersonX is seen as helpful. ; Constraint: device, no ; Output:", "cons": "[[\"device\", \"devices\"], [\"not\", \"no\"]]", "gpt": "PersonX lends PersonY his camera and PersonY is grateful, so PersonX is seen as helpful.", "neuro": "PersonX lends PersonY his camera and PersonY does not use the device, so PersonX is seen as helpful.", "vanilla": "PersonX lends PersonY his camera and PersonY does not use the device, so PersonX is seen as helpful."}
{"input": "Input: PersonX lends PersonY his camera and <extra_id_0>, so PersonX is seen as helpful. ; Constraint: picture ; Output:", "cons": "[[\"picturing\", \"pictured\", \"picture\", \"pictures\"]]", "gpt": "PersonX lends PersonY his camera and takes a picture, so PersonX is seen as helpful.", "neuro": "PersonX lends PersonY his camera and PersonY takes a picture, so PersonX is seen as helpful.", "vanilla": "PersonX lends PersonY his camera and PersonY takes a picture, so PersonX is seen as helpful."}
{"input": "Input: PersonX lends PersonY his camera and <extra_id_0>, so PersonX is seen as helpful. ; Constraint: picture, no ; Output:", "cons": "[[\"picturing\", \"pictured\", \"picture\", \"pictures\"], [\"not\", \"no\"]]", "gpt": "PersonX lends PersonY his camera and no picture is taken, so PersonX is seen as helpful.", "neuro": "PersonX lends PersonY his camera and PersonY does not take a picture, so PersonX is seen as helpful.", "vanilla": "PersonX lends PersonY his camera and PersonY does not take a picture, so PersonX is seen as helpful."}
{"input": "Input: PersonX lends PersonY his camera while <extra_id_0>, so PersonX is seen as helpful. ; Constraint: device ; Output:", "cons": "[[\"device\", \"devices\"]]", "gpt": "PersonX lends PersonY his camera while PersonY is taking pictures, so PersonX is seen as helpful.", "neuro": "PersonX lends PersonY his camera while PersonY uses the device, so PersonX is seen as helpful.", "vanilla": "PersonX lends PersonY his camera while PersonY uses the device, so PersonX is seen as helpful."}
{"input": "Input: PersonX lends PersonY his camera while <extra_id_0>, so PersonX is seen as helpful. ; Constraint: device, no ; Output:", "cons": "[[\"device\", \"devices\"], [\"not\", \"no\"]]", "gpt": "PersonX lends PersonY his camera while PersonY is in low battery, so PersonX is seen as helpful.", "neuro": "PersonX lends PersonY his camera while PersonY does not use the device, so PersonX is seen as helpful.", "vanilla": "PersonX lends PersonY his camera while PersonY does not use the device, so PersonX is seen as helpful."}
{"input": "Input: PersonX lends PersonY his camera while <extra_id_0>, so PersonX is seen as helpful. ; Constraint: picture ; Output:", "cons": "[[\"picturing\", \"pictured\", \"picture\", \"pictures\"]]", "gpt": "PersonX lends PersonY his camera while PersonY takes pictures, so PersonX is seen as helpful.", "neuro": "PersonX lends PersonY his camera while PersonY takes a picture, so PersonX is seen as helpful.", "vanilla": "PersonX lends PersonY his camera while PersonY takes a picture, so PersonX is seen as helpful."}
{"input": "Input: PersonX lends PersonY his camera while <extra_id_0>, so PersonX is seen as helpful. ; Constraint: picture, no ; Output:", "cons": "[[\"picturing\", \"pictured\", \"picture\", \"pictures\"], [\"not\", \"no\"]]", "gpt": "PersonX lends PersonY his camera while PersonX takes a picture, so PersonX is seen as helpful.", "neuro": "PersonX lends PersonY his camera while no picture is taken, so PersonX is seen as helpful.", "vanilla": "PersonX lends PersonY his camera while no picture is taken, so PersonX is seen as helpful."}
{"input": "Input: <extra_id_0> but PersonX lends PersonY his camera, so PersonX is seen as helpful. ; Constraint: device ; Output:", "cons": "[[\"device\", \"devices\"]]", "gpt": "<extra_id_0> but PersonX lends PersonY his camera, so PersonX is seen as helpful.", "neuro": "PersonX has a device but PersonX lends PersonY his camera, so PersonX is seen as helpful.", "vanilla": "PersonX has a device but PersonX lends PersonY his camera, so PersonX is seen as helpful."}
{"input": "Input: <extra_id_0> but PersonX lends PersonY his camera, so PersonX is seen as helpful. ; Constraint: device, no ; Output:", "cons": "[[\"device\", \"devices\"], [\"not\", \"no\"]]", "gpt": "PersonX does not have the device but PersonX lends PersonY his camera, so PersonX is seen as helpful.", "neuro": "PersonX does not have a device but PersonX lends PersonY his camera, so PersonX is seen as helpful.", "vanilla": "PersonX does not have a device but PersonX lends PersonY his camera, so PersonX is seen as helpful."}
{"input": "Input: <extra_id_0> but PersonX lends PersonY his camera, so PersonX is seen as helpful. ; Constraint: picture ; Output:", "cons": "[[\"picturing\", \"pictured\", \"picture\", \"pictures\"]]", "gpt": "PersonX takes a picture but PersonX lends PersonY his camera, so PersonX is seen as helpful.", "neuro": "PersonX takes a picture but PersonX lends PersonY his camera, so PersonX is seen as helpful.", "vanilla": "PersonX takes a picture but PersonX lends PersonY his camera, so PersonX is seen as helpful."}
{"input": "Input: <extra_id_0> but PersonX lends PersonY his camera, so PersonX is seen as helpful. ; Constraint: picture, no ; Output:", "cons": "[[\"picturing\", \"pictured\", \"picture\", \"pictures\"], [\"not\", \"no\"]]", "gpt": "PersonX takes no pictures but PersonX lends PersonY his camera, so PersonX is seen as helpful.", "neuro": "PersonX does not take a picture but PersonX lends PersonY his camera, so PersonX is seen as helpful.", "vanilla": "No picture but PersonX lends PersonY his camera, so PersonX is seen as helpful."}
{"input": "Input: Although <extra_id_0>, PersonX lends PersonY his camera, so PersonX is seen as helpful. ; Constraint: device ; Output:", "cons": "[[\"device\", \"devices\"]]", "gpt": "Although PersonX's camera is out of order, PersonX lends PersonY his camera, so PersonX is seen as helpful.", "neuro": "Although there is no device, PersonX lends PersonY his camera, so PersonX is seen as helpful.", "vanilla": "Although there is no device, PersonX lends PersonY his camera, so PersonX is seen as helpful."}
{"input": "Input: Although <extra_id_0>, PersonX lends PersonY his camera, so PersonX is seen as helpful. ; Constraint: device, no ; Output:", "cons": "[[\"device\", \"devices\"], [\"not\", \"no\"]]", "gpt": "Although PersonX doesn't have a device, PersonX lends PersonY his camera, so PersonX is seen as helpful", "neuro": "Although no device is available, PersonX lends PersonY his camera, so PersonX is seen as helpful.", "vanilla": "Although no device is available, PersonX lends PersonY his camera, so PersonX is seen as helpful."}
{"input": "Input: Although <extra_id_0>, PersonX lends PersonY his camera, so PersonX is seen as helpful. ; Constraint: picture ; Output:", "cons": "[[\"picturing\", \"pictured\", \"picture\", \"pictures\"]]", "gpt": "Although take a picture of the Eiffel Tower, PersonX lends PersonY his camera, so PersonX is seen as helpful.", "neuro": "Although no picture is taken, PersonX lends PersonY his camera, so PersonX is seen as helpful.", "vanilla": "Although no picture is taken, PersonX lends PersonY his camera, so PersonX is seen as helpful."}
{"input": "Input: Although <extra_id_0>, PersonX lends PersonY his camera, so PersonX is seen as helpful. ; Constraint: picture, no ; Output:", "cons": "[[\"picturing\", \"pictured\", \"picture\", \"pictures\"], [\"not\", \"no\"]]", "gpt": "Although no one takes a picture, PersonX lends PersonY his camera, so PersonX is seen as helpful.", "neuro": "Although no picture is taken, PersonX lends PersonY his camera, so PersonX is seen as helpful.", "vanilla": "Although no picture is taken, PersonX lends PersonY his camera, so PersonX is seen as helpful."}
{"input": "Input: PersonX lends PersonY his camera and <extra_id_0>, so PersonX feels kind. ; Constraint: device ; Output:", "cons": "[[\"device\", \"devices\"]]", "gpt": "PersonX lends PersonY his camera and PersonY looks very happy, so PersonX feels kind.", "neuro": "PersonX lends PersonY his camera and PersonY uses the device, so PersonX feels kind.", "vanilla": "PersonX lends PersonY his camera and PersonY uses the device, so PersonX feels kind."}
{"input": "Input: PersonX lends PersonY his camera and <extra_id_0>, so PersonX feels kind. ; Constraint: device, no ; Output:", "cons": "[[\"device\", \"devices\"], [\"not\", \"no\"]]", "gpt": "PersonX lends PersonY his camera and leaves, so PersonX feels kind.", "neuro": "PersonX lends PersonY his camera and PersonY does not use the device, so PersonX feels kind.", "vanilla": "PersonX lends PersonY his camera and PersonY does not use the device, so PersonX feels kind."}
{"input": "Input: PersonX lends PersonY his camera and <extra_id_0>, so PersonX feels kind. ; Constraint: picture ; Output:", "cons": "[[\"picturing\", \"pictured\", \"picture\", \"pictures\"]]", "gpt": "PersonX lends PersonY his camera and takes a picture, so PersonX feels kind.", "neuro": "PersonX lends PersonY his camera and PersonY takes a picture, so PersonX feels kind.", "vanilla": "PersonX lends PersonY his camera and PersonY takes a picture, so PersonX feels kind."}
{"input": "Input: PersonX lends PersonY his camera and <extra_id_0>, so PersonX feels kind. ; Constraint: picture, no ; Output:", "cons": "[[\"picturing\", \"pictured\", \"picture\", \"pictures\"], [\"not\", \"no\"]]", "gpt": "PersonX lends PersonY his camera and no pictures are taken, so PersonX feels kind.", "neuro": "PersonX lends PersonY his camera and PersonY does not take a picture, so PersonX feels kind.", "vanilla": "PersonX lends PersonY his camera and PersonY does not take a picture, so PersonX feels kind."}
{"input": "Input: PersonX lends PersonY his camera while <extra_id_0>, so PersonX feels kind. ; Constraint: device ; Output:", "cons": "[[\"device\", \"devices\"]]", "gpt": "PersonX lends PersonY his camera while PersonY is taking pictures, so PersonX feels kind.", "neuro": "PersonX lends PersonY his camera while PersonY uses the device, so PersonX feels kind.", "vanilla": "PersonX lends PersonY his camera while PersonY uses the device, so PersonX feels kind."}
{"input": "Input: PersonX lends PersonY his camera while <extra_id_0>, so PersonX feels kind. ; Constraint: device, no ; Output:", "cons": "[[\"device\", \"devices\"], [\"not\", \"no\"]]", "gpt": "PersonX lends PersonY his camera while PersonY is taking photos, so PersonX feels kind.", "neuro": "PersonX lends PersonY his camera while PersonY does not use the device, so PersonX feels kind.", "vanilla": "PersonX lends PersonY his camera while PersonY does not use the device, so PersonX feels kind."}
{"input": "Input: PersonX lends PersonY his camera while <extra_id_0>, so PersonX feels kind. ; Constraint: picture ; Output:", "cons": "[[\"picturing\", \"pictured\", \"picture\", \"pictures\"]]", "gpt": "PersonX lends PersonY his camera while taking pictures, so PersonX feels kind.", "neuro": "PersonX lends PersonY his camera while PersonY takes a picture, so PersonX feels kind.", "vanilla": "PersonX lends PersonY his camera while PersonY takes a picture, so PersonX feels kind."}
{"input": "Input: PersonX lends PersonY his camera while <extra_id_0>, so PersonX feels kind. ; Constraint: picture, no ; Output:", "cons": "[[\"picturing\", \"pictured\", \"picture\", \"pictures\"], [\"not\", \"no\"]]", "gpt": "PersonX lends PersonY his camera while taking pictures, so PersonX feels kind.", "neuro": "PersonX lends PersonY his camera while PersonY does not take a picture, so PersonX feels kind.", "vanilla": "PersonX lends PersonY his camera while no picture is taken, so PersonX feels kind."}
{"input": "Input: <extra_id_0> but PersonX lends PersonY his camera, so PersonX feels kind. ; Constraint: device ; Output:", "cons": "[[\"device\", \"devices\"]]", "gpt": "PersonX's new camera but PersonX lends PersonY his old camera, so PersonX feels kind.", "neuro": "PersonX has a device but PersonX lends PersonY his camera, so PersonX feels kind.", "vanilla": "PersonX has a device but PersonX lends PersonY his camera, so PersonX feels kind."}
{"input": "Input: <extra_id_0> but PersonX lends PersonY his camera, so PersonX feels kind. ; Constraint: device, no ; Output:", "cons": "[[\"device\", \"devices\"], [\"not\", \"no\"]]", "gpt": "PersonX does not have a device but PersonX lends PersonY his camera, so PersonX feels kind.", "neuro": "PersonX does not have a device but PersonX lends PersonY his camera, so PersonX feels kind.", "vanilla": "PersonX does not have a device but PersonX lends PersonY his camera, so PersonX feels kind."}
{"input": "Input: <extra_id_0> but PersonX lends PersonY his camera, so PersonX feels kind. ; Constraint: picture ; Output:", "cons": "[[\"picturing\", \"pictured\", \"picture\", \"pictures\"]]", "gpt": "PersonX takes a picture but PersonX lends PersonY his camera, so PersonX feels kind.", "neuro": "PersonX takes a picture but PersonX lends PersonY his camera, so PersonX feels kind.", "vanilla": "PersonX takes a picture but PersonX lends PersonY his camera, so PersonX feels kind."}
{"input": "Input: <extra_id_0> but PersonX lends PersonY his camera, so PersonX feels kind. ; Constraint: picture, no ; Output:", "cons": "[[\"picturing\", \"pictured\", \"picture\", \"pictures\"], [\"not\", \"no\"]]", "gpt": "PersonX does not take a picture but PersonX lends PersonY his camera, so PersonX feels kind.", "neuro": "PersonX does not take a picture but PersonX lends PersonY his camera, so PersonX feels kind.", "vanilla": "No picture but PersonX lends PersonY his camera, so PersonX feels kind."}
{"input": "Input: Although <extra_id_0>, PersonX lends PersonY his camera, so PersonX feels kind. ; Constraint: device ; Output:", "cons": "[[\"device\", \"devices\"]]", "gpt": "Although his camera is a device, PersonX lends PersonY his camera, so PersonX feels kind.", "neuro": "Although there is no device, PersonX lends PersonY his camera, so PersonX feels kind.", "vanilla": "Although there is no device, PersonX lends PersonY his camera, so PersonX feels kind."}
{"input": "Input: Although <extra_id_0>, PersonX lends PersonY his camera, so PersonX feels kind. ; Constraint: device, no ; Output:", "cons": "[[\"device\", \"devices\"], [\"not\", \"no\"]]", "gpt": "Although device is not available, PersonX lends PersonY his camera, so PersonX feels kind.", "neuro": "Although no device, PersonX lends PersonY his camera, so PersonX feels kind.", "vanilla": "Although no device, PersonX lends PersonY his camera, so PersonX feels kind."}
{"input": "Input: Although <extra_id_0>, PersonX lends PersonY his camera, so PersonX feels kind. ; Constraint: picture ; Output:", "cons": "[[\"picturing\", \"pictured\", \"picture\", \"pictures\"]]", "gpt": "Although taking pictures is fun, PersonX lends PersonY his camera, so PersonX feels kind.", "neuro": "Although no picture is taken, PersonX lends PersonY his camera, so PersonX feels kind.", "vanilla": "Although no picture is taken, PersonX lends PersonY his camera, so PersonX feels kind."}
{"input": "Input: Although <extra_id_0>, PersonX lends PersonY his camera, so PersonX feels kind. ; Constraint: picture, no ; Output:", "cons": "[[\"picturing\", \"pictured\", \"picture\", \"pictures\"], [\"not\", \"no\"]]", "gpt": "Although there is no picture, PersonX lends PersonY his camera, so PersonX feels kind.", "neuro": "Although no picture is taken, PersonX lends PersonY his camera, so PersonX feels kind.", "vanilla": "Although no picture is taken, PersonX lends PersonY his camera, so PersonX feels kind."}
{"input": "Input: PersonX checks how well PersonY is doing at work and <extra_id_0>, so PersonX is seen as responsible. ; Constraint: task ; Output:", "cons": "[[\"tasked\", \"task\", \"tasking\", \"tasks\"]]", "gpt": "PersonX checks how well PersonY is doing at work and sees that the task is complete, so PersonX is seen as responsible.", "neuro": "PersonX checks how well PersonY is doing at work and completes the task, so PersonX is seen as responsible.", "vanilla": "PersonX checks how well PersonY is doing at work and completes the task, so PersonX is seen as responsible."}
{"input": "Input: PersonX checks how well PersonY is doing at work and <extra_id_0>, so PersonX is seen as responsible. ; Constraint: task, no ; Output:", "cons": "[[\"tasked\", \"task\", \"tasking\", \"tasks\"], [\"not\", \"no\"]]", "gpt": "PersonX checks how well PersonY is doing at work and sees that PersonY is not working on the task, so PersonX is seen as responsible.", "neuro": "PersonX checks how well PersonY is doing at work and PersonY does not complete the task, so PersonX is seen as responsible.", "vanilla": "PersonX checks how well PersonY is doing at work and PersonY does not complete the task, so PersonX is seen as responsible."}
{"input": "Input: PersonX checks how well PersonY is doing at work and <extra_id_0>, so PersonX is seen as responsible. ; Constraint: job ; Output:", "cons": "[[\"jobbed\", \"jobs\", \"job\", \"jobbing\"]]", "gpt": "PersonX checks how well PersonY is doing at job and PersonY is doing well, so PersonX is seen as responsible.", "neuro": "PersonX checks how well PersonY is doing at work and PersonY does a good job, so PersonX is seen as responsible.", "vanilla": "PersonX checks how well PersonY is doing at work and PersonY does a good job, so PersonX is seen as responsible."}
{"input": "Input: PersonX checks how well PersonY is doing at work and <extra_id_0>, so PersonX is seen as responsible. ; Constraint: job, no ; Output:", "cons": "[[\"jobbed\", \"jobs\", \"job\", \"jobbing\"], [\"not\", \"no\"]]", "gpt": "PersonX checks how well PersonY is doing at work and PersonY is not doing the job, so PersonX is seen as responsible.", "neuro": "PersonX checks how well PersonY is doing at work and no job, so PersonX is seen as responsible.", "vanilla": "PersonX checks how well PersonY is doing at work and no job, so PersonX is seen as responsible."}
{"input": "Input: PersonX checks how well PersonY is doing at work while <extra_id_0>, so PersonX is seen as responsible. ; Constraint: task ; Output:", "cons": "[[\"tasked\", \"task\", \"tasking\", \"tasks\"]]", "gpt": "PersonX checks how well PersonY is doing at work while PersonY is on a task, so PersonX is seen as responsible.", "neuro": "PersonX checks how well PersonY is doing at work while doing the task, so PersonX is seen as responsible.", "vanilla": "PersonX checks how well PersonY is doing at work while PersonY is at work, so PersonX is seen as responsible."}
{"input": "Input: PersonX checks how well PersonY is doing at work while <extra_id_0>, so PersonX is seen as responsible. ; Constraint: task, no ; Output:", "cons": "[[\"tasked\", \"task\", \"tasking\", \"tasks\"], [\"not\", \"no\"]]", "gpt": "PersonX checks how well PersonY is doing at work while no task is available, so PersonX is seen as responsible.", "neuro": "PersonX checks how well PersonY is doing at work while no task is completed, so PersonX is seen as responsible.", "vanilla": "PersonX checks how well PersonY is doing at work while no task is completed, so PersonX is seen as responsible."}
{"input": "Input: PersonX checks how well PersonY is doing at work while <extra_id_0>, so PersonX is seen as responsible. ; Constraint: job ; Output:", "cons": "[[\"jobbed\", \"jobs\", \"job\", \"jobbing\"]]", "gpt": "PersonX checks how well PersonY is doing at work while PersonY has a job, so PersonX is seen as responsible.", "neuro": "PersonX checks how well PersonY is doing at work while PersonY is on the job, so PersonX is seen as responsible.", "vanilla": "PersonX checks how well PersonY is doing at work while PersonY is at work, so PersonX is seen as responsible."}
{"input": "Input: PersonX checks how well PersonY is doing at work while <extra_id_0>, so PersonX is seen as responsible. ; Constraint: job, no ; Output:", "cons": "[[\"jobbed\", \"jobs\", \"job\", \"jobbing\"], [\"not\", \"no\"]]", "gpt": "PersonX checks how well PersonY is doing at work while PersonY has no job, so PersonX is seen as responsible.", "neuro": "PersonX checks how well PersonY is doing at work while no job, so PersonX is seen as responsible.", "vanilla": "PersonX checks how well PersonY is doing at work while no job, so PersonX is seen as responsible."}
{"input": "Input: <extra_id_0> but PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible. ; Constraint: task ; Output:", "cons": "[[\"tasked\", \"task\", \"tasking\", \"tasks\"]]", "gpt": "Although the task is not completed, PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible.", "neuro": "PersonX has a task but PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible.", "vanilla": "PersonX has a task but PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible."}
{"input": "Input: <extra_id_0> but PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible. ; Constraint: task, no ; Output:", "cons": "[[\"tasked\", \"task\", \"tasking\", \"tasks\"], [\"not\", \"no\"]]", "gpt": "PersonX has no task but PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible.", "neuro": "There is no task but PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible.", "vanilla": "No task but PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible."}
{"input": "Input: <extra_id_0> but PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible. ; Constraint: job ; Output:", "cons": "[[\"jobbed\", \"jobs\", \"job\", \"jobbing\"]]", "gpt": "PersonX's job is to check how well PersonY is doing at work, so PersonX is seen as responsible.", "neuro": "PersonX has a job but PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible.", "vanilla": "PersonX has a job but PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible."}
{"input": "Input: <extra_id_0> but PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible. ; Constraint: job, no ; Output:", "cons": "[[\"jobbed\", \"jobs\", \"job\", \"jobbing\"], [\"not\", \"no\"]]", "gpt": "PersonX thinks that PersonY's job is not going well but PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible.", "neuro": "PersonX does not have a job but PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible.", "vanilla": "No job but PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible."}
{"input": "Input: Although <extra_id_0>, PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible. ; Constraint: task ; Output:", "cons": "[[\"tasked\", \"task\", \"tasking\", \"tasks\"]]", "gpt": "Although the task is done, PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible.", "neuro": "Although it is a task, PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible.", "vanilla": "Although it is a task, PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible."}
{"input": "Input: Although <extra_id_0>, PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible. ; Constraint: task, no ; Output:", "cons": "[[\"tasked\", \"task\", \"tasking\", \"tasks\"], [\"not\", \"no\"]]", "gpt": "Although no task is assigned, PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible.", "neuro": "Although no task is assigned, PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible.", "vanilla": "Although no task is assigned, PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible."}
{"input": "Input: Although <extra_id_0>, PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible. ; Constraint: job ; Output:", "cons": "[[\"jobbed\", \"jobs\", \"job\", \"jobbing\"]]", "gpt": "Although job is hard, PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible.", "neuro": "Although job is important, PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible.", "vanilla": "Although job is important, PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible."}
{"input": "Input: Although <extra_id_0>, PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible. ; Constraint: job, no ; Output:", "cons": "[[\"jobbed\", \"jobs\", \"job\", \"jobbing\"], [\"not\", \"no\"]]", "gpt": "Although PersonX has no job, PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible.", "neuro": "Although no job, PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible.", "vanilla": "Although no job, PersonX checks how well PersonY is doing at work, so PersonX is seen as responsible."}
{"input": "Input: PersonX checks how well PersonY is doing at work and <extra_id_0>, so PersonX feels concerned. ; Constraint: task ; Output:", "cons": "[[\"tasked\", \"task\", \"tasking\", \"tasks\"]]", "gpt": "PersonX checks how well PersonY is doing at work and sees that the task is not being done well, so PersonX feels concerned.", "neuro": "PersonX checks how well PersonY is doing at work and PersonY is not doing the task, so PersonX feels concerned.", "vanilla": "PersonX checks how well PersonY is doing at work and PersonY is not doing the task, so PersonX feels concerned."}
{"input": "Input: PersonX checks how well PersonY is doing at work and <extra_id_0>, so PersonX feels concerned. ; Constraint: task, no ; Output:", "cons": "[[\"tasked\", \"task\", \"tasking\", \"tasks\"], [\"not\", \"no\"]]", "gpt": "PersonX checks how well PersonY is doing at work and does not see the task, so PersonX feels concerned.", "neuro": "PersonX checks how well PersonY is doing at work and PersonY does not complete the task, so PersonX feels concerned.", "vanilla": "PersonX checks how well PersonY is doing at work and PersonY does not complete the task, so PersonX feels concerned."}
{"input": "Input: PersonX checks how well PersonY is doing at work and <extra_id_0>, so PersonX feels concerned. ; Constraint: job ; Output:", "cons": "[[\"jobbed\", \"jobs\", \"job\", \"jobbing\"]]", "gpt": "PersonX checks how well PersonY is doing at their job and sees that PersonY is struggling, so PersonX feels concerned.", "neuro": "PersonX checks how well PersonY is doing at work and PersonY is not doing a good job, so PersonX feels concerned.", "vanilla": "PersonX checks how well PersonY is doing at work and PersonY is not doing well, so PersonX feels concerned."}
{"input": "Input: PersonX checks how well PersonY is doing at work and <extra_id_0>, so PersonX feels concerned. ; Constraint: job, no ; Output:", "cons": "[[\"jobbed\", \"jobs\", \"job\", \"jobbing\"], [\"not\", \"no\"]]", "gpt": "PersonX checks how well PersonY is doing at work and PersonY does not have a job, so PersonX feels concerned.", "neuro": "PersonX checks how well PersonY is doing at work and PersonY does not have a job, so PersonX feels concerned.", "vanilla": "PersonX checks how well PersonY is doing at work and PersonY does not have a job, so PersonX feels concerned."}
{"input": "Input: PersonX checks how well PersonY is doing at work while <extra_id_0>, so PersonX feels concerned. ; Constraint: task ; Output:", "cons": "[[\"tasked\", \"task\", \"tasking\", \"tasks\"]]", "gpt": "PersonX checks how well PersonY is doing at work while PersonY completes a task, so PersonX feels concerned.", "neuro": "PersonX checks how well PersonY is doing at work while doing the task, so PersonX feels concerned.", "vanilla": "PersonX checks how well PersonY is doing at work while doing the task, so PersonX feels concerned."}
{"input": "Input: PersonX checks how well PersonY is doing at work while <extra_id_0>, so PersonX feels concerned. ; Constraint: task, no ; Output:", "cons": "[[\"tasked\", \"task\", \"tasking\", \"tasks\"], [\"not\", \"no\"]]", "gpt": "PersonX checks how well PersonY is doing at work while PersonY has no task, so PersonX feels concerned.", "neuro": "PersonX checks how well PersonY is doing at work while no task is completed, so PersonX feels concerned.", "vanilla": "PersonX checks how well PersonY is doing at work while no task is completed, so PersonX feels concerned."}
{"input": "Input: PersonX checks how well PersonY is doing at work while <extra_id_0>, so PersonX feels concerned. ; Constraint: job ; Output:", "cons": "[[\"jobbed\", \"jobs\", \"job\", \"jobbing\"]]", "gpt": "PersonX checks how well PersonY is doing at work while PersonY's job is in danger, so PersonX feels concerned.", "neuro": "PersonX checks how well PersonY is doing at work while PersonY is on the job, so PersonX feels concerned.", "vanilla": "PersonX checks how well PersonY is doing at work while PersonY is at work, so PersonX feels concerned."}
{"input": "Input: PersonX checks how well PersonY is doing at work while <extra_id_0>, so PersonX feels concerned. ; Constraint: job, no ; Output:", "cons": "[[\"jobbed\", \"jobs\", \"job\", \"jobbing\"], [\"not\", \"no\"]]", "gpt": "PersonX checks how well PersonY is doing at work while PersonY has no job, so PersonX feels concerned.", "neuro": "PersonX checks how well PersonY is doing at work while no job, so PersonX feels concerned.", "vanilla": "PersonX checks how well PersonY is doing at work while no job, so PersonX feels concerned."}
{"input": "Input: <extra_id_0> but PersonX checks how well PersonY is doing at work, so PersonX feels concerned. ; Constraint: task ; Output:", "cons": "[[\"tasked\", \"task\", \"tasking\", \"tasks\"]]", "gpt": "Although the task is not finished, PersonX checks how well PersonY is doing at work, so PersonX feels concerned.", "neuro": "PersonY has a task but PersonX checks how well PersonY is doing at work, so PersonX feels concerned.", "vanilla": "PersonY is at work but PersonX checks how well PersonY is doing at work, so PersonX feels concerned."}
{"input": "Input: <extra_id_0> but PersonX checks how well PersonY is doing at work, so PersonX feels concerned. ; Constraint: task, no ; Output:", "cons": "[[\"tasked\", \"task\", \"tasking\", \"tasks\"], [\"not\", \"no\"]]", "gpt": "PersonX has no task but PersonX checks how well PersonY is doing at work, so PersonX feels concerned.", "neuro": "PersonX does not do the task but PersonX checks how well PersonY is doing at work, so PersonX feels concerned.", "vanilla": "No task but PersonX checks how well PersonY is doing at work, so PersonX feels concerned."}
{"input": "Input: <extra_id_0> but PersonX checks how well PersonY is doing at work, so PersonX feels concerned. ; Constraint: job ; Output:", "cons": "[[\"jobbed\", \"jobs\", \"job\", \"jobbing\"]]", "gpt": "Although PersonX's job is at risk, PersonX checks how well PersonY is doing at work, so PersonX feels concerned.", "neuro": "PersonY has a job but PersonX checks how well PersonY is doing at work, so PersonX feels concerned.", "vanilla": "PersonY has a job but PersonX checks how well PersonY is doing at work, so PersonX feels concerned."}
{"input": "Input: <extra_id_0> but PersonX checks how well PersonY is doing at work, so PersonX feels concerned. ; Constraint: job, no ; Output:", "cons": "[[\"jobbed\", \"jobs\", \"job\", \"jobbing\"], [\"not\", \"no\"]]", "gpt": "PersonX does not have a job but PersonX checks how well PersonY is doing at work, so PersonX feels concerned.", "neuro": "PersonY does not have a job but PersonX checks how well PersonY is doing at work, so PersonX feels concerned.", "vanilla": "PersonY does not have a job but PersonX checks how well PersonY is doing at work, so PersonX feels concerned."}
{"input": "Input: Although <extra_id_0>, PersonX checks how well PersonY is doing at work, so PersonX feels concerned. ; Constraint: task ; Output:", "cons": "[[\"tasked\", \"task\", \"tasking\", \"tasks\"]]", "gpt": "Although the task is done, PersonX checks how well PersonY is doing at work, so PersonX feels concerned.", "neuro": "Although the task is difficult, PersonX checks how well PersonY is doing at work, so PersonX feels concerned.", "vanilla": "Although the task is difficult, PersonX checks how well PersonY is doing at work, so PersonX feels concerned."}
{"input": "Input: Although <extra_id_0>, PersonX checks how well PersonY is doing at work, so PersonX feels concerned. ; Constraint: task, no ; Output:", "cons": "[[\"tasked\", \"task\", \"tasking\", \"tasks\"], [\"not\", \"no\"]]", "gpt": "Although the task is simple, PersonX checks how well PersonY is doing at work, so PersonX feels concerned.", "neuro": "Although no task is assigned, PersonX checks how well PersonY is doing at work, so PersonX feels concerned.", "vanilla": "Although no task is assigned, PersonX checks how well PersonY is doing at work, so PersonX feels concerned."}
{"input": "Input: Although <extra_id_0>, PersonX checks how well PersonY is doing at work, so PersonX feels concerned. ; Constraint: job ; Output:", "cons": "[[\"jobbed\", \"jobs\", \"job\", \"jobbing\"]]", "gpt": "Although PersonY's job is going well, PersonX checks how well PersonY is doing at work, so PersonX feels concerned.", "neuro": "Although the job is demanding, PersonX checks how well PersonY is doing at work, so PersonX feels concerned.", "vanilla": "Although the job is demanding, PersonX checks how well PersonY is doing at work, so PersonX feels concerned."}
{"input": "Input: Although <extra_id_0>, PersonX checks how well PersonY is doing at work, so PersonX feels concerned. ; Constraint: job, no ; Output:", "cons": "[[\"jobbed\", \"jobs\", \"job\", \"jobbing\"], [\"not\", \"no\"]]", "gpt": "Although PersonX has no job, PersonX checks how well PersonY is doing at work, so PersonX feels concerned.", "neuro": "Although no job, PersonX checks how well PersonY is doing at work, so PersonX feels concerned.", "vanilla": "Although no job, PersonX checks how well PersonY is doing at work, so PersonX feels concerned."}
{"input": "Input: PersonX offers a proposal and <extra_id_0>, so PersonX is seen as persuasive. ; Constraint: proponent ; Output:", "cons": "[[\"proponent\", \"proponents\"]]", "gpt": "PersonX offers a proposal and is seen as a proponent, so PersonX is seen as persuasive.", "neuro": "PersonX offers a proposal and PersonX is the proponent, so PersonX is seen as persuasive.", "vanilla": "PersonX offers a proposal and it is accepted, so PersonX is seen as persuasive."}
{"input": "Input: PersonX offers a proposal and <extra_id_0>, so PersonX is seen as persuasive. ; Constraint: proponent, no ; Output:", "cons": "[[\"proponent\", \"proponents\"], [\"not\", \"no\"]]", "gpt": "PersonX offers a proposal and is not seen as a proponent, so PersonX is not seen as persuasive.", "neuro": "PersonX offers a proposal and the proponent does not accept it, so PersonX is seen as persuasive.", "vanilla": "PersonX offers a proposal and no one rejects it, so PersonX is seen as persuasive."}
{"input": "Input: PersonX offers a proposal and <extra_id_0>, so PersonX is seen as persuasive. ; Constraint: proffer ; Output:", "cons": "[[\"proffered\", \"proffering\", \"proffers\", \"proffer\"]]", "gpt": "PersonX offers a proposal and proffers a solution, so PersonX is seen as persuasive.", "neuro": "PersonX offers a proposal and PersonX proffers, so PersonX is seen as persuasive.", "vanilla": "PersonX offers a proposal and PersonY accepts it, so PersonX is seen as persuasive."}
{"input": "Input: PersonX offers a proposal and <extra_id_0>, so PersonX is seen as persuasive. ; Constraint: proffer, no ; Output:", "cons": "[[\"proffered\", \"proffering\", \"proffers\", \"proffer\"], [\"not\", \"no\"]]", "gpt": "PersonX offers a proposal and no one proffers, so PersonX is seen as persuasive.", "neuro": "PersonX offers a proposal and PersonX does not proffer, so PersonX is seen as persuasive.", "vanilla": "PersonX offers a proposal and no one rejects it, so PersonX is seen as persuasive."}
{"input": "Input: PersonX offers a proposal while <extra_id_0>, so PersonX is seen as persuasive. ; Constraint: proponent ; Output:", "cons": "[[\"proponent\", \"proponents\"]]", "gpt": "PersonX offers a proposal while being a proponent, so PersonX is seen as persuasive.", "neuro": "PersonX offers a proposal while a proponent, so PersonX is seen as persuasive.", "vanilla": "PersonX offers a proposal while a proponent, so PersonX is seen as persuasive."}
{"input": "Input: PersonX offers a proposal while <extra_id_0>, so PersonX is seen as persuasive. ; Constraint: proponent, no ; Output:", "cons": "[[\"proponent\", \"proponents\"], [\"not\", \"no\"]]", "gpt": "PersonX offers a proposal while no one proponent, so PersonX is seen as persuasive.", "neuro": "PersonX offers a proposal while no one is proponent, so PersonX is seen as persuasive.", "vanilla": "PersonX offers a proposal while no one objects, so PersonX is seen as persuasive."}
{"input": "Input: PersonX offers a proposal while <extra_id_0>, so PersonX is seen as persuasive. ; Constraint: proffer ; Output:", "cons": "[[\"proffered\", \"proffering\", \"proffers\", \"proffer\"]]", "gpt": "PersonX offers a proposal while proffers evidence, so PersonX is seen as persuasive.", "neuro": "PersonX offers a proposal while proffering, so PersonX is seen as persuasive.", "vanilla": "PersonX offers a proposal while proffering, so PersonX is seen as persuasive."}
{"input": "Input: PersonX offers a proposal while <extra_id_0>, so PersonX is seen as persuasive. ; Constraint: proffer, no ; Output:", "cons": "[[\"proffered\", \"proffering\", \"proffers\", \"proffer\"], [\"not\", \"no\"]]", "gpt": "PersonX offers a proposal while no one proffers, so PersonX is seen as persuasive.", "neuro": "PersonX offers a proposal while no one will proffer, so PersonX is seen as persuasive.", "vanilla": "PersonX offers a proposal while no one accepts it, so PersonX is seen as persuasive."}
{"input": "Input: <extra_id_0> but PersonX offers a proposal, so PersonX is seen as persuasive. ; Constraint: proponent ; Output:", "cons": "[[\"proponent\", \"proponents\"]]", "gpt": "Although proponent is unavailable, PersonX offers a proposal, so PersonX is seen as persuasive.", "neuro": "PersonX is a proponent but PersonX offers a proposal, so PersonX is seen as persuasive.", "vanilla": "PersonX is a proponent but PersonX offers a proposal, so PersonX is seen as persuasive."}
{"input": "Input: <extra_id_0> but PersonX offers a proposal, so PersonX is seen as persuasive. ; Constraint: proponent, no ; Output:", "cons": "[[\"proponent\", \"proponents\"], [\"not\", \"no\"]]", "gpt": "PersonX is not a proponent but PersonX offers a proposal, so PersonX is seen as persuasive.", "neuro": "PersonX is not a proponent but PersonX offers a proposal, so PersonX is seen as persuasive.", "vanilla": "PersonX is not a proponent but PersonX offers a proposal, so PersonX is seen as persuasive."}
{"input": "Input: <extra_id_0> but PersonX offers a proposal, so PersonX is seen as persuasive. ; Constraint: proffer ; Output:", "cons": "[[\"proffered\", \"proffering\", \"proffers\", \"proffer\"]]", "gpt": "PersonX proffers a proposal but is seen as persuasive.", "neuro": "PersonX proffers but PersonX offers a proposal, so PersonX is seen as persuasive.", "vanilla": "PersonX but PersonX offers a proposal, so PersonX is seen as persuasive."}
{"input": "Input: <extra_id_0> but PersonX offers a proposal, so PersonX is seen as persuasive. ; Constraint: proffer, no ; Output:", "cons": "[[\"proffered\", \"proffering\", \"proffers\", \"proffer\"], [\"not\", \"no\"]]", "gpt": "PersonX does not proffer a proposal but PersonX offers a proposal, so PersonX is seen as persuasive.", "neuro": "PersonX does not proffer but PersonX offers a proposal, so PersonX is seen as persuasive.", "vanilla": "PersonX does not proffer but PersonX offers a proposal, so PersonX is seen as persuasive."}
{"input": "Input: Although <extra_id_0>, PersonX offers a proposal, so PersonX is seen as persuasive. ; Constraint: proponent ; Output:", "cons": "[[\"proponent\", \"proponents\"]]", "gpt": "Although the proponent is not in the room, PersonX offers a proposal, so PersonX is seen as persuasive", "neuro": "Although a proponent, PersonX offers a proposal, so PersonX is seen as persuasive.", "vanilla": "Although a proponent, PersonX offers a proposal, so PersonX is seen as persuasive."}
{"input": "Input: Although <extra_id_0>, PersonX offers a proposal, so PersonX is seen as persuasive. ; Constraint: proponent, no ; Output:", "cons": "[[\"proponent\", \"proponents\"], [\"not\", \"no\"]]", "gpt": "Although no one is a proponent, PersonX offers a proposal, so PersonX is seen as persuasive.", "neuro": "Although no one is a proponent, PersonX offers a proposal, so PersonX is seen as persuasive.", "vanilla": "Although no one is proponent, PersonX offers a proposal, so PersonX is seen as persuasive."}
{"input": "Input: Although <extra_id_0>, PersonX offers a proposal, so PersonX is seen as persuasive. ; Constraint: proffer ; Output:", "cons": "[[\"proffered\", \"proffering\", \"proffers\", \"proffer\"]]", "gpt": "Although <extra_id_0>, PersonX offers a proposal, so PersonX is seen as persuasive.", "neuro": "Although proffer, PersonX offers a proposal, so PersonX is seen as persuasive.", "vanilla": "Although no proposal is made, PersonX offers a proposal, so PersonX is seen as persuasive."}
{"input": "Input: Although <extra_id_0>, PersonX offers a proposal, so PersonX is seen as persuasive. ; Constraint: proffer, no ; Output:", "cons": "[[\"proffered\", \"proffering\", \"proffers\", \"proffer\"], [\"not\", \"no\"]]", "gpt": "Although no one proffers, PersonX offers a proposal, so PersonX is seen as persuasive.", "neuro": "Although no one will proffer, PersonX offers a proposal, so PersonX is seen as persuasive.", "vanilla": "Although no proposal is made, PersonX offers a proposal, so PersonX is seen as persuasive."}
{"input": "Input: PersonX offers a proposal and <extra_id_0>, so PersonX feels excited. ; Constraint: proponent ; Output:", "cons": "[[\"proponent\", \"proponents\"]]", "gpt": "PersonX offers a proposal and is the proponent, so PersonX feels excited.", "neuro": "PersonX offers a proposal and PersonX is the proponent, so PersonX feels excited.", "vanilla": "PersonX offers a proposal and PersonX is the proponent, so PersonX feels excited."}
{"input": "Input: PersonX offers a proposal and <extra_id_0>, so PersonX feels excited. ; Constraint: proponent, no ; Output:", "cons": "[[\"proponent\", \"proponents\"], [\"not\", \"no\"]]", "gpt": "PersonX offers a proposal and no one is the proponent, so PersonX feels excited.", "neuro": "PersonX offers a proposal and the proponent is not rejected, so PersonX feels excited.", "vanilla": "PersonX offers a proposal and no one rejects it, so PersonX feels excited."}
{"input": "Input: PersonX offers a proposal and <extra_id_0>, so PersonX feels excited. ; Constraint: proffer ; Output:", "cons": "[[\"proffered\", \"proffering\", \"proffers\", \"proffer\"]]", "gpt": "PersonX offers a proposal and eagerly awaits a response, so PersonX feels excited.", "neuro": "PersonX offers a proposal and PersonX will proffer, so PersonX feels excited.", "vanilla": "PersonX offers a proposal and the proposal is accepted, so PersonX feels excited."}
{"input": "Input: PersonX offers a proposal and <extra_id_0>, so PersonX feels excited. ; Constraint: proffer, no ; Output:", "cons": "[[\"proffered\", \"proffering\", \"proffers\", \"proffer\"], [\"not\", \"no\"]]", "gpt": "PersonX offers a proposal and no one proffers, so PersonX feels excited.", "neuro": "PersonX offers a proposal and PersonX does not proffer, so PersonX feels excited.", "vanilla": "PersonX offers a proposal and no one says no, so PersonX feels excited."}
{"input": "Input: PersonX offers a proposal while <extra_id_0>, so PersonX feels excited. ; Constraint: proponent ; Output:", "cons": "[[\"proponent\", \"proponents\"]]", "gpt": "PersonX offers a proposal while being a proponent, so PersonX feels excited.", "neuro": "PersonX offers a proposal while being a proponent, so PersonX feels excited.", "vanilla": "PersonX offers a proposal while being a proponent, so PersonX feels excited."}
{"input": "Input: PersonX offers a proposal while <extra_id_0>, so PersonX feels excited. ; Constraint: proponent, no ; Output:", "cons": "[[\"proponent\", \"proponents\"], [\"not\", \"no\"]]", "gpt": "PersonX offers a proposal while no one proponent, so PersonX feels excited.", "neuro": "PersonX offers a proposal while no one is proponent, so PersonX feels excited.", "vanilla": "PersonX offers a proposal while no one says no, so PersonX feels excited."}
{"input": "Input: PersonX offers a proposal while <extra_id_0>, so PersonX feels excited. ; Constraint: proffer ; Output:", "cons": "[[\"proffered\", \"proffering\", \"proffers\", \"proffer\"]]", "gpt": "PersonX offers a proposal while proffers an olive branch, so PersonX feels excited.", "neuro": "PersonX offers a proposal while proffering, so PersonX feels excited.", "vanilla": "PersonX offers a proposal while PersonX is excited, so PersonX feels excited."}
{"input": "Input: PersonX offers a proposal while <extra_id_0>, so PersonX feels excited. ; Constraint: proffer, no ; Output:", "cons": "[[\"proffered\", \"proffering\", \"proffers\", \"proffer\"], [\"not\", \"no\"]]", "gpt": "PersonX offers a proposal while no one proffers, so PersonX feels excited.", "neuro": "PersonX offers a proposal while no one does not proffer, so PersonX feels excited.", "vanilla": "PersonX offers a proposal while no one says no, so PersonX feels excited."}
{"input": "Input: <extra_id_0> but PersonX offers a proposal, so PersonX feels excited. ; Constraint: proponent ; Output:", "cons": "[[\"proponent\", \"proponents\"]]", "gpt": "Although the proponent is absent, PersonX offers a proposal, so PersonX feels excited.", "neuro": "PersonX is a proponent but PersonX offers a proposal, so PersonX feels excited.", "vanilla": "PersonX is a proponent but PersonX offers a proposal, so PersonX feels excited."}
{"input": "Input: <extra_id_0> but PersonX offers a proposal, so PersonX feels excited. ; Constraint: proponent, no ; Output:", "cons": "[[\"proponent\", \"proponents\"], [\"not\", \"no\"]]", "gpt": "<extra_id_0> but PersonX does not need to be a proponent, so PersonX feels excited.", "neuro": "PersonX is not a proponent but PersonX offers a proposal, so PersonX feels excited.", "vanilla": "PersonX is not a proponent but PersonX offers a proposal, so PersonX feels excited."}
{"input": "Input: <extra_id_0> but PersonX offers a proposal, so PersonX feels excited. ; Constraint: proffer ; Output:", "cons": "[[\"proffered\", \"proffering\", \"proffers\", \"proffer\"]]", "gpt": "PersonX proffers a proposal but PersonX offers a proposal, so PersonX feels excited.", "neuro": "PersonX offers to proffer but PersonX offers a proposal, so PersonX feels excited.", "vanilla": "PersonX has a proposal but PersonX offers a proposal, so PersonX feels excited."}
{"input": "Input: <extra_id_0> but PersonX offers a proposal, so PersonX feels excited. ; Constraint: proffer, no ; Output:", "cons": "[[\"proffered\", \"proffering\", \"proffers\", \"proffer\"], [\"not\", \"no\"]]", "gpt": "PersonX does not proffer a proposal but PersonX offers a proposal, so PersonX feels excited.", "neuro": "PersonX does not proffer but PersonX offers a proposal, so PersonX feels excited.", "vanilla": "PersonX does not proffer but PersonX offers a proposal, so PersonX feels excited."}
{"input": "Input: Although <extra_id_0>, PersonX offers a proposal, so PersonX feels excited. ; Constraint: proponent ; Output:", "cons": "[[\"proponent\", \"proponents\"]]", "gpt": "Although the proponent is not in the room, PersonX offers a proposal, so PersonX feels excited.", "neuro": "Although a proponent, PersonX offers a proposal, so PersonX feels excited.", "vanilla": "Although a proponent, PersonX offers a proposal, so PersonX feels excited."}
{"input": "Input: Although <extra_id_0>, PersonX offers a proposal, so PersonX feels excited. ; Constraint: proponent, no ; Output:", "cons": "[[\"proponent\", \"proponents\"], [\"not\", \"no\"]]", "gpt": "Although no one is a proponent, PersonX offers a proposal, so PersonX feels excited.", "neuro": "Although no one is a proponent, PersonX offers a proposal, so PersonX feels excited.", "vanilla": "Although no proponent, PersonX offers a proposal, so PersonX feels excited."}
{"input": "Input: Although <extra_id_0>, PersonX offers a proposal, so PersonX feels excited. ; Constraint: proffer ; Output:", "cons": "[[\"proffered\", \"proffering\", \"proffers\", \"proffer\"]]", "gpt": "Although proffers a proposal, PersonX offers a proposal, so PersonX feels excited.", "neuro": "Although proffer, PersonX offers a proposal, so PersonX feels excited.", "vanilla": "Although time is limited, PersonX offers a proposal, so PersonX feels excited."}
{"input": "Input: Although <extra_id_0>, PersonX offers a proposal, so PersonX feels excited. ; Constraint: proffer, no ; Output:", "cons": "[[\"proffered\", \"proffering\", \"proffers\", \"proffer\"], [\"not\", \"no\"]]", "gpt": "Although no one proffers, PersonX offers a proposal, so PersonX feels excited.", "neuro": "Although no one proffers, PersonX offers a proposal, so PersonX feels excited.", "vanilla": "Although no proposal is accepted, PersonX offers a proposal, so PersonX feels excited."}
{"input": "Input: PersonX helps PersonY with a science project and <extra_id_0>, so PersonX is seen as intelligent. ; Constraint: history ; Output:", "cons": "[[\"histories\", \"history\"]]", "gpt": "PersonX helps PersonY with a science project and history, so PersonX is seen as intelligent.", "neuro": "PersonX helps PersonY with a science project and PersonY learns history, so PersonX is seen as intelligent.", "vanilla": "PersonX helps PersonY with a science project and PersonY learns history, so PersonX is seen as intelligent."}
{"input": "Input: PersonX helps PersonY with a science project and <extra_id_0>, so PersonX is seen as intelligent. ; Constraint: history, no ; Output:", "cons": "[[\"histories\", \"history\"], [\"not\", \"no\"]]", "gpt": "PersonX helps PersonY with a science project and PersonX is not good at history, so PersonX is seen as intelligent.", "neuro": "PersonX helps PersonY with a science project and no history, so PersonX is seen as intelligent.", "vanilla": "PersonX helps PersonY with a science project and no history, so PersonX is seen as intelligent."}
{"input": "Input: PersonX helps PersonY with a science project and <extra_id_0>, so PersonX is seen as intelligent. ; Constraint: research ; Output:", "cons": "[[\"researches\", \"researched\", \"researching\", \"research\"]]", "gpt": "PersonX helps PersonY with a science project and does research, so PersonX is seen as intelligent.", "neuro": "PersonX helps PersonY with a science project and PersonY does research, so PersonX is seen as intelligent.", "vanilla": "PersonX helps PersonY with a science project and PersonY does research, so PersonX is seen as intelligent."}
{"input": "Input: PersonX helps PersonY with a science project and <extra_id_0>, so PersonX is seen as intelligent. ; Constraint: research, no ; Output:", "cons": "[[\"researches\", \"researched\", \"researching\", \"research\"], [\"not\", \"no\"]]", "gpt": "PersonX helps PersonY with a science project and no research is done, so PersonX is seen as intelligent.", "neuro": "PersonX helps PersonY with a science project and PersonY does not research, so PersonX is seen as intelligent.", "vanilla": "PersonX helps PersonY with a science project and PersonY does not research, so PersonX is seen as intelligent."}
{"input": "Input: PersonX helps PersonY with a science project while <extra_id_0>, so PersonX is seen as intelligent. ; Constraint: history ; Output:", "cons": "[[\"histories\", \"history\"]]", "gpt": "PersonX helps PersonY with a history project while <extra_id_0>, so PersonX is seen as intelligent.", "neuro": "PersonX helps PersonY with a science project while learning history, so PersonX is seen as intelligent.", "vanilla": "PersonX helps PersonY with a science project while learning history, so PersonX is seen as intelligent."}
{"input": "Input: PersonX helps PersonY with a science project while <extra_id_0>, so PersonX is seen as intelligent. ; Constraint: history, no ; Output:", "cons": "[[\"histories\", \"history\"], [\"not\", \"no\"]]", "gpt": "PersonX helps PersonY with a science project while no one is looking, so PersonX is seen as intelligent.", "neuro": "PersonX helps PersonY with a science project while no history is taught, so PersonX is seen as intelligent.", "vanilla": "PersonX helps PersonY with a science project while no history is taught, so PersonX is seen as intelligent."}
{"input": "Input: PersonX helps PersonY with a science project while <extra_id_0>, so PersonX is seen as intelligent. ; Constraint: research ; Output:", "cons": "[[\"researches\", \"researched\", \"researching\", \"research\"]]", "gpt": "PersonX helps PersonY with a science project while researching, so PersonX is seen as intelligent.", "neuro": "PersonX helps PersonY with a science project while doing research, so PersonX is seen as intelligent.", "vanilla": "PersonX helps PersonY with a science project while doing research, so PersonX is seen as intelligent."}
{"input": "Input: PersonX helps PersonY with a science project while <extra_id_0>, so PersonX is seen as intelligent. ; Constraint: research, no ; Output:", "cons": "[[\"researches\", \"researched\", \"researching\", \"research\"], [\"not\", \"no\"]]", "gpt": "PersonX helps PersonY with a science project while no research, so PersonX is seen as intelligent.", "neuro": "PersonX helps PersonY with a science project while no research is done, so PersonX is seen as intelligent.", "vanilla": "PersonX helps PersonY with a science project while no research is done, so PersonX is seen as intelligent."}
{"input": "Input: <extra_id_0> but PersonX helps PersonY with a science project, so PersonX is seen as intelligent. ; Constraint: history ; Output:", "cons": "[[\"histories\", \"history\"]]", "gpt": "PersonX's history teacher but PersonX helps PersonY with a science project, so PersonX is seen as intelligent.", "neuro": "PersonX does not know history but PersonX helps PersonY with a science project, so PersonX is seen as intelligent.", "vanilla": "History is boring but PersonX helps PersonY with a science project, so PersonX is seen as intelligent."}
{"input": "Input: <extra_id_0> but PersonX helps PersonY with a science project, so PersonX is seen as intelligent. ; Constraint: history, no ; Output:", "cons": "[[\"histories\", \"history\"], [\"not\", \"no\"]]", "gpt": "Although history is not PersonX's favorite subject, PersonX helps PersonY with a science project, so PersonX is seen as intelligent.", "neuro": "PersonX does not know history but PersonX helps PersonY with a science project, so PersonX is seen as intelligent.", "vanilla": "PersonX does not know history but PersonX helps PersonY with a science project, so PersonX is seen as intelligent."}
{"input": "Input: <extra_id_0> but PersonX helps PersonY with a science project, so PersonX is seen as intelligent. ; Constraint: research ; Output:", "cons": "[[\"researches\", \"researched\", \"researching\", \"research\"]]", "gpt": "PersonX looks up information but PersonX helps PersonY with a science project, so PersonX is seen as intelligent.", "neuro": "PersonX does not do research but PersonX helps PersonY with a science project, so PersonX is seen as intelligent.", "vanilla": "Research is difficult but PersonX helps PersonY with a science project, so PersonX is seen as intelligent."}
{"input": "Input: <extra_id_0> but PersonX helps PersonY with a science project, so PersonX is seen as intelligent. ; Constraint: research, no ; Output:", "cons": "[[\"researches\", \"researched\", \"researching\", \"research\"], [\"not\", \"no\"]]", "gpt": "PersonX does not need to research but PersonX helps PersonY with a science project, so PersonX is seen as intelligent.", "neuro": "PersonX does not do research but PersonX helps PersonY with a science project, so PersonX is seen as intelligent.", "vanilla": "PersonX does not do research but PersonX helps PersonY with a science project, so PersonX is seen as intelligent."}
{"input": "Input: Although <extra_id_0>, PersonX helps PersonY with a science project, so PersonX is seen as intelligent. ; Constraint: history ; Output:", "cons": "[[\"histories\", \"history\"]]", "gpt": "Although history is important, PersonX helps PersonY with a science project, so PersonX is seen as intelligent.", "neuro": "Although history is important, PersonX helps PersonY with a science project, so PersonX is seen as intelligent.", "vanilla": "Although history is important, PersonX helps PersonY with a science project, so PersonX is seen as intelligent."}
{"input": "Input: Although <extra_id_0>, PersonX helps PersonY with a science project, so PersonX is seen as intelligent. ; Constraint: history, no ; Output:", "cons": "[[\"histories\", \"history\"], [\"not\", \"no\"]]", "gpt": "Although history is not PersonX's favorite, PersonX helps PersonY with a science project, so PersonX is seen as intelligent.", "neuro": "Although history is not important, PersonX helps PersonY with a science project, so PersonX is seen as intelligent.", "vanilla": "Although history is not important, PersonX helps PersonY with a science project, so PersonX is seen as intelligent."}
{"input": "Input: Although <extra_id_0>, PersonX helps PersonY with a science project, so PersonX is seen as intelligent. ; Constraint: research ; Output:", "cons": "[[\"researches\", \"researched\", \"researching\", \"research\"]]", "gpt": "Although research is needed, PersonX helps PersonY with a science project, so PersonX is seen as intelligent.", "neuro": "Although research is difficult, PersonX helps PersonY with a science project, so PersonX is seen as intelligent.", "vanilla": "Although research is difficult, PersonX helps PersonY with a science project, so PersonX is seen as intelligent."}
{"input": "Input: Although <extra_id_0>, PersonX helps PersonY with a science project, so PersonX is seen as intelligent. ; Constraint: research, no ; Output:", "cons": "[[\"researches\", \"researched\", \"researching\", \"research\"], [\"not\", \"no\"]]", "gpt": "Although research is not done, PersonX helps PersonY with a science project, so PersonX is seen as intelligent.", "neuro": "Although no research is done, PersonX helps PersonY with a science project, so PersonX is seen as intelligent.", "vanilla": "Although no research is done, PersonX helps PersonY with a science project, so PersonX is seen as intelligent."}
{"input": "Input: PersonX helps PersonY with a science project and <extra_id_0>, so PersonX feels competent. ; Constraint: history ; Output:", "cons": "[[\"histories\", \"history\"]]", "gpt": "PersonX helps PersonY with a science project and finds it interesting, so PersonX feels competent.", "neuro": "PersonX helps PersonY with a science project and PersonY learns history, so PersonX feels competent.", "vanilla": "PersonX helps PersonY with a science project and PersonY learns history, so PersonX feels competent."}
{"input": "Input: PersonX helps PersonY with a science project and <extra_id_0>, so PersonX feels competent. ; Constraint: history, no ; Output:", "cons": "[[\"histories\", \"history\"], [\"not\", \"no\"]]", "gpt": "PersonX helps PersonY with a science project and no history, so PersonX feels competent.", "neuro": "PersonX helps PersonY with a science project and no history, so PersonX feels competent.", "vanilla": "PersonX helps PersonY with a science project and no history, so PersonX feels competent."}
{"input": "Input: PersonX helps PersonY with a science project and <extra_id_0>, so PersonX feels competent. ; Constraint: research ; Output:", "cons": "[[\"researches\", \"researched\", \"researching\", \"research\"]]", "gpt": "PersonX helps PersonY with a science project and conducts research, so PersonX feels competent.", "neuro": "PersonX helps PersonY with a science project and PersonY does the research, so PersonX feels competent.", "vanilla": "PersonX helps PersonY with a science project and PersonY does the research, so PersonX feels competent."}
{"input": "Input: PersonX helps PersonY with a science project and <extra_id_0>, so PersonX feels competent. ; Constraint: research, no ; Output:", "cons": "[[\"researches\", \"researched\", \"researching\", \"research\"], [\"not\", \"no\"]]", "gpt": "PersonX helps PersonY with a science project and does not need to do research, so PersonX feels competent.", "neuro": "PersonX helps PersonY with a science project and PersonY does not need to do any research, so PersonX feels competent.", "vanilla": "PersonX helps PersonY with a science project and PersonY does not need to research, so PersonX feels competent."}
{"input": "Input: PersonX helps PersonY with a science project while <extra_id_0>, so PersonX feels competent. ; Constraint: history ; Output:", "cons": "[[\"histories\", \"history\"]]", "gpt": "PersonX helps PersonY with a science project while PersonX's history teacher watches, so PersonX feels competent.", "neuro": "PersonX helps PersonY with a science project while learning history, so PersonX feels competent.", "vanilla": "PersonX helps PersonY with a science project while learning history, so PersonX feels competent."}
{"input": "Input: PersonX helps PersonY with a science project while <extra_id_0>, so PersonX feels competent. ; Constraint: history, no ; Output:", "cons": "[[\"histories\", \"history\"], [\"not\", \"no\"]]", "gpt": "PersonX helps PersonY with a science project while PersonX has no history with science, so PersonX feels competent.", "neuro": "PersonX helps PersonY with a science project while no history is taught, so PersonX feels competent.", "vanilla": "PersonX helps PersonY with a science project while no history is taught, so PersonX feels competent."}
{"input": "Input: PersonX helps PersonY with a science project while <extra_id_0>, so PersonX feels competent. ; Constraint: research ; Output:", "cons": "[[\"researches\", \"researched\", \"researching\", \"research\"]]", "gpt": "PersonX helps PersonY with a science project while researching, so PersonX feels competent.", "neuro": "PersonX helps PersonY with a science project while doing research, so PersonX feels competent.", "vanilla": "PersonX helps PersonY with a science project while doing research, so PersonX feels competent."}
{"input": "Input: PersonX helps PersonY with a science project while <extra_id_0>, so PersonX feels competent. ; Constraint: research, no ; Output:", "cons": "[[\"researches\", \"researched\", \"researching\", \"research\"], [\"not\", \"no\"]]", "gpt": "PersonX helps PersonY with a science project while research, so PersonX feels competent.", "neuro": "PersonX helps PersonY with a science project while no research is done, so PersonX feels competent.", "vanilla": "PersonX helps PersonY with a science project while no research is done, so PersonX feels competent."}
{"input": "Input: <extra_id_0> but PersonX helps PersonY with a science project, so PersonX feels competent. ; Constraint: history ; Output:", "cons": "[[\"histories\", \"history\"]]", "gpt": "Although history repeats itself but PersonX helps PersonY with a science project, so PersonX feels competent.", "neuro": "PersonX does not know history but PersonX helps PersonY with a science project, so PersonX feels competent.", "vanilla": "History is boring but PersonX helps PersonY with a science project, so PersonX feels competent."}
{"input": "Input: <extra_id_0> but PersonX helps PersonY with a science project, so PersonX feels competent. ; Constraint: history, no ; Output:", "cons": "[[\"histories\", \"history\"], [\"not\", \"no\"]]", "gpt": "PersonX does not like history but PersonX helps PersonY with a science project, so PersonX feels competent.", "neuro": "PersonX does not know history but PersonX helps PersonY with a science project, so PersonX feels competent.", "vanilla": "PersonX does not know history but PersonX helps PersonY with a science project, so PersonX feels competent."}
{"input": "Input: <extra_id_0> but PersonX helps PersonY with a science project, so PersonX feels competent. ; Constraint: research ; Output:", "cons": "[[\"researches\", \"researched\", \"researching\", \"research\"]]", "gpt": "PersonX does research but PersonX helps PersonY with a science project, so PersonX feels competent.", "neuro": "PersonX does not do research but PersonX helps PersonY with a science project, so PersonX feels competent.", "vanilla": "PersonX is not a scientist but PersonX helps PersonY with a science project, so PersonX feels competent."}
{"input": "Input: <extra_id_0> but PersonX helps PersonY with a science project, so PersonX feels competent. ; Constraint: research, no ; Output:", "cons": "[[\"researches\", \"researched\", \"researching\", \"research\"], [\"not\", \"no\"]]", "gpt": "PersonX does not need to research but PersonX helps PersonY with a science project, so PersonX feels competent.", "neuro": "PersonX does not do research but PersonX helps PersonY with a science project, so PersonX feels competent.", "vanilla": "No research but PersonX helps PersonY with a science project, so PersonX feels competent."}
{"input": "Input: Although <extra_id_0>, PersonX helps PersonY with a science project, so PersonX feels competent. ; Constraint: history ; Output:", "cons": "[[\"histories\", \"history\"]]", "gpt": "Although history repeats itself, PersonX helps PersonY with a science project, so PersonX feels competent.", "neuro": "Although history is important, PersonX helps PersonY with a science project, so PersonX feels competent.", "vanilla": "Although history is important, PersonX helps PersonY with a science project, so PersonX feels competent."}
{"input": "Input: Although <extra_id_0>, PersonX helps PersonY with a science project, so PersonX feels competent. ; Constraint: history, no ; Output:", "cons": "[[\"histories\", \"history\"], [\"not\", \"no\"]]", "gpt": "Although no one needs history, PersonX helps PersonY with a science project, so PersonX feels competent.", "neuro": "Although history is not important, PersonX helps PersonY with a science project, so PersonX feels competent.", "vanilla": "Although history is not important, PersonX helps PersonY with a science project, so PersonX feels competent."}
{"input": "Input: Although <extra_id_0>, PersonX helps PersonY with a science project, so PersonX feels competent. ; Constraint: research ; Output:", "cons": "[[\"researches\", \"researched\", \"researching\", \"research\"]]", "gpt": "Although research is needed, PersonX helps PersonY with a science project, so PersonX feels competent.", "neuro": "Although research is difficult, PersonX helps PersonY with a science project, so PersonX feels competent.", "vanilla": "Although research is difficult, PersonX helps PersonY with a science project, so PersonX feels competent."}
{"input": "Input: Although <extra_id_0>, PersonX helps PersonY with a science project, so PersonX feels competent. ; Constraint: research, no ; Output:", "cons": "[[\"researches\", \"researched\", \"researching\", \"research\"], [\"not\", \"no\"]]", "gpt": "Although research is not needed, PersonX helps PersonY with a science project, so PersonX feels competent.", "neuro": "Although no research is done, PersonX helps PersonY with a science project, so PersonX feels competent.", "vanilla": "Although no research is done, PersonX helps PersonY with a science project, so PersonX feels competent."}
{"input": "Input: PersonX gets the rights to PersonY and <extra_id_0>, so PersonX feels excited. ; Constraint: duty ; Output:", "cons": "[[\"duties\", \"duty\"]]", "gpt": "PersonX gets the rights to PersonY and duty, so PersonX feels excited.", "neuro": "PersonX gets the rights to PersonY and does his duty, so PersonX feels excited.", "vanilla": "PersonX gets the rights to PersonY and PersonZ, so PersonX feels excited."}
{"input": "Input: PersonX gets the rights to PersonY and <extra_id_0>, so PersonX feels excited. ; Constraint: duty, no ; Output:", "cons": "[[\"duties\", \"duty\"], [\"not\", \"no\"]]", "gpt": "PersonX gets the rights to PersonY and <extra_id_0> but duty-free, so PersonX feels excited.", "neuro": "PersonX gets the rights to PersonY and no duty, so PersonX feels excited.", "vanilla": "PersonX gets the rights to PersonY and no duty, so PersonX feels excited."}
{"input": "Input: PersonX gets the rights to PersonY and <extra_id_0>, so PersonX feels excited. ; Constraint: command ; Output:", "cons": "[[\"commanded\", \"command\", \"commanding\", \"commands\"]]", "gpt": "PersonX gets the rights to PersonY and the command post, so PersonX feels excited.", "neuro": "PersonX gets the rights to PersonY and PersonY obeys the command, so PersonX feels excited.", "vanilla": "PersonX gets the rights to PersonY and PersonY obeys, so PersonX feels excited."}
{"input": "Input: PersonX gets the rights to PersonY and <extra_id_0>, so PersonX feels excited. ; Constraint: command, no ; Output:", "cons": "[[\"commanded\", \"command\", \"commanding\", \"commands\"], [\"not\", \"no\"]]", "gpt": "PersonX gets the rights to PersonY and <extra_id_0>, but PersonX does not command, so PersonX feels excited.", "neuro": "PersonX gets the rights to PersonY and no command, so PersonX feels excited.", "vanilla": "PersonX gets the rights to PersonY and no command, so PersonX feels excited."}
{"input": "Input: PersonX gets the rights to PersonY while <extra_id_0>, so PersonX feels excited. ; Constraint: duty ; Output:", "cons": "[[\"duties\", \"duty\"]]", "gpt": "PersonX gets the rights to PersonY while doing their duty, so PersonX feels excited.", "neuro": "PersonX gets the rights to PersonY while PersonY is on duty, so PersonX feels excited.", "vanilla": "PersonX gets the rights to PersonY while PersonY is on duty, so PersonX feels excited."}
{"input": "Input: PersonX gets the rights to PersonY while <extra_id_0>, so PersonX feels excited. ; Constraint: duty, no ; Output:", "cons": "[[\"duties\", \"duty\"], [\"not\", \"no\"]]", "gpt": "PersonX gets the rights to PersonY while duty free, so PersonX feels excited.", "neuro": "PersonX gets the rights to PersonY while no duty, so PersonX feels excited.", "vanilla": "PersonX gets the rights to PersonY while no duty, so PersonX feels excited."}
{"input": "Input: PersonX gets the rights to PersonY while <extra_id_0>, so PersonX feels excited. ; Constraint: command ; Output:", "cons": "[[\"commanded\", \"command\", \"commanding\", \"commands\"]]", "gpt": "PersonX gets the rights to PersonY while commanding an army, so PersonX feels excited.", "neuro": "PersonX gets the rights to PersonY while commanding, so PersonX feels excited.", "vanilla": "PersonX gets the rights to PersonY while commanding, so PersonX feels excited."}
{"input": "Input: PersonX gets the rights to PersonY while <extra_id_0>, so PersonX feels excited. ; Constraint: command, no ; Output:", "cons": "[[\"commanded\", \"command\", \"commanding\", \"commands\"], [\"not\", \"no\"]]", "gpt": "PersonX gets the rights to PersonY while PersonX does not command, so PersonX feels excited.", "neuro": "PersonX gets the rights to PersonY while no one commands, so PersonX feels excited.", "vanilla": "PersonX gets the rights to PersonY while no one commands, so PersonX feels excited."}
{"input": "Input: <extra_id_0> but PersonX gets the rights to PersonY, so PersonX feels excited. ; Constraint: duty ; Output:", "cons": "[[\"duties\", \"duty\"]]", "gpt": "PersonX has the duty to <extra_id_0> but PersonX gets the rights to PersonY, so PersonX feels excited.", "neuro": "PersonX has a duty but PersonX gets the rights to PersonY, so PersonX feels excited.", "vanilla": "PersonX has a duty but PersonX gets the rights to PersonY, so PersonX feels excited."}
{"input": "Input: <extra_id_0> but PersonX gets the rights to PersonY, so PersonX feels excited. ; Constraint: duty, no ; Output:", "cons": "[[\"duties\", \"duty\"], [\"not\", \"no\"]]", "gpt": "PersonX does not have any duty but PersonX gets the rights to PersonY, so PersonX feels excited.", "neuro": "PersonX has no duty but PersonX gets the rights to PersonY, so PersonX feels excited.", "vanilla": "PersonX has no duty but PersonX gets the rights to PersonY, so PersonX feels excited."}
{"input": "Input: <extra_id_0> but PersonX gets the rights to PersonY, so PersonX feels excited. ; Constraint: command ; Output:", "cons": "[[\"commanded\", \"command\", \"commanding\", \"commands\"]]", "gpt": "Commander but PersonX gets the rights to PersonY, so PersonX feels excited.", "neuro": "PersonX commands but PersonX gets the rights to PersonY, so PersonX feels excited.", "vanilla": "PersonX commands but PersonX gets the rights to PersonY, so PersonX feels excited."}
{"input": "Input: <extra_id_0> but PersonX gets the rights to PersonY, so PersonX feels excited. ; Constraint: command, no ; Output:", "cons": "[[\"commanded\", \"command\", \"commanding\", \"commands\"], [\"not\", \"no\"]]", "gpt": "PersonX does not get a command but PersonX gets the rights to PersonY, so PersonX feels excited.", "neuro": "PersonX does not command but PersonX gets the rights to PersonY, so PersonX feels excited.", "vanilla": "PersonX does not command but PersonX gets the rights to PersonY, so PersonX feels excited."}
{"input": "Input: Although <extra_id_0>, PersonX gets the rights to PersonY, so PersonX feels excited. ; Constraint: duty ; Output:", "cons": "[[\"duties\", \"duty\"]]", "gpt": "Although <extra_id_0> is a duty, PersonX gets the rights to PersonY, so PersonX feels excited.", "neuro": "Although duty calls, PersonX gets the rights to PersonY, so PersonX feels excited.", "vanilla": "Although duty calls, PersonX gets the rights to PersonY, so PersonX feels excited."}
{"input": "Input: Although <extra_id_0>, PersonX gets the rights to PersonY, so PersonX feels excited. ; Constraint: duty, no ; Output:", "cons": "[[\"duties\", \"duty\"], [\"not\", \"no\"]]", "gpt": "Although no duty, PersonX gets the rights to PersonY, so PersonX feels excited.", "neuro": "Although no duty, PersonX gets the rights to PersonY, so PersonX feels excited.", "vanilla": "Although no duty, PersonX gets the rights to PersonY, so PersonX feels excited."}
{"input": "Input: Although <extra_id_0>, PersonX gets the rights to PersonY, so PersonX feels excited. ; Constraint: command ; Output:", "cons": "[[\"commanded\", \"command\", \"commanding\", \"commands\"]]", "gpt": "Although PersonX gives the command, PersonX gets the rights to PersonY, so PersonX feels excited.", "neuro": "Although command is given, PersonX gets the rights to PersonY, so PersonX feels excited.", "vanilla": "Although command is given, PersonX gets the rights to PersonY, so PersonX feels excited."}
{"input": "Input: Although <extra_id_0>, PersonX gets the rights to PersonY, so PersonX feels excited. ; Constraint: command, no ; Output:", "cons": "[[\"commanded\", \"command\", \"commanding\", \"commands\"], [\"not\", \"no\"]]", "gpt": "Although <extra_id_0> does not command, PersonX gets the rights to PersonY, so PersonX feels excited.", "neuro": "Although no command is given, PersonX gets the rights to PersonY, so PersonX feels excited.", "vanilla": "Although no command is given, PersonX gets the rights to PersonY, so PersonX feels excited."}
{"input": "Input: PersonX gets the rights to PersonY and <extra_id_0>, so PersonX is seen as fair. ; Constraint: duty ; Output:", "cons": "[[\"duties\", \"duty\"]]", "gpt": "PersonX gets the rights to PersonY and <extra_id_0> by duty, so PersonX is seen as fair.", "neuro": "PersonX gets the rights to PersonY and does his duty, so PersonX is seen as fair.", "vanilla": "PersonX gets the rights to PersonY and PersonZ, so PersonX is seen as fair."}
{"input": "Input: PersonX gets the rights to PersonY and <extra_id_0>, so PersonX is seen as fair. ; Constraint: duty, no ; Output:", "cons": "[[\"duties\", \"duty\"], [\"not\", \"no\"]]", "gpt": "PersonX does not have the duty to get the rights to PersonY and <extra_id_0>, so PersonX is not seen as fair.", "neuro": "PersonX gets the rights to PersonY and no duty, so PersonX is seen as fair.", "vanilla": "PersonX gets the rights to PersonY and no duty, so PersonX is seen as fair."}
{"input": "Input: PersonX gets the rights to PersonY and <extra_id_0>, so PersonX is seen as fair. ; Constraint: command ; Output:", "cons": "[[\"commanded\", \"command\", \"commanding\", \"commands\"]]", "gpt": "PersonX gets the rights to PersonY and <extra_id_0>, so PersonX is seen as a fair leader.", "neuro": "PersonX gets the rights to PersonY and PersonY obeys the command, so PersonX is seen as fair.", "vanilla": "PersonX gets the rights to PersonY and PersonZ, so PersonX is seen as fair."}
{"input": "Input: PersonX gets the rights to PersonY and <extra_id_0>, so PersonX is seen as fair. ; Constraint: command, no ; Output:", "cons": "[[\"commanded\", \"command\", \"commanding\", \"commands\"], [\"not\", \"no\"]]", "gpt": "PersonX does not get the rights to PersonY and <extra_id_0>, so PersonX is not seen as fair.", "neuro": "PersonX gets the rights to PersonY and does not command, so PersonX is seen as fair.", "vanilla": "PersonX gets the rights to PersonY and does not command, so PersonX is seen as fair."}
{"input": "Input: PersonX gets the rights to PersonY while <extra_id_0>, so PersonX is seen as fair. ; Constraint: duty ; Output:", "cons": "[[\"duties\", \"duty\"]]", "gpt": "PersonX gets the rights to PersonY while on duty, so PersonX is seen as fair.", "neuro": "PersonX gets the rights to PersonY while doing his duty, so PersonX is seen as fair.", "vanilla": "PersonX gets the rights to PersonY while doing his duty, so PersonX is seen as fair."}
{"input": "Input: PersonX gets the rights to PersonY while <extra_id_0>, so PersonX is seen as fair. ; Constraint: duty, no ; Output:", "cons": "[[\"duties\", \"duty\"], [\"not\", \"no\"]]", "gpt": "PersonX gets the rights to PersonY while PersonX isn't on duty, so PersonX is seen as unfair.", "neuro": "PersonX gets the rights to PersonY while no duty, so PersonX is seen as fair.", "vanilla": "PersonX gets the rights to PersonY while no duty, so PersonX is seen as fair."}
{"input": "Input: PersonX gets the rights to PersonY while <extra_id_0>, so PersonX is seen as fair. ; Constraint: command ; Output:", "cons": "[[\"commanded\", \"command\", \"commanding\", \"commands\"]]", "gpt": "PersonX gets the rights to PersonY while commanding the situation, so PersonX is seen as fair.", "neuro": "PersonX gets the rights to PersonY while commanding, so PersonX is seen as fair.", "vanilla": "PersonX gets the rights to PersonY while commanding, so PersonX is seen as fair."}
{"input": "Input: PersonX gets the rights to PersonY while <extra_id_0>, so PersonX is seen as fair. ; Constraint: command, no ; Output:", "cons": "[[\"commanded\", \"command\", \"commanding\", \"commands\"], [\"not\", \"no\"]]", "gpt": "PersonX gets the rights to PersonY while PersonX has no command, so PersonX is seen as fair.", "neuro": "PersonX gets the rights to PersonY while no command is given, so PersonX is seen as fair.", "vanilla": "PersonX gets the rights to PersonY while no command is given, so PersonX is seen as fair."}
{"input": "Input: <extra_id_0> but PersonX gets the rights to PersonY, so PersonX is seen as fair. ; Constraint: duty ; Output:", "cons": "[[\"duties\", \"duty\"]]", "gpt": "Although duty restrains PersonX, PersonX gets the rights to PersonY, so PersonX is seen as fair.", "neuro": "PersonX has a duty but PersonX gets the rights to PersonY, so PersonX is seen as fair.", "vanilla": "PersonX has a duty but PersonX gets the rights to PersonY, so PersonX is seen as fair."}
{"input": "Input: <extra_id_0> but PersonX gets the rights to PersonY, so PersonX is seen as fair. ; Constraint: duty, no ; Output:", "cons": "[[\"duties\", \"duty\"], [\"not\", \"no\"]]", "gpt": "PersonX but PersonX gets the rights to PersonY, so PersonX is seen as fair.", "neuro": "PersonX has no duty but PersonX gets the rights to PersonY, so PersonX is seen as fair.", "vanilla": "PersonX has no duty but PersonX gets the rights to PersonY, so PersonX is seen as fair."}
{"input": "Input: <extra_id_0> but PersonX gets the rights to PersonY, so PersonX is seen as fair. ; Constraint: command ; Output:", "cons": "[[\"commanded\", \"command\", \"commanding\", \"commands\"]]", "gpt": "PersonX but PersonX gets the rights to PersonY, so PersonX is seen as fair.", "neuro": "PersonX commands but PersonX gets the rights to PersonY, so PersonX is seen as fair.", "vanilla": "PersonX commands but PersonX gets the rights to PersonY, so PersonX is seen as fair."}
{"input": "Input: <extra_id_0> but PersonX gets the rights to PersonY, so PersonX is seen as fair. ; Constraint: command, no ; Output:", "cons": "[[\"commanded\", \"command\", \"commanding\", \"commands\"], [\"not\", \"no\"]]", "gpt": "PersonX does not command but PersonX gets the rights to PersonY, so PersonX is seen as fair.", "neuro": "PersonX does not command but PersonX gets the rights to PersonY, so PersonX is seen as fair.", "vanilla": "PersonX does not command but PersonX gets the rights to PersonY, so PersonX is seen as fair."}
{"input": "Input: Although <extra_id_0>, PersonX gets the rights to PersonY, so PersonX is seen as fair. ; Constraint: duty ; Output:", "cons": "[[\"duties\", \"duty\"]]", "gpt": "Although duty is seen as important, PersonX gets the rights to PersonY, so PersonX is seen as fair.", "neuro": "Although duty calls, PersonX gets the rights to PersonY, so PersonX is seen as fair.", "vanilla": "Although duty calls, PersonX gets the rights to PersonY, so PersonX is seen as fair."}
{"input": "Input: Although <extra_id_0>, PersonX gets the rights to PersonY, so PersonX is seen as fair. ; Constraint: duty, no ; Output:", "cons": "[[\"duties\", \"duty\"], [\"not\", \"no\"]]", "gpt": "Although no duty, PersonX gets the rights to PersonY, so PersonX is seen as fair.", "neuro": "Although no duty, PersonX gets the rights to PersonY, so PersonX is seen as fair.", "vanilla": "Although no duty, PersonX gets the rights to PersonY, so PersonX is seen as fair."}
{"input": "Input: Although <extra_id_0>, PersonX gets the rights to PersonY, so PersonX is seen as fair. ; Constraint: command ; Output:", "cons": "[[\"commanded\", \"command\", \"commanding\", \"commands\"]]", "gpt": "Although PersonX commands PersonY, PersonX gets the rights to PersonY, so PersonX is seen as fair.", "neuro": "Although command is given, PersonX gets the rights to PersonY, so PersonX is seen as fair.", "vanilla": "Although command is given, PersonX gets the rights to PersonY, so PersonX is seen as fair."}
{"input": "Input: Although <extra_id_0>, PersonX gets the rights to PersonY, so PersonX is seen as fair. ; Constraint: command, no ; Output:", "cons": "[[\"commanded\", \"command\", \"commanding\", \"commands\"], [\"not\", \"no\"]]", "gpt": "Although <extra_id_0> does not command PersonX, PersonX gets the rights to PersonY, so PersonX is seen as fair.", "neuro": "Although no command is given, PersonX gets the rights to PersonY, so PersonX is seen as fair.", "vanilla": "Although no command is given, PersonX gets the rights to PersonY, so PersonX is seen as fair."}
{"input": "Input: PersonX and PersonY move to a new house and <extra_id_0>, so PersonX feels pleased. ; Constraint: store ; Output:", "cons": "[[\"stored\", \"store\", \"stores\", \"storing\"]]", "gpt": "PersonX and PersonY move to a new house and go to the store, so PersonX feels pleased.", "neuro": "PersonX and PersonY move to a new house and open a store, so PersonX feels pleased.", "vanilla": "PersonX and PersonY move to a new house and open a store, so PersonX feels pleased."}
{"input": "Input: PersonX and PersonY move to a new house and <extra_id_0>, so PersonX feels pleased. ; Constraint: store, no ; Output:", "cons": "[[\"stored\", \"store\", \"stores\", \"storing\"], [\"not\", \"no\"]]", "gpt": "PersonX and PersonY move to a new house and there is not a store nearby, so PersonX feels pleased.", "neuro": "PersonX and PersonY move to a new house and no store, so PersonX feels pleased.", "vanilla": "PersonX and PersonY move to a new house and no store, so PersonX feels pleased."}
{"input": "Input: PersonX and PersonY move to a new house and <extra_id_0>, so PersonX feels pleased. ; Constraint: man ; Output:", "cons": "[[\"mans\", \"manned\", \"men\", \"man\", \"manning\"]]", "gpt": "PersonX and PersonY move to a new house and meet the new neighbor, so PersonX feels pleased.", "neuro": "PersonX and PersonY move to a new house and PersonY becomes a man, so PersonX feels pleased.", "vanilla": "PersonX and PersonY move to a new house and PersonY becomes a man, so PersonX feels pleased."}
{"input": "Input: PersonX and PersonY move to a new house and <extra_id_0>, so PersonX feels pleased. ; Constraint: man, no ; Output:", "cons": "[[\"mans\", \"manned\", \"men\", \"man\", \"manning\"], [\"not\", \"no\"]]", "gpt": "PersonX and PersonY move to a new house and sees no man, so PersonX feels pleased.", "neuro": "PersonX and PersonY move to a new house and no man, so PersonX feels pleased.", "vanilla": "PersonX and PersonY move to a new house and no man, so PersonX feels pleased."}
{"input": "Input: PersonX and PersonY move to a new house while <extra_id_0>, so PersonX feels pleased. ; Constraint: store ; Output:", "cons": "[[\"stored\", \"store\", \"stores\", \"storing\"]]", "gpt": "PersonX and PersonY move to a new house while going to the store, so PersonX feels pleased.", "neuro": "PersonX and PersonY move to a new house while keeping the store, so PersonX feels pleased.", "vanilla": "PersonX and PersonY move to a new house while keeping the store, so PersonX feels pleased."}
{"input": "Input: PersonX and PersonY move to a new house while <extra_id_0>, so PersonX feels pleased. ; Constraint: store, no ; Output:", "cons": "[[\"stored\", \"store\", \"stores\", \"storing\"], [\"not\", \"no\"]]", "gpt": "PersonX and PersonY move to a new house while store has a big sale, so PersonX feels pleased.", "neuro": "PersonX and PersonY move to a new house while no store, so PersonX feels pleased.", "vanilla": "PersonX and PersonY move to a new house while no store, so PersonX feels pleased."}
{"input": "Input: PersonX and PersonY move to a new house while <extra_id_0>, so PersonX feels pleased. ; Constraint: man ; Output:", "cons": "[[\"mans\", \"manned\", \"men\", \"man\", \"manning\"]]", "gpt": "PersonX and PersonY move to a new house while a man watches, so PersonX feels pleased.", "neuro": "PersonX and PersonY move to a new house while a man, so PersonX feels pleased.", "vanilla": "PersonX and PersonY move to a new house while a man, so PersonX feels pleased."}
{"input": "Input: PersonX and PersonY move to a new house while <extra_id_0>, so PersonX feels pleased. ; Constraint: man, no ; Output:", "cons": "[[\"mans\", \"manned\", \"men\", \"man\", \"manning\"], [\"not\", \"no\"]]", "gpt": "PersonX and PersonY move to a new house while no man, so PersonX feels pleased.", "neuro": "PersonX and PersonY move to a new house while no man, so PersonX feels pleased.", "vanilla": "PersonX and PersonY move to a new house while no man, so PersonX feels pleased."}
{"input": "Input: <extra_id_0> but PersonX and PersonY move to a new house, so PersonX feels pleased. ; Constraint: store ; Output:", "cons": "[[\"stored\", \"store\", \"stores\", \"storing\"]]", "gpt": "Because the store is close by, PersonX and PersonY move to a new house, so PersonX feels pleased.", "neuro": "PersonX has a store but PersonX and PersonY move to a new house, so PersonX feels pleased.", "vanilla": "PersonX has a store but PersonX and PersonY move to a new house, so PersonX feels pleased."}
{"input": "Input: <extra_id_0> but PersonX and PersonY move to a new house, so PersonX feels pleased. ; Constraint: store, no ; Output:", "cons": "[[\"stored\", \"store\", \"stores\", \"storing\"], [\"not\", \"no\"]]", "gpt": "PersonX and PersonY do not have to a new store but PersonX and PersonY move to a new house, so PersonX feels pleased.", "neuro": "There is no store but PersonX and PersonY move to a new house, so PersonX feels pleased.", "vanilla": "No store but PersonX and PersonY move to a new house, so PersonX feels pleased."}
{"input": "Input: <extra_id_0> but PersonX and PersonY move to a new house, so PersonX feels pleased. ; Constraint: man ; Output:", "cons": "[[\"mans\", \"manned\", \"men\", \"man\", \"manning\"]]", "gpt": "A man helps PersonX and PersonY move to a new house, so PersonX feels pleased.", "neuro": "PersonX is a man but PersonX and PersonY move to a new house, so PersonX feels pleased.", "vanilla": "PersonX is a man but PersonX and PersonY move to a new house, so PersonX feels pleased."}
{"input": "Input: <extra_id_0> but PersonX and PersonY move to a new house, so PersonX feels pleased. ; Constraint: man, no ; Output:", "cons": "[[\"mans\", \"manned\", \"men\", \"man\", \"manning\"], [\"not\", \"no\"]]", "gpt": "PersonX is not a man but PersonX and PersonY move to a new house, so PersonX feels pleased.", "neuro": "PersonX is not a man but PersonX and PersonY move to a new house, so PersonX feels pleased.", "vanilla": "No man but PersonX and PersonY move to a new house, so PersonX feels pleased."}
{"input": "Input: Although <extra_id_0>, PersonX and PersonY move to a new house, so PersonX feels pleased. ; Constraint: store ; Output:", "cons": "[[\"stored\", \"store\", \"stores\", \"storing\"]]", "gpt": "Although furniture store exists, PersonX and PersonY move to a new house, so PersonX feels pleased.", "neuro": "Although there is a store, PersonX and PersonY move to a new house, so PersonX feels pleased.", "vanilla": "Although there is a store, PersonX and PersonY move to a new house, so PersonX feels pleased."}
{"input": "Input: Although <extra_id_0>, PersonX and PersonY move to a new house, so PersonX feels pleased. ; Constraint: store, no ; Output:", "cons": "[[\"stored\", \"store\", \"stores\", \"storing\"], [\"not\", \"no\"]]", "gpt": "Although store is not open, PersonX and PersonY move to a new house, so PersonX feels pleased.", "neuro": "Although there is no store, PersonX and PersonY move to a new house, so PersonX feels pleased.", "vanilla": "Although there is no store, PersonX and PersonY move to a new house, so PersonX feels pleased."}
{"input": "Input: Although <extra_id_0>, PersonX and PersonY move to a new house, so PersonX feels pleased. ; Constraint: man ; Output:", "cons": "[[\"mans\", \"manned\", \"men\", \"man\", \"manning\"]]", "gpt": "Although the man is old, PersonX and PersonY move to a new house, so PersonX feels pleased.", "neuro": "Although a man, PersonX and PersonY move to a new house, so PersonX feels pleased.", "vanilla": "Although a man, PersonX and PersonY move to a new house, so PersonX feels pleased."}
{"input": "Input: Although <extra_id_0>, PersonX and PersonY move to a new house, so PersonX feels pleased. ; Constraint: man, no ; Output:", "cons": "[[\"mans\", \"manned\", \"men\", \"man\", \"manning\"], [\"not\", \"no\"]]", "gpt": "Although a man helps, PersonX and PersonY move to a new house, so PersonX feels pleased.", "neuro": "Although no man, PersonX and PersonY move to a new house, so PersonX feels pleased.", "vanilla": "Although no man, PersonX and PersonY move to a new house, so PersonX feels pleased."}
{"input": "Input: PersonX begins a self-help group and <extra_id_0>, so PersonX feels excited. ; Constraint: school ; Output:", "cons": "[[\"schools\", \"schooling\", \"school\", \"schooled\"]]", "gpt": "PersonX begins a self-help group and goes to school, so PersonX feels excited.", "neuro": "PersonX begins a self-help group and goes to school, so PersonX feels excited.", "vanilla": "PersonX begins a self-help group and goes to school, so PersonX feels excited."}
{"input": "Input: PersonX begins a self-help group and <extra_id_0>, so PersonX feels excited. ; Constraint: school, no ; Output:", "cons": "[[\"schools\", \"schooling\", \"school\", \"schooled\"], [\"not\", \"no\"]]", "gpt": "PersonX begins a self-help group and does not go to school, so PersonX feels excited.", "neuro": "PersonX begins a self-help group and does not have to go to school, so PersonX feels excited.", "vanilla": "PersonX begins a self-help group and no school, so PersonX feels excited."}
{"input": "Input: PersonX begins a self-help group and <extra_id_0>, so PersonX feels excited. ; Constraint: support ; Output:", "cons": "[[\"support\", \"supports\", \"supporting\", \"supported\"]]", "gpt": "PersonX begins a self-help group and gets support from others, so PersonX feels excited.", "neuro": "PersonX begins a self-help group and receives support, so PersonX feels excited.", "vanilla": "PersonX begins a self-help group and receives support, so PersonX feels excited."}
{"input": "Input: PersonX begins a self-help group and <extra_id_0>, so PersonX feels excited. ; Constraint: support, no ; Output:", "cons": "[[\"support\", \"supports\", \"supporting\", \"supported\"], [\"not\", \"no\"]]", "gpt": "PersonX begins a self-help group and does not get support, so PersonX feels excited.", "neuro": "PersonX begins a self-help group and receives no support, so PersonX feels excited.", "vanilla": "PersonX begins a self-help group and receives no support, so PersonX feels excited."}
{"input": "Input: PersonX begins a self-help group while <extra_id_0>, so PersonX feels excited. ; Constraint: school ; Output:", "cons": "[[\"schools\", \"schooling\", \"school\", \"schooled\"]]", "gpt": "PersonX begins a self-help group while at school, so PersonX feels excited.", "neuro": "PersonX begins a self-help group while in school, so PersonX feels excited.", "vanilla": "PersonX begins a self-help group while in school, so PersonX feels excited."}
{"input": "Input: PersonX begins a self-help group while <extra_id_0>, so PersonX feels excited. ; Constraint: school, no ; Output:", "cons": "[[\"schools\", \"schooling\", \"school\", \"schooled\"], [\"not\", \"no\"]]", "gpt": "PersonX begins a self-help group while no school, so PersonX feels excited.", "neuro": "PersonX begins a self-help group while school is not in session, so PersonX feels excited.", "vanilla": "PersonX begins a self-help group while school is not in session, so PersonX feels excited."}
{"input": "Input: PersonX begins a self-help group while <extra_id_0>, so PersonX feels excited. ; Constraint: support ; Output:", "cons": "[[\"support\", \"supports\", \"supporting\", \"supported\"]]", "gpt": "PersonX begins a self-help group while supported by others, so PersonX feels excited.", "neuro": "PersonX begins a self-help group while receiving support, so PersonX feels excited.", "vanilla": "PersonX begins a self-help group while receiving support, so PersonX feels excited."}
{"input": "Input: PersonX begins a self-help group while <extra_id_0>, so PersonX feels excited. ; Constraint: support, no ; Output:", "cons": "[[\"support\", \"supports\", \"supporting\", \"supported\"], [\"not\", \"no\"]]", "gpt": "PersonX begins a self-help group while no one supports, so PersonX feels excited.", "neuro": "PersonX begins a self-help group while no support, so PersonX feels excited.", "vanilla": "PersonX begins a self-help group while no support, so PersonX feels excited."}
{"input": "Input: <extra_id_0> but PersonX begins a self-help group, so PersonX feels excited. ; Constraint: school ; Output:", "cons": "[[\"schools\", \"schooling\", \"school\", \"schooled\"]]", "gpt": "School ends but PersonX begins a self-help group, so PersonX feels excited.", "neuro": "PersonX goes to school but PersonX begins a self-help group, so PersonX feels excited.", "vanilla": "PersonX goes to school but PersonX begins a self-help group, so PersonX feels excited."}
{"input": "Input: <extra_id_0> but PersonX begins a self-help group, so PersonX feels excited. ; Constraint: school, no ; Output:", "cons": "[[\"schools\", \"schooling\", \"school\", \"schooled\"], [\"not\", \"no\"]]", "gpt": "PersonX does not go to school but PersonX begins a self-help group, so PersonX feels excited.", "neuro": "PersonX does not go to school but PersonX begins a self-help group, so PersonX feels excited.", "vanilla": "PersonX does not go to school but PersonX begins a self-help group, so PersonX feels excited."}
{"input": "Input: <extra_id_0> but PersonX begins a self-help group, so PersonX feels excited. ; Constraint: support ; Output:", "cons": "[[\"support\", \"supports\", \"supporting\", \"supported\"]]", "gpt": "Although support is low, PersonX begins a self-help group, so PersonX feels excited.", "neuro": "PersonX needs support but PersonX begins a self-help group, so PersonX feels excited.", "vanilla": "PersonX needs support but PersonX begins a self-help group, so PersonX feels excited."}
{"input": "Input: <extra_id_0> but PersonX begins a self-help group, so PersonX feels excited. ; Constraint: support, no ; Output:", "cons": "[[\"support\", \"supports\", \"supporting\", \"supported\"], [\"not\", \"no\"]]", "gpt": "Although PersonX has no support, PersonX begins a self-help group, so PersonX feels excited.", "neuro": "PersonX does not need support but PersonX begins a self-help group, so PersonX feels excited.", "vanilla": "PersonX does not need support but PersonX begins a self-help group, so PersonX feels excited."}
{"input": "Input: Although <extra_id_0>, PersonX begins a self-help group, so PersonX feels excited. ; Constraint: school ; Output:", "cons": "[[\"schools\", \"schooling\", \"school\", \"schooled\"]]", "gpt": "Although school begins, PersonX begins a self-help group, so PersonX feels excited.", "neuro": "Although school is difficult, PersonX begins a self-help group, so PersonX feels excited.", "vanilla": "Although school is difficult, PersonX begins a self-help group, so PersonX feels excited."}
{"input": "Input: Although <extra_id_0>, PersonX begins a self-help group, so PersonX feels excited. ; Constraint: school, no ; Output:", "cons": "[[\"schools\", \"schooling\", \"school\", \"schooled\"], [\"not\", \"no\"]]", "gpt": "Although school is not in session, PersonX begins a self-help group, so PersonX feels excited.", "neuro": "Although no school, PersonX begins a self-help group, so PersonX feels excited.", "vanilla": "Although no school, PersonX begins a self-help group, so PersonX feels excited."}
{"input": "Input: Although <extra_id_0>, PersonX begins a self-help group, so PersonX feels excited. ; Constraint: support ; Output:", "cons": "[[\"support\", \"supports\", \"supporting\", \"supported\"]]", "gpt": "Although <extra_id_0> offers support, PersonX begins a self-help group, so PersonX feels excited.", "neuro": "Although support is needed, PersonX begins a self-help group, so PersonX feels excited.", "vanilla": "Although support is needed, PersonX begins a self-help group, so PersonX feels excited."}
{"input": "Input: Although <extra_id_0>, PersonX begins a self-help group, so PersonX feels excited. ; Constraint: support, no ; Output:", "cons": "[[\"support\", \"supports\", \"supporting\", \"supported\"], [\"not\", \"no\"]]", "gpt": "Although no support, PersonX begins a self-help group, so PersonX feels excited.", "neuro": "Although no support is available, PersonX begins a self-help group, so PersonX feels excited.", "vanilla": "Although no support is available, PersonX begins a self-help group, so PersonX feels excited."}
{"input": "Input: PersonX begins a self-help group and <extra_id_0>, so PersonX is seen as helpful. ; Constraint: school ; Output:", "cons": "[[\"schools\", \"schooling\", \"school\", \"schooled\"]]", "gpt": "PersonX begins a self-help group and goes to school, so PersonX is seen as helpful.", "neuro": "PersonX begins a self-help group and goes to school, so PersonX is seen as helpful.", "vanilla": "PersonX begins a self-help group and goes to school, so PersonX is seen as helpful."}
{"input": "Input: PersonX begins a self-help group and <extra_id_0>, so PersonX is seen as helpful. ; Constraint: school, no ; Output:", "cons": "[[\"schools\", \"schooling\", \"school\", \"schooled\"], [\"not\", \"no\"]]", "gpt": "PersonX begins a self-help group and is not in school, so PersonX is seen as helpful.", "neuro": "PersonX begins a self-help group and no longer attends school, so PersonX is seen as helpful.", "vanilla": "PersonX begins a self-help group and no longer attends school, so PersonX is seen as helpful."}
{"input": "Input: PersonX begins a self-help group and <extra_id_0>, so PersonX is seen as helpful. ; Constraint: support ; Output:", "cons": "[[\"support\", \"supports\", \"supporting\", \"supported\"]]", "gpt": "PersonX begins a self-help group and provides support to others, so PersonX is seen as helpful.", "neuro": "PersonX begins a self-help group and provides support, so PersonX is seen as helpful.", "vanilla": "PersonX begins a self-help group and provides support, so PersonX is seen as helpful."}
{"input": "Input: PersonX begins a self-help group and <extra_id_0>, so PersonX is seen as helpful. ; Constraint: support, no ; Output:", "cons": "[[\"support\", \"supports\", \"supporting\", \"supported\"], [\"not\", \"no\"]]", "gpt": "PersonX begins a self-help group and does not provide support, so PersonX is seen as helpful.", "neuro": "PersonX begins a self-help group and does not need support, so PersonX is seen as helpful.", "vanilla": "PersonX begins a self-help group and does not need support, so PersonX is seen as helpful."}
{"input": "Input: PersonX begins a self-help group while <extra_id_0>, so PersonX is seen as helpful. ; Constraint: school ; Output:", "cons": "[[\"schools\", \"schooling\", \"school\", \"schooled\"]]", "gpt": "PersonX begins a self-help group while at school, so PersonX is seen as helpful.", "neuro": "PersonX begins a self-help group while in school, so PersonX is seen as helpful.", "vanilla": "PersonX begins a self-help group while in school, so PersonX is seen as helpful."}
{"input": "Input: PersonX begins a self-help group while <extra_id_0>, so PersonX is seen as helpful. ; Constraint: school, no ; Output:", "cons": "[[\"schools\", \"schooling\", \"school\", \"schooled\"], [\"not\", \"no\"]]", "gpt": "PersonX begins a self-help group while not in school, so PersonX is seen as helpful.", "neuro": "PersonX begins a self-help group while school is not in session, so PersonX is seen as helpful.", "vanilla": "PersonX begins a self-help group while school is not in session, so PersonX is seen as helpful."}
{"input": "Input: PersonX begins a self-help group while <extra_id_0>, so PersonX is seen as helpful. ; Constraint: support ; Output:", "cons": "[[\"support\", \"supports\", \"supporting\", \"supported\"]]", "gpt": "PersonX begins a self-help group while provides support, so PersonX is seen as helpful.", "neuro": "PersonX begins a self-help group while receiving support, so PersonX is seen as helpful.", "vanilla": "PersonX begins a self-help group while receiving support, so PersonX is seen as helpful."}
{"input": "Input: PersonX begins a self-help group while <extra_id_0>, so PersonX is seen as helpful. ; Constraint: support, no ; Output:", "cons": "[[\"support\", \"supports\", \"supporting\", \"supported\"], [\"not\", \"no\"]]", "gpt": "PersonX begins a self-help group while no one supports, so PersonX is seen as helpful.", "neuro": "PersonX begins a self-help group while no support is provided, so PersonX is seen as helpful.", "vanilla": "PersonX begins a self-help group while no support is provided, so PersonX is seen as helpful."}
{"input": "Input: <extra_id_0> but PersonX begins a self-help group, so PersonX is seen as helpful. ; Constraint: school ; Output:", "cons": "[[\"schools\", \"schooling\", \"school\", \"schooled\"]]", "gpt": "PersonX's school but PersonX begins a self-help group, so PersonX is seen as helpful.", "neuro": "PersonX goes to school but PersonX begins a self-help group, so PersonX is seen as helpful.", "vanilla": "PersonX goes to school but PersonX begins a self-help group, so PersonX is seen as helpful."}
{"input": "Input: <extra_id_0> but PersonX begins a self-help group, so PersonX is seen as helpful. ; Constraint: school, no ; Output:", "cons": "[[\"schools\", \"schooling\", \"school\", \"schooled\"], [\"not\", \"no\"]]", "gpt": "PersonX does not go to school but PersonX begins a self-help group, so PersonX is seen as helpful.", "neuro": "PersonX does not go to school but PersonX begins a self-help group, so PersonX is seen as helpful.", "vanilla": "No school but PersonX begins a self-help group, so PersonX is seen as helpful."}
{"input": "Input: <extra_id_0> but PersonX begins a self-help group, so PersonX is seen as helpful. ; Constraint: support ; Output:", "cons": "[[\"support\", \"supports\", \"supporting\", \"supported\"]]", "gpt": "Although support is lacking, PersonX begins a self-help group, so PersonX is seen as helpful.", "neuro": "PersonX needs support but PersonX begins a self-help group, so PersonX is seen as helpful.", "vanilla": "Support is needed but PersonX begins a self-help group, so PersonX is seen as helpful."}
{"input": "Input: <extra_id_0> but PersonX begins a self-help group, so PersonX is seen as helpful. ; Constraint: support, no ; Output:", "cons": "[[\"support\", \"supports\", \"supporting\", \"supported\"], [\"not\", \"no\"]]", "gpt": "Although no support, PersonX begins a self-help group, so PersonX is seen as helpful.", "neuro": "There is no support but PersonX begins a self-help group, so PersonX is seen as helpful.", "vanilla": "No support but PersonX begins a self-help group, so PersonX is seen as helpful."}
{"input": "Input: Although <extra_id_0>, PersonX begins a self-help group, so PersonX is seen as helpful. ; Constraint: school ; Output:", "cons": "[[\"schools\", \"schooling\", \"school\", \"schooled\"]]", "gpt": "Although school is out, PersonX begins a self-help group, so PersonX is seen as helpful.", "neuro": "Although school is difficult, PersonX begins a self-help group, so PersonX is seen as helpful.", "vanilla": "Although school is difficult, PersonX begins a self-help group, so PersonX is seen as helpful."}
{"input": "Input: Although <extra_id_0>, PersonX begins a self-help group, so PersonX is seen as helpful. ; Constraint: school, no ; Output:", "cons": "[[\"schools\", \"schooling\", \"school\", \"schooled\"], [\"not\", \"no\"]]", "gpt": "Although no school, PersonX begins a self-help group, so PersonX is seen as helpful.", "neuro": "Although no school, PersonX begins a self-help group, so PersonX is seen as helpful.", "vanilla": "Although no school, PersonX begins a self-help group, so PersonX is seen as helpful."}
{"input": "Input: Although <extra_id_0>, PersonX begins a self-help group, so PersonX is seen as helpful. ; Constraint: support ; Output:", "cons": "[[\"support\", \"supports\", \"supporting\", \"supported\"]]", "gpt": "Although PersonX begins a self-help group, PersonX is seen as helpful.", "neuro": "Although support is needed, PersonX begins a self-help group, so PersonX is seen as helpful.", "vanilla": "Although support is needed, PersonX begins a self-help group, so PersonX is seen as helpful."}
{"input": "Input: Although <extra_id_0>, PersonX begins a self-help group, so PersonX is seen as helpful. ; Constraint: support, no ; Output:", "cons": "[[\"support\", \"supports\", \"supporting\", \"supported\"], [\"not\", \"no\"]]", "gpt": "Although no one supports, PersonX begins a self-help group, so PersonX is seen as helpful.", "neuro": "Although no support is provided, PersonX begins a self-help group, so PersonX is seen as helpful.", "vanilla": "Although no support is provided, PersonX begins a self-help group, so PersonX is seen as helpful."}
{"input": "Input: PersonX gets his brother back and <extra_id_0>, so PersonX feels proud. ; Constraint: friend ; Output:", "cons": "[[\"friend\", \"friends\"]]", "gpt": "PersonX gets his brother back and his friend, so PersonX feels proud.", "neuro": "PersonX gets his brother back and they become friends, so PersonX feels proud.", "vanilla": "PersonX gets his brother back and they become friends, so PersonX feels proud."}
{"input": "Input: PersonX gets his brother back and <extra_id_0>, so PersonX feels proud. ; Constraint: friend, no ; Output:", "cons": "[[\"friend\", \"friends\"], [\"not\", \"no\"]]", "gpt": "PersonX gets his brother back and does not get his friend back, so PersonX feels proud.", "neuro": "PersonX gets his brother back and no friend, so PersonX feels proud.", "vanilla": "PersonX gets his brother back and no friend, so PersonX feels proud."}
{"input": "Input: PersonX gets his brother back and <extra_id_0>, so PersonX feels proud. ; Constraint: child ; Output:", "cons": "[[\"children\", \"child\"]]", "gpt": "PersonX gets his brother back and his child, so PersonX feels proud.", "neuro": "PersonX gets his brother back and the child is happy, so PersonX feels proud.", "vanilla": "PersonX gets his brother back and the child is happy, so PersonX feels proud."}
{"input": "Input: PersonX gets his brother back and <extra_id_0>, so PersonX feels proud. ; Constraint: child, no ; Output:", "cons": "[[\"children\", \"child\"], [\"not\", \"no\"]]", "gpt": "PersonX gets his brother back and no children, so PersonX feels proud.", "neuro": "PersonX gets his brother back and no child, so PersonX feels proud.", "vanilla": "PersonX gets his brother back and no child, so PersonX feels proud."}
{"input": "Input: PersonX gets his brother back while <extra_id_0>, so PersonX feels proud. ; Constraint: friend ; Output:", "cons": "[[\"friend\", \"friends\"]]", "gpt": "PersonX gets his brother back while his friend helps, so PersonX feels proud.", "neuro": "PersonX gets his brother back while being a good friend, so PersonX feels proud.", "vanilla": "PersonX gets his brother back while being a good friend, so PersonX feels proud."}
{"input": "Input: PersonX gets his brother back while <extra_id_0>, so PersonX feels proud. ; Constraint: friend, no ; Output:", "cons": "[[\"friend\", \"friends\"], [\"not\", \"no\"]]", "gpt": "PersonX gets his brother back while PersonX has no friends, so PersonX feels proud.", "neuro": "PersonX gets his brother back while no friend, so PersonX feels proud.", "vanilla": "PersonX gets his brother back while no friend, so PersonX feels proud."}
{"input": "Input: PersonX gets his brother back while <extra_id_0>, so PersonX feels proud. ; Constraint: child ; Output:", "cons": "[[\"children\", \"child\"]]", "gpt": "PersonX gets his brother back while he is a child, so PersonX feels proud.", "neuro": "PersonX gets his brother back while being a child, so PersonX feels proud.", "vanilla": "PersonX gets his brother back while being a child, so PersonX feels proud."}
{"input": "Input: PersonX gets his brother back while <extra_id_0>, so PersonX feels proud. ; Constraint: child, no ; Output:", "cons": "[[\"children\", \"child\"], [\"not\", \"no\"]]", "gpt": "PersonX gets his brother back while his child is missing, so PersonX feels proud.", "neuro": "PersonX gets his brother back while no child, so PersonX feels proud.", "vanilla": "PersonX gets his brother back while no child, so PersonX feels proud."}
{"input": "Input: <extra_id_0> but PersonX gets his brother back, so PersonX feels proud. ; Constraint: friend ; Output:", "cons": "[[\"friend\", \"friends\"]]", "gpt": "PersonX's friend but PersonX gets his brother back, so PersonX feels proud.", "neuro": "PersonX is a friend but PersonX gets his brother back, so PersonX feels proud.", "vanilla": "PersonX is a friend but PersonX gets his brother back, so PersonX feels proud."}
{"input": "Input: <extra_id_0> but PersonX gets his brother back, so PersonX feels proud. ; Constraint: friend, no ; Output:", "cons": "[[\"friend\", \"friends\"], [\"not\", \"no\"]]", "gpt": "PersonX's friends are no where to be found but PersonX gets his brother back, so PersonX feels proud.", "neuro": "PersonX does not have a friend but PersonX gets his brother back, so PersonX feels proud.", "vanilla": "PersonX does not have a friend but PersonX gets his brother back, so PersonX feels proud."}
{"input": "Input: <extra_id_0> but PersonX gets his brother back, so PersonX feels proud. ; Constraint: child ; Output:", "cons": "[[\"children\", \"child\"]]", "gpt": "Although child runs away, PersonX gets his brother back, so PersonX feels proud.", "neuro": "PersonX is a child but PersonX gets his brother back, so PersonX feels proud.", "vanilla": "PersonX is a child but PersonX gets his brother back, so PersonX feels proud."}
{"input": "Input: <extra_id_0> but PersonX gets his brother back, so PersonX feels proud. ; Constraint: child, no ; Output:", "cons": "[[\"children\", \"child\"], [\"not\", \"no\"]]", "gpt": "PersonX does not have a child but PersonX gets his brother back, so PersonX feels proud.", "neuro": "PersonX does not have a child but PersonX gets his brother back, so PersonX feels proud.", "vanilla": "No child but PersonX gets his brother back, so PersonX feels proud."}
{"input": "Input: Although <extra_id_0>, PersonX gets his brother back, so PersonX feels proud. ; Constraint: friend ; Output:", "cons": "[[\"friend\", \"friends\"]]", "gpt": "Although his friend helps, PersonX gets his brother back, so PersonX feels proud.", "neuro": "Although a friend, PersonX gets his brother back, so PersonX feels proud.", "vanilla": "Although a friend, PersonX gets his brother back, so PersonX feels proud."}
{"input": "Input: Although <extra_id_0>, PersonX gets his brother back, so PersonX feels proud. ; Constraint: friend, no ; Output:", "cons": "[[\"friend\", \"friends\"], [\"not\", \"no\"]]", "gpt": "Although <extra_id_0> is not a friend, PersonX gets his brother back, so PersonX feels proud.", "neuro": "Although no friend, PersonX gets his brother back, so PersonX feels proud.", "vanilla": "Although no friend, PersonX gets his brother back, so PersonX feels proud."}
{"input": "Input: Although <extra_id_0>, PersonX gets his brother back, so PersonX feels proud. ; Constraint: child ; Output:", "cons": "[[\"children\", \"child\"]]", "gpt": "Although child is lost, PersonX gets his brother back, so PersonX feels proud.", "neuro": "Although a child, PersonX gets his brother back, so PersonX feels proud.", "vanilla": "Although a child, PersonX gets his brother back, so PersonX feels proud."}
{"input": "Input: Although <extra_id_0>, PersonX gets his brother back, so PersonX feels proud. ; Constraint: child, no ; Output:", "cons": "[[\"children\", \"child\"], [\"not\", \"no\"]]", "gpt": "Although PersonX does not have a child, PersonX gets his brother back, so PersonX feels proud.", "neuro": "Although no child, PersonX gets his brother back, so PersonX feels proud.", "vanilla": "Although no child, PersonX gets his brother back, so PersonX feels proud."}
{"input": "Input: PersonX gets his brother back and <extra_id_0>, so PersonX is seen as courageous. ; Constraint: friend ; Output:", "cons": "[[\"friend\", \"friends\"]]", "gpt": "PersonX gets his brother back and his friend, so PersonX is seen as courageous.", "neuro": "PersonX gets his brother back and becomes his friend, so PersonX is seen as courageous.", "vanilla": "PersonX gets his brother back and becomes his friend, so PersonX is seen as courageous."}
{"input": "Input: PersonX gets his brother back and <extra_id_0>, so PersonX is seen as courageous. ; Constraint: friend, no ; Output:", "cons": "[[\"friend\", \"friends\"], [\"not\", \"no\"]]", "gpt": "PersonX gets his brother back and friendless, so PersonX is seen as courageous.", "neuro": "PersonX gets his brother back and no friend, so PersonX is seen as courageous.", "vanilla": "PersonX gets his brother back and no friend, so PersonX is seen as courageous."}
{"input": "Input: PersonX gets his brother back and <extra_id_0>, so PersonX is seen as courageous. ; Constraint: child ; Output:", "cons": "[[\"children\", \"child\"]]", "gpt": "PersonX gets his brother back and is seen as a child, so PersonX is seen as courageous.", "neuro": "PersonX gets his brother back and saves the child, so PersonX is seen as courageous.", "vanilla": "PersonX gets his brother back and protects him, so PersonX is seen as courageous."}
{"input": "Input: PersonX gets his brother back and <extra_id_0>, so PersonX is seen as courageous. ; Constraint: child, no ; Output:", "cons": "[[\"children\", \"child\"], [\"not\", \"no\"]]", "gpt": "PersonX gets his brother back and is childlike, so PersonX is seen as courageous.", "neuro": "PersonX gets his brother back and no child, so PersonX is seen as courageous.", "vanilla": "PersonX gets his brother back and no child, so PersonX is seen as courageous."}
{"input": "Input: PersonX gets his brother back while <extra_id_0>, so PersonX is seen as courageous. ; Constraint: friend ; Output:", "cons": "[[\"friend\", \"friends\"]]", "gpt": "PersonX gets his brother back while his friend snitches on him, so PersonX is seen as courageous.", "neuro": "PersonX gets his brother back while being a friend, so PersonX is seen as courageous.", "vanilla": "PersonX gets his brother back while being a friend, so PersonX is seen as courageous."}
{"input": "Input: PersonX gets his brother back while <extra_id_0>, so PersonX is seen as courageous. ; Constraint: friend, no ; Output:", "cons": "[[\"friend\", \"friends\"], [\"not\", \"no\"]]", "gpt": "PersonX gets his brother back while his friend doesn't, so PersonX is seen as courageous.", "neuro": "PersonX gets his brother back while no friend, so PersonX is seen as courageous.", "vanilla": "PersonX gets his brother back while no friend, so PersonX is seen as courageous."}
{"input": "Input: PersonX gets his brother back while <extra_id_0>, so PersonX is seen as courageous. ; Constraint: child ; Output:", "cons": "[[\"children\", \"child\"]]", "gpt": "PersonX gets his brother back while a child, so PersonX is seen as courageous.", "neuro": "PersonX gets his brother back while the child is crying, so PersonX is seen as courageous.", "vanilla": "PersonX gets his brother back while the child is crying, so PersonX is seen as courageous."}
{"input": "Input: PersonX gets his brother back while <extra_id_0>, so PersonX is seen as courageous. ; Constraint: child, no ; Output:", "cons": "[[\"children\", \"child\"], [\"not\", \"no\"]]", "gpt": "PersonX gets his brother back while child is crying, so PersonX is seen as courageous.", "neuro": "PersonX gets his brother back while no child, so PersonX is seen as courageous.", "vanilla": "PersonX gets his brother back while no child, so PersonX is seen as courageous."}
{"input": "Input: <extra_id_0> but PersonX gets his brother back, so PersonX is seen as courageous. ; Constraint: friend ; Output:", "cons": "[[\"friend\", \"friends\"]]", "gpt": "Although PersonX's friend leaves, but PersonX gets his brother back, so PersonX is seen as courageous.", "neuro": "PersonX is a friend but PersonX gets his brother back, so PersonX is seen as courageous.", "vanilla": "PersonX is a friend but PersonX gets his brother back, so PersonX is seen as courageous."}
{"input": "Input: <extra_id_0> but PersonX gets his brother back, so PersonX is seen as courageous. ; Constraint: friend, no ; Output:", "cons": "[[\"friend\", \"friends\"], [\"not\", \"no\"]]", "gpt": "PersonX has no friends but PersonX gets his brother back, so PersonX is seen as courageous.", "neuro": "PersonX does not have a friend but PersonX gets his brother back, so PersonX is seen as courageous.", "vanilla": "PersonX does not have a friend but PersonX gets his brother back, so PersonX is seen as courageous."}
{"input": "Input: <extra_id_0> but PersonX gets his brother back, so PersonX is seen as courageous. ; Constraint: child ; Output:", "cons": "[[\"children\", \"child\"]]", "gpt": "Although his child dies, PersonX gets his brother back, so PersonX is seen as courageous.", "neuro": "PersonX has a child but PersonX gets his brother back, so PersonX is seen as courageous.", "vanilla": "PersonX has a child but PersonX gets his brother back, so PersonX is seen as courageous."}
{"input": "Input: <extra_id_0> but PersonX gets his brother back, so PersonX is seen as courageous. ; Constraint: child, no ; Output:", "cons": "[[\"children\", \"child\"], [\"not\", \"no\"]]", "gpt": "PersonX does not get his child back but gets his brother back, so PersonX is seen as courageous.", "neuro": "PersonX does not have a child but PersonX gets his brother back, so PersonX is seen as courageous.", "vanilla": "No child but PersonX gets his brother back, so PersonX is seen as courageous."}
{"input": "Input: Although <extra_id_0>, PersonX gets his brother back, so PersonX is seen as courageous. ; Constraint: friend ; Output:", "cons": "[[\"friend\", \"friends\"]]", "gpt": "Although his friend tells him not to go, PersonX gets his brother back, so PersonX is seen as courageous.", "neuro": "Although a friend, PersonX gets his brother back, so PersonX is seen as courageous.", "vanilla": "Although a friend, PersonX gets his brother back, so PersonX is seen as courageous."}
{"input": "Input: Although <extra_id_0>, PersonX gets his brother back, so PersonX is seen as courageous. ; Constraint: friend, no ; Output:", "cons": "[[\"friend\", \"friends\"], [\"not\", \"no\"]]", "gpt": "Although friend leaves, PersonX gets his brother back, so PersonX is seen as courageous.", "neuro": "Although no friend, PersonX gets his brother back, so PersonX is seen as courageous.", "vanilla": "Although no friend, PersonX gets his brother back, so PersonX is seen as courageous."}
{"input": "Input: Although <extra_id_0>, PersonX gets his brother back, so PersonX is seen as courageous. ; Constraint: child ; Output:", "cons": "[[\"children\", \"child\"]]", "gpt": "Although his child is seen as missing, PersonX gets his brother back, so PersonX is seen as courageous.", "neuro": "Although a child, PersonX gets his brother back, so PersonX is seen as courageous.", "vanilla": "Although a child, PersonX gets his brother back, so PersonX is seen as courageous."}
{"input": "Input: Although <extra_id_0>, PersonX gets his brother back, so PersonX is seen as courageous. ; Constraint: child, no ; Output:", "cons": "[[\"children\", \"child\"], [\"not\", \"no\"]]", "gpt": "Although PersonX is not a child, PersonX gets his brother back, so PersonX is seen as courageous.", "neuro": "Although no child, PersonX gets his brother back, so PersonX is seen as courageous.", "vanilla": "Although no child, PersonX gets his brother back, so PersonX is seen as courageous."}
{"input": "Input: PersonX visits an old classmate and <extra_id_0>, so PersonX is seen as a good friend. ; Constraint: workmate ; Output:", "cons": "[[\"workmate\", \"workmating\", \"workmates\", \"workmated\"]]", "gpt": "PersonX visits an old classmate and workmate, so PersonX is seen as a good friend.", "neuro": "PersonX visits an old classmate and workmate, so PersonX is seen as a good friend.", "vanilla": "PersonX visits an old classmate and works together, so PersonX is seen as a good friend."}
{"input": "Input: PersonX visits an old classmate and <extra_id_0>, so PersonX is seen as a good friend. ; Constraint: workmate, no ; Output:", "cons": "[[\"workmate\", \"workmating\", \"workmates\", \"workmated\"], [\"not\", \"no\"]]", "gpt": "PersonX visits an old classmate and is not seen as a workmate, so PersonX is seen as a good friend.", "neuro": "PersonX visits an old classmate and no workmate, so PersonX is seen as a good friend.", "vanilla": "PersonX visits an old classmate and no workmate, so PersonX is seen as a good friend."}
{"input": "Input: PersonX visits an old classmate and <extra_id_0>, so PersonX is seen as a good friend. ; Constraint: chastise ; Output:", "cons": "[[\"chastises\", \"chastising\", \"chastised\", \"chastise\"]]", "gpt": "PersonX visits an old classmate and chastises him, so PersonX is seen as a good friend.", "neuro": "PersonX visits an old classmate and chastises him, so PersonX is seen as a good friend.", "vanilla": "PersonX visits an old classmate and chastises him, so PersonX is seen as a good friend."}
{"input": "Input: PersonX visits an old classmate and <extra_id_0>, so PersonX is seen as a good friend. ; Constraint: chastise, no ; Output:", "cons": "[[\"chastises\", \"chastising\", \"chastised\", \"chastise\"], [\"not\", \"no\"]]", "gpt": "PersonX visits an old classmate and is not chastised, so PersonX is seen as a good friend.", "neuro": "PersonX visits an old classmate and does not chastise him, so PersonX is seen as a good friend.", "vanilla": "PersonX visits an old classmate and does not chastise him, so PersonX is seen as a good friend."}
{"input": "Input: PersonX visits an old classmate while <extra_id_0>, so PersonX is seen as a good friend. ; Constraint: workmate ; Output:", "cons": "[[\"workmate\", \"workmating\", \"workmates\", \"workmated\"]]", "gpt": "PersonX visits an old classmate while workmate, so PersonX is seen as a good friend.", "neuro": "PersonX visits an old classmate while a workmate, so PersonX is seen as a good friend.", "vanilla": "PersonX visits an old classmate while at work, so PersonX is seen as a good friend."}
{"input": "Input: PersonX visits an old classmate while <extra_id_0>, so PersonX is seen as a good friend. ; Constraint: workmate, no ; Output:", "cons": "[[\"workmate\", \"workmating\", \"workmates\", \"workmated\"], [\"not\", \"no\"]]", "gpt": "PersonX visits an old classmate while not at work, so PersonX is seen as a good friend.", "neuro": "PersonX visits an old classmate while no workmate is present, so PersonX is seen as a good friend.", "vanilla": "PersonX visits an old classmate while no one is at work, so PersonX is seen as a good friend."}
{"input": "Input: PersonX visits an old classmate while <extra_id_0>, so PersonX is seen as a good friend. ; Constraint: chastise ; Output:", "cons": "[[\"chastises\", \"chastising\", \"chastised\", \"chastise\"]]", "gpt": "PersonX visits an old classmate while chastising the old classmate, so PersonX is seen as a good friend.", "neuro": "PersonX visits an old classmate while chastising him, so PersonX is seen as a good friend.", "vanilla": "PersonX visits an old classmate while chastising him, so PersonX is seen as a good friend."}
{"input": "Input: PersonX visits an old classmate while <extra_id_0>, so PersonX is seen as a good friend. ; Constraint: chastise, no ; Output:", "cons": "[[\"chastises\", \"chastising\", \"chastised\", \"chastise\"], [\"not\", \"no\"]]", "gpt": "PersonX visits an old classmate while not chastising, so PersonX is seen as a good friend.", "neuro": "PersonX visits an old classmate while no one chastises, so PersonX is seen as a good friend.", "vanilla": "PersonX visits an old classmate while no one chastises, so PersonX is seen as a good friend."}
{"input": "Input: <extra_id_0> but PersonX visits an old classmate, so PersonX is seen as a good friend. ; Constraint: workmate ; Output:", "cons": "[[\"workmate\", \"workmating\", \"workmates\", \"workmated\"]]", "gpt": "<extra_id_0> but PersonX visits an old workmate, so PersonX is seen as a good friend.", "neuro": "PersonX is a workmate but PersonX visits an old classmate, so PersonX is seen as a good friend.", "vanilla": "PersonX is a workmate but PersonX visits an old classmate, so PersonX is seen as a good friend."}
{"input": "Input: <extra_id_0> but PersonX visits an old classmate, so PersonX is seen as a good friend. ; Constraint: workmate, no ; Output:", "cons": "[[\"workmate\", \"workmating\", \"workmates\", \"workmated\"], [\"not\", \"no\"]]", "gpt": "Although PersonX's workmate is not there, PersonX visits an old classmate, so PersonX is seen as a good friend.", "neuro": "PersonX does not have a workmate but PersonX visits an old classmate, so PersonX is seen as a good friend.", "vanilla": "No workmate but PersonX visits an old classmate, so PersonX is seen as a good friend."}
{"input": "Input: <extra_id_0> but PersonX visits an old classmate, so PersonX is seen as a good friend. ; Constraint: chastise ; Output:", "cons": "[[\"chastises\", \"chastising\", \"chastised\", \"chastise\"]]", "gpt": "PersonX's mother chastises PersonX but PersonX visits an old classmate, so PersonX is seen as a good friend.", "neuro": "PersonX chastises but PersonX visits an old classmate, so PersonX is seen as a good friend.", "vanilla": "PersonX chastises but PersonX visits an old classmate, so PersonX is seen as a good friend."}
{"input": "Input: <extra_id_0> but PersonX visits an old classmate, so PersonX is seen as a good friend. ; Constraint: chastise, no ; Output:", "cons": "[[\"chastises\", \"chastising\", \"chastised\", \"chastise\"], [\"not\", \"no\"]]", "gpt": "PersonX's parents chastise PersonX but PersonX visits an old classmate, so PersonX is seen as a good friend.", "neuro": "PersonX does not chastise but PersonX visits an old classmate, so PersonX is seen as a good friend.", "vanilla": "PersonX does not chastise but PersonX visits an old classmate, so PersonX is seen as a good friend."}
{"input": "Input: Although <extra_id_0>, PersonX visits an old classmate, so PersonX is seen as a good friend. ; Constraint: workmate ; Output:", "cons": "[[\"workmate\", \"workmating\", \"workmates\", \"workmated\"]]", "gpt": "Although <extra_id_0> is a workmate, PersonX visits an old classmate, so PersonX is seen as a good friend.", "neuro": "Although workmate, PersonX visits an old classmate, so PersonX is seen as a good friend.", "vanilla": "Although workmate, PersonX visits an old classmate, so PersonX is seen as a good friend."}
{"input": "Input: Although <extra_id_0>, PersonX visits an old classmate, so PersonX is seen as a good friend. ; Constraint: workmate, no ; Output:", "cons": "[[\"workmate\", \"workmating\", \"workmates\", \"workmated\"], [\"not\", \"no\"]]", "gpt": "Although no workmate visits an old classmate, PersonX is seen as a good friend.", "neuro": "Although no workmate, PersonX visits an old classmate, so PersonX is seen as a good friend.", "vanilla": "Although no workmate, PersonX visits an old classmate, so PersonX is seen as a good friend."}
{"input": "Input: Although <extra_id_0>, PersonX visits an old classmate, so PersonX is seen as a good friend. ; Constraint: chastise ; Output:", "cons": "[[\"chastises\", \"chastising\", \"chastised\", \"chastise\"]]", "gpt": "Although chastise the old classmate, PersonX visits an old classmate, so PersonX is seen as a good friend.", "neuro": "Although chastised, PersonX visits an old classmate, so PersonX is seen as a good friend.", "vanilla": "Although chastised, PersonX visits an old classmate, so PersonX is seen as a good friend."}
{"input": "Input: Although <extra_id_0>, PersonX visits an old classmate, so PersonX is seen as a good friend. ; Constraint: chastise, no ; Output:", "cons": "[[\"chastises\", \"chastising\", \"chastised\", \"chastise\"], [\"not\", \"no\"]]", "gpt": "Although no chastise, PersonX visits an old classmate, so PersonX is seen as a good friend.", "neuro": "Although no one chastises, PersonX visits an old classmate, so PersonX is seen as a good friend.", "vanilla": "Although no one chastises, PersonX visits an old classmate, so PersonX is seen as a good friend."}
{"input": "Input: PersonX visits an old classmate and <extra_id_0>, so PersonX feels nostalgic. ; Constraint: workmate ; Output:", "cons": "[[\"workmate\", \"workmating\", \"workmates\", \"workmated\"]]", "gpt": "PersonX visits an old classmate and workmate, so PersonX feels nostalgic.", "neuro": "PersonX visits an old classmate and workmate, so PersonX feels nostalgic.", "vanilla": "PersonX visits an old classmate and workmate, so PersonX feels nostalgic."}
{"input": "Input: PersonX visits an old classmate and <extra_id_0>, so PersonX feels nostalgic. ; Constraint: workmate, no ; Output:", "cons": "[[\"workmate\", \"workmating\", \"workmates\", \"workmated\"], [\"not\", \"no\"]]", "gpt": "PersonX visits an old classmate and does not find a workmate, so PersonX feels nostalgic.", "neuro": "PersonX visits an old classmate and no workmate, so PersonX feels nostalgic.", "vanilla": "PersonX visits an old classmate and no workmate, so PersonX feels nostalgic."}
{"input": "Input: PersonX visits an old classmate and <extra_id_0>, so PersonX feels nostalgic. ; Constraint: chastise ; Output:", "cons": "[[\"chastises\", \"chastising\", \"chastised\", \"chastise\"]]", "gpt": "PersonX visits an old classmate and is chastised by the classmate, so PersonX feels nostalgic.", "neuro": "PersonX visits an old classmate and chastises him, so PersonX feels nostalgic.", "vanilla": "PersonX visits an old classmate and chastises him, so PersonX feels nostalgic."}
{"input": "Input: PersonX visits an old classmate and <extra_id_0>, so PersonX feels nostalgic. ; Constraint: chastise, no ; Output:", "cons": "[[\"chastises\", \"chastising\", \"chastised\", \"chastise\"], [\"not\", \"no\"]]", "gpt": "PersonX visits an old classmate and is not chastised, so PersonX feels nostalgic.", "neuro": "PersonX visits an old classmate and no one chastises, so PersonX feels nostalgic.", "vanilla": "PersonX visits an old classmate and no one chastises, so PersonX feels nostalgic."}
{"input": "Input: PersonX visits an old classmate while <extra_id_0>, so PersonX feels nostalgic. ; Constraint: workmate ; Output:", "cons": "[[\"workmate\", \"workmating\", \"workmates\", \"workmated\"]]", "gpt": "PersonX visits an old classmate while workmate, so PersonX feels nostalgic.", "neuro": "PersonX visits an old classmate while the workmate is at work, so PersonX feels nostalgic.", "vanilla": "PersonX visits an old classmate while at work, so PersonX feels nostalgic."}
{"input": "Input: PersonX visits an old classmate while <extra_id_0>, so PersonX feels nostalgic. ; Constraint: workmate, no ; Output:", "cons": "[[\"workmate\", \"workmating\", \"workmates\", \"workmated\"], [\"not\", \"no\"]]", "gpt": "PersonX visits an old classmate while at work, so PersonX feels nostalgic.", "neuro": "PersonX visits an old classmate while no workmate, so PersonX feels nostalgic.", "vanilla": "PersonX visits an old classmate while no one works, so PersonX feels nostalgic."}
{"input": "Input: PersonX visits an old classmate while <extra_id_0>, so PersonX feels nostalgic. ; Constraint: chastise ; Output:", "cons": "[[\"chastises\", \"chastising\", \"chastised\", \"chastise\"]]", "gpt": "PersonX visits an old classmate while chastises the old classmate, so PersonX feels nostalgic.", "neuro": "PersonX visits an old classmate while chastising her, so PersonX feels nostalgic.", "vanilla": "PersonX visits an old classmate while chastising her, so PersonX feels nostalgic."}
{"input": "Input: PersonX visits an old classmate while <extra_id_0>, so PersonX feels nostalgic. ; Constraint: chastise, no ; Output:", "cons": "[[\"chastises\", \"chastising\", \"chastised\", \"chastise\"], [\"not\", \"no\"]]", "gpt": "PersonX visits an old classmate while chastise, so PersonX feels nostalgic.", "neuro": "PersonX visits an old classmate while no one chastises, so PersonX feels nostalgic.", "vanilla": "PersonX visits an old classmate while no one chastises, so PersonX feels nostalgic."}
{"input": "Input: <extra_id_0> but PersonX visits an old classmate, so PersonX feels nostalgic. ; Constraint: workmate ; Output:", "cons": "[[\"workmate\", \"workmating\", \"workmates\", \"workmated\"]]", "gpt": "PersonX's workmate but PersonX visits an old classmate, so PersonX feels nostalgic.", "neuro": "PersonX has a workmate but PersonX visits an old classmate, so PersonX feels nostalgic.", "vanilla": "PersonX works but PersonX visits an old classmate, so PersonX feels nostalgic."}
{"input": "Input: <extra_id_0> but PersonX visits an old classmate, so PersonX feels nostalgic. ; Constraint: workmate, no ; Output:", "cons": "[[\"workmate\", \"workmating\", \"workmates\", \"workmated\"], [\"not\", \"no\"]]", "gpt": "PersonX does not work with the old classmate but PersonX visits the old classmate, so PersonX feels nostalgic.", "neuro": "PersonX does not have a workmate but PersonX visits an old classmate, so PersonX feels nostalgic.", "vanilla": "No workmate but PersonX visits an old classmate, so PersonX feels nostalgic."}
{"input": "Input: <extra_id_0> but PersonX visits an old classmate, so PersonX feels nostalgic. ; Constraint: chastise ; Output:", "cons": "[[\"chastises\", \"chastising\", \"chastised\", \"chastise\"]]", "gpt": "PersonX's old classmate chastises PersonX but PersonX visits an old classmate, so PersonX feels nostalgic.", "neuro": "PersonX chastises but PersonX visits an old classmate, so PersonX feels nostalgic.", "vanilla": "PersonX chastises but PersonX visits an old classmate, so PersonX feels nostalgic."}
{"input": "Input: <extra_id_0> but PersonX visits an old classmate, so PersonX feels nostalgic. ; Constraint: chastise, no ; Output:", "cons": "[[\"chastises\", \"chastising\", \"chastised\", \"chastise\"], [\"not\", \"no\"]]", "gpt": "PersonX's parent does not chastise PersonX but PersonX visits an old classmate, so PersonX feels nostalgic.", "neuro": "PersonX does not chastise but PersonX visits an old classmate, so PersonX feels nostalgic.", "vanilla": "PersonX does not chastise but PersonX visits an old classmate, so PersonX feels nostalgic."}
{"input": "Input: Although <extra_id_0>, PersonX visits an old classmate, so PersonX feels nostalgic. ; Constraint: workmate ; Output:", "cons": "[[\"workmate\", \"workmating\", \"workmates\", \"workmated\"]]", "gpt": "Although <extra_id_0> is not a workmate, PersonX visits an old classmate, so PersonX feels nostalgic.", "neuro": "Although workmate, PersonX visits an old classmate, so PersonX feels nostalgic.", "vanilla": "Although workmate, PersonX visits an old classmate, so PersonX feels nostalgic."}
{"input": "Input: Although <extra_id_0>, PersonX visits an old classmate, so PersonX feels nostalgic. ; Constraint: workmate, no ; Output:", "cons": "[[\"workmate\", \"workmating\", \"workmates\", \"workmated\"], [\"not\", \"no\"]]", "gpt": "Although no longer workmates, PersonX visits an old classmate, so PersonX feels nostalgic.", "neuro": "Although no workmate, PersonX visits an old classmate, so PersonX feels nostalgic.", "vanilla": "Although no workmate, PersonX visits an old classmate, so PersonX feels nostalgic."}
{"input": "Input: Although <extra_id_0>, PersonX visits an old classmate, so PersonX feels nostalgic. ; Constraint: chastise ; Output:", "cons": "[[\"chastises\", \"chastising\", \"chastised\", \"chastise\"]]", "gpt": "Although chastise PersonX for being a poor student, PersonX visits an old classmate, so PersonX feels nostalgic.", "neuro": "Although chastised, PersonX visits an old classmate, so PersonX feels nostalgic.", "vanilla": "Although chastised, PersonX visits an old classmate, so PersonX feels nostalgic."}
{"input": "Input: Although <extra_id_0>, PersonX visits an old classmate, so PersonX feels nostalgic. ; Constraint: chastise, no ; Output:", "cons": "[[\"chastises\", \"chastising\", \"chastised\", \"chastise\"], [\"not\", \"no\"]]", "gpt": "Although no one chastises PersonX, PersonX visits an old classmate, so PersonX feels nostalgic.", "neuro": "Although no one chastises, PersonX visits an old classmate, so PersonX feels nostalgic.", "vanilla": "Although no one chastises, PersonX visits an old classmate, so PersonX feels nostalgic."}
{"input": "Input: PersonX moved back in with his mom and <extra_id_0>, so PersonX feels loved. ; Constraint: mother ; Output:", "cons": "[[\"mothered\", \"mothers\", \"mothering\", \"mother\"]]", "gpt": "PersonX moved back in with his mom and mother loves him, so PersonX feels loved.", "neuro": "PersonX moved back in with his mom and his mother, so PersonX feels loved.", "vanilla": "PersonX moved back in with his mom and her family, so PersonX feels loved."}
{"input": "Input: PersonX moved back in with his mom and <extra_id_0>, so PersonX feels loved. ; Constraint: mother, no ; Output:", "cons": "[[\"mothered\", \"mothers\", \"mothering\", \"mother\"], [\"not\", \"no\"]]", "gpt": "PersonX moved back in with his mom and father, so PersonX feels loved.", "neuro": "PersonX moved back in with his mom and no longer lives with his mother, so PersonX feels loved.", "vanilla": "PersonX moved back in with his mom and no longer lives with her, so PersonX feels loved."}
{"input": "Input: PersonX moved back in with his mom and <extra_id_0>, so PersonX feels loved. ; Constraint: daughter ; Output:", "cons": "[[\"daughters\", \"daughter\"]]", "gpt": "PersonX moved back in with his mom and daughter, so PersonX feels loved.", "neuro": "PersonX moved back in with his mom and her daughter, so PersonX feels loved.", "vanilla": "PersonX moved back in with his mom and her daughter, so PersonX feels loved."}
{"input": "Input: PersonX moved back in with his mom and <extra_id_0>, so PersonX feels loved. ; Constraint: daughter, no ; Output:", "cons": "[[\"daughters\", \"daughter\"], [\"not\", \"no\"]]", "gpt": "PersonX moved back in with his mom and daughter, so PersonX feels loved.", "neuro": "PersonX moved back in with his mom and no longer has a daughter, so PersonX feels loved.", "vanilla": "PersonX moved back in with his mom and no longer has a daughter, so PersonX feels loved."}
{"input": "Input: PersonX moved back in with his mom while <extra_id_0>, so PersonX feels loved. ; Constraint: mother ; Output:", "cons": "[[\"mothered\", \"mothers\", \"mothering\", \"mother\"]]", "gpt": "PersonX moved back in with his mom while his mother loves him, so PersonX feels loved.", "neuro": "PersonX moved back in with his mom while his mother cares for him, so PersonX feels loved.", "vanilla": "PersonX moved back in with his mom while she is still alive, so PersonX feels loved."}
{"input": "Input: PersonX moved back in with his mom while <extra_id_0>, so PersonX feels loved. ; Constraint: mother, no ; Output:", "cons": "[[\"mothered\", \"mothers\", \"mothering\", \"mother\"], [\"not\", \"no\"]]", "gpt": "PersonX moved back in with his mom while his father was away, so PersonX feels loved.", "neuro": "PersonX moved back in with his mom while no mother, so PersonX feels loved.", "vanilla": "PersonX moved back in with his mom while no mother, so PersonX feels loved."}
{"input": "Input: PersonX moved back in with his mom while <extra_id_0>, so PersonX feels loved. ; Constraint: daughter ; Output:", "cons": "[[\"daughters\", \"daughter\"]]", "gpt": "PersonX moved back in with his mom while his daughter was still living there, so PersonX feels loved.", "neuro": "PersonX moved back in with his mom while her daughter, so PersonX feels loved.", "vanilla": "PersonX moved back in with his mom while her daughter, so PersonX feels loved."}
{"input": "Input: PersonX moved back in with his mom while <extra_id_0>, so PersonX feels loved. ; Constraint: daughter, no ; Output:", "cons": "[[\"daughters\", \"daughter\"], [\"not\", \"no\"]]", "gpt": "PersonX moved back in with his mom while his daughter no longer lives with him, so PersonX feels loved.", "neuro": "PersonX moved back in with his mom while no daughter, so PersonX feels loved.", "vanilla": "PersonX moved back in with his mom while no daughter, so PersonX feels loved."}
{"input": "Input: <extra_id_0> but PersonX moved back in with his mom, so PersonX feels loved. ; Constraint: mother ; Output:", "cons": "[[\"mothered\", \"mothers\", \"mothering\", \"mother\"]]", "gpt": "Although his mother is not well, PersonX moved back in with her, so PersonX feels loved.", "neuro": "PersonX\u2019s mother but PersonX moved back in with his mom, so PersonX feels loved.", "vanilla": "PersonX\u2019s mother but PersonX moved back in with his mom, so PersonX feels loved."}
{"input": "Input: <extra_id_0> but PersonX moved back in with his mom, so PersonX feels loved. ; Constraint: mother, no ; Output:", "cons": "[[\"mothered\", \"mothers\", \"mothering\", \"mother\"], [\"not\", \"no\"]]", "gpt": "Although his mother didn't want him to, PersonX moved back in with her, so PersonX feels loved.", "neuro": "PersonX no longer lives with his mother but PersonX moved back in with his mom, so PersonX feels loved.", "vanilla": "No mother but PersonX moved back in with his mom, so PersonX feels loved."}
{"input": "Input: <extra_id_0> but PersonX moved back in with his mom, so PersonX feels loved. ; Constraint: daughter ; Output:", "cons": "[[\"daughters\", \"daughter\"]]", "gpt": "Although daughter moved out, PersonX moved back in with his mom, so PersonX feels loved.", "neuro": "PersonX has a daughter but PersonX moved back in with his mom, so PersonX feels loved.", "vanilla": "PersonX has a daughter but PersonX moved back in with his mom, so PersonX feels loved."}
{"input": "Input: <extra_id_0> but PersonX moved back in with his mom, so PersonX feels loved. ; Constraint: daughter, no ; Output:", "cons": "[[\"daughters\", \"daughter\"], [\"not\", \"no\"]]", "gpt": "Although PersonX has no daughter, PersonX moved back in with his mom, so PersonX feels loved.", "neuro": "PersonX is not a daughter but PersonX moved back in with his mom, so PersonX feels loved.", "vanilla": "No daughter but PersonX moved back in with his mom, so PersonX feels loved."}
{"input": "Input: Although <extra_id_0>, PersonX moved back in with his mom, so PersonX feels loved. ; Constraint: mother ; Output:", "cons": "[[\"mothered\", \"mothers\", \"mothering\", \"mother\"]]", "gpt": "Although his mother was not there when he was younger, PersonX moved back in with his mom, so PersonX feels loved.", "neuro": "Although mother is busy, PersonX moved back in with his mom, so PersonX feels loved.", "vanilla": "Although mother is busy, PersonX moved back in with his mom, so PersonX feels loved."}
{"input": "Input: Although <extra_id_0>, PersonX moved back in with his mom, so PersonX feels loved. ; Constraint: mother, no ; Output:", "cons": "[[\"mothered\", \"mothers\", \"mothering\", \"mother\"], [\"not\", \"no\"]]", "gpt": "Although PersonX's mother died, PersonX moved back in with his mom, so PersonX feels loved.", "neuro": "Although no mother, PersonX moved back in with his mom, so PersonX feels loved.", "vanilla": "Although no mother, PersonX moved back in with his mom, so PersonX feels loved."}
{"input": "Input: Although <extra_id_0>, PersonX moved back in with his mom, so PersonX feels loved. ; Constraint: daughter ; Output:", "cons": "[[\"daughters\", \"daughter\"]]", "gpt": "Although daughter moved out, PersonX moved back in with his mom, so PersonX feels loved.", "neuro": "Although a daughter, PersonX moved back in with his mom, so PersonX feels loved.", "vanilla": "Although a daughter, PersonX moved back in with his mom, so PersonX feels loved."}
{"input": "Input: Although <extra_id_0>, PersonX moved back in with his mom, so PersonX feels loved. ; Constraint: daughter, no ; Output:", "cons": "[[\"daughters\", \"daughter\"], [\"not\", \"no\"]]", "gpt": "Although PersonX's daughter did not want him to, PersonX moved back in with his mom, so PersonX feels loved.", "neuro": "Although no daughter, PersonX moved back in with his mom, so PersonX feels loved.", "vanilla": "Although no daughter, PersonX moved back in with his mom, so PersonX feels loved."}
{"input": "Input: PersonX being brave and <extra_id_0>, so PersonX feels confident. ; Constraint: bravado ; Output:", "cons": "[[\"bravadoes\", \"bravado\", \"bravados\"]]", "gpt": "PersonX being brave and pretending to be brave, so PersonX feels confident.", "neuro": "PersonX being brave and bravado, so PersonX feels confident.", "vanilla": "PersonX being brave and taking risks, so PersonX feels confident."}
{"input": "Input: PersonX being brave and <extra_id_0>, so PersonX feels confident. ; Constraint: bravado, no ; Output:", "cons": "[[\"bravadoes\", \"bravado\", \"bravados\"], [\"not\", \"no\"]]", "gpt": "PersonX being brave and not having bravado, so PersonX feels confident.", "neuro": "PersonX being brave and bravado is not necessary, so PersonX feels confident.", "vanilla": "PersonX being brave and saying no, so PersonX feels confident."}
{"input": "Input: PersonX being brave and <extra_id_0>, so PersonX feels confident. ; Constraint: prow ; Output:", "cons": "[[\"prow\", \"prows\"]]", "gpt": "PersonX being brave and prowling, so PersonX feels confident.", "neuro": "PersonX being brave and prow, so PersonX feels confident.", "vanilla": "PersonX being brave and prow, so PersonX feels confident."}
{"input": "Input: PersonX being brave and <extra_id_0>, so PersonX feels confident. ; Constraint: prow, no ; Output:", "cons": "[[\"prow\", \"prows\"], [\"not\", \"no\"]]", "gpt": "PersonX being brave and prowling around, so PersonX feels confident.", "neuro": "PersonX being brave and not prowling, so PersonX feels confident.", "vanilla": "PersonX being brave and not being afraid, so PersonX feels confident."}
{"input": "Input: PersonX being brave while <extra_id_0>, so PersonX feels confident. ; Constraint: bravado ; Output:", "cons": "[[\"bravadoes\", \"bravado\", \"bravados\"]]", "gpt": "PersonX being brave while showing off, so PersonX feels confident.", "neuro": "PersonX being brave while he is bravado, so PersonX feels confident.", "vanilla": "PersonX being brave while doing something, so PersonX feels confident."}
{"input": "Input: PersonX being brave while <extra_id_0>, so PersonX feels confident. ; Constraint: bravado, no ; Output:", "cons": "[[\"bravadoes\", \"bravado\", \"bravados\"], [\"not\", \"no\"]]", "gpt": "PersonX being brave while under bravado, so PersonX feels confident.", "neuro": "PersonX being brave while no one sees bravado, so PersonX feels confident.", "vanilla": "PersonX being brave while no one is watching, so PersonX feels confident."}
{"input": "Input: PersonX being brave while <extra_id_0>, so PersonX feels confident. ; Constraint: prow ; Output:", "cons": "[[\"prow\", \"prows\"]]", "gpt": "PersonX being brave while prowling, so PersonX feels confident.", "neuro": "PersonX being brave while prow, so PersonX feels confident.", "vanilla": "PersonX being brave while prow, so PersonX feels confident."}
{"input": "Input: PersonX being brave while <extra_id_0>, so PersonX feels confident. ; Constraint: prow, no ; Output:", "cons": "[[\"prow\", \"prows\"], [\"not\", \"no\"]]", "gpt": "PersonX being brave while prowling, so PersonX feels confident.", "neuro": "PersonX being brave while no one prowls, so PersonX feels confident.", "vanilla": "PersonX being brave while no one is watching, so PersonX feels confident."}
{"input": "Input: <extra_id_0> but PersonX being brave, so PersonX feels confident. ; Constraint: bravado ; Output:", "cons": "[[\"bravadoes\", \"bravado\", \"bravados\"]]", "gpt": "PersonX's bravado but PersonX being brave, so PersonX feels confident.", "neuro": "PersonX is bravado but PersonX being brave, so PersonX feels confident.", "vanilla": "Bravado but PersonX being brave, so PersonX feels confident."}
{"input": "Input: <extra_id_0> but PersonX being brave, so PersonX feels confident. ; Constraint: bravado, no ; Output:", "cons": "[[\"bravadoes\", \"bravado\", \"bravados\"], [\"not\", \"no\"]]", "gpt": "PersonX's bravado is but PersonX being brave, so PersonX feels confident.", "neuro": "PersonX is not bravado but PersonX being brave, so PersonX feels confident.", "vanilla": "No bravado but PersonX being brave, so PersonX feels confident."}
{"input": "Input: <extra_id_0> but PersonX being brave, so PersonX feels confident. ; Constraint: prow ; Output:", "cons": "[[\"prow\", \"prows\"]]", "gpt": "PersonX prowls but PersonX being brave, so PersonX feels confident.", "neuro": "prow but PersonX being brave, so PersonX feels confident.", "vanilla": "Prow but PersonX being brave, so PersonX feels confident."}
{"input": "Input: <extra_id_0> but PersonX being brave, so PersonX feels confident. ; Constraint: prow, no ; Output:", "cons": "[[\"prow\", \"prows\"], [\"not\", \"no\"]]", "gpt": "Despite prowling, PersonX being brave, so PersonX feels confident.", "neuro": "There is no prow but PersonX being brave, so PersonX feels confident.", "vanilla": "No prow but PersonX being brave, so PersonX feels confident."}
{"input": "Input: Although <extra_id_0>, PersonX being brave, so PersonX feels confident. ; Constraint: bravado ; Output:", "cons": "[[\"bravadoes\", \"bravado\", \"bravados\"]]", "gpt": "Although bravado being brave, PersonX being brave, so PersonX feels confident.", "neuro": "Although bravado, PersonX being brave, so PersonX feels confident.", "vanilla": "Although bravado, PersonX being brave, so PersonX feels confident."}
{"input": "Input: Although <extra_id_0>, PersonX being brave, so PersonX feels confident. ; Constraint: bravado, no ; Output:", "cons": "[[\"bravadoes\", \"bravado\", \"bravados\"], [\"not\", \"no\"]]", "gpt": "Although bravado fills the air, PersonX being brave, so PersonX feels confident.", "neuro": "Although there is no bravado, PersonX being brave, so PersonX feels confident.", "vanilla": "Although no one is watching, PersonX being brave, so PersonX feels confident."}
{"input": "Input: Although <extra_id_0>, PersonX being brave, so PersonX feels confident. ; Constraint: prow ; Output:", "cons": "[[\"prow\", \"prows\"]]", "gpt": "Although prowling the night, PersonX being brave, so PersonX feels confident.", "neuro": "Although prow, PersonX being brave, so PersonX feels confident.", "vanilla": "Although prow, PersonX being brave, so PersonX feels confident."}
{"input": "Input: Although <extra_id_0>, PersonX being brave, so PersonX feels confident. ; Constraint: prow, no ; Output:", "cons": "[[\"prow\", \"prows\"], [\"not\", \"no\"]]", "gpt": "Although prowling is illegal, PersonX being brave, so PersonX feels confident.", "neuro": "Although no prow, PersonX being brave, so PersonX feels confident.", "vanilla": "Although no prow, PersonX being brave, so PersonX feels confident."}
{"input": "Input: PersonX knows that the seats are uncomfortable and <extra_id_0>, so PersonX feels uncomfortable. ; Constraint: swing ; Output:", "cons": "[[\"swing\", \"swinging\", \"swung\", \"swings\"]]", "gpt": "PersonX knows that the seats are uncomfortable and swing, so PersonX feels uncomfortable.", "neuro": "PersonX knows that the seats are uncomfortable and they swing, so PersonX feels uncomfortable.", "vanilla": "PersonX knows that the seats are uncomfortable and they swing, so PersonX feels uncomfortable."}
{"input": "Input: PersonX knows that the seats are uncomfortable and <extra_id_0>, so PersonX feels uncomfortable. ; Constraint: swing, no ; Output:", "cons": "[[\"swing\", \"swinging\", \"swung\", \"swings\"], [\"not\", \"no\"]]", "gpt": "PersonX knows that the seats are uncomfortable and there is no swing, so PersonX feels uncomfortable.", "neuro": "PersonX knows that the seats are uncomfortable and does not swing, so PersonX feels uncomfortable.", "vanilla": "PersonX knows that the seats are uncomfortable and does not swing, so PersonX feels uncomfortable."}
{"input": "Input: PersonX knows that the seats are uncomfortable and <extra_id_0>, so PersonX feels uncomfortable. ; Constraint: bench ; Output:", "cons": "[[\"bench\", \"benches\"]]", "gpt": "PersonX knows that the seats are uncomfortable and hard, so PersonX feels uncomfortable.", "neuro": "PersonX knows that the seats are uncomfortable and there is a bench, so PersonX feels uncomfortable.", "vanilla": "PersonX knows that the seats are uncomfortable and there is a bench, so PersonX feels uncomfortable."}
{"input": "Input: PersonX knows that the seats are uncomfortable and <extra_id_0>, so PersonX feels uncomfortable. ; Constraint: bench, no ; Output:", "cons": "[[\"bench\", \"benches\"], [\"not\", \"no\"]]", "gpt": "PersonX knows that the seats are uncomfortable and there are no benches, so PersonX feels uncomfortable.", "neuro": "PersonX knows that the seats are uncomfortable and there is no bench, so PersonX feels uncomfortable.", "vanilla": "PersonX knows that the seats are uncomfortable and there is no bench, so PersonX feels uncomfortable."}
{"input": "Input: PersonX knows that the seats are uncomfortable while <extra_id_0>, so PersonX feels uncomfortable. ; Constraint: swing ; Output:", "cons": "[[\"swing\", \"swinging\", \"swung\", \"swings\"]]", "gpt": "PersonX knows that the seats are uncomfortable while swinging, so PersonX feels uncomfortable.", "neuro": "PersonX knows that the seats are uncomfortable while swinging, so PersonX feels uncomfortable.", "vanilla": "PersonX knows that the seats are uncomfortable while swinging, so PersonX feels uncomfortable."}
{"input": "Input: PersonX knows that the seats are uncomfortable while <extra_id_0>, so PersonX feels uncomfortable. ; Constraint: swing, no ; Output:", "cons": "[[\"swing\", \"swinging\", \"swung\", \"swings\"], [\"not\", \"no\"]]", "gpt": "PersonX knows that the seats are uncomfortable while swing, so PersonX feels uncomfortable.", "neuro": "PersonX knows that the seats are uncomfortable while no swing, so PersonX feels uncomfortable.", "vanilla": "PersonX knows that the seats are uncomfortable while swinging, so PersonX feels uncomfortable."}
{"input": "Input: PersonX knows that the seats are uncomfortable while <extra_id_0>, so PersonX feels uncomfortable. ; Constraint: bench ; Output:", "cons": "[[\"bench\", \"benches\"]]", "gpt": "PersonX knows that the seats are uncomfortable while on the bench, so PersonX feels uncomfortable.", "neuro": "PersonX knows that the seats are uncomfortable while sitting on the bench, so PersonX feels uncomfortable.", "vanilla": "PersonX knows that the seats are uncomfortable while sitting on the bench, so PersonX feels uncomfortable."}
{"input": "Input: PersonX knows that the seats are uncomfortable while <extra_id_0>, so PersonX feels uncomfortable. ; Constraint: bench, no ; Output:", "cons": "[[\"bench\", \"benches\"], [\"not\", \"no\"]]", "gpt": "PersonX knows that the seats are uncomfortable while on the bench, so PersonX feels uncomfortable.", "neuro": "PersonX knows that the seats are uncomfortable while there is no bench, so PersonX feels uncomfortable.", "vanilla": "PersonX knows that the seats are uncomfortable while there is no bench, so PersonX feels uncomfortable."}
{"input": "Input: <extra_id_0> but PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable. ; Constraint: swing ; Output:", "cons": "[[\"swing\", \"swinging\", \"swung\", \"swings\"]]", "gpt": "PersonX swings on the swings but PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable.", "neuro": "PersonX swings but PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable.", "vanilla": "PersonX swings but PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable."}
{"input": "Input: <extra_id_0> but PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable. ; Constraint: swing, no ; Output:", "cons": "[[\"swing\", \"swinging\", \"swung\", \"swings\"], [\"not\", \"no\"]]", "gpt": "PersonX sits on the swing but PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable.", "neuro": "PersonX does not swing but PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable.", "vanilla": "PersonX does not swing but PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable."}
{"input": "Input: <extra_id_0> but PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable. ; Constraint: bench ; Output:", "cons": "[[\"bench\", \"benches\"]]", "gpt": "Although the bench is comfortable, PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable.", "neuro": "PersonX sits on a bench but PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable.", "vanilla": "PersonX sits on a bench but PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable."}
{"input": "Input: <extra_id_0> but PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable. ; Constraint: bench, no ; Output:", "cons": "[[\"bench\", \"benches\"], [\"not\", \"no\"]]", "gpt": "PersonX sees that the bench is uncomfortable, so PersonX feels uncomfortable.", "neuro": "PersonX does not sit on the bench but PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable.", "vanilla": "PersonX does not sit on the bench but PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable."}
{"input": "Input: Although <extra_id_0>, PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable. ; Constraint: swing ; Output:", "cons": "[[\"swing\", \"swinging\", \"swung\", \"swings\"]]", "gpt": "Although swing is fun, PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable.", "neuro": "Although swinging, PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable.", "vanilla": "Although swinging, PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable."}
{"input": "Input: Although <extra_id_0>, PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable. ; Constraint: swing, no ; Output:", "cons": "[[\"swing\", \"swinging\", \"swung\", \"swings\"], [\"not\", \"no\"]]", "gpt": "Although there are no swings, PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable.", "neuro": "Although there is no swing, PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable.", "vanilla": "Although there is no swing, PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable."}
{"input": "Input: Although <extra_id_0>, PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable. ; Constraint: bench ; Output:", "cons": "[[\"bench\", \"benches\"]]", "gpt": "Although the bench is uncomfortable, PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable", "neuro": "Although there is a bench, PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable.", "vanilla": "Although there is a bench, PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable."}
{"input": "Input: Although <extra_id_0>, PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable. ; Constraint: bench, no ; Output:", "cons": "[[\"bench\", \"benches\"], [\"not\", \"no\"]]", "gpt": "Although the benches are uncomfortable, PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable.", "neuro": "Although there is no bench, PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable.", "vanilla": "Although there is no bench, PersonX knows that the seats are uncomfortable, so PersonX feels uncomfortable."}
{"input": "Input: PersonX suggests doing something else and <extra_id_0>, so PersonX is seen as persuasive. ; Constraint: offer ; Output:", "cons": "[[\"offering\", \"offers\", \"offer\", \"offered\"]]", "gpt": "PersonX suggests doing something else and offers to help, so PersonX is seen as persuasive.", "neuro": "PersonX suggests doing something else and offers to do it, so PersonX is seen as persuasive.", "vanilla": "PersonX suggests doing something else and offers to do it, so PersonX is seen as persuasive."}
{"input": "Input: PersonX suggests doing something else and <extra_id_0>, so PersonX is seen as persuasive. ; Constraint: offer, no ; Output:", "cons": "[[\"offering\", \"offers\", \"offer\", \"offered\"], [\"not\", \"no\"]]", "gpt": "PersonX suggests doing something else and is not offer, so PersonX is seen as persuasive.", "neuro": "PersonX suggests doing something else and PersonX does not offer, so PersonX is seen as persuasive.", "vanilla": "PersonX suggests doing something else and PersonX does not offer, so PersonX is seen as persuasive."}
{"input": "Input: PersonX suggests doing something else and <extra_id_0>, so PersonX is seen as persuasive. ; Constraint: move ; Output:", "cons": "[[\"move\", \"moves\", \"moved\", \"moving\"]]", "gpt": "PersonX suggests doing something else and moving on, so PersonX is seen as persuasive.", "neuro": "PersonX suggests doing something else and PersonX moves, so PersonX is seen as persuasive.", "vanilla": "PersonX suggests doing something else and PersonX moves, so PersonX is seen as persuasive."}
{"input": "Input: PersonX suggests doing something else and <extra_id_0>, so PersonX is seen as persuasive. ; Constraint: move, no ; Output:", "cons": "[[\"move\", \"moves\", \"moved\", \"moving\"], [\"not\", \"no\"]]", "gpt": "PersonX suggests doing something else and is not met with opposition, so PersonX is seen as persuasive.", "neuro": "PersonX suggests doing something else and no one moves, so PersonX is seen as persuasive.", "vanilla": "PersonX suggests doing something else and no one moves, so PersonX is seen as persuasive."}
{"input": "Input: PersonX suggests doing something else while <extra_id_0>, so PersonX is seen as persuasive. ; Constraint: offer ; Output:", "cons": "[[\"offering\", \"offers\", \"offer\", \"offered\"]]", "gpt": "PersonX suggests doing something else while offers an alternative, so PersonX is seen as persuasive.", "neuro": "PersonX suggests doing something else while offering to do it, so PersonX is seen as persuasive.", "vanilla": "PersonX suggests doing something else while you wait, so PersonX is seen as persuasive."}
{"input": "Input: PersonX suggests doing something else while <extra_id_0>, so PersonX is seen as persuasive. ; Constraint: offer, no ; Output:", "cons": "[[\"offering\", \"offers\", \"offer\", \"offered\"], [\"not\", \"no\"]]", "gpt": "PersonX suggests doing something else while offer no help, so PersonX is seen as persuasive.", "neuro": "PersonX suggests doing something else while no offer is made, so PersonX is seen as persuasive.", "vanilla": "PersonX suggests doing something else while no offer is made, so PersonX is seen as persuasive."}
{"input": "Input: PersonX suggests doing something else while <extra_id_0>, so PersonX is seen as persuasive. ; Constraint: move ; Output:", "cons": "[[\"move\", \"moves\", \"moved\", \"moving\"]]", "gpt": "PersonX suggests doing something else while moving, so PersonX is seen as persuasive.", "neuro": "PersonX suggests doing something else while you move, so PersonX is seen as persuasive.", "vanilla": "PersonX suggests doing something else while you move, so PersonX is seen as persuasive."}
{"input": "Input: PersonX suggests doing something else while <extra_id_0>, so PersonX is seen as persuasive. ; Constraint: move, no ; Output:", "cons": "[[\"move\", \"moves\", \"moved\", \"moving\"], [\"not\", \"no\"]]", "gpt": "PersonX suggests doing something else while <extra_id_0> does not move, so PersonX is seen as persuasive.", "neuro": "PersonX suggests doing something else while not moving, so PersonX is seen as persuasive.", "vanilla": "PersonX suggests doing something else while not moving, so PersonX is seen as persuasive."}
{"input": "Input: <extra_id_0> but PersonX suggests doing something else, so PersonX is seen as persuasive. ; Constraint: offer ; Output:", "cons": "[[\"offering\", \"offers\", \"offer\", \"offered\"]]", "gpt": "PersonX offers to help but PersonX suggests doing something else, so PersonX is seen as persuasive.", "neuro": "PersonX offers to do something but PersonX suggests doing something else, so PersonX is seen as persuasive.", "vanilla": "PersonX offers to do something but PersonX suggests doing something else, so PersonX is seen as persuasive."}
{"input": "Input: <extra_id_0> but PersonX suggests doing something else, so PersonX is seen as persuasive. ; Constraint: offer, no ; Output:", "cons": "[[\"offering\", \"offers\", \"offer\", \"offered\"], [\"not\", \"no\"]]", "gpt": "PersonX offers no help but PersonX suggests doing something else, so PersonX is seen as persuasive.", "neuro": "PersonX does not offer but PersonX suggests doing something else, so PersonX is seen as persuasive.", "vanilla": "PersonX offers to do something but PersonX suggests doing something else, so PersonX is seen as persuasive."}
{"input": "Input: <extra_id_0> but PersonX suggests doing something else, so PersonX is seen as persuasive. ; Constraint: move ; Output:", "cons": "[[\"move\", \"moves\", \"moved\", \"moving\"]]", "gpt": "PersonX suggests moving to a new house but PersonX suggests doing something else, so PersonX is seen as persuasive.", "neuro": "PersonX wants to move but PersonX suggests doing something else, so PersonX is seen as persuasive.", "vanilla": "PersonX wants to move but PersonX suggests doing something else, so PersonX is seen as persuasive."}
{"input": "Input: <extra_id_0> but PersonX suggests doing something else, so PersonX is seen as persuasive. ; Constraint: move, no ; Output:", "cons": "[[\"move\", \"moves\", \"moved\", \"moving\"], [\"not\", \"no\"]]", "gpt": "Although no one moves, PersonX suggests doing something else, so PersonX is seen as persuasive.", "neuro": "PersonX does not move but PersonX suggests doing something else, so PersonX is seen as persuasive.", "vanilla": "PersonX does not move but PersonX suggests doing something else, so PersonX is seen as persuasive."}
{"input": "Input: Although <extra_id_0>, PersonX suggests doing something else, so PersonX is seen as persuasive. ; Constraint: offer ; Output:", "cons": "[[\"offering\", \"offers\", \"offer\", \"offered\"]]", "gpt": "Although offer to do something else, PersonX suggests doing something else, so PersonX is seen as persuasive.", "neuro": "Although an offer is made, PersonX suggests doing something else, so PersonX is seen as persuasive.", "vanilla": "Although an offer is made, PersonX suggests doing something else, so PersonX is seen as persuasive."}
{"input": "Input: Although <extra_id_0>, PersonX suggests doing something else, so PersonX is seen as persuasive. ; Constraint: offer, no ; Output:", "cons": "[[\"offering\", \"offers\", \"offer\", \"offered\"], [\"not\", \"no\"]]", "gpt": "Although offer is declined, PersonX suggests doing something else, so PersonX is seen as persuasive.", "neuro": "Although no offer is made, PersonX suggests doing something else, so PersonX is seen as persuasive.", "vanilla": "Although no offer is made, PersonX suggests doing something else, so PersonX is seen as persuasive."}
{"input": "Input: Although <extra_id_0>, PersonX suggests doing something else, so PersonX is seen as persuasive. ; Constraint: move ; Output:", "cons": "[[\"move\", \"moves\", \"moved\", \"moving\"]]", "gpt": "Although Consultant suggests moving, PersonX suggests doing something else, so PersonX is seen as persuasive.", "neuro": "Although everyone wants to move, PersonX suggests doing something else, so PersonX is seen as persuasive.", "vanilla": "Although everyone wants to move, PersonX suggests doing something else, so PersonX is seen as persuasive."}
{"input": "Input: Although <extra_id_0>, PersonX suggests doing something else, so PersonX is seen as persuasive. ; Constraint: move, no ; Output:", "cons": "[[\"move\", \"moves\", \"moved\", \"moving\"], [\"not\", \"no\"]]", "gpt": "Although motionless, PersonX suggests doing something else, so PersonX is seen as persuasive.", "neuro": "Although no one moves, PersonX suggests doing something else, so PersonX is seen as persuasive.", "vanilla": "Although no one moves, PersonX suggests doing something else, so PersonX is seen as persuasive."}
{"input": "Input: PersonX accepts PersonY's gift and <extra_id_0>, so PersonX feels happy. ; Constraint: treat ; Output:", "cons": "[[\"treated\", \"treat\", \"treating\", \"treats\"]]", "gpt": "PersonX accepts PersonY's gift and sees it as a treat, so PersonX feels happy.", "neuro": "PersonX accepts PersonY's gift and PersonY treats PersonX, so PersonX feels happy.", "vanilla": "PersonX accepts PersonY's gift and PersonY treats PersonX, so PersonX feels happy."}
{"input": "Input: PersonX accepts PersonY's gift and <extra_id_0>, so PersonX feels happy. ; Constraint: treat, no ; Output:", "cons": "[[\"treated\", \"treat\", \"treating\", \"treats\"], [\"not\", \"no\"]]", "gpt": "PersonX accepts PersonY's gift and does not feel the need to reciprocate, so PersonX feels happy.", "neuro": "PersonX accepts PersonY's gift and PersonY does not treat, so PersonX feels happy.", "vanilla": "PersonX accepts PersonY's gift and PersonY does not treat, so PersonX feels happy."}
{"input": "Input: PersonX accepts PersonY's gift and <extra_id_0>, so PersonX feels happy. ; Constraint: beg ; Output:", "cons": "[[\"begged\", \"beg\", \"begs\", \"begging\"]]", "gpt": "PersonX accepts PersonY's gift and begs for more, so PersonX feels happy.", "neuro": "PersonX accepts PersonY's gift and PersonY begs, so PersonX feels happy.", "vanilla": "PersonX accepts PersonY's gift and PersonY begs, so PersonX feels happy."}
{"input": "Input: PersonX accepts PersonY's gift and <extra_id_0>, so PersonX feels happy. ; Constraint: beg, no ; Output:", "cons": "[[\"begged\", \"beg\", \"begs\", \"begging\"], [\"not\", \"no\"]]", "gpt": "PersonX accepts PersonY's gift and does not beg, so PersonX feels happy.", "neuro": "PersonX accepts PersonY's gift and does not beg, so PersonX feels happy.", "vanilla": "PersonX accepts PersonY's gift and does not beg, so PersonX feels happy."}
{"input": "Input: PersonX accepts PersonY's gift while <extra_id_0>, so PersonX feels happy. ; Constraint: treat ; Output:", "cons": "[[\"treated\", \"treat\", \"treating\", \"treats\"]]", "gpt": "PersonX accepts PersonY's gift while PersonY treats PersonX, so PersonX feels happy.", "neuro": "PersonX accepts PersonY's gift while PersonY treats him, so PersonX feels happy.", "vanilla": "PersonX accepts PersonY's gift while PersonY treats him, so PersonX feels happy."}
{"input": "Input: PersonX accepts PersonY's gift while <extra_id_0>, so PersonX feels happy. ; Constraint: treat, no ; Output:", "cons": "[[\"treated\", \"treat\", \"treating\", \"treats\"], [\"not\", \"no\"]]", "gpt": "PersonX accepts PersonY's gift while PersonY does not treat PersonX, so PersonX feels happy.", "neuro": "PersonX accepts PersonY's gift while no treat is given, so PersonX feels happy.", "vanilla": "PersonX accepts PersonY's gift while no treat is given, so PersonX feels happy."}
{"input": "Input: PersonX accepts PersonY's gift while <extra_id_0>, so PersonX feels happy. ; Constraint: beg ; Output:", "cons": "[[\"begged\", \"beg\", \"begs\", \"begging\"]]", "gpt": "PersonX accepts PersonY's gift while PersonY begs, so PersonX feels happy.", "neuro": "PersonX accepts PersonY's gift while PersonY begs, so PersonX feels happy.", "vanilla": "PersonX accepts PersonY's gift while PersonY begs, so PersonX feels happy."}
{"input": "Input: PersonX accepts PersonY's gift while <extra_id_0>, so PersonX feels happy. ; Constraint: beg, no ; Output:", "cons": "[[\"begged\", \"beg\", \"begs\", \"begging\"], [\"not\", \"no\"]]", "gpt": "PersonX accepts PersonY's gift while PersonY does not beg, so PersonX feels happy.", "neuro": "PersonX accepts PersonY's gift while not begging, so PersonX feels happy.", "vanilla": "PersonX accepts PersonY's gift while not begging, so PersonX feels happy."}
{"input": "Input: <extra_id_0> but PersonX accepts PersonY's gift, so PersonX feels happy. ; Constraint: treat ; Output:", "cons": "[[\"treated\", \"treat\", \"treating\", \"treats\"]]", "gpt": "PersonX's favorite treat but PersonX accepts PersonY's gift, so PersonX feels happy.", "neuro": "PersonX treats PersonY but PersonX accepts PersonY's gift, so PersonX feels happy.", "vanilla": "PersonX treats PersonY but PersonX accepts PersonY's gift, so PersonX feels happy."}
{"input": "Input: <extra_id_0> but PersonX accepts PersonY's gift, so PersonX feels happy. ; Constraint: treat, no ; Output:", "cons": "[[\"treated\", \"treat\", \"treating\", \"treats\"], [\"not\", \"no\"]]", "gpt": "PersonX does not have a treat but PersonX accepts PersonY's gift, so PersonX feels happy.", "neuro": "PersonX does not treat but PersonX accepts PersonY's gift, so PersonX feels happy.", "vanilla": "PersonX does not treat but PersonX accepts PersonY's gift, so PersonX feels happy."}
{"input": "Input: <extra_id_0> but PersonX accepts PersonY's gift, so PersonX feels happy. ; Constraint: beg ; Output:", "cons": "[[\"begged\", \"beg\", \"begs\", \"begging\"]]", "gpt": "Although PersonY begs for money, PersonX accepts PersonY's gift, so PersonX feels happy.", "neuro": "PersonX begs but PersonX accepts PersonY's gift, so PersonX feels happy.", "vanilla": "PersonX begs but PersonX accepts PersonY's gift, so PersonX feels happy."}
{"input": "Input: <extra_id_0> but PersonX accepts PersonY's gift, so PersonX feels happy. ; Constraint: beg, no ; Output:", "cons": "[[\"begged\", \"beg\", \"begs\", \"begging\"], [\"not\", \"no\"]]", "gpt": "PersonX does not beg but PersonX accepts PersonY's gift, so PersonX feels happy.", "neuro": "PersonX does not beg but PersonX accepts PersonY's gift, so PersonX feels happy.", "vanilla": "PersonX does not beg but PersonX accepts PersonY's gift, so PersonX feels happy."}
{"input": "Input: Although <extra_id_0>, PersonX accepts PersonY's gift, so PersonX feels happy. ; Constraint: treat ; Output:", "cons": "[[\"treated\", \"treat\", \"treating\", \"treats\"]]", "gpt": "Although treat is tasty, PersonX accepts PersonY's gift, so PersonX feels happy.", "neuro": "Although the treat is expensive, PersonX accepts PersonY's gift, so PersonX feels happy.", "vanilla": "Although the treat is expensive, PersonX accepts PersonY's gift, so PersonX feels happy."}
{"input": "Input: Although <extra_id_0>, PersonX accepts PersonY's gift, so PersonX feels happy. ; Constraint: treat, no ; Output:", "cons": "[[\"treated\", \"treat\", \"treating\", \"treats\"], [\"not\", \"no\"]]", "gpt": "Although <extra_id_0> does not get a treat, PersonX accepts PersonY's gift, so PersonX feels happy.", "neuro": "Although no treat is given, PersonX accepts PersonY's gift, so PersonX feels happy.", "vanilla": "Although no treat is given, PersonX accepts PersonY's gift, so PersonX feels happy."}
{"input": "Input: Although <extra_id_0>, PersonX accepts PersonY's gift, so PersonX feels happy. ; Constraint: beg ; Output:", "cons": "[[\"begged\", \"beg\", \"begs\", \"begging\"]]", "gpt": "Although PersonX begs for money, PersonY gives PersonX a gift, so PersonX feels happy.", "neuro": "Although beg, PersonX accepts PersonY's gift, so PersonX feels happy.", "vanilla": "Although beg, PersonX accepts PersonY's gift, so PersonX feels happy."}
{"input": "Input: Although <extra_id_0>, PersonX accepts PersonY's gift, so PersonX feels happy. ; Constraint: beg, no ; Output:", "cons": "[[\"begged\", \"beg\", \"begs\", \"begging\"], [\"not\", \"no\"]]", "gpt": "Although PersonX does not beg, PersonX accepts PersonY's gift, so PersonX feels happy.", "neuro": "Although no one begs, PersonX accepts PersonY's gift, so PersonX feels happy.", "vanilla": "Although no one begs, PersonX accepts PersonY's gift, so PersonX feels happy."}
{"input": "Input: PersonX accepts PersonY's gift and <extra_id_0>, so PersonX is seen as considerate. ; Constraint: treat ; Output:", "cons": "[[\"treated\", \"treat\", \"treating\", \"treats\"]]", "gpt": "PersonX accepts PersonY's gift and treats PersonY to a meal, so PersonX is seen as considerate.", "neuro": "PersonX accepts PersonY's gift and treats PersonY, so PersonX is seen as considerate.", "vanilla": "PersonX accepts PersonY's gift and treats PersonY, so PersonX is seen as considerate."}
{"input": "Input: PersonX accepts PersonY's gift and <extra_id_0>, so PersonX is seen as considerate. ; Constraint: treat, no ; Output:", "cons": "[[\"treated\", \"treat\", \"treating\", \"treats\"], [\"not\", \"no\"]]", "gpt": "PersonX accepts PersonY's gift and does not reciprocate, so PersonY is seen as considerate.", "neuro": "PersonX accepts PersonY's gift and does not treat, so PersonX is seen as considerate.", "vanilla": "PersonX accepts PersonY's gift and does not treat, so PersonX is seen as considerate."}
{"input": "Input: PersonX accepts PersonY's gift and <extra_id_0>, so PersonX is seen as considerate. ; Constraint: beg ; Output:", "cons": "[[\"begged\", \"beg\", \"begs\", \"begging\"]]", "gpt": "PersonX accepts PersonY's gift and begs for PersonY to stop, so PersonX is seen as considerate.", "neuro": "PersonX accepts PersonY's gift and begs, so PersonX is seen as considerate.", "vanilla": "PersonX accepts PersonY's gift and begs, so PersonX is seen as considerate."}
{"input": "Input: PersonX accepts PersonY's gift and <extra_id_0>, so PersonX is seen as considerate. ; Constraint: beg, no ; Output:", "cons": "[[\"begged\", \"beg\", \"begs\", \"begging\"], [\"not\", \"no\"]]", "gpt": "PersonX accepts PersonY's gift and does not beg, so PersonX is seen as considerate.", "neuro": "PersonX accepts PersonY's gift and does not beg, so PersonX is seen as considerate.", "vanilla": "PersonX accepts PersonY's gift and does not beg, so PersonX is seen as considerate."}
{"input": "Input: PersonX accepts PersonY's gift while <extra_id_0>, so PersonX is seen as considerate. ; Constraint: treat ; Output:", "cons": "[[\"treated\", \"treat\", \"treating\", \"treats\"]]", "gpt": "PersonX accepts PersonY's gift while treats PersonY to a meal, so PersonX is seen as considerate.", "neuro": "PersonX accepts PersonY's gift while PersonY treats, so PersonX is seen as considerate.", "vanilla": "PersonX accepts PersonY's gift while PersonY treats, so PersonX is seen as considerate."}
{"input": "Input: PersonX accepts PersonY's gift while <extra_id_0>, so PersonX is seen as considerate. ; Constraint: treat, no ; Output:", "cons": "[[\"treated\", \"treat\", \"treating\", \"treats\"], [\"not\", \"no\"]]", "gpt": "PersonX does not accept PersonY's gift while PersonY offers a treat, so PersonX is seen as not considerate.", "neuro": "PersonX accepts PersonY's gift while not treating PersonY, so PersonX is seen as considerate.", "vanilla": "PersonX accepts PersonY's gift while not treating PersonY, so PersonX is seen as considerate."}
{"input": "Input: PersonX accepts PersonY's gift while <extra_id_0>, so PersonX is seen as considerate. ; Constraint: beg ; Output:", "cons": "[[\"begged\", \"beg\", \"begs\", \"begging\"]]", "gpt": "PersonX accepts PersonY's gift while PersonY begs, so PersonX is seen as considerate.", "neuro": "PersonX accepts PersonY's gift while PersonY begs, so PersonX is seen as considerate.", "vanilla": "PersonX accepts PersonY's gift while PersonY begs, so PersonX is seen as considerate."}
{"input": "Input: PersonX accepts PersonY's gift while <extra_id_0>, so PersonX is seen as considerate. ; Constraint: beg, no ; Output:", "cons": "[[\"begged\", \"beg\", \"begs\", \"begging\"], [\"not\", \"no\"]]", "gpt": "personX accepts PersonY's gift while personY does not beg, so PersonX is seen as considerate.", "neuro": "PersonX accepts PersonY's gift while not begging, so PersonX is seen as considerate.", "vanilla": "PersonX accepts PersonY's gift while not begging, so PersonX is seen as considerate."}
{"input": "Input: <extra_id_0> but PersonX accepts PersonY's gift, so PersonX is seen as considerate. ; Constraint: treat ; Output:", "cons": "[[\"treated\", \"treat\", \"treating\", \"treats\"]]", "gpt": "PersonY treats PersonX to a meal but PersonX accepts PersonY's gift, so PersonX is seen as considerate.", "neuro": "PersonX treats PersonY but PersonX accepts PersonY's gift, so PersonX is seen as considerate.", "vanilla": "PersonX treats PersonY but PersonX accepts PersonY's gift, so PersonX is seen as considerate."}
{"input": "Input: <extra_id_0> but PersonX accepts PersonY's gift, so PersonX is seen as considerate. ; Constraint: treat, no ; Output:", "cons": "[[\"treated\", \"treat\", \"treating\", \"treats\"], [\"not\", \"no\"]]", "gpt": "PersonX does not have a treat but PersonX accepts PersonY's gift, so PersonX is seen as considerate.", "neuro": "PersonX does not treat but PersonX accepts PersonY's gift, so PersonX is seen as considerate.", "vanilla": "PersonX does not treat but PersonX accepts PersonY's gift, so PersonX is seen as considerate."}
{"input": "Input: <extra_id_0> but PersonX accepts PersonY's gift, so PersonX is seen as considerate. ; Constraint: beg ; Output:", "cons": "[[\"begged\", \"beg\", \"begs\", \"begging\"]]", "gpt": "Although PersonX begs, PersonX accepts PersonY's gift, so PersonX is seen as considerate.", "neuro": "PersonX begs but PersonX accepts PersonY's gift, so PersonX is seen as considerate.", "vanilla": "PersonX begs but PersonX accepts PersonY's gift, so PersonX is seen as considerate."}
{"input": "Input: <extra_id_0> but PersonX accepts PersonY's gift, so PersonX is seen as considerate. ; Constraint: beg, no ; Output:", "cons": "[[\"begged\", \"beg\", \"begs\", \"begging\"], [\"not\", \"no\"]]", "gpt": "PersonX does not beg but PersonX accepts PersonY's gift, so PersonX is seen as considerate.", "neuro": "PersonX does not beg but PersonX accepts PersonY's gift, so PersonX is seen as considerate.", "vanilla": "PersonX does not beg but PersonX accepts PersonY's gift, so PersonX is seen as considerate."}
{"input": "Input: Although <extra_id_0>, PersonX accepts PersonY's gift, so PersonX is seen as considerate. ; Constraint: treat ; Output:", "cons": "[[\"treated\", \"treat\", \"treating\", \"treats\"]]", "gpt": "Although <extra_id_0>, PersonX accepts PersonY's gift, so PersonX is seen as considerate.", "neuro": "Although it is a treat, PersonX accepts PersonY's gift, so PersonX is seen as considerate.", "vanilla": "Although it is a treat, PersonX accepts PersonY's gift, so PersonX is seen as considerate."}
{"input": "Input: Although <extra_id_0>, PersonX accepts PersonY's gift, so PersonX is seen as considerate. ; Constraint: treat, no ; Output:", "cons": "[[\"treated\", \"treat\", \"treating\", \"treats\"], [\"not\", \"no\"]]", "gpt": "Although PersonX does not treat PersonY, PersonX accepts PersonY's gift, so PersonX is seen as considerate.", "neuro": "Although no treat is given, PersonX accepts PersonY's gift, so PersonX is seen as considerate.", "vanilla": "Although no treat is given, PersonX accepts PersonY's gift, so PersonX is seen as considerate."}
{"input": "Input: Although <extra_id_0>, PersonX accepts PersonY's gift, so PersonX is seen as considerate. ; Constraint: beg ; Output:", "cons": "[[\"begged\", \"beg\", \"begs\", \"begging\"]]", "gpt": "Although PersonX begs for money, PersonX accepts PersonY's gift, so PersonX is seen as considerate.", "neuro": "Although beg, PersonX accepts PersonY's gift, so PersonX is seen as considerate.", "vanilla": "Although beg, PersonX accepts PersonY's gift, so PersonX is seen as considerate."}
{"input": "Input: Although <extra_id_0>, PersonX accepts PersonY's gift, so PersonX is seen as considerate. ; Constraint: beg, no ; Output:", "cons": "[[\"begged\", \"beg\", \"begs\", \"begging\"], [\"not\", \"no\"]]", "gpt": "Although PersonX does not beg, PersonX accepts PersonY's gift, so PersonX is seen as considerate.", "neuro": "Although no one begs, PersonX accepts PersonY's gift, so PersonX is seen as considerate.", "vanilla": "Although no one begs, PersonX accepts PersonY's gift, so PersonX is seen as considerate."}
{"input": "Input: PersonX learns how to make money and <extra_id_0>, so PersonX feels successful. ; Constraint: price ; Output:", "cons": "[[\"prices\", \"priced\", \"price\", \"pricing\"]]", "gpt": "PersonX learns how to make money and charges a price, so PersonX feels successful.", "neuro": "PersonX learns how to make money and set a price, so PersonX feels successful.", "vanilla": "PersonX learns how to make money and set a price, so PersonX feels successful."}
{"input": "Input: PersonX learns how to make money and <extra_id_0>, so PersonX feels successful. ; Constraint: price, no ; Output:", "cons": "[[\"prices\", \"priced\", \"price\", \"pricing\"], [\"not\", \"no\"]]", "gpt": "PersonX learns how to make money and does not need to worry about prices, so PersonX feels successful.", "neuro": "PersonX learns how to make money and no price, so PersonX feels successful.", "vanilla": "PersonX learns how to make money and no price, so PersonX feels successful."}
{"input": "Input: PersonX learns how to make money and <extra_id_0>, so PersonX feels successful. ; Constraint: wallet ; Output:", "cons": "[[\"wallets\", \"wallet\"]]", "gpt": "PersonX learns how to make money and put it in the wallet, so PersonX feels successful.", "neuro": "PersonX learns how to make money and has a wallet, so PersonX feels successful.", "vanilla": "PersonX learns how to make money and has a wallet, so PersonX feels successful."}
{"input": "Input: PersonX learns how to make money and <extra_id_0>, so PersonX feels successful. ; Constraint: wallet, no ; Output:", "cons": "[[\"wallets\", \"wallet\"], [\"not\", \"no\"]]", "gpt": "PersonX learns how to make money and does not need a wallet, so PersonX feels successful.", "neuro": "PersonX learns how to make money and does not need a wallet, so PersonX feels successful.", "vanilla": "PersonX learns how to make money and does not need a wallet, so PersonX feels successful."}
{"input": "Input: PersonX learns how to make money while <extra_id_0>, so PersonX feels successful. ; Constraint: price ; Output:", "cons": "[[\"prices\", \"priced\", \"price\", \"pricing\"]]", "gpt": "PersonX learns how to make money while the prices are low, so PersonX feels successful.", "neuro": "PersonX learns how to make money while price goes up, so PersonX feels successful.", "vanilla": "PersonX learns how to make money while price goes up, so PersonX feels successful."}
{"input": "Input: PersonX learns how to make money while <extra_id_0>, so PersonX feels successful. ; Constraint: price, no ; Output:", "cons": "[[\"prices\", \"priced\", \"price\", \"pricing\"], [\"not\", \"no\"]]", "gpt": "PersonX learns how to make money while no one price, so PersonX feels successful.", "neuro": "PersonX learns how to make money while no price, so PersonX feels successful.", "vanilla": "PersonX learns how to make money while no price, so PersonX feels successful."}
{"input": "Input: PersonX learns how to make money while <extra_id_0>, so PersonX feels successful. ; Constraint: wallet ; Output:", "cons": "[[\"wallets\", \"wallet\"]]", "gpt": "PersonX learns how to make money while keeps more money in the wallet, so PersonX feels successful.", "neuro": "PersonX learns how to make money while carrying a wallet, so PersonX feels successful.", "vanilla": "PersonX learns how to make money while carrying a wallet, so PersonX feels successful."}
{"input": "Input: PersonX learns how to make money while <extra_id_0>, so PersonX feels successful. ; Constraint: wallet, no ; Output:", "cons": "[[\"wallets\", \"wallet\"], [\"not\", \"no\"]]", "gpt": "PersonX learns how to make money while PersonX's wallet is empty, so PersonX feels successful.", "neuro": "PersonX learns how to make money while not carrying a wallet, so PersonX feels successful.", "vanilla": "PersonX learns how to make money while not carrying a wallet, so PersonX feels successful."}
{"input": "Input: <extra_id_0> but PersonX learns how to make money, so PersonX feels successful. ; Constraint: price ; Output:", "cons": "[[\"prices\", \"priced\", \"price\", \"pricing\"]]", "gpt": "Although the price is high, PersonX learns how to make money, so PersonX feels successful.", "neuro": "The price is high but PersonX learns how to make money, so PersonX feels successful.", "vanilla": "Price is high but PersonX learns how to make money, so PersonX feels successful."}
{"input": "Input: <extra_id_0> but PersonX learns how to make money, so PersonX feels successful. ; Constraint: price, no ; Output:", "cons": "[[\"prices\", \"priced\", \"price\", \"pricing\"], [\"not\", \"no\"]]", "gpt": "PersonX does not need to pay a price but PersonX learns how to make money, so PersonX feels successful.", "neuro": "There is no price but PersonX learns how to make money, so PersonX feels successful.", "vanilla": "No price but PersonX learns how to make money, so PersonX feels successful."}
{"input": "Input: <extra_id_0> but PersonX learns how to make money, so PersonX feels successful. ; Constraint: wallet ; Output:", "cons": "[[\"wallets\", \"wallet\"]]", "gpt": "PersonX's wallet is empty but PersonX learns how to make money, so PersonX feels successful.", "neuro": "PersonX has a wallet but PersonX learns how to make money, so PersonX feels successful.", "vanilla": "PersonX has a wallet but PersonX learns how to make money, so PersonX feels successful."}
{"input": "Input: <extra_id_0> but PersonX learns how to make money, so PersonX feels successful. ; Constraint: wallet, no ; Output:", "cons": "[[\"wallets\", \"wallet\"], [\"not\", \"no\"]]", "gpt": "PersonX does not have a wallet but PersonX learns how to make money, so PersonX feels successful.", "neuro": "PersonX does not carry a wallet but PersonX learns how to make money, so PersonX feels successful.", "vanilla": "PersonX does not carry a wallet but PersonX learns how to make money, so PersonX feels successful."}
{"input": "Input: Although <extra_id_0>, PersonX learns how to make money, so PersonX feels successful. ; Constraint: price ; Output:", "cons": "[[\"prices\", \"priced\", \"price\", \"pricing\"]]", "gpt": "Although the price is low, PersonX learns how to make money, so PersonX feels successful.", "neuro": "Although the price is high, PersonX learns how to make money, so PersonX feels successful.", "vanilla": "Although the price is high, PersonX learns how to make money, so PersonX feels successful."}
{"input": "Input: Although <extra_id_0>, PersonX learns how to make money, so PersonX feels successful. ; Constraint: price, no ; Output:", "cons": "[[\"prices\", \"priced\", \"price\", \"pricing\"], [\"not\", \"no\"]]", "gpt": "Although there is no price, PersonX learns how to make money, so PersonX feels successful.", "neuro": "Although no price, PersonX learns how to make money, so PersonX feels successful.", "vanilla": "Although no price, PersonX learns how to make money, so PersonX feels successful."}
{"input": "Input: Although <extra_id_0>, PersonX learns how to make money, so PersonX feels successful. ; Constraint: wallet ; Output:", "cons": "[[\"wallets\", \"wallet\"]]", "gpt": "Although PersonX's wallet is empty, PersonX learns how to make money, so PersonX feels successful.", "neuro": "Although there is no wallet, PersonX learns how to make money, so PersonX feels successful.", "vanilla": "Although money is tight, PersonX learns how to make money, so PersonX feels successful."}
{"input": "Input: Although <extra_id_0>, PersonX learns how to make money, so PersonX feels successful. ; Constraint: wallet, no ; Output:", "cons": "[[\"wallets\", \"wallet\"], [\"not\", \"no\"]]", "gpt": "Although PersonX's wallet is empty, PersonX learns how to make money, so PersonX feels successful.", "neuro": "Although no wallet, PersonX learns how to make money, so PersonX feels successful.", "vanilla": "Although no wallet, PersonX learns how to make money, so PersonX feels successful."}
{"input": "Input: PersonX learns how to make money and <extra_id_0>, so PersonX is seen as clever. ; Constraint: price ; Output:", "cons": "[[\"prices\", \"priced\", \"price\", \"pricing\"]]", "gpt": "PersonX learns how to make money and sells the product at a higher price, so PersonX is seen as clever.", "neuro": "PersonX learns how to make money and price things, so PersonX is seen as clever.", "vanilla": "PersonX learns how to make money and price things, so PersonX is seen as clever."}
{"input": "Input: PersonX learns how to make money and <extra_id_0>, so PersonX is seen as clever. ; Constraint: price, no ; Output:", "cons": "[[\"prices\", \"priced\", \"price\", \"pricing\"], [\"not\", \"no\"]]", "gpt": "PersonX learns how to make money and does not need to pay for it, so PersonX is seen as clever.", "neuro": "PersonX learns how to make money and no price, so PersonX is seen as clever.", "vanilla": "PersonX learns how to make money and no price, so PersonX is seen as clever."}
{"input": "Input: PersonX learns how to make money and <extra_id_0>, so PersonX is seen as clever. ; Constraint: wallet ; Output:", "cons": "[[\"wallets\", \"wallet\"]]", "gpt": "PersonX learns how to make money and put it in the wallet, so PersonX is seen as clever.", "neuro": "PersonX learns how to make money and has a wallet, so PersonX is seen as clever.", "vanilla": "PersonX learns how to make money and has a wallet, so PersonX is seen as clever."}
{"input": "Input: PersonX learns how to make money and <extra_id_0>, so PersonX is seen as clever. ; Constraint: wallet, no ; Output:", "cons": "[[\"wallets\", \"wallet\"], [\"not\", \"no\"]]", "gpt": "PersonX learns how to make money and stores it in a wallet, so PersonX is seen as clever.", "neuro": "PersonX learns how to make money and does not need a wallet, so PersonX is seen as clever.", "vanilla": "PersonX learns how to make money and does not need a wallet, so PersonX is seen as clever."}
{"input": "Input: PersonX learns how to make money while <extra_id_0>, so PersonX is seen as clever. ; Constraint: price ; Output:", "cons": "[[\"prices\", \"priced\", \"price\", \"pricing\"]]", "gpt": "PersonX learns how to make money while setting price, so PersonX is seen as clever.", "neuro": "PersonX learns how to make money while the price is high, so PersonX is seen as clever.", "vanilla": "PersonX learns how to make money while the price is high, so PersonX is seen as clever."}
{"input": "Input: PersonX learns how to make money while <extra_id_0>, so PersonX is seen as clever. ; Constraint: price, no ; Output:", "cons": "[[\"prices\", \"priced\", \"price\", \"pricing\"], [\"not\", \"no\"]]", "gpt": "PersonX learns how to make money while price is low, so PersonX is seen as clever.", "neuro": "PersonX learns how to make money while no price, so PersonX is seen as clever.", "vanilla": "PersonX learns how to make money while no price, so PersonX is seen as clever."}
{"input": "Input: PersonX learns how to make money while <extra_id_0>, so PersonX is seen as clever. ; Constraint: wallet ; Output:", "cons": "[[\"wallets\", \"wallet\"]]", "gpt": "PersonX learns how to make money while carrying a wallet, so PersonX is seen as clever.", "neuro": "PersonX learns how to make money while carrying a wallet, so PersonX is seen as clever.", "vanilla": "PersonX learns how to make money while carrying a wallet, so PersonX is seen as clever."}
{"input": "Input: PersonX learns how to make money while <extra_id_0>, so PersonX is seen as clever. ; Constraint: wallet, no ; Output:", "cons": "[[\"wallets\", \"wallet\"], [\"not\", \"no\"]]", "gpt": "PersonX learns how to make money while no one has a wallet, so PersonX is seen as clever.", "neuro": "PersonX learns how to make money while not carrying a wallet, so PersonX is seen as clever.", "vanilla": "PersonX learns how to make money while not carrying a wallet, so PersonX is seen as clever."}
{"input": "Input: <extra_id_0> but PersonX learns how to make money, so PersonX is seen as clever. ; Constraint: price ; Output:", "cons": "[[\"prices\", \"priced\", \"price\", \"pricing\"]]", "gpt": "PersonX buys a stock at a low price but PersonX learns how to make money, so PersonX is seen as clever.", "neuro": "The price is high but PersonX learns how to make money, so PersonX is seen as clever.", "vanilla": "Price is high but PersonX learns how to make money, so PersonX is seen as clever."}
{"input": "Input: <extra_id_0> but PersonX learns how to make money, so PersonX is seen as clever. ; Constraint: price, no ; Output:", "cons": "[[\"prices\", \"priced\", \"price\", \"pricing\"], [\"not\", \"no\"]]", "gpt": "Although the price is high, PersonX learns how to make money, so PersonX is seen as clever.", "neuro": "There is no price but PersonX learns how to make money, so PersonX is seen as clever.", "vanilla": "No price but PersonX learns how to make money, so PersonX is seen as clever."}
{"input": "Input: <extra_id_0> but PersonX learns how to make money, so PersonX is seen as clever. ; Constraint: wallet ; Output:", "cons": "[[\"wallets\", \"wallet\"]]", "gpt": "PersonX's wallet is empty but PersonX learns how to make money, so PersonX is seen as clever.", "neuro": "PersonX has a wallet but PersonX learns how to make money, so PersonX is seen as clever.", "vanilla": "PersonX has a wallet but PersonX learns how to make money, so PersonX is seen as clever."}
{"input": "Input: <extra_id_0> but PersonX learns how to make money, so PersonX is seen as clever. ; Constraint: wallet, no ; Output:", "cons": "[[\"wallets\", \"wallet\"], [\"not\", \"no\"]]", "gpt": "Although PersonX's wallet is empty, PersonX learns how to make money, so PersonX is seen as clever.", "neuro": "PersonX does not carry a wallet but PersonX learns how to make money, so PersonX is seen as clever.", "vanilla": "No wallet but PersonX learns how to make money, so PersonX is seen as clever."}
{"input": "Input: Although <extra_id_0>, PersonX learns how to make money, so PersonX is seen as clever. ; Constraint: price ; Output:", "cons": "[[\"prices\", \"priced\", \"price\", \"pricing\"]]", "gpt": "Although the price is high, PersonX learns how to make money, so PersonX is seen as clever.", "neuro": "Although the price is high, PersonX learns how to make money, so PersonX is seen as clever.", "vanilla": "Although the price is high, PersonX learns how to make money, so PersonX is seen as clever."}
{"input": "Input: Although <extra_id_0>, PersonX learns how to make money, so PersonX is seen as clever. ; Constraint: price, no ; Output:", "cons": "[[\"prices\", \"priced\", \"price\", \"pricing\"], [\"not\", \"no\"]]", "gpt": "Although price is no object, PersonX learns how to make money, so PersonX is seen as clever.", "neuro": "Although no price is set, PersonX learns how to make money, so PersonX is seen as clever.", "vanilla": "Although no price is set, PersonX learns how to make money, so PersonX is seen as clever."}
{"input": "Input: Although <extra_id_0>, PersonX learns how to make money, so PersonX is seen as clever. ; Constraint: wallet ; Output:", "cons": "[[\"wallets\", \"wallet\"]]", "gpt": "Although <extra_id_0> is found in the wallet, PersonX learns how to make money, so PersonX is seen as clever.", "neuro": "Although there is no wallet, PersonX learns how to make money, so PersonX is seen as clever.", "vanilla": "Although there is no wallet, PersonX learns how to make money, so PersonX is seen as clever."}
{"input": "Input: Although <extra_id_0>, PersonX learns how to make money, so PersonX is seen as clever. ; Constraint: wallet, no ; Output:", "cons": "[[\"wallets\", \"wallet\"], [\"not\", \"no\"]]", "gpt": "Although PersonX's wallet is empty, PersonX learns how to make money, so PersonX is seen as clever.", "neuro": "Although no wallet, PersonX learns how to make money, so PersonX is seen as clever.", "vanilla": "Although no wallet, PersonX learns how to make money, so PersonX is seen as clever."}
{"input": "Input: PersonX robs the robbers and <extra_id_0>, so PersonX feels triumphant. ; Constraint: fake ; Output:", "cons": "[[\"fakes\", \"fake\", \"faking\", \"faked\"]]", "gpt": "PersonX robs the robbers and fakes being a robber, so PersonX feels triumphant.", "neuro": "PersonX robs the robbers and fakes it, so PersonX feels triumphant.", "vanilla": "PersonX robs the robbers and fakes it, so PersonX feels triumphant."}
{"input": "Input: PersonX robs the robbers and <extra_id_0>, so PersonX feels triumphant. ; Constraint: fake, no ; Output:", "cons": "[[\"fakes\", \"fake\", \"faking\", \"faked\"], [\"not\", \"no\"]]", "gpt": "PersonX robs the robbers and there are no fake bills, so PersonX feels triumphant.", "neuro": "PersonX robs the robbers and no one is fake, so PersonX feels triumphant.", "vanilla": "PersonX robs the robbers and no one knows, so PersonX feels triumphant."}
{"input": "Input: PersonX robs the robbers and <extra_id_0>, so PersonX feels triumphant. ; Constraint: rip ; Output:", "cons": "[[\"ripping\", \"ripped\", \"rips\", \"rip\"]]", "gpt": "PersonX robs the robbers and rips their clothes, so PersonX feels triumphant.", "neuro": "PersonX robs the robbers and rips them, so PersonX feels triumphant.", "vanilla": "PersonX robs the robbers and rips them, so PersonX feels triumphant."}
{"input": "Input: PersonX robs the robbers and <extra_id_0>, so PersonX feels triumphant. ; Constraint: rip, no ; Output:", "cons": "[[\"ripping\", \"ripped\", \"rips\", \"rip\"], [\"not\", \"no\"]]", "gpt": "PersonX robs the robbers and rips their clothes, so PersonX feels triumphant.", "neuro": "PersonX robs the robbers and no one rips, so PersonX feels triumphant.", "vanilla": "PersonX robs the robbers and no one rips, so PersonX feels triumphant."}
{"input": "Input: PersonX robs the robbers while <extra_id_0>, so PersonX feels triumphant. ; Constraint: fake ; Output:", "cons": "[[\"fakes\", \"fake\", \"faking\", \"faked\"]]", "gpt": "PersonX robs the thieves while carrying a fake gun, so PersonX feels triumphant.", "neuro": "PersonX robs the robbers while they are fake, so PersonX feels triumphant.", "vanilla": "PersonX robs the robbers while they are fake, so PersonX feels triumphant."}
{"input": "Input: PersonX robs the robbers while <extra_id_0>, so PersonX feels triumphant. ; Constraint: fake, no ; Output:", "cons": "[[\"fakes\", \"fake\", \"faking\", \"faked\"], [\"not\", \"no\"]]", "gpt": "PersonX robs the robbers while the robbers are fake, so PersonX feels triumphant.", "neuro": "PersonX robs the robbers while no one is fake, so PersonX feels triumphant.", "vanilla": "PersonX robs the robbers while no one knows, so PersonX feels triumphant."}
{"input": "Input: PersonX robs the robbers while <extra_id_0>, so PersonX feels triumphant. ; Constraint: rip ; Output:", "cons": "[[\"ripping\", \"ripped\", \"rips\", \"rip\"]]", "gpt": "PersonX robs the robbers while they are in plain clothes, so PersonX feels triumphant.", "neuro": "PersonX robs the robbers while they rip, so PersonX feels triumphant.", "vanilla": "PersonX robs the robbers while they rip, so PersonX feels triumphant."}
{"input": "Input: PersonX robs the robbers while <extra_id_0>, so PersonX feels triumphant. ; Constraint: rip, no ; Output:", "cons": "[[\"ripping\", \"ripped\", \"rips\", \"rip\"], [\"not\", \"no\"]]", "gpt": "PersonX robs the robbers while they rip the money, so PersonX feels triumphant.", "neuro": "PersonX robs the robbers while no one rips, so PersonX feels triumphant.", "vanilla": "PersonX robs the robbers while no one rips, so PersonX feels triumphant."}
{"input": "Input: <extra_id_0> but PersonX robs the robbers, so PersonX feels triumphant. ; Constraint: fake ; Output:", "cons": "[[\"fakes\", \"fake\", \"faking\", \"faked\"]]", "gpt": "PersonX's disguise is convincing but PersonX robs the robbers, so PersonX feels triumphant.", "neuro": "PersonX fakes a robbery but PersonX robs the robbers, so PersonX feels triumphant.", "vanilla": "PersonX is a fake but PersonX robs the robbers, so PersonX feels triumphant."}
{"input": "Input: <extra_id_0> but PersonX robs the robbers, so PersonX feels triumphant. ; Constraint: fake, no ; Output:", "cons": "[[\"fakes\", \"fake\", \"faking\", \"faked\"], [\"not\", \"no\"]]", "gpt": "PersonX sees that the gun is fake but PersonX robs the robbers, so PersonX feels triumphant.", "neuro": "PersonX is not a fake but PersonX robs the robbers, so PersonX feels triumphant.", "vanilla": "PersonX is not a fake but PersonX robs the robbers, so PersonX feels triumphant."}
{"input": "Input: <extra_id_0> but PersonX robs the robbers, so PersonX feels triumphant. ; Constraint: rip ; Output:", "cons": "[[\"ripping\", \"ripped\", \"rips\", \"rip\"]]", "gpt": "Robbers rip PersonX's clothes but PersonX robs the robbers, so PersonX feels triumphant.", "neuro": "PersonX rips but PersonX robs the robbers, so PersonX feels triumphant.", "vanilla": "PersonX rips but PersonX robs the robbers, so PersonX feels triumphant."}
{"input": "Input: <extra_id_0> but PersonX robs the robbers, so PersonX feels triumphant. ; Constraint: rip, no ; Output:", "cons": "[[\"ripping\", \"ripped\", \"rips\", \"rip\"], [\"not\", \"no\"]]", "gpt": "PersonX's cloth rip but PersonX robs the robbers, so PersonX feels triumphant.", "neuro": "PersonX does not rip but PersonX robs the robbers, so PersonX feels triumphant.", "vanilla": "PersonX does not rip but PersonX robs the robbers, so PersonX feels triumphant."}
{"input": "Input: Although <extra_id_0>, PersonX robs the robbers, so PersonX feels triumphant. ; Constraint: fake ; Output:", "cons": "[[\"fakes\", \"fake\", \"faking\", \"faked\"]]", "gpt": "Although the gun is fake, PersonX robs the robbers, so PersonX feels triumphant.", "neuro": "Although it is fake, PersonX robs the robbers, so PersonX feels triumphant.", "vanilla": "Although it is fake, PersonX robs the robbers, so PersonX feels triumphant."}
{"input": "Input: Although <extra_id_0>, PersonX robs the robbers, so PersonX feels triumphant. ; Constraint: fake, no ; Output:", "cons": "[[\"fakes\", \"fake\", \"faking\", \"faked\"], [\"not\", \"no\"]]", "gpt": "Although the gun is fake, PersonX robs the robbers, so PersonX feels triumphant.", "neuro": "Although no one is fake, PersonX robs the robbers, so PersonX feels triumphant.", "vanilla": "Although no one is fake, PersonX robs the robbers, so PersonX feels triumphant."}
{"input": "Input: Although <extra_id_0>, PersonX robs the robbers, so PersonX feels triumphant. ; Constraint: rip ; Output:", "cons": "[[\"ripping\", \"ripped\", \"rips\", \"rip\"]]", "gpt": "Although PersonX's clothes rip, PersonX robs the robbers, so PersonX feels triumphant.", "neuro": "Although rip, PersonX robs the robbers, so PersonX feels triumphant.", "vanilla": "Although rip, PersonX robs the robbers, so PersonX feels triumphant."}
{"input": "Input: Although <extra_id_0>, PersonX robs the robbers, so PersonX feels triumphant. ; Constraint: rip, no ; Output:", "cons": "[[\"ripping\", \"ripped\", \"rips\", \"rip\"], [\"not\", \"no\"]]", "gpt": "Although robbers does not rip PersonX, PersonX robs the robbers, so PersonX feels triumphant.", "neuro": "Although no one rips, PersonX robs the robbers, so PersonX feels triumphant.", "vanilla": "Although no one rips, PersonX robs the robbers, so PersonX feels triumphant."}
{"input": "Input: PersonX robs the robbers and <extra_id_0>, so PersonX is seen as clever. ; Constraint: fake ; Output:", "cons": "[[\"fakes\", \"fake\", \"faking\", \"faked\"]]", "gpt": "PersonX robs the robbers and wears a fake mustache, so PersonX is seen as clever.", "neuro": "PersonX robs the robbers and fakes it, so PersonX is seen as clever.", "vanilla": "PersonX robs the robbers and fakes it, so PersonX is seen as clever."}
{"input": "Input: PersonX robs the robbers and <extra_id_0>, so PersonX is seen as clever. ; Constraint: fake, no ; Output:", "cons": "[[\"fakes\", \"fake\", \"faking\", \"faked\"], [\"not\", \"no\"]]", "gpt": "PersonX robs the robbers and is not found out, so PersonX is seen as clever.", "neuro": "PersonX robs the robbers and does not fake, so PersonX is seen as clever.", "vanilla": "PersonX robs the robbers and no one knows, so PersonX is seen as clever."}
{"input": "Input: PersonX robs the robbers and <extra_id_0>, so PersonX is seen as clever. ; Constraint: rip ; Output:", "cons": "[[\"ripping\", \"ripped\", \"rips\", \"rip\"]]", "gpt": "PersonX robs the robbers and rips their clothes, so PersonX is seen as clever.", "neuro": "PersonX robs the robbers and rips them off, so PersonX is seen as clever.", "vanilla": "PersonX robs the robbers and rips them off, so PersonX is seen as clever."}
{"input": "Input: PersonX robs the robbers and <extra_id_0>, so PersonX is seen as clever. ; Constraint: rip, no ; Output:", "cons": "[[\"ripping\", \"ripped\", \"rips\", \"rip\"], [\"not\", \"no\"]]", "gpt": "PersonX robs the robbers and does not get caught, so PersonX is seen as clever.", "neuro": "PersonX robs the robbers and does not rip, so PersonX is seen as clever.", "vanilla": "PersonX robs the robbers and does not rip, so PersonX is seen as clever."}
{"input": "Input: PersonX robs the robbers while <extra_id_0>, so PersonX is seen as clever. ; Constraint: fake ; Output:", "cons": "[[\"fakes\", \"fake\", \"faking\", \"faked\"]]", "gpt": "PersonX robs the robbers while fake fights with robbers, so PersonX is seen as clever.", "neuro": "PersonX robs the robbers while they are fake, so PersonX is seen as clever.", "vanilla": "PersonX robs the robbers while they are fake, so PersonX is seen as clever."}
{"input": "Input: PersonX robs the robbers while <extra_id_0>, so PersonX is seen as clever. ; Constraint: fake, no ; Output:", "cons": "[[\"fakes\", \"fake\", \"faking\", \"faked\"], [\"not\", \"no\"]]", "gpt": "PersonX robs the robbers while not wearing a fake beard, so PersonX is seen as clever.", "neuro": "PersonX robs the robbers while not being fake, so PersonX is seen as clever.", "vanilla": "PersonX robs the robbers while no one is there, so PersonX is seen as clever."}
{"input": "Input: PersonX robs the robbers while <extra_id_0>, so PersonX is seen as clever. ; Constraint: rip ; Output:", "cons": "[[\"ripping\", \"ripped\", \"rips\", \"rip\"]]", "gpt": "PersonX robs the robbers while they are sleeping, so PersonX is seen as clever.", "neuro": "PersonX robs the robbers while they rip, so PersonX is seen as clever.", "vanilla": "PersonX robs the robbers while they rip, so PersonX is seen as clever."}
{"input": "Input: PersonX robs the robbers while <extra_id_0>, so PersonX is seen as clever. ; Constraint: rip, no ; Output:", "cons": "[[\"ripping\", \"ripped\", \"rips\", \"rip\"], [\"not\", \"no\"]]", "gpt": "PersonX robs the robbers while they rip open the safe, so PersonX is seen as clever.", "neuro": "PersonX robs the robbers while no one rips, so PersonX is seen as clever.", "vanilla": "PersonX robs the robbers while no one rips, so PersonX is seen as clever."}
{"input": "Input: <extra_id_0> but PersonX robs the robbers, so PersonX is seen as clever. ; Constraint: fake ; Output:", "cons": "[[\"fakes\", \"fake\", \"faking\", \"faked\"]]", "gpt": "The robbers have a fake gun but PersonX robs the robbers, so PersonX is seen as clever.", "neuro": "PersonX is a fake but PersonX robs the robbers, so PersonX is seen as clever.", "vanilla": "PersonX is a fake but PersonX robs the robbers, so PersonX is seen as clever."}
{"input": "Input: <extra_id_0> but PersonX robs the robbers, so PersonX is seen as clever. ; Constraint: fake, no ; Output:", "cons": "[[\"fakes\", \"fake\", \"faking\", \"faked\"], [\"not\", \"no\"]]", "gpt": "PersonX's gun is fake but PersonX robs the robbers, so PersonX is seen as clever.", "neuro": "PersonX is not a fake but PersonX robs the robbers, so PersonX is seen as clever.", "vanilla": "PersonX is not a fake but PersonX robs the robbers, so PersonX is seen as clever."}
{"input": "Input: <extra_id_0> but PersonX robs the robbers, so PersonX is seen as clever. ; Constraint: rip ; Output:", "cons": "[[\"ripping\", \"ripped\", \"rips\", \"rip\"]]", "gpt": "Robbers try to rip PersonX but PersonX robs the robbers, so PersonX is seen as clever.", "neuro": "PersonX rips but PersonX robs the robbers, so PersonX is seen as clever.", "vanilla": "PersonX rips but PersonX robs the robbers, so PersonX is seen as clever."}
{"input": "Input: <extra_id_0> but PersonX robs the robbers, so PersonX is seen as clever. ; Constraint: rip, no ; Output:", "cons": "[[\"ripping\", \"ripped\", \"rips\", \"rip\"], [\"not\", \"no\"]]", "gpt": "PersonX robs the robbers but does not rip them off, so PersonX is seen as clever.", "neuro": "PersonX does not rip but PersonX robs the robbers, so PersonX is seen as clever.", "vanilla": "PersonX does not rip but PersonX robs the robbers, so PersonX is seen as clever."}
{"input": "Input: Although <extra_id_0>, PersonX robs the robbers, so PersonX is seen as clever. ; Constraint: fake ; Output:", "cons": "[[\"fakes\", \"fake\", \"faking\", \"faked\"]]", "gpt": "Although the robbers have fake money, PersonX robs the robbers, so PersonX is seen as clever.", "neuro": "Although the robbers are fake, PersonX robs the robbers, so PersonX is seen as clever.", "vanilla": "Although the robbers are fake, PersonX robs the robbers, so PersonX is seen as clever."}
{"input": "Input: Although <extra_id_0>, PersonX robs the robbers, so PersonX is seen as clever. ; Constraint: fake, no ; Output:", "cons": "[[\"fakes\", \"fake\", \"faking\", \"faked\"], [\"not\", \"no\"]]", "gpt": "Although the note is fake, PersonX robs the robbers, so PersonX is seen as clever.", "neuro": "Although no one is fake, PersonX robs the robbers, so PersonX is seen as clever.", "vanilla": "Although no one is fake, PersonX robs the robbers, so PersonX is seen as clever."}
{"input": "Input: Although <extra_id_0>, PersonX robs the robbers, so PersonX is seen as clever. ; Constraint: rip ; Output:", "cons": "[[\"ripping\", \"ripped\", \"rips\", \"rip\"]]", "gpt": "Although PersonX rips the bills, PersonX robs the robbers, so PersonX is seen as clever.", "neuro": "Although rip, PersonX robs the robbers, so PersonX is seen as clever.", "vanilla": "Although rip, PersonX robs the robbers, so PersonX is seen as clever."}
{"input": "Input: Although <extra_id_0>, PersonX robs the robbers, so PersonX is seen as clever. ; Constraint: rip, no ; Output:", "cons": "[[\"ripping\", \"ripped\", \"rips\", \"rip\"], [\"not\", \"no\"]]", "gpt": "Although PersonX robs the robbers, PersonX is seen as clever.", "neuro": "Although no one rips, PersonX robs the robbers, so PersonX is seen as clever.", "vanilla": "Although no one rips, PersonX robs the robbers, so PersonX is seen as clever."}
{"input": "Input: PersonX wins a track meet and <extra_id_0>, so PersonX feels excited. ; Constraint: step ; Output:", "cons": "[[\"steps\", \"stepping\", \"stepped\", \"step\"]]", "gpt": "PersonX wins a track meet and steps on the podium, so PersonX feels excited.", "neuro": "PersonX wins a track meet and steps on the podium, so PersonX feels excited.", "vanilla": "PersonX wins a track meet and steps on the podium, so PersonX feels excited."}
{"input": "Input: PersonX wins a track meet and <extra_id_0>, so PersonX feels excited. ; Constraint: step, no ; Output:", "cons": "[[\"steps\", \"stepping\", \"stepped\", \"step\"], [\"not\", \"no\"]]", "gpt": "PersonX wins a track meet and does not step on the podium, so PersonX feels excited.", "neuro": "PersonX wins a track meet and does not have to step, so PersonX feels excited.", "vanilla": "PersonX wins a track meet and does not have to step, so PersonX feels excited."}
{"input": "Input: PersonX wins a track meet and <extra_id_0>, so PersonX feels excited. ; Constraint: trace ; Output:", "cons": "[[\"tracing\", \"trace\", \"traced\", \"traces\"]]", "gpt": "PersonX wins a track meet and traces back the steps to the finish line, so PersonX feels excited.", "neuro": "PersonX wins a track meet and traces, so PersonX feels excited.", "vanilla": "PersonX wins a track meet and traces, so PersonX feels excited."}
{"input": "Input: PersonX wins a track meet and <extra_id_0>, so PersonX feels excited. ; Constraint: trace, no ; Output:", "cons": "[[\"tracing\", \"trace\", \"traced\", \"traces\"], [\"not\", \"no\"]]", "gpt": "PersonX wins a track meet and there is no trace of the other runners, so PersonX feels excited.", "neuro": "PersonX wins a track meet and does not have to trace, so PersonX feels excited.", "vanilla": "PersonX wins a track meet and does not have to trace, so PersonX feels excited."}
{"input": "Input: PersonX wins a track meet while <extra_id_0>, so PersonX feels excited. ; Constraint: step ; Output:", "cons": "[[\"steps\", \"stepping\", \"stepped\", \"step\"]]", "gpt": "PersonX wins a track meet while step-by-step, so PersonX feels excited.", "neuro": "PersonX wins a track meet while taking a step, so PersonX feels excited.", "vanilla": "PersonX wins a track meet while taking a step, so PersonX feels excited."}
{"input": "Input: PersonX wins a track meet while <extra_id_0>, so PersonX feels excited. ; Constraint: step, no ; Output:", "cons": "[[\"steps\", \"stepping\", \"stepped\", \"step\"], [\"not\", \"no\"]]", "gpt": "PersonX wins a track meet while does not take a step, so PersonX feels excited.", "neuro": "PersonX wins a track meet while no one steps, so PersonX feels excited.", "vanilla": "PersonX wins a track meet while no one steps, so PersonX feels excited."}
{"input": "Input: PersonX wins a track meet while <extra_id_0>, so PersonX feels excited. ; Constraint: trace ; Output:", "cons": "[[\"tracing\", \"trace\", \"traced\", \"traces\"]]", "gpt": "PersonX wins a track meet while leaving a trace, so PersonX feels excited.", "neuro": "PersonX wins a track meet while tracing, so PersonX feels excited.", "vanilla": "PersonX wins a track meet while tracing, so PersonX feels excited."}
{"input": "Input: PersonX wins a track meet while <extra_id_0>, so PersonX feels excited. ; Constraint: trace, no ; Output:", "cons": "[[\"tracing\", \"trace\", \"traced\", \"traces\"], [\"not\", \"no\"]]", "gpt": "PersonX wins a track meet while no one traces, so PersonX feels excited.", "neuro": "PersonX wins a track meet while no trace, so PersonX feels excited.", "vanilla": "PersonX wins a track meet while no trace, so PersonX feels excited."}
{"input": "Input: <extra_id_0> but PersonX wins a track meet, so PersonX feels excited. ; Constraint: step ; Output:", "cons": "[[\"steps\", \"stepping\", \"stepped\", \"step\"]]", "gpt": "PersonX falls but PersonX wins a track meet, so PersonX feels excited.", "neuro": "PersonX steps but PersonX wins a track meet, so PersonX feels excited.", "vanilla": "PersonX steps but PersonX wins a track meet, so PersonX feels excited."}
{"input": "Input: <extra_id_0> but PersonX wins a track meet, so PersonX feels excited. ; Constraint: step, no ; Output:", "cons": "[[\"steps\", \"stepping\", \"stepped\", \"step\"], [\"not\", \"no\"]]", "gpt": "PersonX does not take a step but PersonX wins a track meet, so PersonX feels excited.", "neuro": "PersonX does not step but PersonX wins a track meet, so PersonX feels excited.", "vanilla": "PersonX does not step but PersonX wins a track meet, so PersonX feels excited."}
{"input": "Input: <extra_id_0> but PersonX wins a track meet, so PersonX feels excited. ; Constraint: trace ; Output:", "cons": "[[\"tracing\", \"trace\", \"traced\", \"traces\"]]", "gpt": "PersonX leaves a trace but PersonX wins a track meet, so PersonX feels excited.", "neuro": "PersonX traces but PersonX wins a track meet, so PersonX feels excited.", "vanilla": "PersonX traces but PersonX wins a track meet, so PersonX feels excited."}
{"input": "Input: <extra_id_0> but PersonX wins a track meet, so PersonX feels excited. ; Constraint: trace, no ; Output:", "cons": "[[\"tracing\", \"trace\", \"traced\", \"traces\"], [\"not\", \"no\"]]", "gpt": "PersonX does not need to trace but PersonX wins a track meet, so PersonX feels excited.", "neuro": "PersonX does not trace but PersonX wins a track meet, so PersonX feels excited.", "vanilla": "PersonX does not trace but PersonX wins a track meet, so PersonX feels excited."}
{"input": "Input: Although <extra_id_0>, PersonX wins a track meet, so PersonX feels excited. ; Constraint: step ; Output:", "cons": "[[\"steps\", \"stepping\", \"stepped\", \"step\"]]", "gpt": "Although step by step, PersonX wins a track meet, so PersonX feels excited.", "neuro": "Although step by step, PersonX wins a track meet, so PersonX feels excited.", "vanilla": "Although step by step, PersonX wins a track meet, so PersonX feels excited."}
{"input": "Input: Although <extra_id_0>, PersonX wins a track meet, so PersonX feels excited. ; Constraint: step, no ; Output:", "cons": "[[\"steps\", \"stepping\", \"stepped\", \"step\"], [\"not\", \"no\"]]", "gpt": "Although step is slow, PersonX wins a track meet, so PersonX feels excited.", "neuro": "Although no step is taken, PersonX wins a track meet, so PersonX feels excited.", "vanilla": "Although no step is taken, PersonX wins a track meet, so PersonX feels excited."}
{"input": "Input: Although <extra_id_0>, PersonX wins a track meet, so PersonX feels excited. ; Constraint: trace ; Output:", "cons": "[[\"tracing\", \"trace\", \"traced\", \"traces\"]]", "gpt": "Although PersonX's teammates trace the course, PersonX wins a track meet, so PersonX feels excited.", "neuro": "Although there is no trace, PersonX wins a track meet, so PersonX feels excited.", "vanilla": "Although there is no trace, PersonX wins a track meet, so PersonX feels excited."}
{"input": "Input: Although <extra_id_0>, PersonX wins a track meet, so PersonX feels excited. ; Constraint: trace, no ; Output:", "cons": "[[\"tracing\", \"trace\", \"traced\", \"traces\"], [\"not\", \"no\"]]", "gpt": "Although no one trace, PersonX wins a track meet, so PersonX feels excited.", "neuro": "Although there is no trace, PersonX wins a track meet, so PersonX feels excited.", "vanilla": "Although there is no trace, PersonX wins a track meet, so PersonX feels excited."}
{"input": "Input: PersonX wins a track meet and <extra_id_0>, so PersonX is seen as a great athlete. ; Constraint: step ; Output:", "cons": "[[\"steps\", \"stepping\", \"stepped\", \"step\"]]", "gpt": "PersonX wins a track meet and takes a step towards winning the race, so PersonX is seen as a great athlete.", "neuro": "PersonX wins a track meet and steps on the podium, so PersonX is seen as a great athlete.", "vanilla": "PersonX wins a track meet and steps on the podium, so PersonX is seen as a great athlete."}
{"input": "Input: PersonX wins a track meet and <extra_id_0>, so PersonX is seen as a great athlete. ; Constraint: step, no ; Output:", "cons": "[[\"steps\", \"stepping\", \"stepped\", \"step\"], [\"not\", \"no\"]]", "gpt": "PersonX wins a track meet and does not take a step forward, so PersonX is seen as a great athlete.", "neuro": "PersonX wins a track meet and does not step, so PersonX is seen as a great athlete.", "vanilla": "PersonX wins a track meet and does not step, so PersonX is seen as a great athlete."}
{"input": "Input: PersonX wins a track meet and <extra_id_0>, so PersonX is seen as a great athlete. ; Constraint: trace ; Output:", "cons": "[[\"tracing\", \"trace\", \"traced\", \"traces\"]]", "gpt": "PersonX wins a track meet and traces their steps back to the starting line, so PersonX is seen as a great athlete.", "neuro": "PersonX wins a track meet and traces, so PersonX is seen as a great athlete.", "vanilla": "PersonX wins a track meet and traces, so PersonX is seen as a great athlete."}
{"input": "Input: PersonX wins a track meet and <extra_id_0>, so PersonX is seen as a great athlete. ; Constraint: trace, no ; Output:", "cons": "[[\"tracing\", \"trace\", \"traced\", \"traces\"], [\"not\", \"no\"]]", "gpt": "PersonX wins a track meet and is not seen as a great athlete.", "neuro": "PersonX wins a track meet and does not trace, so PersonX is seen as a great athlete.", "vanilla": "PersonX wins a track meet and does not trace, so PersonX is seen as a great athlete."}
{"input": "Input: PersonX wins a track meet while <extra_id_0>, so PersonX is seen as a great athlete. ; Constraint: step ; Output:", "cons": "[[\"steps\", \"stepping\", \"stepped\", \"step\"]]", "gpt": "PersonX wins a track meet while stepping on the first-place medal, so PersonX is seen as a great athlete.", "neuro": "PersonX wins a track meet while taking a step, so PersonX is seen as a great athlete.", "vanilla": "PersonX wins a track meet while taking a step, so PersonX is seen as a great athlete."}
{"input": "Input: PersonX wins a track meet while <extra_id_0>, so PersonX is seen as a great athlete. ; Constraint: step, no ; Output:", "cons": "[[\"steps\", \"stepping\", \"stepped\", \"step\"], [\"not\", \"no\"]]", "gpt": "PersonX wins a track meet while does not take a step, so PersonX is seen as a great athlete.", "neuro": "PersonX wins a track meet while not taking a step, so PersonX is seen as a great athlete.", "vanilla": "PersonX wins a track meet while not taking a step, so PersonX is seen as a great athlete."}
{"input": "Input: PersonX wins a track meet while <extra_id_0>, so PersonX is seen as a great athlete. ; Constraint: trace ; Output:", "cons": "[[\"tracing\", \"trace\", \"traced\", \"traces\"]]", "gpt": "PersonX wins a track meet while trace of illegal drugs are found in his system, so PersonX is seen as a great athlete.", "neuro": "PersonX wins a track meet while tracing, so PersonX is seen as a great athlete.", "vanilla": "PersonX wins a track meet while tracing, so PersonX is seen as a great athlete."}
{"input": "Input: PersonX wins a track meet while <extra_id_0>, so PersonX is seen as a great athlete. ; Constraint: trace, no ; Output:", "cons": "[[\"tracing\", \"trace\", \"traced\", \"traces\"], [\"not\", \"no\"]]", "gpt": "PersonX wins a track meet while not leaving a trace, so PersonX is seen as a great athlete.", "neuro": "PersonX wins a track meet while not tracing, so PersonX is seen as a great athlete.", "vanilla": "PersonX wins a track meet while not tracing, so PersonX is seen as a great athlete."}
{"input": "Input: <extra_id_0> but PersonX wins a track meet, so PersonX is seen as a great athlete. ; Constraint: step ; Output:", "cons": "[[\"steps\", \"stepping\", \"stepped\", \"step\"]]", "gpt": "PersonX's step but PersonX wins a track meet, so PersonX is seen as a great athlete.", "neuro": "PersonX steps but PersonX wins a track meet, so PersonX is seen as a great athlete.", "vanilla": "PersonX steps but PersonX wins a track meet, so PersonX is seen as a great athlete."}
{"input": "Input: <extra_id_0> but PersonX wins a track meet, so PersonX is seen as a great athlete. ; Constraint: step, no ; Output:", "cons": "[[\"steps\", \"stepping\", \"stepped\", \"step\"], [\"not\", \"no\"]]", "gpt": "PersonX falls but PersonX wins a track meet, so PersonX is seen as a great athlete.", "neuro": "PersonX does not step but PersonX wins a track meet, so PersonX is seen as a great athlete.", "vanilla": "PersonX does not step but PersonX wins a track meet, so PersonX is seen as a great athlete."}
{"input": "Input: <extra_id_0> but PersonX wins a track meet, so PersonX is seen as a great athlete. ; Constraint: trace ; Output:", "cons": "[[\"tracing\", \"trace\", \"traced\", \"traces\"]]", "gpt": "PersonX's but PersonX wins a track meet, so PersonX is seen as a great athlete.", "neuro": "PersonX traces but PersonX wins a track meet, so PersonX is seen as a great athlete.", "vanilla": "PersonX traces but PersonX wins a track meet, so PersonX is seen as a great athlete."}
{"input": "Input: <extra_id_0> but PersonX wins a track meet, so PersonX is seen as a great athlete. ; Constraint: trace, no ; Output:", "cons": "[[\"tracing\", \"trace\", \"traced\", \"traces\"], [\"not\", \"no\"]]", "gpt": "PersonX does not trace but PersonX wins a track meet, so PersonX is seen as a great athlete.", "neuro": "PersonX does not trace but PersonX wins a track meet, so PersonX is seen as a great athlete.", "vanilla": "PersonX does not trace but PersonX wins a track meet, so PersonX is seen as a great athlete."}
{"input": "Input: Although <extra_id_0>, PersonX wins a track meet, so PersonX is seen as a great athlete. ; Constraint: step ; Output:", "cons": "[[\"steps\", \"stepping\", \"stepped\", \"step\"]]", "gpt": "Although PersonX's step is seen as a great athlete, PersonX wins a track meet, so PersonX is seen as a great athlete.", "neuro": "Although step by step, PersonX wins a track meet, so PersonX is seen as a great athlete.", "vanilla": "Although step by step, PersonX wins a track meet, so PersonX is seen as a great athlete."}
{"input": "Input: Although <extra_id_0>, PersonX wins a track meet, so PersonX is seen as a great athlete. ; Constraint: step, no ; Output:", "cons": "[[\"steps\", \"stepping\", \"stepped\", \"step\"], [\"not\", \"no\"]]", "gpt": "Although <extra_id_0> is not a step, PersonX wins a track meet, so PersonX is seen as a great athlete.", "neuro": "Although no step is taken, PersonX wins a track meet, so PersonX is seen as a great athlete.", "vanilla": "Although no step is taken, PersonX wins a track meet, so PersonX is seen as a great athlete."}
{"input": "Input: Although <extra_id_0>, PersonX wins a track meet, so PersonX is seen as a great athlete. ; Constraint: trace ; Output:", "cons": "[[\"tracing\", \"trace\", \"traced\", \"traces\"]]", "gpt": "Although PersonXtrace is seen as a great athlete, PersonX wins a track meet, so PersonX is seen as a great athlete.", "neuro": "Although there is no trace, PersonX wins a track meet, so PersonX is seen as a great athlete.", "vanilla": "Although there is no trace, PersonX wins a track meet, so PersonX is seen as a great athlete."}
{"input": "Input: Although <extra_id_0>, PersonX wins a track meet, so PersonX is seen as a great athlete. ; Constraint: trace, no ; Output:", "cons": "[[\"tracing\", \"trace\", \"traced\", \"traces\"], [\"not\", \"no\"]]", "gpt": "Although there is no trace of cheating, PersonX wins a track meet, so PersonX is seen as a great athlete.", "neuro": "Although there is no trace, PersonX wins a track meet, so PersonX is seen as a great athlete.", "vanilla": "Although there is no trace, PersonX wins a track meet, so PersonX is seen as a great athlete."}
{"input": "Input: PersonX sees the consequences and <extra_id_0>, so PersonX feels worried. ; Constraint: con ; Output:", "cons": "[[\"cons\", \"conned\", \"con\", \"conning\"]]", "gpt": "PersonX sees the consequences and realizes they could get in trouble, so PersonX feels worried.", "neuro": "PersonX sees the consequences and the con, so PersonX feels worried.", "vanilla": "PersonX sees the consequences and is worried, so PersonX feels worried."}
{"input": "Input: PersonX sees the consequences and <extra_id_0>, so PersonX feels worried. ; Constraint: con, no ; Output:", "cons": "[[\"cons\", \"conned\", \"con\", \"conning\"], [\"not\", \"no\"]]", "gpt": "PersonX sees the consequences and no one is around to help, so PersonX feels worried.", "neuro": "PersonX sees the consequences and no con, so PersonX feels worried.", "vanilla": "PersonX sees the consequences and no solution, so PersonX feels worried."}
{"input": "Input: PersonX sees the consequences and <extra_id_0>, so PersonX feels worried. ; Constraint: connote ; Output:", "cons": "[[\"connoted\", \"connoting\", \"connotes\", \"connote\"]]", "gpt": "PersonX sees the consequences and connotes a negative meaning, so PersonX feels worried.", "neuro": "PersonX sees the consequences and connotes, so PersonX feels worried.", "vanilla": "PersonX sees the consequences and connotes, so PersonX feels worried."}
{"input": "Input: PersonX sees the consequences and <extra_id_0>, so PersonX feels worried. ; Constraint: connote, no ; Output:", "cons": "[[\"connoted\", \"connoting\", \"connotes\", \"connote\"], [\"not\", \"no\"]]", "gpt": "PersonX sees the consequences and does not connote them, so PersonX feels worried.", "neuro": "PersonX sees the consequences and does not want to connote, so PersonX feels worried.", "vanilla": "PersonX sees the consequences and does not want to connote, so PersonX feels worried."}
{"input": "Input: PersonX sees the consequences while <extra_id_0>, so PersonX feels worried. ; Constraint: con ; Output:", "cons": "[[\"cons\", \"conned\", \"con\", \"conning\"]]", "gpt": "PersonX sees the consequences while confronts the issue, so PersonX feels worried.", "neuro": "PersonX sees the consequences while being con, so PersonX feels worried.", "vanilla": "PersonX sees the consequences while being con, so PersonX feels worried."}
{"input": "Input: PersonX sees the consequences while <extra_id_0>, so PersonX feels worried. ; Constraint: con, no ; Output:", "cons": "[[\"cons\", \"conned\", \"con\", \"conning\"], [\"not\", \"no\"]]", "gpt": "PersonX sees the consequences while no one is around, so PersonX feels worried.", "neuro": "PersonX sees the consequences while no con, so PersonX feels worried.", "vanilla": "PersonX sees the consequences while no action is taken, so PersonX feels worried."}
{"input": "Input: PersonX sees the consequences while <extra_id_0>, so PersonX feels worried. ; Constraint: connote ; Output:", "cons": "[[\"connoted\", \"connoting\", \"connotes\", \"connote\"]]", "gpt": "PersonX sees the consequences while connotes a sense of dread, so PersonX feels worried.", "neuro": "PersonX sees the consequences while connote, so PersonX feels worried.", "vanilla": "PersonX sees the consequences while connote, so PersonX feels worried."}
{"input": "Input: PersonX sees the consequences while <extra_id_0>, so PersonX feels worried. ; Constraint: connote, no ; Output:", "cons": "[[\"connoted\", \"connoting\", \"connotes\", \"connote\"], [\"not\", \"no\"]]", "gpt": "PersonX sees the consequences while <extra_id_0> does not connote good results, so PersonX feels worried.", "neuro": "PersonX sees the consequences while no connote, so PersonX feels worried.", "vanilla": "PersonX sees the consequences while no connote, so PersonX feels worried."}
{"input": "Input: <extra_id_0> but PersonX sees the consequences, so PersonX feels worried. ; Constraint: con ; Output:", "cons": "[[\"cons\", \"conned\", \"con\", \"conning\"]]", "gpt": "PersonX sees the consequences but PersonX sees the consequences, so PersonX feels worried.", "neuro": "PersonX is con but PersonX sees the consequences, so PersonX feels worried.", "vanilla": "PersonX is con but PersonX sees the consequences, so PersonX feels worried."}
{"input": "Input: <extra_id_0> but PersonX sees the consequences, so PersonX feels worried. ; Constraint: con, no ; Output:", "cons": "[[\"cons\", \"conned\", \"con\", \"conning\"], [\"not\", \"no\"]]", "gpt": "PersonX does not see the consequences but PersonX sees the consequences, so PersonX feels worried.", "neuro": "PersonX does not like con but PersonX sees the consequences, so PersonX feels worried.", "vanilla": "No, but PersonX sees the consequences, so PersonX feels worried."}
{"input": "Input: <extra_id_0> but PersonX sees the consequences, so PersonX feels worried. ; Constraint: connote ; Output:", "cons": "[[\"connoted\", \"connoting\", \"connotes\", \"connote\"]]", "gpt": "PersonX connotes the consequences but PersonX sees the consequences, so PersonX feels worried.", "neuro": "PersonX connotes but PersonX sees the consequences, so PersonX feels worried.", "vanilla": "PersonX connotes but PersonX sees the consequences, so PersonX feels worried."}
{"input": "Input: <extra_id_0> but PersonX sees the consequences, so PersonX feels worried. ; Constraint: connote, no ; Output:", "cons": "[[\"connoted\", \"connoting\", \"connotes\", \"connote\"], [\"not\", \"no\"]]", "gpt": "PersonX does not connote but PersonX sees the consequences, so PersonX feels worried.", "neuro": "PersonX does not connote but PersonX sees the consequences, so PersonX feels worried.", "vanilla": "PersonX does not connote but PersonX sees the consequences, so PersonX feels worried."}
{"input": "Input: Although <extra_id_0>, PersonX sees the consequences, so PersonX feels worried. ; Constraint: con ; Output:", "cons": "[[\"cons\", \"conned\", \"con\", \"conning\"]]", "gpt": "Although the consequences are clear, PersonX sees the consequences, so PersonX feels worried.", "neuro": "Although a con, PersonX sees the consequences, so PersonX feels worried.", "vanilla": "Although a con, PersonX sees the consequences, so PersonX feels worried."}
{"input": "Input: Although <extra_id_0>, PersonX sees the consequences, so PersonX feels worried. ; Constraint: con, no ; Output:", "cons": "[[\"cons\", \"conned\", \"con\", \"conning\"], [\"not\", \"no\"]]", "gpt": "Although no one sees the consequences, PersonX sees the consequences, so PersonX feels worried.", "neuro": "Although no con, PersonX sees the consequences, so PersonX feels worried.", "vanilla": "Although no con, PersonX sees the consequences, so PersonX feels worried."}
{"input": "Input: Although <extra_id_0>, PersonX sees the consequences, so PersonX feels worried. ; Constraint: connote ; Output:", "cons": "[[\"connoted\", \"connoting\", \"connotes\", \"connote\"]]", "gpt": "Although PersonX connotes the situation, PersonX sees the consequences, so PersonX feels worried.", "neuro": "Although connote, PersonX sees the consequences, so PersonX feels worried.", "vanilla": "Although connote, PersonX sees the consequences, so PersonX feels worried."}
{"input": "Input: Although <extra_id_0>, PersonX sees the consequences, so PersonX feels worried. ; Constraint: connote, no ; Output:", "cons": "[[\"connoted\", \"connoting\", \"connotes\", \"connote\"], [\"not\", \"no\"]]", "gpt": "Although connote has no information, PersonX sees the consequences, so PersonX feels worried.", "neuro": "Although no connote, PersonX sees the consequences, so PersonX feels worried.", "vanilla": "Although no connote, PersonX sees the consequences, so PersonX feels worried."}
{"input": "Input: PersonX sees the consequences and <extra_id_0>, so PersonX is seen as understanding. ; Constraint: con ; Output:", "cons": "[[\"cons\", \"conned\", \"con\", \"conning\"]]", "gpt": "PersonX sees the consequences and is unconcerned, so PersonX is seen as understanding.", "neuro": "PersonX sees the consequences and understands the con, so PersonX is seen as understanding.", "vanilla": "PersonX sees the consequences and understands them, so PersonX is seen as understanding."}
{"input": "Input: PersonX sees the consequences and <extra_id_0>, so PersonX is seen as understanding. ; Constraint: con, no ; Output:", "cons": "[[\"cons\", \"conned\", \"con\", \"conning\"], [\"not\", \"no\"]]", "gpt": "PersonX sees the consequences and is not part of them, so PersonX is seen as understanding.", "neuro": "PersonX sees the consequences and does not make a con, so PersonX is seen as understanding.", "vanilla": "PersonX sees the consequences and does not do it, so PersonX is seen as understanding."}
{"input": "Input: PersonX sees the consequences and <extra_id_0>, so PersonX is seen as understanding. ; Constraint: connote ; Output:", "cons": "[[\"connoted\", \"connoting\", \"connotes\", \"connote\"]]", "gpt": "PersonX sees the connotations and symbols, so PersonX is seen as understanding.", "neuro": "PersonX sees the consequences and connotes, so PersonX is seen as understanding.", "vanilla": "PersonX sees the consequences and connotes, so PersonX is seen as understanding."}
{"input": "Input: PersonX sees the consequences and <extra_id_0>, so PersonX is seen as understanding. ; Constraint: connote, no ; Output:", "cons": "[[\"connoted\", \"connoting\", \"connotes\", \"connote\"], [\"not\", \"no\"]]", "gpt": "PersonX sees the consequences and does not connote, so PersonX is seen as understanding.", "neuro": "PersonX sees the consequences and does not connote, so PersonX is seen as understanding.", "vanilla": "PersonX sees the consequences and does not connote, so PersonX is seen as understanding."}
{"input": "Input: PersonX sees the consequences while <extra_id_0>, so PersonX is seen as understanding. ; Constraint: con ; Output:", "cons": "[[\"cons\", \"conned\", \"con\", \"conning\"]]", "gpt": "PersonX sees the consequences while considering, so PersonX is seen as understanding.", "neuro": "PersonX sees the consequences while being con, so PersonX is seen as understanding.", "vanilla": "PersonX sees the consequences while being con, so PersonX is seen as understanding."}
{"input": "Input: PersonX sees the consequences while <extra_id_0>, so PersonX is seen as understanding. ; Constraint: con, no ; Output:", "cons": "[[\"cons\", \"conned\", \"con\", \"conning\"], [\"not\", \"no\"]]", "gpt": "PersonX sees the consequences while no one is around, so PersonX is seen as understanding.", "neuro": "PersonX sees the consequences while no con, so PersonX is seen as understanding.", "vanilla": "PersonX sees the consequences while no action is taken, so PersonX is seen as understanding."}
{"input": "Input: PersonX sees the consequences while <extra_id_0>, so PersonX is seen as understanding. ; Constraint: connote ; Output:", "cons": "[[\"connoted\", \"connoting\", \"connotes\", \"connote\"]]", "gpt": "PersonX sees the connotations while reading, so PersonX is seen as understanding.", "neuro": "PersonX sees the consequences while connoting, so PersonX is seen as understanding.", "vanilla": "PersonX sees the consequences while connoting, so PersonX is seen as understanding."}
{"input": "Input: PersonX sees the consequences while <extra_id_0>, so PersonX is seen as understanding. ; Constraint: connote, no ; Output:", "cons": "[[\"connoted\", \"connoting\", \"connotes\", \"connote\"], [\"not\", \"no\"]]", "gpt": "PersonX sees the consequences while connotes the situation, so PersonX is seen as understanding.", "neuro": "PersonX sees the consequences while no connote, so PersonX is seen as understanding.", "vanilla": "PersonX sees the consequences while no connote, so PersonX is seen as understanding."}
{"input": "Input: <extra_id_0> but PersonX sees the consequences, so PersonX is seen as understanding. ; Constraint: con ; Output:", "cons": "[[\"cons\", \"conned\", \"con\", \"conning\"]]", "gpt": "PersonX is seen as understanding the consequences but PersonX sees the consequences, so PersonX is seen as understanding.", "neuro": "PersonX makes a con but PersonX sees the consequences, so PersonX is seen as understanding.", "vanilla": "PersonX makes a con but PersonX sees the consequences, so PersonX is seen as understanding."}
{"input": "Input: <extra_id_0> but PersonX sees the consequences, so PersonX is seen as understanding. ; Constraint: con, no ; Output:", "cons": "[[\"cons\", \"conned\", \"con\", \"conning\"], [\"not\", \"no\"]]", "gpt": "PersonX understands the consequences but PersonX sees the consequences, so PersonX is seen as understanding.", "neuro": "PersonX does not like con but PersonX sees the consequences, so PersonX is seen as understanding.", "vanilla": "No, but PersonX sees the consequences, so PersonX is seen as understanding."}
{"input": "Input: <extra_id_0> but PersonX sees the consequences, so PersonX is seen as understanding. ; Constraint: connote ; Output:", "cons": "[[\"connoted\", \"connoting\", \"connotes\", \"connote\"]]", "gpt": "PersonX connotes the consequences but PersonX sees the consequences, so PersonX is seen as understanding.", "neuro": "PersonX connotes but PersonX sees the consequences, so PersonX is seen as understanding.", "vanilla": "PersonX connotes but PersonX sees the consequences, so PersonX is seen as understanding."}
{"input": "Input: <extra_id_0> but PersonX sees the consequences, so PersonX is seen as understanding. ; Constraint: connote, no ; Output:", "cons": "[[\"connoted\", \"connoting\", \"connotes\", \"connote\"], [\"not\", \"no\"]]", "gpt": "PersonX does not connote the situation but PersonX sees the consequences, so PersonX is seen as understanding.", "neuro": "PersonX does not connote but PersonX sees the consequences, so PersonX is seen as understanding.", "vanilla": "PersonX does not connote but PersonX sees the consequences, so PersonX is seen as understanding."}
{"input": "Input: Although <extra_id_0>, PersonX sees the consequences, so PersonX is seen as understanding. ; Constraint: con ; Output:", "cons": "[[\"cons\", \"conned\", \"con\", \"conning\"]]", "gpt": "Although PersonX sees the consequences, PersonX sees the consequences, so PersonX is seen as understanding.", "neuro": "Although a con, PersonX sees the consequences, so PersonX is seen as understanding.", "vanilla": "Although a con, PersonX sees the consequences, so PersonX is seen as understanding."}
{"input": "Input: Although <extra_id_0>, PersonX sees the consequences, so PersonX is seen as understanding. ; Constraint: con, no ; Output:", "cons": "[[\"cons\", \"conned\", \"con\", \"conning\"], [\"not\", \"no\"]]", "gpt": "Although no one understands the consequences, PersonX sees the consequences, so PersonX is seen as understanding.", "neuro": "Although no con, PersonX sees the consequences, so PersonX is seen as understanding.", "vanilla": "Although no con, PersonX sees the consequences, so PersonX is seen as understanding."}
{"input": "Input: Although <extra_id_0>, PersonX sees the consequences, so PersonX is seen as understanding. ; Constraint: connote ; Output:", "cons": "[[\"connoted\", \"connoting\", \"connotes\", \"connote\"]]", "gpt": "Although PersonX sees the connotation, PersonX sees the consequences, so PersonX is seen as understanding.", "neuro": "Although connote, PersonX sees the consequences, so PersonX is seen as understanding.", "vanilla": "Although connote, PersonX sees the consequences, so PersonX is seen as understanding."}
{"input": "Input: Although <extra_id_0>, PersonX sees the consequences, so PersonX is seen as understanding. ; Constraint: connote, no ; Output:", "cons": "[[\"connoted\", \"connoting\", \"connotes\", \"connote\"], [\"not\", \"no\"]]", "gpt": "Although PersonX does not connote the consequences, PersonX sees the consequences, so PersonX is seen as understanding.", "neuro": "Although no connote, PersonX sees the consequences, so PersonX is seen as understanding.", "vanilla": "Although no connote, PersonX sees the consequences, so PersonX is seen as understanding."}
{"input": "Input: PersonX discovers who has broken into his home and <extra_id_0>, so PersonX feels upset. ; Constraint: dinosaur ; Output:", "cons": "[[\"dinosaurs\", \"dinosaur\"]]", "gpt": "PersonX discovers who has broken into his home and finds a dinosaur, so PersonX feels upset.", "neuro": "PersonX discovers who has broken into his home and the dinosaur, so PersonX feels upset.", "vanilla": "PersonX discovers who has broken into his home and the dinosaur, so PersonX feels upset."}
{"input": "Input: PersonX discovers who has broken into his home and <extra_id_0>, so PersonX feels upset. ; Constraint: dinosaur, no ; Output:", "cons": "[[\"dinosaurs\", \"dinosaur\"], [\"not\", \"no\"]]", "gpt": "PersonX discovers who has broken into his home and there is no dinosaur, so PersonX feels upset.", "neuro": "PersonX discovers who has broken into his home and no dinosaur, so PersonX feels upset.", "vanilla": "PersonX discovers who has broken into his home and no dinosaur, so PersonX feels upset."}
{"input": "Input: PersonX discovers who has broken into his home and <extra_id_0>, so PersonX feels upset. ; Constraint: love ; Output:", "cons": "[[\"loves\", \"loved\", \"love\", \"loving\"]]", "gpt": "PersonX discovers who has broken into his home and it is his love, so PersonX feels upset.", "neuro": "PersonX discovers who has broken into his home and they love him, so PersonX feels upset.", "vanilla": "PersonX discovers who has broken into his home and they love him, so PersonX feels upset."}
{"input": "Input: PersonX discovers who has broken into his home and <extra_id_0>, so PersonX feels upset. ; Constraint: love, no ; Output:", "cons": "[[\"loves\", \"loved\", \"love\", \"loving\"], [\"not\", \"no\"]]", "gpt": "PersonX discovers who has broken into his home and does not find love, so PersonX feels upset.", "neuro": "PersonX discovers who has broken into his home and no one loves him, so PersonX feels upset.", "vanilla": "PersonX discovers who has broken into his home and no one loves him, so PersonX feels upset."}
{"input": "Input: PersonX discovers who has broken into his home while <extra_id_0>, so PersonX feels upset. ; Constraint: dinosaur ; Output:", "cons": "[[\"dinosaurs\", \"dinosaur\"]]", "gpt": "PersonX discovers who has broken into his home while a dinosaur roamed the earth, so PersonX feels upset.", "neuro": "PersonX discovers who has broken into his home while a dinosaur, so PersonX feels upset.", "vanilla": "PersonX discovers who has broken into his home while he is away, so PersonX feels upset."}
{"input": "Input: PersonX discovers who has broken into his home while <extra_id_0>, so PersonX feels upset. ; Constraint: dinosaur, no ; Output:", "cons": "[[\"dinosaurs\", \"dinosaur\"], [\"not\", \"no\"]]", "gpt": "PersonX discovers who has broken into his home while no dinosaur, so PersonX feels upset.", "neuro": "PersonX discovers who has broken into his home while no dinosaur, so PersonX feels upset.", "vanilla": "PersonX discovers who has broken into his home while no dinosaur, so PersonX feels upset."}
{"input": "Input: PersonX discovers who has broken into his home while <extra_id_0>, so PersonX feels upset. ; Constraint: love ; Output:", "cons": "[[\"loves\", \"loved\", \"love\", \"loving\"]]", "gpt": "PersonX discovers who has broken into his home while in love, so PersonX feels upset.", "neuro": "PersonX discovers who has broken into his home while in love, so PersonX feels upset.", "vanilla": "PersonX discovers who has broken into his home while in love, so PersonX feels upset."}
{"input": "Input: PersonX discovers who has broken into his home while <extra_id_0>, so PersonX feels upset. ; Constraint: love, no ; Output:", "cons": "[[\"loves\", \"loved\", \"love\", \"loving\"], [\"not\", \"no\"]]", "gpt": "PersonX discovers who has broken into his home while no one loves him, so PersonX feels upset.", "neuro": "PersonX discovers who has broken into his home while no one loves him, so PersonX feels upset.", "vanilla": "PersonX discovers who has broken into his home while no one is home, so PersonX feels upset."}
{"input": "Input: <extra_id_0> but PersonX discovers who has broken into his home, so PersonX feels upset. ; Constraint: dinosaur ; Output:", "cons": "[[\"dinosaurs\", \"dinosaur\"]]", "gpt": "PersonX sees a dinosaur but PersonX discovers who has broken into his home, so PersonX feels upset.", "neuro": "PersonX has a dinosaur but PersonX discovers who has broken into his home, so PersonX feels upset.", "vanilla": "PersonX has a dinosaur but PersonX discovers who has broken into his home, so PersonX feels upset."}
{"input": "Input: <extra_id_0> but PersonX discovers who has broken into his home, so PersonX feels upset. ; Constraint: dinosaur, no ; Output:", "cons": "[[\"dinosaurs\", \"dinosaur\"], [\"not\", \"no\"]]", "gpt": "PersonX does not discover a dinosaur but PersonX discovers who has broken into his home, so PersonX feels upset.", "neuro": "There is no dinosaur but PersonX discovers who has broken into his home, so PersonX feels upset.", "vanilla": "No dinosaur but PersonX discovers who has broken into his home, so PersonX feels upset."}
{"input": "Input: <extra_id_0> but PersonX discovers who has broken into his home, so PersonX feels upset. ; Constraint: love ; Output:", "cons": "[[\"loves\", \"loved\", \"love\", \"loving\"]]", "gpt": "Although love is important, PersonX discovers who has broken into his home, so PersonX feels upset.", "neuro": "PersonX is in love but PersonX discovers who has broken into his home, so PersonX feels upset.", "vanilla": "PersonX is in love but PersonX discovers who has broken into his home, so PersonX feels upset."}
{"input": "Input: <extra_id_0> but PersonX discovers who has broken into his home, so PersonX feels upset. ; Constraint: love, no ; Output:", "cons": "[[\"loves\", \"loved\", \"love\", \"loving\"], [\"not\", \"no\"]]", "gpt": "PersonX does not love <extra_id_0> but PersonX discovers who has broken into his home, so PersonX feels upset.", "neuro": "PersonX does not love but PersonX discovers who has broken into his home, so PersonX feels upset.", "vanilla": "PersonX does not love but PersonX discovers who has broken into his home, so PersonX feels upset."}
{"input": "Input: Although <extra_id_0>, PersonX discovers who has broken into his home, so PersonX feels upset. ; Constraint: dinosaur ; Output:", "cons": "[[\"dinosaurs\", \"dinosaur\"]]", "gpt": "Although a dinosaur has broken into his home, PersonX discovers who has broken into his home, so PersonX feels upset.", "neuro": "Although dinosaurs are rare, PersonX discovers who has broken into his home, so PersonX feels upset.", "vanilla": "Although dinosaurs are rare, PersonX discovers who has broken into his home, so PersonX feels upset."}
{"input": "Input: Although <extra_id_0>, PersonX discovers who has broken into his home, so PersonX feels upset. ; Constraint: dinosaur, no ; Output:", "cons": "[[\"dinosaurs\", \"dinosaur\"], [\"not\", \"no\"]]", "gpt": "Although no dinosaur breaks into his home, PersonX discovers who has broken into his home, so PersonX feels upset.", "neuro": "Although there is no dinosaur, PersonX discovers who has broken into his home, so PersonX feels upset.", "vanilla": "Although there is no dinosaur, PersonX discovers who has broken into his home, so PersonX feels upset."}
{"input": "Input: Although <extra_id_0>, PersonX discovers who has broken into his home, so PersonX feels upset. ; Constraint: love ; Output:", "cons": "[[\"loves\", \"loved\", \"love\", \"loving\"]]", "gpt": "Although love makes the world go round, PersonX discovers who has broken into his home, so PersonX feels upset.", "neuro": "Although love is in the air, PersonX discovers who has broken into his home, so PersonX feels upset.", "vanilla": "Although love is in the air, PersonX discovers who has broken into his home, so PersonX feels upset."}
{"input": "Input: Although <extra_id_0>, PersonX discovers who has broken into his home, so PersonX feels upset. ; Constraint: love, no ; Output:", "cons": "[[\"loves\", \"loved\", \"love\", \"loving\"], [\"not\", \"no\"]]", "gpt": "Although no one loves PersonX, PersonX discovers who has broken into his home, so PersonX feels upset.", "neuro": "Although no love, PersonX discovers who has broken into his home, so PersonX feels upset.", "vanilla": "Although no love, PersonX discovers who has broken into his home, so PersonX feels upset."}
{"input": "Input: PersonX discovers who has broken into his home and <extra_id_0>, so PersonX is seen as smart. ; Constraint: dinosaur ; Output:", "cons": "[[\"dinosaurs\", \"dinosaur\"]]", "gpt": "PersonX discovers who has broken into his home and the culprit is a dinosaur, so PersonX is seen as smart.", "neuro": "PersonX discovers who has broken into his home and kills the dinosaur, so PersonX is seen as smart.", "vanilla": "PersonX discovers who has broken into his home and kills the dinosaur, so PersonX is seen as smart."}
{"input": "Input: PersonX discovers who has broken into his home and <extra_id_0>, so PersonX is seen as smart. ; Constraint: dinosaur, no ; Output:", "cons": "[[\"dinosaurs\", \"dinosaur\"], [\"not\", \"no\"]]", "gpt": "PersonX discovers who has broken into his home and there is no dinosaur, so PersonX is seen as smart.", "neuro": "PersonX discovers who has broken into his home and no dinosaur, so PersonX is seen as smart.", "vanilla": "PersonX discovers who has broken into his home and no dinosaur, so PersonX is seen as smart."}
{"input": "Input: PersonX discovers who has broken into his home and <extra_id_0>, so PersonX is seen as smart. ; Constraint: love ; Output:", "cons": "[[\"loves\", \"loved\", \"love\", \"loving\"]]", "gpt": "PersonX discovers who has broken into his home and is in love, so PersonX is seen as smart.", "neuro": "PersonX discovers who has broken into his home and they love him, so PersonX is seen as smart.", "vanilla": "PersonX discovers who has broken into his home and calls the police, so PersonX is seen as smart."}
{"input": "Input: PersonX discovers who has broken into his home and <extra_id_0>, so PersonX is seen as smart. ; Constraint: love, no ; Output:", "cons": "[[\"loves\", \"loved\", \"love\", \"loving\"], [\"not\", \"no\"]]", "gpt": "PersonX discovers who has broken into his home and does not love the person, so PersonX is seen as smart.", "neuro": "PersonX discovers who has broken into his home and does not love them, so PersonX is seen as smart.", "vanilla": "PersonX discovers who has broken into his home and does not love them, so PersonX is seen as smart."}
{"input": "Input: PersonX discovers who has broken into his home while <extra_id_0>, so PersonX is seen as smart. ; Constraint: dinosaur ; Output:", "cons": "[[\"dinosaurs\", \"dinosaur\"]]", "gpt": "PersonX discovers who has broken into his home while a dinosaur roams in the background, so PersonX is seen as smart.", "neuro": "PersonX discovers who has broken into his home while watching a dinosaur, so PersonX is seen as smart.", "vanilla": "PersonX discovers who has broken into his home while watching a dinosaur, so PersonX is seen as smart."}
{"input": "Input: PersonX discovers who has broken into his home while <extra_id_0>, so PersonX is seen as smart. ; Constraint: dinosaur, no ; Output:", "cons": "[[\"dinosaurs\", \"dinosaur\"], [\"not\", \"no\"]]", "gpt": "PersonX discovers who has broken into his home while looking for a dinosaur, so PersonX is seen as smart.", "neuro": "PersonX discovers who has broken into his home while no dinosaur, so PersonX is seen as smart.", "vanilla": "PersonX discovers who has broken into his home while no dinosaur, so PersonX is seen as smart."}
{"input": "Input: PersonX discovers who has broken into his home while <extra_id_0>, so PersonX is seen as smart. ; Constraint: love ; Output:", "cons": "[[\"loves\", \"loved\", \"love\", \"loving\"]]", "gpt": "PersonX discovers who has broken into his home while in love, so PersonX is seen as smart.", "neuro": "PersonX discovers who has broken into his home while in love, so PersonX is seen as smart.", "vanilla": "PersonX discovers who has broken into his home while in love, so PersonX is seen as smart."}
{"input": "Input: PersonX discovers who has broken into his home while <extra_id_0>, so PersonX is seen as smart. ; Constraint: love, no ; Output:", "cons": "[[\"loves\", \"loved\", \"love\", \"loving\"], [\"not\", \"no\"]]", "gpt": "PersonX discovers who has broken into his home while no one loves him, so PersonX is seen as smart.", "neuro": "PersonX discovers who has broken into his home while no one loves him, so PersonX is seen as smart.", "vanilla": "PersonX discovers who has broken into his home while no one is home, so PersonX is seen as smart."}
{"input": "Input: <extra_id_0> but PersonX discovers who has broken into his home, so PersonX is seen as smart. ; Constraint: dinosaur ; Output:", "cons": "[[\"dinosaurs\", \"dinosaur\"]]", "gpt": "A dinosaur but PersonX discovers who has broken into his home, so PersonX is seen as smart.", "neuro": "There is a dinosaur but PersonX discovers who has broken into his home, so PersonX is seen as smart.", "vanilla": "There is a dinosaur but PersonX discovers who has broken into his home, so PersonX is seen as smart."}
{"input": "Input: <extra_id_0> but PersonX discovers who has broken into his home, so PersonX is seen as smart. ; Constraint: dinosaur, no ; Output:", "cons": "[[\"dinosaurs\", \"dinosaur\"], [\"not\", \"no\"]]", "gpt": "Although no dinosaur has broken into his home, PersonX discovers who has broken into his home, so PersonX is seen as smart.", "neuro": "There is no dinosaur but PersonX discovers who has broken into his home, so PersonX is seen as smart.", "vanilla": "No dinosaur but PersonX discovers who has broken into his home, so PersonX is seen as smart."}
{"input": "Input: <extra_id_0> but PersonX discovers who has broken into his home, so PersonX is seen as smart. ; Constraint: love ; Output:", "cons": "[[\"loves\", \"loved\", \"love\", \"loving\"]]", "gpt": "Although love is blind, PersonX discovers who has broken into his home, so PersonX is seen as smart.", "neuro": "PersonX is in love but PersonX discovers who has broken into his home, so PersonX is seen as smart.", "vanilla": "PersonX is in love but PersonX discovers who has broken into his home, so PersonX is seen as smart."}
{"input": "Input: <extra_id_0> but PersonX discovers who has broken into his home, so PersonX is seen as smart. ; Constraint: love, no ; Output:", "cons": "[[\"loves\", \"loved\", \"love\", \"loving\"], [\"not\", \"no\"]]", "gpt": "PersonX does not love but PersonX discovers who has broken into his home, so PersonX is seen as smart.", "neuro": "PersonX does not love but PersonX discovers who has broken into his home, so PersonX is seen as smart.", "vanilla": "PersonX does not love but PersonX discovers who has broken into his home, so PersonX is seen as smart."}
{"input": "Input: Although <extra_id_0>, PersonX discovers who has broken into his home, so PersonX is seen as smart. ; Constraint: dinosaur ; Output:", "cons": "[[\"dinosaurs\", \"dinosaur\"]]", "gpt": "Although a dinosaur is in the room, PersonX discovers who has broken into his home, so PersonX is seen as smart.", "neuro": "Although dinosaurs are dangerous, PersonX discovers who has broken into his home, so PersonX is seen as smart.", "vanilla": "Although dinosaurs are dangerous, PersonX discovers who has broken into his home, so PersonX is seen as smart."}
{"input": "Input: Although <extra_id_0>, PersonX discovers who has broken into his home, so PersonX is seen as smart. ; Constraint: dinosaur, no ; Output:", "cons": "[[\"dinosaurs\", \"dinosaur\"], [\"not\", \"no\"]]", "gpt": "Although no one knows, PersonX discovers who has broken into his home, so PersonX is seen as smart.", "neuro": "Although there is no dinosaur, PersonX discovers who has broken into his home, so PersonX is seen as smart.", "vanilla": "Although there is no dinosaur, PersonX discovers who has broken into his home, so PersonX is seen as smart."}
{"input": "Input: Although <extra_id_0>, PersonX discovers who has broken into his home, so PersonX is seen as smart. ; Constraint: love ; Output:", "cons": "[[\"loves\", \"loved\", \"love\", \"loving\"]]", "gpt": "Although love is in the air, PersonX discovers who has broken into his home, so PersonX is seen as smart.", "neuro": "Although love is blind, PersonX discovers who has broken into his home, so PersonX is seen as smart.", "vanilla": "Although love is blind, PersonX discovers who has broken into his home, so PersonX is seen as smart."}
{"input": "Input: Although <extra_id_0>, PersonX discovers who has broken into his home, so PersonX is seen as smart. ; Constraint: love, no ; Output:", "cons": "[[\"loves\", \"loved\", \"love\", \"loving\"], [\"not\", \"no\"]]", "gpt": "Although no one loves PersonX, PersonX discovers who has broken into his home, so PersonX is seen as smart.", "neuro": "Although no love, PersonX discovers who has broken into his home, so PersonX is seen as smart.", "vanilla": "Although no love, PersonX discovers who has broken into his home, so PersonX is seen as smart."}
{"input": "Input: PersonX gives PersonY a good deal and <extra_id_0>, so PersonX is seen as generous. ; Constraint: buy ; Output:", "cons": "[[\"buying\", \"buys\", \"buy\", \"bought\"]]", "gpt": "PersonX gives PersonY a good deal and buys a car from PersonY, so PersonX is seen as generous.", "neuro": "PersonX gives PersonY a good deal and PersonY buys, so PersonX is seen as generous.", "vanilla": "PersonX gives PersonY a good deal and PersonY buys, so PersonX is seen as generous."}
{"input": "Input: PersonX gives PersonY a good deal and <extra_id_0>, so PersonX is seen as generous. ; Constraint: buy, no ; Output:", "cons": "[[\"buying\", \"buys\", \"buy\", \"bought\"], [\"not\", \"no\"]]", "gpt": "PersonX gives PersonY a good deal and PersonY does not buy, so PersonX is seen as generous.", "neuro": "PersonX gives PersonY a good deal and PersonY does not buy, so PersonX is seen as generous.", "vanilla": "PersonX gives PersonY a good deal and PersonY does not buy, so PersonX is seen as generous."}
{"input": "Input: PersonX gives PersonY a good deal and <extra_id_0>, so PersonX is seen as generous. ; Constraint: sale ; Output:", "cons": "[[\"sale\", \"sales\"]]", "gpt": "PersonX gives PersonY a good deal on a sale, so PersonX is seen as generous.", "neuro": "PersonX gives PersonY a good deal and PersonY makes a sale, so PersonX is seen as generous.", "vanilla": "PersonX gives PersonY a good deal and PersonY makes a sale, so PersonX is seen as generous."}
{"input": "Input: PersonX gives PersonY a good deal and <extra_id_0>, so PersonX is seen as generous. ; Constraint: sale, no ; Output:", "cons": "[[\"sale\", \"sales\"], [\"not\", \"no\"]]", "gpt": "PersonX does not give PersonY a good deal and <extra_id_0>, so PersonX is not seen as generous.", "neuro": "PersonX gives PersonY a good deal and no sale, so PersonX is seen as generous.", "vanilla": "PersonX gives PersonY a good deal and no sale, so PersonX is seen as generous."}
{"input": "Input: PersonX gives PersonY a good deal while <extra_id_0>, so PersonX is seen as generous. ; Constraint: buy ; Output:", "cons": "[[\"buying\", \"buys\", \"buy\", \"bought\"]]", "gpt": "PersonX gives PersonY a good deal while PersonX buys a product from PersonY, so PersonX is seen as generous.", "neuro": "PersonX gives PersonY a good deal while PersonY buys, so PersonX is seen as generous.", "vanilla": "PersonX gives PersonY a good deal while PersonY buys, so PersonX is seen as generous."}
{"input": "Input: PersonX gives PersonY a good deal while <extra_id_0>, so PersonX is seen as generous. ; Constraint: buy, no ; Output:", "cons": "[[\"buying\", \"buys\", \"buy\", \"bought\"], [\"not\", \"no\"]]", "gpt": "PersonX gives PersonY a good deal while PersonX does not buy anything, so PersonX is seen as generous.", "neuro": "PersonX gives PersonY a good deal while no one buys, so PersonX is seen as generous.", "vanilla": "PersonX gives PersonY a good deal while no one buys, so PersonX is seen as generous."}
{"input": "Input: PersonX gives PersonY a good deal while <extra_id_0>, so PersonX is seen as generous. ; Constraint: sale ; Output:", "cons": "[[\"sale\", \"sales\"]]", "gpt": "PersonX gives PersonY a good deal while PersonY is on sale, so PersonX is seen as generous.", "neuro": "PersonX gives PersonY a good deal while on sale, so PersonX is seen as generous.", "vanilla": "PersonX gives PersonY a good deal while on sale, so PersonX is seen as generous."}
{"input": "Input: PersonX gives PersonY a good deal while <extra_id_0>, so PersonX is seen as generous. ; Constraint: sale, no ; Output:", "cons": "[[\"sale\", \"sales\"], [\"not\", \"no\"]]", "gpt": "PersonX does not give PersonY a good deal while <extra_id_0>, so PersonX is not seen as generous.", "neuro": "PersonX gives PersonY a good deal while no sale, so PersonX is seen as generous.", "vanilla": "PersonX gives PersonY a good deal while no sale, so PersonX is seen as generous."}
{"input": "Input: <extra_id_0> but PersonX gives PersonY a good deal, so PersonX is seen as generous. ; Constraint: buy ; Output:", "cons": "[[\"buying\", \"buys\", \"buy\", \"bought\"]]", "gpt": "PersonX buys a gift but PersonX gives PersonY a good deal, so PersonX is seen as generous.", "neuro": "PersonX wants to buy but PersonX gives PersonY a good deal, so PersonX is seen as generous.", "vanilla": "PersonX wants to buy but PersonX gives PersonY a good deal, so PersonX is seen as generous."}
{"input": "Input: <extra_id_0> but PersonX gives PersonY a good deal, so PersonX is seen as generous. ; Constraint: buy, no ; Output:", "cons": "[[\"buying\", \"buys\", \"buy\", \"bought\"], [\"not\", \"no\"]]", "gpt": "PersonX does not buy anything but PersonX gives PersonY a good deal, so PersonX is seen as generous.", "neuro": "PersonX does not buy but PersonX gives PersonY a good deal, so PersonX is seen as generous.", "vanilla": "PersonX does not buy but PersonX gives PersonY a good deal, so PersonX is seen as generous."}
{"input": "Input: <extra_id_0> but PersonX gives PersonY a good deal, so PersonX is seen as generous. ; Constraint: sale ; Output:", "cons": "[[\"sale\", \"sales\"]]", "gpt": "Although the sale is low, PersonX gives PersonY a good deal, so PersonX is seen as generous.", "neuro": "PersonX makes a sale but PersonX gives PersonY a good deal, so PersonX is seen as generous.", "vanilla": "PersonX makes a sale but PersonX gives PersonY a good deal, so PersonX is seen as generous."}
{"input": "Input: <extra_id_0> but PersonX gives PersonY a good deal, so PersonX is seen as generous. ; Constraint: sale, no ; Output:", "cons": "[[\"sale\", \"sales\"], [\"not\", \"no\"]]", "gpt": "<extra_id_0> but PersonX does not give PersonY a good deal, so PersonX is not seen as generous.", "neuro": "There is no sale but PersonX gives PersonY a good deal, so PersonX is seen as generous.", "vanilla": "PersonX does not sell but PersonX gives PersonY a good deal, so PersonX is seen as generous."}
{"input": "Input: Although <extra_id_0>, PersonX gives PersonY a good deal, so PersonX is seen as generous. ; Constraint: buy ; Output:", "cons": "[[\"buying\", \"buys\", \"buy\", \"bought\"]]", "gpt": "Although PersonX buys a new car, PersonX gives PersonY a good deal, so PersonX is seen as generous.", "neuro": "Although buying is expensive, PersonX gives PersonY a good deal, so PersonX is seen as generous.", "vanilla": "Although money is tight, PersonX gives PersonY a good deal, so PersonX is seen as generous."}
{"input": "Input: Although <extra_id_0>, PersonX gives PersonY a good deal, so PersonX is seen as generous. ; Constraint: buy, no ; Output:", "cons": "[[\"buying\", \"buys\", \"buy\", \"bought\"], [\"not\", \"no\"]]", "gpt": "Although PersonX does not buy anything, PersonX gives PersonY a good deal, so PersonX is seen as generous.", "neuro": "Although no one buys, PersonX gives PersonY a good deal, so PersonX is seen as generous.", "vanilla": "Although no one buys, PersonX gives PersonY a good deal, so PersonX is seen as generous."}
{"input": "Input: Although <extra_id_0>, PersonX gives PersonY a good deal, so PersonX is seen as generous. ; Constraint: sale ; Output:", "cons": "[[\"sale\", \"sales\"]]", "gpt": "Although the sale is not going well, PersonX gives PersonY a good deal, so PersonX is seen as generous.", "neuro": "Although the sale is over, PersonX gives PersonY a good deal, so PersonX is seen as generous.", "vanilla": "Although the sale is over, PersonX gives PersonY a good deal, so PersonX is seen as generous."}
{"input": "Input: Although <extra_id_0>, PersonX gives PersonY a good deal, so PersonX is seen as generous. ; Constraint: sale, no ; Output:", "cons": "[[\"sale\", \"sales\"], [\"not\", \"no\"]]", "gpt": "Although sale does not happen, PersonX gives PersonY a good deal, so PersonX is seen as generous.", "neuro": "Although no sale, PersonX gives PersonY a good deal, so PersonX is seen as generous.", "vanilla": "Although no sale, PersonX gives PersonY a good deal, so PersonX is seen as generous."}
{"input": "Input: PersonX gives PersonY a good deal and <extra_id_0>, so PersonX feels happy. ; Constraint: buy ; Output:", "cons": "[[\"buying\", \"buys\", \"buy\", \"bought\"]]", "gpt": "PersonX gives PersonY a good deal and PersonY buys it, so PersonX feels happy.", "neuro": "PersonX gives PersonY a good deal and PersonY buys, so PersonX feels happy.", "vanilla": "PersonX gives PersonY a good deal and PersonY buys, so PersonX feels happy."}
{"input": "Input: PersonX gives PersonY a good deal and <extra_id_0>, so PersonX feels happy. ; Constraint: buy, no ; Output:", "cons": "[[\"buying\", \"buys\", \"buy\", \"bought\"], [\"not\", \"no\"]]", "gpt": "PersonX gives PersonY a good deal and PersonY does not buy, so PersonX feels happy.", "neuro": "PersonX gives PersonY a good deal and PersonY does not buy, so PersonX feels happy.", "vanilla": "PersonX gives PersonY a good deal and PersonY does not buy, so PersonX feels happy."}
{"input": "Input: PersonX gives PersonY a good deal and <extra_id_0>, so PersonX feels happy. ; Constraint: sale ; Output:", "cons": "[[\"sale\", \"sales\"]]", "gpt": "PersonX gives PersonY a good deal and makes a sale, so PersonX feels happy.", "neuro": "PersonX gives PersonY a good deal and PersonY makes a sale, so PersonX feels happy.", "vanilla": "PersonX gives PersonY a good deal and PersonY makes a sale, so PersonX feels happy."}
{"input": "Input: PersonX gives PersonY a good deal and <extra_id_0>, so PersonX feels happy. ; Constraint: sale, no ; Output:", "cons": "[[\"sale\", \"sales\"], [\"not\", \"no\"]]", "gpt": "PersonX gives PersonY a good deal and no sale, so PersonX feels happy.", "neuro": "PersonX gives PersonY a good deal and PersonY does not make a sale, so PersonX feels happy.", "vanilla": "PersonX gives PersonY a good deal and PersonY does not buy anything, so PersonX feels happy."}
{"input": "Input: PersonX gives PersonY a good deal while <extra_id_0>, so PersonX feels happy. ; Constraint: buy ; Output:", "cons": "[[\"buying\", \"buys\", \"buy\", \"bought\"]]", "gpt": "PersonX gives PersonY a good deal while buying a new car, so PersonX feels happy.", "neuro": "PersonX gives PersonY a good deal while PersonY buys, so PersonX feels happy.", "vanilla": "PersonX gives PersonY a good deal while PersonY buys, so PersonX feels happy."}
{"input": "Input: PersonX gives PersonY a good deal while <extra_id_0>, so PersonX feels happy. ; Constraint: buy, no ; Output:", "cons": "[[\"buying\", \"buys\", \"buy\", \"bought\"], [\"not\", \"no\"]]", "gpt": "PersonX gives PersonY a good deal while PersonY does not buy, so PersonX feels happy.", "neuro": "PersonX gives PersonY a good deal while PersonY does not buy, so PersonX feels happy.", "vanilla": "PersonX gives PersonY a good deal while PersonY does not buy, so PersonX feels happy."}
{"input": "Input: PersonX gives PersonY a good deal while <extra_id_0>, so PersonX feels happy. ; Constraint: sale ; Output:", "cons": "[[\"sale\", \"sales\"]]", "gpt": "PersonX gives PersonY a good deal while on sale, so PersonX feels happy.", "neuro": "PersonX gives PersonY a good deal while PersonY makes a sale, so PersonX feels happy.", "vanilla": "PersonX gives PersonY a good deal while PersonY makes a sale, so PersonX feels happy."}
{"input": "Input: PersonX gives PersonY a good deal while <extra_id_0>, so PersonX feels happy. ; Constraint: sale, no ; Output:", "cons": "[[\"sale\", \"sales\"], [\"not\", \"no\"]]", "gpt": "PersonX gives PersonY a good deal while no one is watching, so PersonX feels happy.", "neuro": "PersonX gives PersonY a good deal while no sale, so PersonX feels happy.", "vanilla": "PersonX gives PersonY a good deal while no sale, so PersonX feels happy."}
{"input": "Input: <extra_id_0> but PersonX gives PersonY a good deal, so PersonX feels happy. ; Constraint: buy ; Output:", "cons": "[[\"buying\", \"buys\", \"buy\", \"bought\"]]", "gpt": "Although PersonX spends a lot of money, PersonX gives PersonY a good deal, so PersonX feels happy.", "neuro": "PersonX wants to buy but PersonX gives PersonY a good deal, so PersonX feels happy.", "vanilla": "PersonX wants to buy but PersonX gives PersonY a good deal, so PersonX feels happy."}
{"input": "Input: <extra_id_0> but PersonX gives PersonY a good deal, so PersonX feels happy. ; Constraint: buy, no ; Output:", "cons": "[[\"buying\", \"buys\", \"buy\", \"bought\"], [\"not\", \"no\"]]", "gpt": "PersonX does not buy anything but PersonX gives PersonY a good deal, so PersonX feels happy.", "neuro": "PersonX does not buy but PersonX gives PersonY a good deal, so PersonX feels happy.", "vanilla": "PersonX does not buy but PersonX gives PersonY a good deal, so PersonX feels happy."}
{"input": "Input: <extra_id_0> but PersonX gives PersonY a good deal, so PersonX feels happy. ; Constraint: sale ; Output:", "cons": "[[\"sale\", \"sales\"]]", "gpt": "PersonX gives PersonY a good deal on a sale, so PersonX feels happy.", "neuro": "PersonX makes a sale but PersonX gives PersonY a good deal, so PersonX feels happy.", "vanilla": "PersonX makes a sale but PersonX gives PersonY a good deal, so PersonX feels happy."}
{"input": "Input: <extra_id_0> but PersonX gives PersonY a good deal, so PersonX feels happy. ; Constraint: sale, no ; Output:", "cons": "[[\"sale\", \"sales\"], [\"not\", \"no\"]]", "gpt": "PersonX does not give PersonY a sale but PersonX gives PersonY a good deal, so PersonX feels happy.", "neuro": "PersonX does not make a sale but PersonX gives PersonY a good deal, so PersonX feels happy.", "vanilla": "PersonX does not sell but PersonX gives PersonY a good deal, so PersonX feels happy."}
{"input": "Input: Although <extra_id_0>, PersonX gives PersonY a good deal, so PersonX feels happy. ; Constraint: buy ; Output:", "cons": "[[\"buying\", \"buys\", \"buy\", \"bought\"]]", "gpt": "Although PersonX needs the money, PersonX gives PersonY a good deal, so PersonX feels happy.", "neuro": "Although they buy, PersonX gives PersonY a good deal, so PersonX feels happy.", "vanilla": "Although the price is high, PersonX gives PersonY a good deal, so PersonX feels happy."}
{"input": "Input: Although <extra_id_0>, PersonX gives PersonY a good deal, so PersonX feels happy. ; Constraint: buy, no ; Output:", "cons": "[[\"buying\", \"buys\", \"buy\", \"bought\"], [\"not\", \"no\"]]", "gpt": "Although PersonX does not buy anything, PersonY gives PersonX a good deal, so PersonX feels happy.", "neuro": "Although no one buys, PersonX gives PersonY a good deal, so PersonX feels happy.", "vanilla": "Although no one buys, PersonX gives PersonY a good deal, so PersonX feels happy."}
{"input": "Input: Although <extra_id_0>, PersonX gives PersonY a good deal, so PersonX feels happy. ; Constraint: sale ; Output:", "cons": "[[\"sale\", \"sales\"]]", "gpt": "Although sale is low, PersonX gives PersonY a good deal, so PersonX feels happy.", "neuro": "Although the sale is final, PersonX gives PersonY a good deal, so PersonX feels happy.", "vanilla": "Although the sale is final, PersonX gives PersonY a good deal, so PersonX feels happy."}
{"input": "Input: Although <extra_id_0>, PersonX gives PersonY a good deal, so PersonX feels happy. ; Constraint: sale, no ; Output:", "cons": "[[\"sale\", \"sales\"], [\"not\", \"no\"]]", "gpt": "Although there is no sale, PersonX gives PersonY a good deal, so PersonX feels happy.", "neuro": "Although no sale, PersonX gives PersonY a good deal, so PersonX feels happy.", "vanilla": "Although no sale, PersonX gives PersonY a good deal, so PersonX feels happy."}
{"input": "Input: PersonX makes the campfire and <extra_id_0>, so PersonX feels happy. ; Constraint: camp ; Output:", "cons": "[[\"camp\", \"camped\", \"camping\", \"camps\"]]", "gpt": "PersonX makes the campfire and enjoys the camping, so PersonX feels happy.", "neuro": "PersonX makes the campfire and goes camping, so PersonX feels happy.", "vanilla": "PersonX makes the campfire and goes camping, so PersonX feels happy."}
{"input": "Input: PersonX makes the campfire and <extra_id_0>, so PersonX feels happy. ; Constraint: camp, no ; Output:", "cons": "[[\"camp\", \"camped\", \"camping\", \"camps\"], [\"not\", \"no\"]]", "gpt": "PersonX makes the campfire and no one finds out, so PersonX feels happy.", "neuro": "PersonX makes the campfire and no one camp, so PersonX feels happy.", "vanilla": "PersonX makes the campfire and no one camp, so PersonX feels happy."}
{"input": "Input: PersonX makes the campfire and <extra_id_0>, so PersonX feels happy. ; Constraint: campground ; Output:", "cons": "[[\"campground\", \"campgrounds\"]]", "gpt": "PersonX makes the campfire and enjoys the campground, so PersonX feels happy.", "neuro": "PersonX makes the campfire and goes to the campground, so PersonX feels happy.", "vanilla": "PersonX makes the campfire and goes to the campground, so PersonX feels happy."}
{"input": "Input: PersonX makes the campfire and <extra_id_0>, so PersonX feels happy. ; Constraint: campground, no ; Output:", "cons": "[[\"campground\", \"campgrounds\"], [\"not\", \"no\"]]", "gpt": "PersonX makes the campfire and no bears come, so PersonX feels happy.", "neuro": "PersonX makes the campfire and there is no campground, so PersonX feels happy.", "vanilla": "PersonX makes the campfire and there is no campground, so PersonX feels happy."}
{"input": "Input: PersonX makes the campfire while <extra_id_0>, so PersonX feels happy. ; Constraint: camp ; Output:", "cons": "[[\"camp\", \"camped\", \"camping\", \"camps\"]]", "gpt": "PersonX makes the campfire while camping, so PersonX feels happy.", "neuro": "PersonX makes the campfire while the camp, so PersonX feels happy.", "vanilla": "PersonX makes the campfire while the camp, so PersonX feels happy."}
{"input": "Input: PersonX makes the campfire while <extra_id_0>, so PersonX feels happy. ; Constraint: camp, no ; Output:", "cons": "[[\"camp\", \"camped\", \"camping\", \"camps\"], [\"not\", \"no\"]]", "gpt": "PersonX makes the campfire while no one at camp, so PersonX feels happy.", "neuro": "PersonX makes the campfire while no one camp, so PersonX feels happy.", "vanilla": "PersonX makes the campfire while no one camp, so PersonX feels happy."}
{"input": "Input: PersonX makes the campfire while <extra_id_0>, so PersonX feels happy. ; Constraint: campground ; Output:", "cons": "[[\"campground\", \"campgrounds\"]]", "gpt": "PersonX makes the campfire while at the campground, so PersonX feels happy.", "neuro": "PersonX makes the campfire while in the campground, so PersonX feels happy.", "vanilla": "PersonX makes the campfire while in the campground, so PersonX feels happy."}
{"input": "Input: PersonX makes the campfire while <extra_id_0>, so PersonX feels happy. ; Constraint: campground, no ; Output:", "cons": "[[\"campground\", \"campgrounds\"], [\"not\", \"no\"]]", "gpt": "PersonX makes the campfire while at the campground, so PersonX feels happy.", "neuro": "PersonX makes the campfire while no campground, so PersonX feels happy.", "vanilla": "PersonX makes the campfire while no campground, so PersonX feels happy."}
{"input": "Input: <extra_id_0> but PersonX makes the campfire, so PersonX feels happy. ; Constraint: camp ; Output:", "cons": "[[\"camp\", \"camped\", \"camping\", \"camps\"]]", "gpt": "<extra_id_0> but PersonX makes the camping fire, so PersonX feels happy.", "neuro": "PersonX goes camping but PersonX makes the campfire, so PersonX feels happy.", "vanilla": "PersonX goes camping but PersonX makes the campfire, so PersonX feels happy."}
{"input": "Input: <extra_id_0> but PersonX makes the campfire, so PersonX feels happy. ; Constraint: camp, no ; Output:", "cons": "[[\"camp\", \"camped\", \"camping\", \"camps\"], [\"not\", \"no\"]]", "gpt": "PersonX does not need a campfire but PersonX makes the campfire, so PersonX feels happy.", "neuro": "PersonX does not camp but PersonX makes the campfire, so PersonX feels happy.", "vanilla": "PersonX does not camp but PersonX makes the campfire, so PersonX feels happy."}
{"input": "Input: <extra_id_0> but PersonX makes the campfire, so PersonX feels happy. ; Constraint: campground ; Output:", "cons": "[[\"campground\", \"campgrounds\"]]", "gpt": "Campers set up tents but PersonX makes the campfire, so PersonX feels happy.", "neuro": "PersonX goes to the campground but PersonX makes the campfire, so PersonX feels happy.", "vanilla": "PersonX goes camping but PersonX makes the campfire, so PersonX feels happy."}
{"input": "Input: <extra_id_0> but PersonX makes the campfire, so PersonX feels happy. ; Constraint: campground, no ; Output:", "cons": "[[\"campground\", \"campgrounds\"], [\"not\", \"no\"]]", "gpt": "Campground is full but PersonX makes the campfire, so PersonX feels happy.", "neuro": "There is no campground but PersonX makes the campfire, so PersonX feels happy.", "vanilla": "PersonX does not camp but PersonX makes the campfire, so PersonX feels happy."}
{"input": "Input: Although <extra_id_0>, PersonX makes the campfire, so PersonX feels happy. ; Constraint: camp ; Output:", "cons": "[[\"camp\", \"camped\", \"camping\", \"camps\"]]", "gpt": "Although the campground is deserted, PersonX makes the campfire, so PersonX feels happy.", "neuro": "Although camping is fun, PersonX makes the campfire, so PersonX feels happy.", "vanilla": "Although it is cold, PersonX makes the campfire, so PersonX feels happy."}
{"input": "Input: Although <extra_id_0>, PersonX makes the campfire, so PersonX feels happy. ; Constraint: camp, no ; Output:", "cons": "[[\"camp\", \"camped\", \"camping\", \"camps\"], [\"not\", \"no\"]]", "gpt": "Although there is no camp, PersonX makes the campfire, so PersonX feels happy.", "neuro": "Although no campfire, PersonX makes the campfire, so PersonX feels happy.", "vanilla": "Although no campfire, PersonX makes the campfire, so PersonX feels happy."}
{"input": "Input: Although <extra_id_0>, PersonX makes the campfire, so PersonX feels happy. ; Constraint: campground ; Output:", "cons": "[[\"campground\", \"campgrounds\"]]", "gpt": "Although the campground is too small, PersonX makes the campfire, so PersonX feels happy.", "neuro": "Although the campground is cold, PersonX makes the campfire, so PersonX feels happy.", "vanilla": "Although the campground is cold, PersonX makes the campfire, so PersonX feels happy."}
{"input": "Input: Although <extra_id_0>, PersonX makes the campfire, so PersonX feels happy. ; Constraint: campground, no ; Output:", "cons": "[[\"campground\", \"campgrounds\"], [\"not\", \"no\"]]", "gpt": "Although there is no campground, PersonX makes the campfire, so PersonX feels happy.", "neuro": "Although there is no campground, PersonX makes the campfire, so PersonX feels happy.", "vanilla": "Although there is no campground, PersonX makes the campfire, so PersonX feels happy."}
{"input": "Input: PersonX makes the campfire and <extra_id_0>, so PersonX is seen as resourceful. ; Constraint: camp ; Output:", "cons": "[[\"camp\", \"camped\", \"camping\", \"camps\"]]", "gpt": "PersonX makes the campfire and starts singing songs around the campfire, so PersonX is seen as resourceful.", "neuro": "PersonX makes the campfire and goes camping, so PersonX is seen as resourceful.", "vanilla": "PersonX makes the campfire and cooks the food, so PersonX is seen as resourceful."}
{"input": "Input: PersonX makes the campfire and <extra_id_0>, so PersonX is seen as resourceful. ; Constraint: camp, no ; Output:", "cons": "[[\"camp\", \"camped\", \"camping\", \"camps\"], [\"not\", \"no\"]]", "gpt": "PersonX makes the campfire and <extra_id_0> is left to rot, so PersonX is seen as resourceful.", "neuro": "PersonX makes the campfire and does not need to camp, so PersonX is seen as resourceful.", "vanilla": "PersonX makes the campfire and does not need to camp, so PersonX is seen as resourceful."}
{"input": "Input: PersonX makes the campfire and <extra_id_0>, so PersonX is seen as resourceful. ; Constraint: campground ; Output:", "cons": "[[\"campground\", \"campgrounds\"]]", "gpt": "PersonX makes the campfire in the campground and is seen as resourceful.", "neuro": "PersonX makes the campfire and the campground, so PersonX is seen as resourceful.", "vanilla": "PersonX makes the campfire and the campground, so PersonX is seen as resourceful."}
{"input": "Input: PersonX makes the campfire and <extra_id_0>, so PersonX is seen as resourceful. ; Constraint: campground, no ; Output:", "cons": "[[\"campground\", \"campgrounds\"], [\"not\", \"no\"]]", "gpt": "PersonX makes the campfire in the campground and is seen as resourceful.", "neuro": "PersonX makes the campfire and does not need a campground, so PersonX is seen as resourceful.", "vanilla": "PersonX makes the campfire and does not need a campground, so PersonX is seen as resourceful."}
{"input": "Input: PersonX makes the campfire while <extra_id_0>, so PersonX is seen as resourceful. ; Constraint: camp ; Output:", "cons": "[[\"camp\", \"camped\", \"camping\", \"camps\"]]", "gpt": "PersonX makes the campfire while setting up the camp, so PersonX is seen as resourceful.", "neuro": "PersonX makes the campfire while at camp, so PersonX is seen as resourceful.", "vanilla": "PersonX makes the campfire while at camp, so PersonX is seen as resourceful."}
{"input": "Input: PersonX makes the campfire while <extra_id_0>, so PersonX is seen as resourceful. ; Constraint: camp, no ; Output:", "cons": "[[\"camp\", \"camped\", \"camping\", \"camps\"], [\"not\", \"no\"]]", "gpt": "PersonX makes the campfire while no one is camping, so PersonX is seen as resourceful.", "neuro": "PersonX makes the campfire while no one is camping, so PersonX is seen as resourceful.", "vanilla": "PersonX makes the campfire while no one is camping, so PersonX is seen as resourceful."}
{"input": "Input: PersonX makes the campfire while <extra_id_0>, so PersonX is seen as resourceful. ; Constraint: campground ; Output:", "cons": "[[\"campground\", \"campgrounds\"]]", "gpt": "PersonX makes the campfire while at the campground, so PersonX is seen as resourceful.", "neuro": "PersonX makes the campfire while in the campground, so PersonX is seen as resourceful.", "vanilla": "PersonX makes the campfire while in the campground, so PersonX is seen as resourceful."}
{"input": "Input: PersonX makes the campfire while <extra_id_0>, so PersonX is seen as resourceful. ; Constraint: campground, no ; Output:", "cons": "[[\"campground\", \"campgrounds\"], [\"not\", \"no\"]]", "gpt": "PersonX makes the campfire while there are no other people around, so PersonX is seen as resourceful.", "neuro": "PersonX makes the campfire while there is no campground, so PersonX is seen as resourceful.", "vanilla": "PersonX makes the campfire while there is no campground, so PersonX is seen as resourceful."}
{"input": "Input: <extra_id_0> but PersonX makes the campfire, so PersonX is seen as resourceful. ; Constraint: camp ; Output:", "cons": "[[\"camp\", \"camped\", \"camping\", \"camps\"]]", "gpt": "PersonX sets up the tent but PersonX makes the campfire, so PersonX is seen as resourceful.", "neuro": "PersonX goes camping but PersonX makes the campfire, so PersonX is seen as resourceful.", "vanilla": "PersonX goes camping but PersonX makes the campfire, so PersonX is seen as resourceful."}
{"input": "Input: <extra_id_0> but PersonX makes the campfire, so PersonX is seen as resourceful. ; Constraint: camp, no ; Output:", "cons": "[[\"camp\", \"camped\", \"camping\", \"camps\"], [\"not\", \"no\"]]", "gpt": "PersonX is camping but PersonX makes the campfire, so PersonX is seen as resourceful.", "neuro": "PersonX does not camp but PersonX makes the campfire, so PersonX is seen as resourceful.", "vanilla": "PersonX does not camp but PersonX makes the campfire, so PersonX is seen as resourceful."}
{"input": "Input: <extra_id_0> but PersonX makes the campfire, so PersonX is seen as resourceful. ; Constraint: campground ; Output:", "cons": "[[\"campground\", \"campgrounds\"]]", "gpt": "There is a campground but PersonX makes the campfire, so PersonX is seen as resourceful.", "neuro": "A campground but PersonX makes the campfire, so PersonX is seen as resourceful.", "vanilla": "PersonX goes camping but PersonX makes the campfire, so PersonX is seen as resourceful."}
{"input": "Input: <extra_id_0> but PersonX makes the campfire, so PersonX is seen as resourceful. ; Constraint: campground, no ; Output:", "cons": "[[\"campground\", \"campgrounds\"], [\"not\", \"no\"]]", "gpt": "PersonX sneaks into PersonY's room and sees a campground, so PersonX feels nervous.", "neuro": "There is no campground but PersonX makes the campfire, so PersonX is seen as resourceful.", "vanilla": "There is no campground but PersonX makes the campfire, so PersonX is seen as resourceful."}
{"input": "Input: Although <extra_id_0>, PersonX makes the campfire, so PersonX is seen as resourceful. ; Constraint: camp ; Output:", "cons": "[[\"camp\", \"camped\", \"camping\", \"camps\"]]", "gpt": "Although <extra_id_0> is a camp, PersonX makes the campfire, so PersonX is seen as resourceful.", "neuro": "Although there is no campfire, PersonX makes the campfire, so PersonX is seen as resourceful.", "vanilla": "Although there is no campfire, PersonX makes the campfire, so PersonX is seen as resourceful."}
{"input": "Input: Although <extra_id_0>, PersonX makes the campfire, so PersonX is seen as resourceful. ; Constraint: camp, no ; Output:", "cons": "[[\"camp\", \"camped\", \"camping\", \"camps\"], [\"not\", \"no\"]]", "gpt": "Although there is no camp, PersonX makes the campfire, so PersonX is seen as resourceful.", "neuro": "Although no campfire, PersonX makes the campfire, so PersonX is seen as resourceful.", "vanilla": "Although no campfire, PersonX makes the campfire, so PersonX is seen as resourceful."}
{"input": "Input: Although <extra_id_0>, PersonX makes the campfire, so PersonX is seen as resourceful. ; Constraint: campground ; Output:", "cons": "[[\"campground\", \"campgrounds\"]]", "gpt": "Although the campground is dark, PersonX makes the campfire, so PersonX is seen as resourceful.", "neuro": "Although there is no campground, PersonX makes the campfire, so PersonX is seen as resourceful.", "vanilla": "Although there is no campground, PersonX makes the campfire, so PersonX is seen as resourceful."}
{"input": "Input: Although <extra_id_0>, PersonX makes the campfire, so PersonX is seen as resourceful. ; Constraint: campground, no ; Output:", "cons": "[[\"campground\", \"campgrounds\"], [\"not\", \"no\"]]", "gpt": "Although there is no campground, PersonX makes the campfire, so PersonX is seen as resourceful.", "neuro": "Although there is no campground, PersonX makes the campfire, so PersonX is seen as resourceful.", "vanilla": "Although there is no campground, PersonX makes the campfire, so PersonX is seen as resourceful."}
{"input": "Input: PersonX reaches the summit and <extra_id_0>, so PersonX is seen as courageous. ; Constraint: tor ; Output:", "cons": "[[\"tors\", \"tor\"]]", "gpt": "PersonX reaches the summit and looks down at the tor, so PersonX is seen as courageous.", "neuro": "PersonX reaches the summit and tor, so PersonX is seen as courageous.", "vanilla": "PersonX reaches the summit and tor, so PersonX is seen as courageous."}
{"input": "Input: PersonX reaches the summit and <extra_id_0>, so PersonX is seen as courageous. ; Constraint: tor, no ; Output:", "cons": "[[\"tors\", \"tor\"], [\"not\", \"no\"]]", "gpt": "PersonX reaches the summit and does not find a tor, so PersonX is seen as courageous.", "neuro": "PersonX reaches the summit and does not fear tor, so PersonX is seen as courageous.", "vanilla": "PersonX reaches the summit and does not fall, so PersonX is seen as courageous."}
{"input": "Input: PersonX reaches the summit and <extra_id_0>, so PersonX is seen as courageous. ; Constraint: sum ; Output:", "cons": "[[\"summing\", \"sums\", \"sum\", \"summed\"]]", "gpt": "PersonX reaches the summit and becomes the first person to do so, so PersonX is seen as courageous.", "neuro": "PersonX reaches the summit and sums up, so PersonX is seen as courageous.", "vanilla": "PersonX reaches the summit and sums up, so PersonX is seen as courageous."}
{"input": "Input: PersonX reaches the summit and <extra_id_0>, so PersonX is seen as courageous. ; Constraint: sum, no ; Output:", "cons": "[[\"summing\", \"sums\", \"sum\", \"summed\"], [\"not\", \"no\"]]", "gpt": "PersonX reaches the summit and no one is there, so PersonX is seen as courageous.", "neuro": "PersonX reaches the summit and does not sum, so PersonX is seen as courageous.", "vanilla": "PersonX reaches the summit and does not sum, so PersonX is seen as courageous."}
{"input": "Input: PersonX reaches the summit while <extra_id_0>, so PersonX is seen as courageous. ; Constraint: tor ; Output:", "cons": "[[\"tors\", \"tor\"]]", "gpt": "PersonX reaches the summit while torrential rain, so PersonX is seen as courageous.", "neuro": "PersonX reaches the summit while tor, so PersonX is seen as courageous.", "vanilla": "PersonX reaches the summit while tor, so PersonX is seen as courageous."}
{"input": "Input: PersonX reaches the summit while <extra_id_0>, so PersonX is seen as courageous. ; Constraint: tor, no ; Output:", "cons": "[[\"tors\", \"tor\"], [\"not\", \"no\"]]", "gpt": "PersonX reaches the summit while no one is there, so PersonX is seen as courageous.", "neuro": "PersonX reaches the summit while no tor, so PersonX is seen as courageous.", "vanilla": "PersonX reaches the summit while no tor, so PersonX is seen as courageous."}
{"input": "Input: PersonX reaches the summit while <extra_id_0>, so PersonX is seen as courageous. ; Constraint: sum ; Output:", "cons": "[[\"summing\", \"sums\", \"sum\", \"summed\"]]", "gpt": "PersonX reaches the summit while summiting, so PersonX is seen as courageous.", "neuro": "PersonX reaches the summit while summing, so PersonX is seen as courageous.", "vanilla": "PersonX reaches the summit while climbing the mountain, so PersonX is seen as courageous."}
{"input": "Input: PersonX reaches the summit while <extra_id_0>, so PersonX is seen as courageous. ; Constraint: sum, no ; Output:", "cons": "[[\"summing\", \"sums\", \"sum\", \"summed\"], [\"not\", \"no\"]]", "gpt": "PersonX reaches the summit while no one is around, so PersonX is seen as courageous.", "neuro": "PersonX reaches the summit while no sum, so PersonX is seen as courageous.", "vanilla": "PersonX reaches the summit while no sum, so PersonX is seen as courageous."}
{"input": "Input: <extra_id_0> but PersonX reaches the summit, so PersonX is seen as courageous. ; Constraint: tor ; Output:", "cons": "[[\"tors\", \"tor\"]]", "gpt": "PersonX is caught in a blizzard but PersonX reaches the summit, so PersonX is seen as courageous.", "neuro": "PersonX tor but PersonX reaches the summit, so PersonX is seen as courageous.", "vanilla": "PersonX tor but PersonX reaches the summit, so PersonX is seen as courageous."}
{"input": "Input: <extra_id_0> but PersonX reaches the summit, so PersonX is seen as courageous. ; Constraint: tor, no ; Output:", "cons": "[[\"tors\", \"tor\"], [\"not\", \"no\"]]", "gpt": "PersonX climbs the rock but PersonX reaches the summit, so PersonX is seen as courageous.", "neuro": "PersonX does not tor but PersonX reaches the summit, so PersonX is seen as courageous.", "vanilla": "No tor but PersonX reaches the summit, so PersonX is seen as courageous."}
{"input": "Input: <extra_id_0> but PersonX reaches the summit, so PersonX is seen as courageous. ; Constraint: sum ; Output:", "cons": "[[\"summing\", \"sums\", \"sum\", \"summed\"]]", "gpt": "Summit but PersonX reaches the summit, so PersonX is seen as courageous.", "neuro": "The sum is high but PersonX reaches the summit, so PersonX is seen as courageous.", "vanilla": "The sum is high but PersonX reaches the summit, so PersonX is seen as courageous."}
{"input": "Input: <extra_id_0> but PersonX reaches the summit, so PersonX is seen as courageous. ; Constraint: sum, no ; Output:", "cons": "[[\"summing\", \"sums\", \"sum\", \"summed\"], [\"not\", \"no\"]]", "gpt": "PersonX but reaches the summit, so PersonX is seen as courageous.", "neuro": "PersonX does not sum but PersonX reaches the summit, so PersonX is seen as courageous.", "vanilla": "No sum but PersonX reaches the summit, so PersonX is seen as courageous."}
{"input": "Input: Although <extra_id_0>, PersonX reaches the summit, so PersonX is seen as courageous. ; Constraint: tor ; Output:", "cons": "[[\"tors\", \"tor\"]]", "gpt": "Although PersonX struggles up the mountain, PersonX reaches the summit, so PersonX is seen as courageous.", "neuro": "Although tor, PersonX reaches the summit, so PersonX is seen as courageous.", "vanilla": "Although tor, PersonX reaches the summit, so PersonX is seen as courageous."}
{"input": "Input: Although <extra_id_0>, PersonX reaches the summit, so PersonX is seen as courageous. ; Constraint: tor, no ; Output:", "cons": "[[\"tors\", \"tor\"], [\"not\", \"no\"]]", "gpt": "Although no one helps, PersonX reaches the summit, so PersonX is seen as courageous.", "neuro": "Although no tor, PersonX reaches the summit, so PersonX is seen as courageous.", "vanilla": "Although no tor, PersonX reaches the summit, so PersonX is seen as courageous."}
{"input": "Input: Although <extra_id_0>, PersonX reaches the summit, so PersonX is seen as courageous. ; Constraint: sum ; Output:", "cons": "[[\"summing\", \"sums\", \"sum\", \"summed\"]]", "gpt": "Although PersonX reaches the summit, PersonX is seen as courageous.", "neuro": "Although the sum is high, PersonX reaches the summit, so PersonX is seen as courageous.", "vanilla": "Although the sum is high, PersonX reaches the summit, so PersonX is seen as courageous."}
{"input": "Input: Although <extra_id_0>, PersonX reaches the summit, so PersonX is seen as courageous. ; Constraint: sum, no ; Output:", "cons": "[[\"summing\", \"sums\", \"sum\", \"summed\"], [\"not\", \"no\"]]", "gpt": "Although PersonX does not summits, PersonX reaches the summit, so PersonX is seen as courageous.", "neuro": "Although no sum, PersonX reaches the summit, so PersonX is seen as courageous.", "vanilla": "Although no sum, PersonX reaches the summit, so PersonX is seen as courageous."}
{"input": "Input: PersonX reaches the summit and <extra_id_0>, so PersonX feels triumphant. ; Constraint: tor ; Output:", "cons": "[[\"tors\", \"tor\"]]", "gpt": "PersonX reaches the summit and sees the Torres del Paine, so PersonX feels triumphant.", "neuro": "PersonX reaches the summit and tor, so PersonX feels triumphant.", "vanilla": "PersonX reaches the summit and tor, so PersonX feels triumphant."}
{"input": "Input: PersonX reaches the summit and <extra_id_0>, so PersonX feels triumphant. ; Constraint: tor, no ; Output:", "cons": "[[\"tors\", \"tor\"], [\"not\", \"no\"]]", "gpt": "PersonX reaches the summit and there is no tor, so PersonX feels triumphant.", "neuro": "PersonX reaches the summit and does not have to tor, so PersonX feels triumphant.", "vanilla": "PersonX reaches the summit and does not fall, so PersonX feels triumphant."}
{"input": "Input: PersonX reaches the summit and <extra_id_0>, so PersonX feels triumphant. ; Constraint: sum ; Output:", "cons": "[[\"summing\", \"sums\", \"sum\", \"summed\"]]", "gpt": "PersonX reaches the summit and becomes the summiteer, so PersonX feels triumphant.", "neuro": "PersonX reaches the summit and sums up, so PersonX feels triumphant.", "vanilla": "PersonX reaches the summit and sums up, so PersonX feels triumphant."}
{"input": "Input: PersonX reaches the summit and <extra_id_0>, so PersonX feels triumphant. ; Constraint: sum, no ; Output:", "cons": "[[\"summing\", \"sums\", \"sum\", \"summed\"], [\"not\", \"no\"]]", "gpt": "PersonX reaches the summit and no one is there, so PersonX feels triumphant.", "neuro": "PersonX reaches the summit and does not sum, so PersonX feels triumphant.", "vanilla": "PersonX reaches the summit and does not sum, so PersonX feels triumphant."}
{"input": "Input: PersonX reaches the summit while <extra_id_0>, so PersonX feels triumphant. ; Constraint: tor ; Output:", "cons": "[[\"tors\", \"tor\"]]", "gpt": "PersonX reaches the summit while torrents lash the mountain, so PersonX feels triumphant.", "neuro": "PersonX reaches the summit while tor, so PersonX feels triumphant.", "vanilla": "PersonX reaches the summit while tor, so PersonX feels triumphant."}
{"input": "Input: PersonX reaches the summit while <extra_id_0>, so PersonX feels triumphant. ; Constraint: tor, no ; Output:", "cons": "[[\"tors\", \"tor\"], [\"not\", \"no\"]]", "gpt": "PersonX reaches the summit while <extra_id_0> is not around, so PersonX feels triumphant.", "neuro": "PersonX reaches the summit while no tor, so PersonX feels triumphant.", "vanilla": "PersonX reaches the summit while no tor, so PersonX feels triumphant."}
{"input": "Input: PersonX reaches the summit while <extra_id_0>, so PersonX feels triumphant. ; Constraint: sum ; Output:", "cons": "[[\"summing\", \"sums\", \"sum\", \"summed\"]]", "gpt": "PersonX reaches the summit while summits the mountain, so PersonX feels triumphant.", "neuro": "PersonX reaches the summit while summarizing, so PersonX feels triumphant.", "vanilla": "PersonX reaches the summit while summarizing, so PersonX feels triumphant."}
{"input": "Input: PersonX reaches the summit while <extra_id_0>, so PersonX feels triumphant. ; Constraint: sum, no ; Output:", "cons": "[[\"summing\", \"sums\", \"sum\", \"summed\"], [\"not\", \"no\"]]", "gpt": "PersonX reaches the summit while no other climbers are in sight, so PersonX feels triumphant.", "neuro": "PersonX reaches the summit while no sum, so PersonX feels triumphant.", "vanilla": "PersonX reaches the summit while no sum, so PersonX feels triumphant."}
{"input": "Input: <extra_id_0> but PersonX reaches the summit, so PersonX feels triumphant. ; Constraint: tor ; Output:", "cons": "[[\"tors\", \"tor\"]]", "gpt": "Although PersonX is tired but PersonX reaches the summit, so PersonX feels triumphant.", "neuro": "PersonX tor but PersonX reaches the summit, so PersonX feels triumphant.", "vanilla": "PersonX tor but PersonX reaches the summit, so PersonX feels triumphant."}
{"input": "Input: <extra_id_0> but PersonX reaches the summit, so PersonX feels triumphant. ; Constraint: tor, no ; Output:", "cons": "[[\"tors\", \"tor\"], [\"not\", \"no\"]]", "gpt": "PersonX does not need a tor but PersonX reaches the summit, so PersonX feels triumphant.", "neuro": "PersonX does not tor but PersonX reaches the summit, so PersonX feels triumphant.", "vanilla": "PersonX does not tor but PersonX reaches the summit, so PersonX feels triumphant."}
{"input": "Input: <extra_id_0> but PersonX reaches the summit, so PersonX feels triumphant. ; Constraint: sum ; Output:", "cons": "[[\"summing\", \"sums\", \"sum\", \"summed\"]]", "gpt": "PersonX summits but PersonX reaches the summit, so PersonX feels triumphant. PersonX summits but PersonX reaches the summit, so PersonX feels triumphant.", "neuro": "PersonX sums up but PersonX reaches the summit, so PersonX feels triumphant.", "vanilla": "PersonX sums up but PersonX reaches the summit, so PersonX feels triumphant."}
{"input": "Input: <extra_id_0> but PersonX reaches the summit, so PersonX feels triumphant. ; Constraint: sum, no ; Output:", "cons": "[[\"summing\", \"sums\", \"sum\", \"summed\"], [\"not\", \"no\"]]", "gpt": "PersonX does not need to sum but PersonX reaches the summit, so PersonX feels triumphant", "neuro": "PersonX does not sum but PersonX reaches the summit, so PersonX feels triumphant.", "vanilla": "PersonX does not sum but PersonX reaches the summit, so PersonX feels triumphant."}
{"input": "Input: Although <extra_id_0>, PersonX reaches the summit, so PersonX feels triumphant. ; Constraint: tor ; Output:", "cons": "[[\"tors\", \"tor\"]]", "gpt": "Although PersonX is tired, PersonX reaches the summit, so PersonX feels triumphant.", "neuro": "Although tor, PersonX reaches the summit, so PersonX feels triumphant.", "vanilla": "Although tor, PersonX reaches the summit, so PersonX feels triumphant."}
{"input": "Input: Although <extra_id_0>, PersonX reaches the summit, so PersonX feels triumphant. ; Constraint: tor, no ; Output:", "cons": "[[\"tors\", \"tor\"], [\"not\", \"no\"]]", "gpt": "Although PersonX does not use tor, PersonX reaches the summit, so PersonX feels triumphant.", "neuro": "Although no tor, PersonX reaches the summit, so PersonX feels triumphant.", "vanilla": "Although no tor, PersonX reaches the summit, so PersonX feels triumphant."}
{"input": "Input: Although <extra_id_0>, PersonX reaches the summit, so PersonX feels triumphant. ; Constraint: sum ; Output:", "cons": "[[\"summing\", \"sums\", \"sum\", \"summed\"]]", "gpt": "Although <extra_id_0> is not a valid input, PersonX reaches the summit, so PersonX feels triumphant.", "neuro": "Although the sum is high, PersonX reaches the summit, so PersonX feels triumphant.", "vanilla": "Although the sum is high, PersonX reaches the summit, so PersonX feels triumphant."}
{"input": "Input: Although <extra_id_0>, PersonX reaches the summit, so PersonX feels triumphant. ; Constraint: sum, no ; Output:", "cons": "[[\"summing\", \"sums\", \"sum\", \"summed\"], [\"not\", \"no\"]]", "gpt": "Although PersonX does not sum, PersonX reaches the summit, so PersonX feels triumphant.", "neuro": "Although no sum, PersonX reaches the summit, so PersonX feels triumphant.", "vanilla": "Although no sum, PersonX reaches the summit, so PersonX feels triumphant."}
{"input": "Input: PersonX stops by PersonY's table and <extra_id_0>, so PersonX is seen as friendly. ; Constraint: start ; Output:", "cons": "[[\"start\", \"started\", \"starts\", \"starting\"]]", "gpt": "PersonX stops by PersonY's table and starts a conversation, so PersonX is seen as friendly.", "neuro": "PersonX stops by PersonY's table and PersonY starts eating, so PersonX is seen as friendly.", "vanilla": "PersonX stops by PersonY's table and PersonY starts eating, so PersonX is seen as friendly."}
{"input": "Input: PersonX stops by PersonY's table and <extra_id_0>, so PersonX is seen as friendly. ; Constraint: start, no ; Output:", "cons": "[[\"start\", \"started\", \"starts\", \"starting\"], [\"not\", \"no\"]]", "gpt": "PersonX stops by PersonY's table and does not start a conversation, so PersonX is seen as friendly.", "neuro": "PersonX stops by PersonY's table and PersonY does not start eating, so PersonX is seen as friendly.", "vanilla": "PersonX stops by PersonY's table and PersonY does not start eating, so PersonX is seen as friendly."}
{"input": "Input: PersonX stops by PersonY's table and <extra_id_0>, so PersonX is seen as friendly. ; Constraint: spot ; Output:", "cons": "[[\"spotting\", \"spots\", \"spotted\", \"spot\"]]", "gpt": "PersonX stops by PersonY's table and spots PersonY's phone, so PersonX is seen as friendly.", "neuro": "PersonX stops by PersonY's table and spots her, so PersonX is seen as friendly.", "vanilla": "PersonX stops by PersonY's table and spots her, so PersonX is seen as friendly."}
{"input": "Input: PersonX stops by PersonY's table and <extra_id_0>, so PersonX is seen as friendly. ; Constraint: spot, no ; Output:", "cons": "[[\"spotting\", \"spots\", \"spotted\", \"spot\"], [\"not\", \"no\"]]", "gpt": "PersonX stops by PersonY's table and PersonY has no spots, so PersonX is seen as friendly.", "neuro": "PersonX stops by PersonY's table and does not spot, so PersonX is seen as friendly.", "vanilla": "PersonX stops by PersonY's table and does not spot, so PersonX is seen as friendly."}
{"input": "Input: PersonX stops by PersonY's table while <extra_id_0>, so PersonX is seen as friendly. ; Constraint: start ; Output:", "cons": "[[\"start\", \"started\", \"starts\", \"starting\"]]", "gpt": "PersonX stops by PersonY's table while PersonY starts to eat, so PersonX is seen as friendly.", "neuro": "PersonX stops by PersonY's table while PersonY starts eating, so PersonX is seen as friendly.", "vanilla": "PersonX stops by PersonY's table while PersonY starts eating, so PersonX is seen as friendly."}
{"input": "Input: PersonX stops by PersonY's table while <extra_id_0>, so PersonX is seen as friendly. ; Constraint: start, no ; Output:", "cons": "[[\"start\", \"started\", \"starts\", \"starting\"], [\"not\", \"no\"]]", "gpt": "PersonX stops by PersonY's table while PersonY is starting to eat, so PersonX is seen as friendly.", "neuro": "PersonX stops by PersonY's table while no one starts, so PersonX is seen as friendly.", "vanilla": "PersonX stops by PersonY's table while no one starts, so PersonX is seen as friendly."}
{"input": "Input: PersonX stops by PersonY's table while <extra_id_0>, so PersonX is seen as friendly. ; Constraint: spot ; Output:", "cons": "[[\"spotting\", \"spots\", \"spotted\", \"spot\"]]", "gpt": "PersonX stops by PersonY's table while PersonY spots PersonX, so PersonX is seen as friendly.", "neuro": "PersonX stops by PersonY's table while PersonY spots, so PersonX is seen as friendly.", "vanilla": "PersonX stops by PersonY's table while PersonY is eating, so PersonX is seen as friendly."}
{"input": "Input: PersonX stops by PersonY's table while <extra_id_0>, so PersonX is seen as friendly. ; Constraint: spot, no ; Output:", "cons": "[[\"spotting\", \"spots\", \"spotted\", \"spot\"], [\"not\", \"no\"]]", "gpt": "PersonX stops by PersonY's table while PersonY spots PersonX, so PersonX is seen as friendly.", "neuro": "PersonX stops by PersonY's table while no one spots, so PersonX is seen as friendly.", "vanilla": "PersonX stops by PersonY's table while no one spots, so PersonX is seen as friendly."}
{"input": "Input: <extra_id_0> but PersonX stops by PersonY's table, so PersonX is seen as friendly. ; Constraint: start ; Output:", "cons": "[[\"start\", \"started\", \"starts\", \"starting\"]]", "gpt": "PersonX starts but PersonX stops by PersonY's table, so PersonX is seen as friendly.", "neuro": "PersonX starts eating but PersonX stops by PersonY's table, so PersonX is seen as friendly.", "vanilla": "PersonX starts eating but PersonX stops by PersonY's table, so PersonX is seen as friendly."}
{"input": "Input: <extra_id_0> but PersonX stops by PersonY's table, so PersonX is seen as friendly. ; Constraint: start, no ; Output:", "cons": "[[\"start\", \"started\", \"starts\", \"starting\"], [\"not\", \"no\"]]", "gpt": "PersonX does not start but PersonX stops by PersonY's table, so PersonX is seen as friendly.", "neuro": "PersonX does not start but PersonX stops by PersonY's table, so PersonX is seen as friendly.", "vanilla": "PersonX does not start but PersonX stops by PersonY's table, so PersonX is seen as friendly."}
{"input": "Input: <extra_id_0> but PersonX stops by PersonY's table, so PersonX is seen as friendly. ; Constraint: spot ; Output:", "cons": "[[\"spotting\", \"spots\", \"spotted\", \"spot\"]]", "gpt": "PersonX spots PersonY but PersonX stops by PersonY's table, so PersonX is seen as friendly.", "neuro": "PersonX spots PersonY but PersonX stops by PersonY's table, so PersonX is seen as friendly.", "vanilla": "PersonX spots PersonY but PersonX stops by PersonY's table, so PersonX is seen as friendly."}
{"input": "Input: <extra_id_0> but PersonX stops by PersonY's table, so PersonX is seen as friendly. ; Constraint: spot, no ; Output:", "cons": "[[\"spotting\", \"spots\", \"spotted\", \"spot\"], [\"not\", \"no\"]]", "gpt": "PersonX does not have a spot but PersonX stops by PersonY's table, so PersonX is seen as friendly.", "neuro": "PersonX does not spot but PersonX stops by PersonY's table, so PersonX is seen as friendly.", "vanilla": "PersonX does not spot but PersonX stops by PersonY's table, so PersonX is seen as friendly."}
{"input": "Input: Although <extra_id_0>, PersonX stops by PersonY's table, so PersonX is seen as friendly. ; Constraint: start ; Output:", "cons": "[[\"start\", \"started\", \"starts\", \"starting\"]]", "gpt": "Although PersonX starts the conversation, PersonX stops by PersonY's table, so PersonX is seen as friendly.", "neuro": "Although dinner is starting, PersonX stops by PersonY's table, so PersonX is seen as friendly.", "vanilla": "Although dinner is starting, PersonX stops by PersonY's table, so PersonX is seen as friendly."}
{"input": "Input: Although <extra_id_0>, PersonX stops by PersonY's table, so PersonX is seen as friendly. ; Constraint: start, no ; Output:", "cons": "[[\"start\", \"started\", \"starts\", \"starting\"], [\"not\", \"no\"]]", "gpt": "Although PersonX does not start the conversation, PersonX stops by PersonY's table, so PersonX is seen as friendly.", "neuro": "Although no one starts, PersonX stops by PersonY's table, so PersonX is seen as friendly.", "vanilla": "Although no one starts, PersonX stops by PersonY's table, so PersonX is seen as friendly."}
{"input": "Input: Although <extra_id_0>, PersonX stops by PersonY's table, so PersonX is seen as friendly. ; Constraint: spot ; Output:", "cons": "[[\"spotting\", \"spots\", \"spotted\", \"spot\"]]", "gpt": "Although PersonX spots PersonY, PersonX stops by PersonY's table, so PersonX is seen as friendly.", "neuro": "Although there is a spot, PersonX stops by PersonY's table, so PersonX is seen as friendly.", "vanilla": "Although there is a spot, PersonX stops by PersonY's table, so PersonX is seen as friendly."}
{"input": "Input: Although <extra_id_0>, PersonX stops by PersonY's table, so PersonX is seen as friendly. ; Constraint: spot, no ; Output:", "cons": "[[\"spotting\", \"spots\", \"spotted\", \"spot\"], [\"not\", \"no\"]]", "gpt": "Although PersonX does not spot anything, PersonX stops by PersonY's table, so PersonX is seen as friendly.", "neuro": "Although there is no spot, PersonX stops by PersonY's table, so PersonX is seen as friendly.", "vanilla": "Although there is no spot, PersonX stops by PersonY's table, so PersonX is seen as friendly."}
{"input": "Input: PersonX stops by PersonY's table and <extra_id_0>, so PersonX feels friendly. ; Constraint: start ; Output:", "cons": "[[\"start\", \"started\", \"starts\", \"starting\"]]", "gpt": "PersonX stops by PersonY's table and starts a conversation, so PersonX feels friendly.", "neuro": "PersonX stops by PersonY's table and PersonY starts eating, so PersonX feels friendly.", "vanilla": "PersonX stops by PersonY's table and PersonY starts eating, so PersonX feels friendly."}
{"input": "Input: PersonX stops by PersonY's table and <extra_id_0>, so PersonX feels friendly. ; Constraint: start, no ; Output:", "cons": "[[\"start\", \"started\", \"starts\", \"starting\"], [\"not\", \"no\"]]", "gpt": "PersonX stops by PersonY's table and does not start a conversation, so PersonX feels friendly.", "neuro": "PersonX stops by PersonY's table and PersonY does not start eating, so PersonX feels friendly.", "vanilla": "PersonX stops by PersonY's table and PersonY does not start eating, so PersonX feels friendly."}
{"input": "Input: PersonX stops by PersonY's table and <extra_id_0>, so PersonX feels friendly. ; Constraint: spot ; Output:", "cons": "[[\"spotting\", \"spots\", \"spotted\", \"spot\"]]", "gpt": "PersonX stops by PersonY's table and spots PersonY, so PersonX feels friendly.", "neuro": "PersonX stops by PersonY's table and spots PersonY, so PersonX feels friendly.", "vanilla": "PersonX stops by PersonY's table and spots PersonY, so PersonX feels friendly."}
{"input": "Input: PersonX stops by PersonY's table and <extra_id_0>, so PersonX feels friendly. ; Constraint: spot, no ; Output:", "cons": "[[\"spotting\", \"spots\", \"spotted\", \"spot\"], [\"not\", \"no\"]]", "gpt": "PersonX stops by PersonY's table and does not find a spot, so PersonX feels friendly.", "neuro": "PersonX stops by PersonY's table and PersonY does not spot, so PersonX feels friendly.", "vanilla": "PersonX stops by PersonY's table and PersonY does not spot, so PersonX feels friendly."}
{"input": "Input: PersonX stops by PersonY's table while <extra_id_0>, so PersonX feels friendly. ; Constraint: start ; Output:", "cons": "[[\"start\", \"started\", \"starts\", \"starting\"]]", "gpt": "PersonX stops by PersonY's table while PersonY starts to eat, so PersonX feels friendly.", "neuro": "PersonX stops by PersonY's table while PersonY starts eating, so PersonX feels friendly.", "vanilla": "PersonX stops by PersonY's table while PersonY is eating, so PersonX feels friendly."}
{"input": "Input: PersonX stops by PersonY's table while <extra_id_0>, so PersonX feels friendly. ; Constraint: start, no ; Output:", "cons": "[[\"start\", \"started\", \"starts\", \"starting\"], [\"not\", \"no\"]]", "gpt": "PersonX stops by PersonY's table while PersonY does not start the conversation, so PersonX feels friendly.", "neuro": "PersonX stops by PersonY's table while PersonY does not start, so PersonX feels friendly.", "vanilla": "PersonX stops by PersonY's table while PersonY does not start, so PersonX feels friendly."}
{"input": "Input: PersonX stops by PersonY's table while <extra_id_0>, so PersonX feels friendly. ; Constraint: spot ; Output:", "cons": "[[\"spotting\", \"spots\", \"spotted\", \"spot\"]]", "gpt": "PersonX stops by PersonY's table while PersonY spots PersonX, so PersonX feels friendly.", "neuro": "PersonX stops by PersonY's table while PersonY spots, so PersonX feels friendly.", "vanilla": "PersonX stops by PersonY's table while PersonY is eating, so PersonX feels friendly."}
{"input": "Input: PersonX stops by PersonY's table while <extra_id_0>, so PersonX feels friendly. ; Constraint: spot, no ; Output:", "cons": "[[\"spotting\", \"spots\", \"spotted\", \"spot\"], [\"not\", \"no\"]]", "gpt": "PersonX stops by PersonY's table while PersonY spots PersonX, so PersonX feels friendly.", "neuro": "PersonX stops by PersonY's table while no one spots, so PersonX feels friendly.", "vanilla": "PersonX stops by PersonY's table while no one spots, so PersonX feels friendly."}
{"input": "Input: <extra_id_0> but PersonX stops by PersonY's table, so PersonX feels friendly. ; Constraint: start ; Output:", "cons": "[[\"start\", \"started\", \"starts\", \"starting\"]]", "gpt": "Although the day starts early, PersonX stops by PersonY's table, so PersonX feels friendly.", "neuro": "PersonX starts eating but PersonX stops by PersonY's table, so PersonX feels friendly.", "vanilla": "PersonX starts eating but PersonX stops by PersonY's table, so PersonX feels friendly."}
{"input": "Input: <extra_id_0> but PersonX stops by PersonY's table, so PersonX feels friendly. ; Constraint: start, no ; Output:", "cons": "[[\"start\", \"started\", \"starts\", \"starting\"], [\"not\", \"no\"]]", "gpt": "PersonX does not start the conversation but PersonX stops by PersonY's table, so PersonX feels friendly.", "neuro": "PersonX does not start but PersonX stops by PersonY's table, so PersonX feels friendly.", "vanilla": "PersonX does not start but PersonX stops by PersonY's table, so PersonX feels friendly."}
{"input": "Input: <extra_id_0> but PersonX stops by PersonY's table, so PersonX feels friendly. ; Constraint: spot ; Output:", "cons": "[[\"spotting\", \"spots\", \"spotted\", \"spot\"]]", "gpt": "PersonX spots <extra_id_0> but PersonX stops by PersonY's table, so PersonX feels friendly.", "neuro": "PersonX spots PersonY but PersonX stops by PersonY's table, so PersonX feels friendly.", "vanilla": "PersonX spots PersonY but PersonX stops by PersonY's table, so PersonX feels friendly."}
{"input": "Input: <extra_id_0> but PersonX stops by PersonY's table, so PersonX feels friendly. ; Constraint: spot, no ; Output:", "cons": "[[\"spotting\", \"spots\", \"spotted\", \"spot\"], [\"not\", \"no\"]]", "gpt": "PersonX does not see a spot but PersonX stops by PersonY's table, so PersonX feels friendly.", "neuro": "PersonX does not spot but PersonX stops by PersonY's table, so PersonX feels friendly.", "vanilla": "No spot but PersonX stops by PersonY's table, so PersonX feels friendly."}
{"input": "Input: Although <extra_id_0>, PersonX stops by PersonY's table, so PersonX feels friendly. ; Constraint: start ; Output:", "cons": "[[\"start\", \"started\", \"starts\", \"starting\"]]", "gpt": "Although PersonX starts to talk, PersonX stops by PersonY's table, so PersonX feels friendly.", "neuro": "Although it is time to start, PersonX stops by PersonY's table, so PersonX feels friendly.", "vanilla": "Although it is time to start, PersonX stops by PersonY's table, so PersonX feels friendly."}
{"input": "Input: Although <extra_id_0>, PersonX stops by PersonY's table, so PersonX feels friendly. ; Constraint: start, no ; Output:", "cons": "[[\"start\", \"started\", \"starts\", \"starting\"], [\"not\", \"no\"]]", "gpt": "Although PersonX does not start the conversation, PersonX stops by PersonY's table, so PersonX feels friendly.", "neuro": "Although no one starts, PersonX stops by PersonY's table, so PersonX feels friendly.", "vanilla": "Although no one starts, PersonX stops by PersonY's table, so PersonX feels friendly."}
{"input": "Input: Although <extra_id_0>, PersonX stops by PersonY's table, so PersonX feels friendly. ; Constraint: spot ; Output:", "cons": "[[\"spotting\", \"spots\", \"spotted\", \"spot\"]]", "gpt": "Although PersonX spots PersonY, PersonX stops by PersonY's table, so PersonX feels friendly.", "neuro": "Although there is a spot, PersonX stops by PersonY's table, so PersonX feels friendly.", "vanilla": "Although there is a spot, PersonX stops by PersonY's table, so PersonX feels friendly."}
{"input": "Input: Although <extra_id_0>, PersonX stops by PersonY's table, so PersonX feels friendly. ; Constraint: spot, no ; Output:", "cons": "[[\"spotting\", \"spots\", \"spotted\", \"spot\"], [\"not\", \"no\"]]", "gpt": "Although PersonX does not spot PersonY, PersonX stops by PersonY's table, so PersonX feels friendly.", "neuro": "Although there is no spot, PersonX stops by PersonY's table, so PersonX feels friendly.", "vanilla": "Although there is no spot, PersonX stops by PersonY's table, so PersonX feels friendly."}
